[["1874", "Fix ByteArrayDataInput Javadoc", "Grzegorz Ro\u017cniecki", "Xaerxess", "11/04/14, 09:34:23 PM", "So Guava moved to Github! This is my first (and very small) fix: I spotted improperly closed tag in [ByteArrayDataInput's Javadoc](http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/com/google/common/io/ByteArrayDataInput.html). Should be OK now.", "NaN"], ["1876", "Replace Google Code URLs with corresponding GitHub URLs", "Jochen Schalanda", "joschi", "11/05/14, 08:26:19 PM", "The `guava-parent` Maven POM still contains URLs pointing to Google Code for issues and SCM. This changesets updates the respective URLs to their counterparts on GitHub.", "NaN"], ["1877", "Add support for Travis CI", "Jochen Schalanda", "joschi", "11/05/14, 08:37:13 PM", "This changeset adds support for [Travis CI](https://travis-ci.org/) as publicly visible means of continuous integration (additionally to the probably internally running CI system at Google).\n\nTravis CI is configured to build Guava with Oracle JDK 7, OpenJDK 7, and OpenJDK 6. Oracle JDK 8 hasn't been added to the list because of the currently unresolved issues with building Guava with Java 8.\n\nIn order for this changeset to work, someone with the appropriate permissions on the Guava repository will have to activate the build on Travis CI, see [Activate GitHub Webhook](http://docs.travis-ci.com/user/getting-started/#Step-two%3A-Activate-GitHub-Webhook).", "NaN"], ["1892", "remove unnecessary null check", "Mohand", "MohandAndel", "11/19/14, 05:06:02 PM", "as TODO comments said to remove null boilerplate in CaseFormat.java . then I re-run CaseFormatTest test to ensure it passed .  ", "NaN"], ["1943", "Fix typo in InetAddresses' Javadoc", "Paolo Fulgoni", "paolofulgoni", "01/15/15, 10:47:25 PM", "NaN", "NaN"], ["1948", "Add toString to DeadEvent", "Paolo Fulgoni", "paolofulgoni", "01/15/15, 10:47:37 PM", "Given that the main purpose of DeadEvent is logging/debugging, I think that this simple string representation could be useful.", "NaN"], ["1949", "NullPointerTester: allow to override the exception type policy", "Philipp Cla\u00dfen", "philipp-classen", "01/29/17, 06:06:27 PM", "NullPointerTester already knows the concept of a ExceptionTypePolicy.\nHowever, the field \"policy\" is always set to a default value.\n\nThis patch adds an option to overwrite the policy to\nallow IllegalArgumentExceptions. It also adds some unit tests.", "NaN"], ["1950", "Few lines addition in README.md", "vk", "vijayk2019", "01/22/15, 08:58:35 PM", "Hello,\nIf someone is new to guava, it'd be helpful to have more information in README.md. I tried to add some more information in README.md. Source I took information from: https://code.google.com/p/guava-libraries/", "NaN"], ["1951", "Increase test heap to 3G.", "Colin Decker", "cgdecker", "01/22/15, 07:59:40 PM", "This pull request is just for testing whether increasing the max heap for tests to 3 GB works and solves the problem with the BloomFilter test that's OOMing.", "NaN"], ["1969", "Jdk5 backport v17.0 compatibility", null, "paulduffin", "02/11/15, 02:49:23 PM", "Reverts (at least in part) a number of changes made to jdk5-backport-v17.0-post to make it more compatible with code built against jdk5-backport-v14.0.1-post, specifically AOSP code. The reverted changes added back methods that had been present in v14 (deprecated and not) and since been removed. The intent is to allow AOSP code that built against v14.0.1 to also build against the compatibility version of v17.0 without modification (or with minimal atomic modifications). That will make upgrading itself easier and will allow other changes such as removing usages of deprecated methods to be done in stages.", "NaN"], ["1971", "google code conventions", "Raquel Pau", "rpau", "02/12/15, 07:12:49 PM", "Hi,\n\nI have applied the eclipse formatter using the Google configuration for Java projects available at https://code.google.com/p/google-styleguide/source/browse/trunk/eclipse-java-google-style.xml\nIs there another formatter configuration for this project?\n\nThanks!", "NaN"], ["1972", "google code conventions", "Raquel Pau", "rpau", "02/12/15, 07:14:47 PM", "Thi is an updated version with the CLA email that updates the whole codebase with the eclipse formatter that Google provides.", "NaN"], ["1979", "Builder to create ThreadPoolExecutor and ScheduledThreadPoolExecutor", "Yang Lifan", "yanglifan", "01/09/17, 08:04:51 PM", "JDK `Executors` provides several tool methods to create `ThreadPoolExecutor` and `ScheduledThreadPoolExecutor`. But these methods are not flexible. But if build up `ThreadPoolExecutor` and `ScheduledThreadPoolExecutor` from nothing, it will be a little complex. \n\nApache Camel has a `ThreadPoolBuilder` but it is complex since bind with `CamelContext`.\n\nSo I create a simple builder to create `ThreadPoolExecutor` and `ScheduledThreadPoolExecutor`.", "NaN"], ["1984", "Add a weight() method to Cache", null, "cheddar", "01/09/17, 08:04:52 PM", "Cache objects currently do not have a method of introspecting on the current \"weight\" value.  I am replacing an implementation of a cache that is just a synchronized LinkedHashMap.  In my current implementation of the cache, I'm keeping track of the weights of things being stored and exposing that as a metric about my cache.  This is the _only_ feature of my current implementation that is not covered by Guava's Cache.\n\nFrom looking at the code, it seemed relatively easy to just create another method parallel to `size()` to handle this case so I just went ahead and did it.  The guidelines do state that API changes should start as an issue, but I didn't realize that until I had already done this and it is such a simple fix, it doesn't bother me if it gets thrown away (as long as I do get some method of introspecting on the current weight value ;) ).\n\nI do realize that this is a public API change, it is only an addition, but it does mean that if anyone else is implementing the Cache interface from scratch, their code will have to be updated before it can work with this.  I'm not sure what level of API compatibility is maintained with Guava, but as long as people are only using Guava-built cache objects, it should be a forward-compatible change.\n\nAlso, I updated unit tests as I could find ones that seemed relevant, but I will admit that I didn't read and comprehend all tests, so I might've missed a good place to add some more verification of the weight computation.  Let me know if there are other tests to update and I'll be happy to.\n\nIf you think this is going to work, let me know and I'll make sure to get a CLA.", "NaN"], ["1990", "Created a Changelog", "Smoose", "silentmoose", "01/30/17, 10:38:18 PM", "Created a CHANGELOG in the root directory. With proper formatting the app could also read from this file and view the changes within the app. Changelog should be updated with each pull accept. Also, as main developers release updates to the code other contributors will now be able to see the change in the changelog.", "NaN"], ["2002", "Add callbacks to EventBus", "Roman Smetana", "smetarom", "04/19/21, 03:23:05 PM", "I would appreciate a feature, where I can  add additional functionality to EventBus. My main goal is to extend logging and debugging capabilities of EventBus.\n\nMy proposal is to create callbacks, which are overwritten in the child class. As at is now, I have to do logging before I call EventBus.post and it creates code duplication.\n\nThe simple example:\n\nEventBus eventBus = new EventBus() {\n   @Override\n   protected void onEventPosted(Object event) {\n      // do some logging\n   }\n};\n\nI added onRegister, onUnregister, onEventPosted, and onNoSubscriberRegistered callbacks to corresponding methods.", "NaN"], ["2012", "Alternative way to get AssertionError instance in", "Pingsan Song", "Sumu-Ning", "06/11/15, 06:28:17 PM", "Alternative way to get AssertionError instance in com.google.common.util.concurrent.GeneratedMonitorTest, since \npublic AssertionError(String message, Throwable cause) \ndoes not exist in Java 6 yet.", "NaN"], ["2017", "Add missing serialVersionUID field to Converter and VerifyException classes.", "Marek Tuchowski", "mtuchowski", "04/11/16, 08:13:05 AM", "Both Converter and VerifyException implement Serializable interface, so they should declare a static final serialVersionUID field.", "NaN"], ["2020", "I suggest adding generators to com.google.common.collect.Iterators", "Eirik Maus", "eirikma", "01/09/17, 08:04:52 PM", "I suggest adding (possibly infinite) generators to the Iterators class. The idea is to have an Iterator presenting a possibly infinite sequence of values, generated on the fly a generator function so you don't have to keep all of that in memory at once. \n\nTwo use cases are provided as unit tests: \na) some kind of endless computation \nb) iterating over possibly infinite input. ", "NaN"], ["2043", "update travis-ci for new container based infrastructure and maven cachin...", "Cody Lerum", "codylerum", "05/20/15, 08:43:56 PM", "Looks like this shaves 9+ minutes in total off the build and about 3 per sub build", "NaN"], ["2044", "Small Javadoc fix.", "Archie L. Cobbs", "archiecobbs", "05/01/15, 07:44:46 PM", "NaN", "NaN"], ["2045", "Removed unnecessary null check from io.BaseEncoding.encode(bytes)", "Josh Rehman", "javajosh", "05/06/15, 05:09:48 PM", "The check is done on line 166, so the first check is redundant.", "NaN"], ["2046", "Removed unnecessary null check from io.BaseEncoding.encode(bytes)", "Josh Rehman", "javajosh", "05/06/15, 05:34:56 PM", "The check is done on line 166, so the first check is redundant.", "NaN"], ["2052", "Update JavaDoc for Maps Difference.", "Qays H. Poonawala", "qayshp", "04/18/17, 02:00:49 PM", "Make the JavaDoc more clear about what happens in cases of equivalence.", "NaN"], ["2059", "Add basic \"Start using Guava\" instructions to README", "Joni Karppinen", "jonikarppinen", "01/09/17, 08:04:52 PM", "The [code.google.com Guava homepage](https://code.google.com/p/guava-libraries/) tells people to come here at GitHub instead, yet key information for new users was missing from the README.", "NaN"], ["2060", "Merge pull request #1 from google/master", "simiam", "monkeychen", "05/24/15, 10:02:37 AM", "pull from head", "NaN"], ["2062", "Add deprecation for compare(Boolean, Boolean)", "Andrew Gaul", "gaul", "06/01/15, 07:54:27 PM", "This method exists to warn callers of `compare(Boolean, Boolean)` and\n`compare(boolean, boolean)` with a deprecation warning.  Using the\nprivate access modifier would still allow callers to use the generic\n`compare(Comparable<?>, Comparable<?>)` method.", "NaN"], ["2086", "Splitter fails with empty matches at the end of a String", "Jeffrey Falgout", "JeffreyFalgout", "10/31/16, 06:41:58 PM", "If you try to split \"abc82\" with the pattern \"(?=\\d)\" you get [abc, 8].\nThe last number will be left out of the result.\n\nhttp://stackoverflow.com/q/30941743/758280", "NaN"], ["2099", "Added missing @throws tag to ConcurrentHashMultiset.removeExactly", "Alberto Goffi", "albertogoffi", "07/07/15, 08:35:42 PM", "When the method `removeExactly` from the class `ConcurrentHashMultiset` is invoked with a negative number as second parameter, the method correctly throws `IllegalArgumentException`. This behavior is not documented in the javadoc comment of the method, since the `@throws` tag is missing. I added the missing tag.", "NaN"], ["2106", "Add missing @throws tags to methods of the class Verify", "Alberto Goffi", "albertogoffi", "01/28/16, 02:00:09 PM", "Some methods of the class `Verify` miss the proper `@throws` tag. To be consistent with the method `Verify.verify(boolean, String, Object...)`, which already contains the proper `@throws` comment, I added the `@throws` tag where missing.", "NaN"], ["2111", "Use thread-local buffers to avoid memory allocation and improve performance", "bernd hopp", "berndhopp", "07/19/15, 12:06:26 PM", "# Abstract\n\ngoal of this PR is to replace the often seen but unneccessary \n\n```\nbyte[] buf = new byte[BUF_SIZE];\n```\n\nor \n\n```\nByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n```\n\n with thread-local instances of the respective types in all cases where they are used method-internal, this way avoiding unneccessary memory allocation, increasing performance and enhancing the memory profile. \n# Implementation\n\n[ThreadLocalBuffers](https://github.com/berndhopp/guava/blob/master/guava/src/com/google/common/io/ThreadLocalBuffers.java) is the manager of thread-local buffers. It uses [SoftReferences](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/SoftReference.html) to store buffers, this way enabling Garbage Collection to collect the buffers when the system runs low on memory. This class is package-local right now but can eventually be made public for other scenarios where a buffer is needed.\nAll allocations of byte[] or ByteArrayOutputStream where the allocated byte[]/BAOS was not the returned value of the method have been replaced with calls to ThreadLocalBuffers. \n\nByteSource.contentEquals was challenging, because it used not one but two byte-arrays for buffering, so I used two ByteBuffers that wrap around the upper and lower part of the thread-local buffer, thereby mimicking the two buffers.\n# Results\n\nThe microbenchmarks show that avoiding buffer allocation yields a significant performance boost. \n\n| tested method | bytes copied | runtime w/ TL buffers | runtime w/out TL buffers | performance increase in % |\n| --- | --- | --- | --- | --- |\n| ByteStreams.copy | 10 | 105569 | 681130 | 645,2 |\n| ByteStreams.copy | 100 | 107411 | 698152 | 649,98 |\n| ByteStreams.copy | 10000 | 840354 | 1186307 | 141,17 |\n| ByteStreams.readBytes | 10 | 68917 | 633365 | 919,03 |\n| ByteStreams.readBytes | 100 | 69802 | 660336 | 946,01 |\n| ByteStreams.readBytes | 10000 | 360357 | 934588 | 259,35 |\n| ByteStreams.toByteArray | 10 | 122681 | 750095 | 611,42 |\n| ByteStreams.toByteArray | 100 | 131705 | 773561 | 587,34 |\n| ByteStreams.toByteArray | 10000 | 1962961 | 4962929 | 252,83 |\n| ByteSource.contentEquals | 10 | 647249 | 3614650 | 558,46 |\n| ByteSource.contentEquals | 100 | 685559 | 3586983 | 523,22 |\n| ByteSource.contentEquals | 10000 | 696307 | 9460941 | 1358,73 |\n\nyou can find the results here:\n\n[ByteStreamsBenchmark w/ ThreadLocal](https://microbenchmarks.appspot.com/runs/087a68fc-af92-4971-97ae-346be17ee50b)\n[ByteStreamsBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/dfb1c1b7-b9e2-431c-91f9-3be2f19db2a7)\n[ByteSourceBenchmark w ThreadLocal](https://microbenchmarks.appspot.com/runs/f5517421-8f23-4237-9de1-f7d9e4c8f3ce)\n[ByteSourceBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/573ac1ff-a1e9-4870-9b0d-414e77e163e6)", "NaN"], ["2112", "Use thread-local buffers to avoid memory allocation and improve performance", "bernd hopp", "berndhopp", "06/27/18, 04:14:40 PM", "# Abstract\n\ngoal of this PR is to replace\n\n```\nbyte[] buf = new byte[BUF_SIZE];\nByteArrayOutputStream baos = new ByteArrayOutputStream();\n```\n\nwith\n\n```\nBuffers.Lease<byte[]> lease = Buffers.leaseByteArray();\n\ntry{\n   byte[] buffer = lease.getBuffer();\n} finally {\n    lease.returnLease();\n}\n\nBuffers.Lease<ByteArrayOutputStream> lease = Buffers.leaseByteArrayOutputStream();\n\ntry{\n   ByteArrayOutputStream baos = lease.getBuffer();\n} finally {\n    lease.returnLease();\n}\n\n\n```\n\nin all cases where byte-array or ByteArrayOutputStreams are used method-internal, this way avoiding unneccessary memory allocation, increasing performance and enhancing the memory profile. \n# Implementation\n\n[ThreadLocalBuffers](https://github.com/berndhopp/guava/blob/master/guava/src/com/google/common/io/\nBuffers.java) is the manager of thread-local byte-arrays and FastByteArrayOutputStreams. It uses [SoftReferences](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/SoftReference.html) or [WeakReferences](https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html) to store buffers, this way enabling Garbage Collection to collect the buffers when the system runs low on memory. All allocations of byte[] or ByteArrayOutputStream in where the allocated byte[]/BAOS is not the returned value of the method have been replaced with calls to ThreadLocalBuffers. \nByteSource.contentEquals was challenging, because it used not one but two byte-arrays for buffering, so I used two ByteBuffers that wrap around the upper and lower part of the thread-local buffer, thereby mimicking the two buffers.\n# Results\n\nThe microbenchmarks show that avoiding buffer allocation yields a significant performance boost. Tests that did not show significant differences are left out. There have been no tests where performance dropped more than 2.00%. \n\n| tested method | bytes copied | runtime w/ TL buffers | runtime w/out TL buffers | performance increase in % |\n| --- | --- | --- | --- | --- |\n| ByteStreams.copy | 10 | 105569 | 681130 | 545,2 |\n| ByteStreams.copy | 100 | 107411 | 698152 | 549,98 |\n| ByteStreams.copy | 10000 | 840354 | 1186307 | 41,17 |\n| ByteStreams.readBytes | 10 | 68917 | 633365 | 819,03 |\n| ByteStreams.readBytes | 100 | 69802 | 660336 | 846,01 |\n| ByteStreams.readBytes | 10000 | 360357 | 934588 | 159,35 |\n| ByteStreams.toByteArray | 10 | 122681 | 750095 | 511,42 |\n| ByteStreams.toByteArray | 100 | 131705 | 773561 | 487,34 |\n| ByteStreams.toByteArray | 10000 | 1962961 | 4962929 | 152,83 |\n| ByteSource.contentEquals | 10 | 647140 | 3614650 | 458,56 |\n| ByteSource.contentEquals | 100 | 685559 | 647694 | 453,81 |\n| ByteSource.contentEquals | 10000 | 5987317 | 9460941 | 58,02 |\n\nyou can find the results here:\n\n[ByteStreamsBenchmark w/ ThreadLocal](https://microbenchmarks.appspot.com/runs/087a68fc-af92-4971-97ae-346be17ee50b#r:scenario.benchmarkSpec.methodName,scenario.benchmarkSpec.parameters.n)\n[ByteStreamsBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/dfb1c1b7-b9e2-431c-91f9-3be2f19db2a7#r:scenario.benchmarkSpec.methodName,scenario.benchmarkSpec.parameters.n)\n[ByteSourceBenchmark w ThreadLocal](https://microbenchmarks.appspot.com/runs/f5517421-8f23-4237-9de1-f7d9e4c8f3ce#r:scenario.benchmarkSpec.parameters.n)\n[ByteSourceBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/573ac1ff-a1e9-4870-9b0d-414e77e163e6#r:scenario.benchmarkSpec.parameters.n)", "NaN"], ["2122", "Ensure the correct removal notification is published (fixes #2101)", "Ben Manes", "ben-manes", "11/30/15, 10:35:33 PM", "Ensures that the correct removal notification is published by `Segment#clear()`. Previously the operation was using the cause `EXPLICIT` when pending maintenance for expiration or collection would take precedence.\n\nFor additional safety, publishing notifications require passing a strong reference of both the key and value. This ensures that compiler reordering and races with the GC do not result in a reference collection and publishing a null value. This may not have been a problem due to happens-before ordering across methods, but simplifies away having to make these assumptions.\n\nIn addition to adding an expiration test, verified by removing the workaround in Caffeine's fixture. The tests pass with the changes and fail with 19-rc1.", "NaN"], ["2129", "Do something about RegularContiguousSet.hashCode() performance?", null, "rcpoison", "01/09/17, 08:04:52 PM", "Iterating over the whole ContiguousSet seems wrong.\nRegularContiguousSet.equals() does not use Sets.equalsImpl() either but instead compares the DiscreteDomain and first+last.", "NaN"], ["2136", "Improve FluentIterable.of to take variable # of arguments.", "Sheridan C Rawlins", "scr", "09/30/15, 07:16:28 PM", "`FluentIterable.of(1, 2, 3)` would be easier to use/more succinct than `FluentIterable.of(new int[]{1, 2, 3})`\n\nThis change does not break the existing API as E... becomes E[] by the time it is used in the method.", "NaN"], ["2159", "Update details of upcoming release", "David Pursehouse", "dpursehouse", "10/01/15, 08:27:43 PM", "The README refers to 19.0-RC1, but 19.0-rc2 is now available.", "NaN"], ["2162", "Jdk5 backport master", "Ashish", "ashu-22", "10/12/15, 04:45:13 PM", "Creating  a project with the help of Guava.", "NaN"], ["2163", "Added ifNonNull to MoreObjects", "L\u0151rinc Pap", "paplorinc", "09/30/15, 07:06:59 PM", "If input is non-null, applies the function to it.\nIf either the input or the result is null, will return the default value.\n\nThis is an alternative for `Optional`, similarly to `firstNonNull`:\n\n``` Java\nOptional.fromNullable(person.getName()).transform(String::toUpperCase).or(\"\");\n```\n\nor\n\n``` Java\nString name = person.getName();\nif (name != null)\n  name = name.toUpperCase();\nif (name == null)\n  name = \"\";\n```\n\ncan now be written as (Java 8, default value and static import):\n\n``` Java\nifNonNull(person.getName(), String::toUpperCase, \"\");\n```", "NaN"], ["2164", "Added a vararg overload for firstNonNull", "L\u0151rinc Pap", "paplorinc", "01/23/17, 10:45:06 AM", "Avoiding nullability in Java is a recurring problem.\n\nOther languages offer an `Optional`, which makes nullability composable.\nThis however is very verbose in Java and cannot consistently be inserted into an existing, nullable codebase (especially since the `Optional` can be null also).\n\nGuava tries to simplify some of the common cases, e.g. we have a value, but if it's not set, we want a default (but the same can be true for the default).\nUnfortunately this method wasn't called `defaultIfNull`, but `firstNonNull`, therefore people assumed it's a search.\n\nThis commit tries to solve that by _making_ it a search, and letting the users decide which approach they want:\nternary,\n\n``` Java\n(first != null) ? first : ((second != null) ? second : checkNotNull(third));\n```\n\nFind,\n\n``` Java\nIterables.find(asList(first, second, third), Predicates.notNull());\n```\n\nOptional,\n\n``` Java\nOptional.fromNullable(first).or(second).or(third).get();\n```\n\nor the same approach Guava already provided:\n\n``` Java\nfirstNonNull(first, second, third);\n```", "NaN"], ["2166", "Fix typo in comments", "Daisuke Kanehira", "disc99", "11/02/16, 07:28:32 PM", "Fix typo in comments", "NaN"], ["2167", "Remove a redundant statement in TreeRangeMap.remove().", "Kwang Yul Seo", "kseo", "11/04/16, 02:05:19 PM", "NaN", "NaN"], ["2172", "Current version badges", "Andy Ai", "aiyanbo", "11/14/18, 02:44:08 PM", "NaN", "NaN"], ["2174", "ImmutableMap.copyOf(Map): minor performance improvement", "Ross Goldberg", "rgoldberg", "01/30/17, 10:42:03 PM", "Minor performance improvement in `ImmutableMap.copyOf(Map)`:\n\nIf `map instanceof ImmutableSortedMap`, no longer unnecessarily run the following, since it will always be `false`:\n\n```\nelse if (map instanceof EnumMap)\n```", "NaN"], ["2182", "Add static modifier for private methods where possible", "Vladislav Lisetskii", "Vladlis", "10/10/15, 02:32:28 PM", "Results of the new sevntu-checkstyle [check](https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/339).", "NaN"], ["2183", "Release19", "Hugo van Rijswijk", "hugo-vrijswijk", "10/12/15, 04:44:13 PM", "NaN", "NaN"], ["2184", "allow inheriting from SettableFuture and overriding cancel() method", "Zbynek Vyskovsky", "kvr000", "10/13/15, 05:47:03 PM", "I'd like to be able to implement custom ListenableFuture class where I could easily override cancel(boolean) method. The SettableFuture seems to be best fit but unfortunately it's declared final. Removing this restriction makes it much more reusable.", "NaN"], ["2185", "Remove old method from ImmutableList", "Vladislav Lisetskii", "Vladlis", "10/17/15, 01:53:01 PM", "NaN", "NaN"], ["2186", "Merge pull request #1 from google/master", "StoneStoneStone", "Stone-Jay", "10/12/15, 07:50:28 AM", "update from origin", "NaN"], ["2189", "Add Tables.synchronizedTable()", "Sean Patrick Floyd", "mostlymagic", "01/30/16, 12:57:34 PM", "https://github.com/google/guava/issues/2156\nImplementation similar to other synchronized collections.\nCopy unit test template from SynchronizedMapTest.\nMake Synchronized.SynchronizedMap package protected (VisibleForTesting).", "NaN"], ["2190", "Fast size() impl for FileBackedOutputStream.asByteSource", null, "tcataldo", "01/03/18, 03:19:55 PM", "FileBackendOutput holds data in either a ByteArrayOutputStream or a File. Both of them provides quick access to content size. Use that knowledge to provide fast sizeIfKnown & size implementations.", "NaN"], ["2191", "add EMPTH in Strings", "yuanrq", "Qunzer", "10/15/15, 01:49:52 PM", "When we define variable,like that, String foo = \"\";\nwe can use that, String foo = Strings.EMPTH;", "NaN"], ["2192", "add EMPTH in Strings", "yuanrq", "Qunzer", "10/15/15, 03:12:06 PM", "When we define variable,like that, String foo = \"\";\nwe can use that, String foo = Strings.EMPTH;", "NaN"], ["2194", "add isNullOrEmpty method in Collections2", "yuanrq", "Qunzer", "10/16/15, 10:57:48 AM", "The method isNullOrEmpty is null-safe to check a collection.", "NaN"], ["2197", "Fix RegularContiguousSet.intersection to handle singleton results.", "Micha\u0142 Sobkiewicz", "perceptron8", "10/23/15, 05:09:14 PM", "Fixes #2196.", "NaN"], ["2198", "Added SuppressWarnings annotation to a used member which is updated using reflection", "Alik Elzin", "kilaka", "10/21/15, 04:20:20 PM", "Added SuppressWarnings annotation to a used member which is updated using reflection", "NaN"], ["2199", "Added SuppressWarnings annotation to a used member which is updated using reflection", "Alik Elzin", "kilaka", "10/22/15, 05:34:44 AM", "Added SuppressWarnings annotation to a used member which is updated using reflection", "NaN"], ["2204", "Separate java tokens by a single space", "Robert Whitebit", "robertwhitebit", "10/25/15, 06:24:29 PM", "Replacing multiple spaces and tabs, which separates java tokens, by a\nsingle space, excluding horizontal aligned tokens.", "NaN"], ["2208", "Made it possible to provide a custom StatsCounterSupplier in CacheBuilder", "Jesper Blomquist", "jebl01", "10/02/19, 03:08:20 PM", "To simplify the process of collecting cache stats using e.g. _io.dropwizard.metrics_, `CacheBuilder.recordStats()` should have an overloaded version that accepts a StatsCounter Supplier.\n\n> Just read the _guidelines for contributing_ and realized that I should have opened an issue for this instead of going directly to a PR. I do that, but I keep this PR as a reference...", "NaN"], ["2211", "Fix typo in Subscriber's Javadoc", "Michal Kordas", "mkordas", "10/28/15, 10:11:36 PM", "NaN", "NaN"], ["2213", "make CycleDetectingLockFactory.lockStateChanged static", "Vladislav Lisetskii", "Vladlis", "11/04/15, 02:42:36 PM", "NaN", "NaN"], ["2214", "make MultisetNavigationTester.totalSize in guava-testlib static", "Vladislav Lisetskii", "Vladlis", "11/04/15, 02:42:36 PM", "NaN", "NaN"], ["2215", "make methods in CycleDetectingLockFactoryBenchmark static", "Vladislav Lisetskii", "Vladlis", "11/04/15, 02:42:36 PM", "NaN", "NaN"], ["2216", "make some methods in guava-tests static", "Vladislav Lisetskii", "Vladlis", "11/04/15, 02:42:36 PM", "NaN", "NaN"], ["2243", "ImmutableSortedSet.copyOf should fail if input is not Comparable", "Conor O'Neill", "cjosw", "01/30/17, 08:21:41 PM", "ImmutableSortedSet.copyOf(Collection) should fail if the input collection is not comparable.\nThis currently applies for most collections, but fails if the input is a singleton.\nThis is recorded in issue #1835.\n\nI have noted that this is caught within TreeSet by invoking the comparator on the singleton item, so this change makes a similar call to catch the un-comparable items in a singleton ImmutableSortedSet.\n\nI have added tests for a two-element input collection (which was already caught), and a new test for a single-element input; this latter test only passes once the code change has been inserted.", "NaN"], ["2247", "Update documentation to clarify that empty immutable collections may be singletons", "Conor O'Neill", "cjosw", "05/07/20, 01:51:21 PM", "This updates the documentation (no functional changes), to clarify that empty immutable collections may be singletons, as raised in a bug: https://github.com/google/guava/issues/2083", "NaN"], ["2248", "modify testCheckArgument_simpleMessage_failure to clean code", "intonormal", "intonormal", "01/30/17, 10:47:25 PM", "verifySimpleMessage(expected)  change to assertThat(expected).hasMessage(\"A message\"), \n\nso that the  compared target(\"A message\") can be saw straightway", "NaN"], ["2344", "Remove unaccessible and unnecessary legacy XML_ESCAPER.", "Lee Carver", "leeca", "12/28/15, 11:34:09 PM", "During some analysis with DepAn, I notices that XML_ESCAPER is never used internally, nor is it accessible externally.  Seems like a good idea to delete this cruft, especially after 2 years as dead code.", "NaN"], ["2345", "Add Splitter methods to return CharSequence types.", "Michael Spiegel", "mspiegel", "04/19/21, 03:18:07 PM", "Not sure if this has been discussed previously but it is trivial to add methods that return CharSequence types to the Splitter API and maintain the existing API. We have some use cases for this feature where we do not want to create temporary char[] array copies of the intermediate substrings.\n\nThe Splitter API accepts CharSequence types as input and internally manipulates CharSequence types. This patch maintains the existing methods that return String types and adds additional methods that\nreturn CharSequence types. The performance overhead on the existing methods that return String type is one additional call to Iterators#transform() that calls toString() on the CharSequence results. Note the #toString() call was already present in the existing implementation.", "NaN"], ["2354", "Add new mediatypes according to #2132", "Steven Maasch", "steven-maasch", "01/20/16, 09:25:46 PM", "Add new mediatypes from [#2132](https://github.com/google/guava/issues/2132).\n\nThe mediatype for php (text/php) and cmd (text/cmd) are not included,\nbecause these are not specified by IANA.", "NaN"], ["2377", "Feature/tables.synchronized table 2156", "Sean Patrick Floyd", "mostlymagic", "01/19/17, 07:49:20 PM", "Had deleted previous fork by accident.\nSuggested changes implemented in this one.", "NaN"], ["2383", "In Uninterruptibles, added waitUninterruptibly methods which call Object#wait methods", "Ram Anvesh Reddy", "RamAnvesh", "05/15/16, 05:02:47 AM", "https://github.com/google/guava/issues/1409", "NaN"], ["2385", "Refactored code in Uninterruptibles.", "Ram Anvesh Reddy", "RamAnvesh", "02/07/16, 03:34:34 PM", "All the major logic is now moved to a single private method.\nNow there is no code duplication, and this should be help in adding new methods to this class by writing very little code without much risk of introducing bugs", "NaN"], ["2395", "Reuse the mac instance just constructed for bit-length calculation", "Thomas Harning Jr", "harningt", "02/18/16, 03:37:18 PM", "No use in constructing a fresh copy of the Mac just to get the bit-length.", "NaN"], ["2398", "UncheckedIOException introduced in Throwables.propagate()", "Grzegorz Piwowarek", "pivovarit", "02/21/16, 11:54:43 AM", "This closes #2397 ", "NaN"], ["2402", "Merge pull request #1 from google/master", "Ram Anvesh Reddy", "RamAnvesh", "02/28/16, 07:15:15 AM", "Updating from google:master", "NaN"], ["2420", "Allowing Range.intersect to return empty sets when ranges are not connected", "Alfredo D\u00edaz", "alfredodiaz", "01/31/17, 05:41:58 PM", "When I am working with ranges that sometimes are connected and sometimes not, It is a litle cumbersome to have to check if the ranges are connected before any calling to the intersection method.\n\nI added a new intersection method with a new optional flag parameter \"_allowEmptyRanges_\". When this flag is true, the method will return an empty set when ranges are not connected (instead of throwing an IllegalArgumentException).\n\nThe change is backward-compatible but I have included specitifc unit tests for this little change.\n\nI would be glad to hear any comments from you.", "NaN"], ["2422", "digitsOfNFactorial, getNumbersOfDigit  Methods are added", "Ozan Onur TEK", "ozanonurtek", "10/29/19, 01:22:34 PM", "#### public static int digitsOfNFactorial(int n)\n\n//This method calculates digits number of number n's factorial without calculating 'n!'\n//For example:for n=5--> 5!=120 --> returns 3\n#### public static int getNumbersOfDigit(int n)\n\n//This method calculates digits number of n\n//For example:for n=4129--> returns 4", "NaN"], ["2424", "concatBytesToArray", "TeknoCepni", "TeknoCepni", "03/16/16, 04:36:41 PM", "Created a function that returns byte array. Take paremeters of byte values, concat all of them and returns a single array.\nExample:\nbyte array = new byte[2];\narray = concatBytesToArray(0x06,0x01);", "NaN"], ["2426", "public static boolean isPrime(int p) ", "Ozan Onur TEK", "ozanonurtek", "11/01/16, 06:42:51 PM", " //Check given number is prime number or not. If number is prime return true, else return false.", "NaN"], ["2428", "Remove `@Beta` from Verify class", "Andreas Sch\u00f6neck", "xasx", "07/05/16, 08:31:35 AM", "Fixes #2409 ", "NaN"], ["2431", "updated readme", "Steve", "smurphy333", "03/22/16, 04:00:00 PM", "Capitalization change in documentation line 62, report changed to Report \n\nVery very trivial change to documentation of the read-me. Just cutting my teeth on Git..", "NaN"], ["2432", "Object can not be serializabled", "He Yunxia", "heyunxia", "01/09/17, 08:14:51 PM", "fix bug:\nList<String> resultList = Lists.transform(list, new Function<Bean, String>() {\n                        @Override\n                        public String apply(Bean input) {\n                            return input.getId();\n                        }\n                    });\n\nafter using this , the resultList can't be serializable", "NaN"], ["2437", "Speculative fix for issue 2365", "Marco di Biase", "mardibiase", "04/01/16, 05:02:58 PM", "Fix for #2365 ", "NaN"], ["2439", "Merge pull request #1 from google/master", "CoCo", "292388900", "03/31/16, 03:48:49 PM", "update", "NaN"], ["2441", "Handle escape characters properly while scraping ClassPaths.", "Colin Chartier", "ColinChartier", "01/30/17, 08:01:39 PM", "The URI constructor for file is much more robust when it comes to handling encodings.\nIt saves a lot of headache of worrying about implementation specific edge cases.\n(Fixes #2152)", "NaN"], ["2447", "Change 1 committed", null, "saeedj", "01/09/17, 08:04:52 PM", "NaN", "NaN"], ["2456", "Min and Max methods for BigIntegerMath class", "Pingsan Song", "Sumu-Ning", "04/29/16, 07:14:31 PM", "NaN", "NaN"], ["2457", "Emulate Throwables in GWT", "Andrei Korzhevskii", "korzha", "04/15/16, 06:20:15 PM", "NaN", "NaN"], ["2460", "Arquitetura de Software - TP Refactoring", "Daniel Cruz", "DVSCross", "04/18/16, 12:09:00 AM", "Planilha de Altera\u00e7\u00f5es\nhttps://docs.google.com/spreadsheets/d/16i-99n-DpzYtVD0LsYbsyxWYMeVs-OUo7PCMbVXXSjs/edit?usp=sharing", "NaN"], ["2480", "Extensions for Preconditions API", "Jakub Ma\u0142ek", "jakubmalek", "01/09/17, 08:04:52 PM", "1. Addition of callback support for Preconditions API :\n- checkArgument(boolean expression, Supplier<Object> errorMessge)\n- checkState(boolean expression, Supplier<Object> errorMessge)\n- checkNotNull(T reference, Supplier<Object> errorMessge)\n- check(boolean expression, Supplier<TException> exception)\n1. Throwable.catchException utility along with ThrowableAction interface and ThrowableActions utility methods.", "NaN"], ["2481", "Make Cache class keys type safe", null, "juhovh", "05/16/16, 01:44:03 PM", "Maybe this should be an issue instead of pull request, if you find this to be against the guidelines for contributing, please feel free to close this request immediately. I wanted to send a pull request instead to demonstrate how invasive the change would be. (not very)\n\nBasically I was using `LoadingCache<String, Value>` in my application and used it to cache data based on a string key, and I also needed to invalidate the cache, so invalidate(key) was called whenever necessary. Later on I needed to change the type of the `LoadingCache` to `LoadingCache<Wrapper, Value>` in order to pass on some extra parameters for the `CacheLoader`. Everything compiled and seemed to work fine, but after a while some cache invalidation issues started to come up.\n\nAfter debugging I figured out that the signature of `invalidate(key)` is actually `invalidate(Object key)`, instead of using the actual key type. The lack of cache invalidation in turn caused inconsistency in our actual data and at least a day of extra work trying to fix everything manually. So I thought if having the key type included in the signature could've saved me hours of work, maybe I'm not the only one.\n\nIn theory it would be possible that someone is using an object for invalidation that is not a subclass of key, but would still equal to it. In practice I find this rather unlikely, but I would like to hear some comments about how to proceed with this suggested change.\n\nAlso, I have not signed the Google CLA yet, but I can do it if necessary.", "NaN"], ["2490", "Added function Multimaps.indexSet", null, "vharuty", "05/29/16, 06:50:43 PM", "Based on issue https://github.com/google/guava/issues/2468\nAdded a function Multimaps.indexSet", "NaN"], ["2491", "Added function Multimaps.index(Set<V>, Function<V, K>)", null, "vharuty", "05/29/16, 08:01:30 PM", "Added function Multimaps.index(Set<V>, Function<V, K>) based on\nhttps://github.com/google/guava/issues/2468", "NaN"], ["2499", "Maps.unmodifiableNavigableMap covariant in V (issue 1870)", null, "wodomierz", "06/16/16, 04:43:26 PM", "issue https://github.com/google/guava/issues/1870", "NaN"], ["2500", "Fix usage example of ImmutableSortedMultiset.Builder", "Dubrovsky Danil", "abvadabra", "06/13/16, 03:56:50 PM", "Currently, example code in the description of ImmutableSortedMultiset.Builder class contains call for constructor which doesn't exist. This PR replaces constructor with `ImmutableSortedMultiset.naturalOrder()` call", "NaN"], ["2506", "Merge pull request #1 from google/master", null, "cmanlh", "06/17/16, 09:48:52 AM", "merge", "NaN"], ["2511", "#2509: Fix for 'DoubleMath incorrectly rounds 0.99999999999999994 to 2 with rounding mode UP or CEILING", "Marco Terzer", "terzerm", "06/30/16, 07:49:38 PM", "See Issue #2509 ", "NaN"], ["2517", "Issue google/guava#332: Ability to specify handling for unknown values", "Danny Trunk", "dtrunk90", "02/01/17, 04:05:13 AM", "NaN", "NaN"], ["2518", "Fix HttpHeaders constants to be lowercase.", "Jesse Wilson", "swankjesse", "07/20/16, 05:47:15 PM", "HTTP/2 requires lowercase, and it's our collective future. Any code that cares\nabout the casing of headers is broken, so any code that breaks from this change\nis destined to break when it's used with HTTP/2.\n\nString.toLowerCase() and Ascii.toLowerCase() both have optimizations that make\ncode run faster if the input is already lowercase. I estimate that 0.0000001%\nof Google's extensive compute resources are currently wasted converting headers\nto lowercase when they could be lowercase already.", "NaN"], ["2519", "Applied skeletal implementation to interface migration automated refactoring", "Raffi Khatchadourian", "khatchad", "07/06/16, 03:58:38 PM", "This is a semantics-preserving refactoring that migrates existing method implementations in classes to the corresponding implemented interface methods as `default` methods. The tool **does not** add new code; it only rearranges _existing_ code.\n\nWe have upgraded the compilation process to use Java 8 so that default methods can be used. However, we realize that this may not be acceptable. Still, any feedback you can supply would be helpful.\n- We are evaluating a research prototype automated refactoring Eclipse plug-in called [Migrate Skeletal Implementation to Interface](https://github.com/khatchad/Migrate-Skeletal-Implementation-to-Interface-Refactoring). We have applied the tool to your project in the hopes of receiving feedback.\n- The approach is very conservative. That may mean that not all changes that can be made were made. Please feel free to continue the refactoring manually if you wish.\n- We only migrated methods declared in abstract classes with the hopes of such methods being suitable default methods in corresponding interfaces.\n- The source code should be semantically equivalent to the original.\n\nThank you for your help in this evaluation! Any feedback you can provide would be very helpful. In particular, we are interested if each of the proposed changes are helpful or not.", "NaN"], ["2523", " No need to disable doclint completely. Disabling high-level HTML iss\u2026", "Andrey Turbanov", "turbanoff", "10/05/16, 05:30:01 PM", "\u2026ues should be enough", "NaN"], ["2527", "Fixed typo in javadoc", "Govind H Patel", "govindpatel", "07/12/16, 01:07:02 PM", "Fixes #2525 ", "NaN"], ["2528", "Fixed the typo for javadoc", "Govind H Patel", "govindpatel", "07/12/16, 03:23:24 PM", "Fixes #2525 ", "NaN"], ["2531", "Simple isNullOrEmpty to Lists class", "Jonathan Juares Beber", "jonathanbeber", "07/15/16, 09:52:10 PM", "Just adding a method similar to already existing in Strings class.", "NaN"], ["2534", "modify pom", null, "hellosky806", "01/09/17, 08:04:52 PM", "add repository", "NaN"], ["2535", "Add method to create a temp directory at a different location", null, "phoenix384", "01/09/17, 08:04:52 PM", "Add a method to create a temp directory beneath a user defined parent directory instead of the system's temp directory", "NaN"], ["2541", "while-statement did not loop", null, "leksak", "08/09/16, 02:07:15 PM", "A return statement occurred in the first\niteration of the loop making the loop\nstatement redundant, as it is semantically\nequivalent to an if-statement.\n\nReplaced the loop-statement with the\nequivalent if.", "NaN"], ["2543", "Implement the indexOf method of the CartesianList", "Hadrien Kohl", "hadrienk", "08/08/16, 01:38:04 PM", "The implementation of the method indexOf(Object o) in the AbstractList iterates over the iterator. In the case of Cartesian list, the index can be computed instead.", "NaN"], ["2544", "Implement the indexOf method of the CartesianList", "Hadrien Kohl", "hadrienk", "07/10/18, 07:39:29 PM", "The implementation of the method indexOf(Object o) in the AbstractList iterates over the iterator. In the case of Cartesian list, the index can be computed instead.", "NaN"], ["2545", "Emulate Queue/Deque impls in GWT.", "Andrei Korzhevskii", "korzha", "08/24/16, 07:35:53 PM", "GWT 2.8 has ArrayDeque implementation", "NaN"], ["2546", "Provide emulation for classes that use BitSet.", "Andrei Korzhevskii", "korzha", "08/11/16, 07:33:44 PM", "GWT 2.8 added BitSet emulation.", "NaN"], ["2555", "Fix Issue #2554, Helpers#isEmpty", "Eric Lunt", "ghonzo", "09/03/16, 06:23:40 PM", "As detailed in issue #2554 there was a bug in com.google.common.collect.testing.Helpers#isEmpty when passed an Iterable that is not a Collection.\n\nAdded a test that fails before the patch, succeeds after.", "NaN"], ["2556", "Add ability to accept IllegalArgumentExceptions using NullPointerTester", "Marvin", "kartoffelsup", "08/23/16, 09:34:38 PM", "NaN", "NaN"], ["2558", "Adding checkPositive MathPreconditions before using value of x", "Devendra Pratap Singh", "dpsingh016", "01/09/17, 08:04:52 PM", "Adding checkPositive MathPreconditions before using value of x in ceilingPowerOfTwo and floorPowerOfTwo methods.", "NaN"], ["2562", "Fix MultiInputStream.read(byte[]): do not stop after first stream...", "Jean-Baptiste Giraudeau", "jbgi", "09/11/16, 12:32:23 PM", "if there is still bytes to read.", "NaN"], ["2564", "Update CharSource.java", "David Sheldon", "davidsheldon", "09/13/16, 07:13:13 PM", "Typo fix - link -> line.", "NaN"], ["2565", "update source", "Stevie Huang", "LittleFatz", "09/12/16, 02:44:20 PM", "update source", "NaN"], ["2567", "Update Mockito version to 2.1.0-RC.1", "Tim van der Lippe", "TimvdLippe", "09/27/16, 07:22:42 PM", "Last week we released our first release candidate of Mockito 2.\nThis release should be backwards compatible with the codebase\nof Google Guava.\n\nTo read about all changes in Mockito 2, check out\nhttps://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2\n\nI have ran your test suite locally before and after this change and\ndid not discover any regressions nor test failures.\nWhile this version is a release candidate, we are not planning\nto introduce any changes for the final release. There might be\npossible bug fixes included in the final release, but so far\nwe have not received any reports of regressions in our library.\n\nThank you for using Mockito and please let us know what you think!", "NaN"], ["2580", "Remove reference to a deprecated method", "Grzegorz Ro\u017cniecki", "Xaerxess", "09/29/16, 07:11:36 PM", "I found these comments slightly confusing. (I also wonder whether you removed `sameThreadExecutor` internally, since it's scheduled for removal in August 2016, but I guess it means in \"when Guava 20 is out\".)", "NaN"], ["2581", "Apply IntelliJ-suggested language feature migrations.", "Jonathan Bluett-Duncan", "jbduncan", "09/29/16, 06:44:11 PM", "All code which initializes an IOException with a cause exception now uses the appropriate constructor (which was introduced in Java 6), rather than initCause. Since Guava now depends on Java 6, this (as far as I can tell) is a safe change to make.\n\nA change was made from using an Iterator to an enhanced for-loop for (arguably) improved readability and, by my understanding, no performance impact.\n\nAll other changes should hopefully be self-explanatory. :)", "NaN"], ["2582", "Replace unnecessary StringBuilder calls with String concat", "Jonathan Bluett-Duncan", "jbduncan", "09/29/16, 06:59:58 PM", "According to IntelliJ, these usages of StringBuilder can be simplified. By my understanding, this is because they do not contain any loops, and thus, as of Java 6, JVMs are able to optimize these concatenations into more-efficient StringBuilder calls at compile time. Thus this change improves readability without losing performance.", "NaN"], ["2583", "Remove unused imports", "Jonathan Bluett-Duncan", "jbduncan", "09/29/16, 06:59:58 PM", "NaN", "NaN"], ["2584", "Remove redundant String.format call", "Jonathan Bluett-Duncan", "jbduncan", "09/29/16, 06:44:11 PM", "NaN", "NaN"], ["2588", "Update Mockito version to 2.1.0", "Grzegorz Ro\u017cniecki", "Xaerxess", "10/04/16, 07:58:44 PM", "Mockito 2.1.0 is out! It should be a smooth upgrade from RC-1.", "NaN"], ["2590", "usage of American English spelling for \"license\"", "Matthias Sieber", "manonthemat", "10/05/16, 05:30:00 PM", "for consistency", "NaN"], ["2592", "micro sign", "Christopher Yeleighton", "yecril71pl", "01/09/17, 08:04:52 PM", "The micro sign is a different character than Greek small letter mu.  The current rendering is in error.  Moreover, it does not print on an 8-bit console unless the code page is Greek, which is insane.", "NaN"], ["2594", "Test case added to prove functionality", "Bahad\u0131r AKIN", "bhdrkn", "01/31/17, 07:41:43 PM", "Added a new tests case that proves  RateLimiter\nworks even for very small numbers.\n\nIssue: #2231", "NaN"], ["2595", "Update StopwatchTest.java", "Christopher Yeleighton", "yecril71pl", "11/21/16, 04:53:28 PM", "Use micro sign for microsecond unit.", "NaN"], ["2604", "Fix google/guava#2599", "Vijay Kumar Adhikari", "vijaykcm", "10/17/16, 04:38:15 PM", "This change fixes a documentation error regarding the return type/value\nof computeInPlace function.", "NaN"], ["2607", "Update to GWT 2.8.0", "Freddy Boucher", "freddyboucher", "10/24/16, 10:44:43 PM", "http://www.gwtproject.org/release-notes.html#Release_Notes_2_8_0", "NaN"], ["2608", "Update to GWT 2.8.0", "Freddy Boucher", "freddyboucher", "10/25/16, 07:08:51 PM", "http://www.gwtproject.org/release-notes.html#Release_Notes_2_8_0", "NaN"], ["2613", "fixes serialization errors when serializing a RegularImmutableAsList", "Jan Burkhardt", "bjrke", "10/26/16, 04:41:25 PM", "the issue occur when ImmutableList is included in gwt's serialization\npolicy and ImmutableSet not and a list created by ImmutableSet.asList\nneeds to be serialized\n\nfixes #1841", "NaN"], ["2614", "fixes serialization errors when serializing a RegularImmutableAsList", "Jan Burkhardt", "bjrke", "10/31/16, 06:40:50 PM", "the issue occur when ImmutableList is included in gwt's serialization\npolicy and ImmutableSet not and a list created by ImmutableSet.asList\nneeds to be serialized\n\nfixes #1841", "NaN"], ["2615", "Fix #1190", "Jonathan Bluett-Duncan", "jbduncan", "10/31/16, 06:40:50 PM", "Commit text body:\n\n> Before this fix, splitting a single character input string with a\n> Splitter.onPattern instance created with a zero-width regex pattern,\n> would have caused the input string to be dropped from the output,\n> resulting in an empty iterable being returned rather than a single\n> element one.\n> \n> This fix ensures that the input passes through untouched.\n> \n> For example, whereas before in this code snippet, 'words' would have\n> been initialized as an empty iterable...\n> \n> ```\n> String string = \"f\";\n> Iterable<String> words =\n>     Splitter.on(Pattern.compile(\"\\\\b\")).split(string);\n> // words is empty!\n> ```\n> \n> ...it is now initialized as [\"f\"].", "NaN"], ["2618", "Fix some typos in guava/*", "Sebastian", "sebkur", "11/01/16, 05:20:46 PM", "I found some typos in Javadoc comments and fixed them", "NaN"], ["2620", "Link local address", null, "rudenvla", "01/13/20, 09:26:11 PM", "link-local address validation with percent and scope id", "NaN"], ["2621", "fix warning on eclipse4.6 (com.google.common.collect.MutableClassToInstanceMap)", "TangHD", "hand515", "11/02/16, 07:43:31 PM", "Warning on eclipse , \r\n\r\n`\r\nBound mismatch: The generic method cast(Class<T>, B) of type MutableClassToInstanceMap<B> is not applicable for the arguments (capture#8-of ? extends Class<? extends B>, capture#12-of ? extends B). The inferred type capture#10-of ? extends B is not a valid substitute for the bounded parameter <T extends B>\r\n`", "NaN"], ["2624", "Make SloppyTearDown.logger private.", "Dzmitry Lazerka", "dlazerka", "11/04/16, 03:12:53 PM", "Being public, it always gets into way of our class (import is done automatically by auto-importing tools).\r\nIt's not used anywhere else, so can be `private`.\r\nIf it's intended to be used by inheritance, then it can be `protected` as well.\r\nIf it really neede to be public, then it's better be available through a getter method.", "NaN"], ["2625", "Use a newer JDK 8 for travis build", "Liam Miller-Cushon", "cushon", "11/04/16, 02:05:19 PM", "The travis docker image uses JDK 8u31, which is ancient and has type\r\ninference bugs that are fixed at head. This change causes it to use 8u111:\r\n\r\nhttps://github.com/travis-ci/travis-ci/issues/3259#issuecomment-130860338", "NaN"], ["2626", "Added the lastIndexOf method for the Bytes primitives class for both parameters as byte array types.", "Luis", "luisalduucin", "11/04/16, 05:02:11 AM", "Added the lastIndexOf method which receives two byte array as parameters for the Bytes primitive class and its corresponding tests.\r\n\r\nIt is a fix for the issue #2617 .", "NaN"], ["2627", "Added lastIndexOf(byte[] array, byte[] target) method to Bytes primit\u2026", "Luis", "luisalduucin", "02/19/18, 07:41:12 PM", "Added lastIndexOf(byte[] array, byte[] target) method to Bytes primitive class and its corresponding tests.\r\n\r\nIt is a fix for the issue #2617 .", "NaN"], ["2628", "Fix links to javadoc.io for Maven Javadoc Plugin", "Arend v. Reinersdorff", "arend-von-reinersdorff", "11/04/16, 02:05:19 PM", "Fixes #2479\r\nLinks must have a /package-list file", "NaN"], ["2630", "Fix some typos in guava-[gwt,testlib,tests]/*", "Sebastian", "sebkur", "11/08/16, 03:45:56 PM", "I found some more Javadoc typos", "NaN"], ["2635", "Use GWT's provided Arrays.copyOf and Arrays.copyOfRange where possible", "Andrei Korzhevskii", "korzha", "11/14/16, 03:04:26 PM", "NaN", "NaN"], ["2636", "specify executor", "Frey", "teaey", "11/11/16, 12:44:57 PM", "Some times, we need events to be executed by specified executor.", "NaN"], ["2637", "specify executor", "Frey", "teaey", "10/25/19, 06:11:07 PM", "Some times, we need events to be executed by specified executor.", "NaN"], ["2642", "Added (last)indexOf methods to ObjectArrays", null, "liach", "10/02/19, 09:03:50 PM", "NaN", "NaN"], ["2649", "make classpath scans over circular symlinks predictable.", "Jason Trump", "jct-amzn", "02/22/17, 04:59:06 PM", "fixes https://github.com/google/guava/issues/2648 .", "NaN"], ["2652", "Now that the CanIgnoreReturnValue annotation is used throughout the code the dependency is no longer optional", null, "cheister", "11/21/16, 10:24:22 PM", "In version 20.0 the errorprone annotations are used throughout the codebase so the error_prone_annotations dependency is not optional anymore.", "NaN"], ["2655", "Fix for Optional(Present) equals/hashcode, when the reference is array.", "Stefan Dekanski", "StefanDekanski", "11/21/16, 06:30:21 PM", "NaN", "NaN"], ["2668", "Code and test for #2667", "Tianyu Li", "tli2", "12/03/16, 08:15:03 PM", "I came across this issue while browsing and thought I could take a shot at it. The collectors are implemented as wrappers around existing ones and I have written tests following the format of existing collector tests.", "NaN"], ["2669", "Added method Utf8#truncateToBytes", "Denis Barucic", "barucden", "03/29/21, 08:09:50 AM", "In reaction to [issue #2619](https://github.com/google/guava/issues/2619) I have created truncateToBytes method. It truncates given CharSequence so that it fits given number of bytes once UTF-8 encoded.", "NaN"], ["2671", "add ByteStreams.copy(InputStream,WritableByteChannel)", null, "svobovo", "10/21/19, 03:03:20 PM", "From issue #2559. \r\nAdded method ByteStreams.copy(InputStream,WritableByteChannel) and simple test.", "NaN"], ["2673", "Code and test for issue:Add methods for converting iterators to primi\u2026", null, "sambohrer", "01/09/17, 08:04:52 PM", "\u2026tive iterators #2666", "NaN"], ["2677", "Add a MIME type MPEG-DASH (mpd files)", "Joan Karadimov", "joankaradimov", "10/02/19, 04:48:51 PM", "This format is becoming a thing. I couldn't find it in Guava's media types.", "NaN"], ["2680", "Test case for #1563", null, "pavlajak", "12/28/16, 05:45:25 PM", "Added test cases for bug regarding incosistency between Ints.tryParse\r\nand Longs.tryParse to show there is no defect.", "NaN"], ["2682", "Random string generation API #2113", null, "havlip18", "01/09/17, 08:04:52 PM", "Random string generator and unit tests", "NaN"], ["2687", "Add a custom gwt serializer for the Range object", "Dean de Bree", "ddebree", "12/20/16, 04:36:00 PM", "Fixes issue #1597 ", "NaN"], ["2697", "Remove unused imports.", "Jonathan Bluett-Duncan", "jbduncan", "12/29/16, 05:22:52 PM", "NaN", "NaN"], ["2698", "Remove more unused imports.", "Jonathan Bluett-Duncan", "jbduncan", "01/03/17, 06:30:53 PM", "NaN", "NaN"], ["2699", "Fix javadoc errors reported by IntelliJ IDEA.", "Jonathan Bluett-Duncan", "jbduncan", "01/03/17, 06:30:53 PM", "NaN", "NaN"], ["2715", "Fix for Issue 2714: https://github.com/google/guava/issues/2714", "Deleted user", "ghost", "01/15/17, 07:00:37 PM", "ReverseConverter, ConverterComposition, & FunctionBasedConverter classes implement Serializable without transient/serialized member variables", "NaN"], ["2718", "Update COPYING", "Benjamin Holst", "bepahol", "01/19/17, 03:15:33 PM", "updated copyright - filled in template", "NaN"], ["2728", "Allow ignoring Constructors in NullPointerTester", "Marvin", "kartoffelsup", "01/30/17, 09:57:25 PM", "Fixes: gh-2726", "NaN"], ["2731", "make NullPointerTester.isNullable() use @CheckForNull too", "Brian Worth", "bdworth", "03/23/17, 03:26:12 PM", "i.e., returns true if a parameter is annotated with @Nullable\r\n*or* @CheckForNull. Both annotations mean \"this can be null\".\r\n\r\nfixes #2656", "NaN"], ["2734", "Introduce ImmutableMap#mergeMapsCollector", "Brendan Le Ny", "numero-six", "10/05/20, 04:09:54 PM", "Introduce a Collector to ease merging of Maps with java stream API.\r\n\r\nGiven (random Maps implementations used to ensure collector is generic):\r\n```java\r\nHashMap<String, Integer> foo = new LinkedHashMap<>();\r\nfoo.put(\"one\", 1);\r\nfoo.put(\"two\", 2);\r\nNavigableMap<String, Integer> bar = new TreeMap<>();\r\nbar.put(\"three\", 3);\r\nbar.put(\"four\", 4);\r\nStream<Map<String, Integer>> stream = ImmutableSet.of(foo, bar).stream();\r\n```\r\n\r\nThis code:\r\n```java\r\nImmutableMap<String, Integer> collectedTheOldWay = stream\r\n        .map(Map::entrySet)\r\n        .flatMap(Set::stream)\r\n        .collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\r\n```\r\ncan now be done with:\r\n```java\r\nImmutableMap<String, Integer> collected = stream.collect(ImmutableMap.mergeMapsCollector());\r\n```", "NaN"], ["2761", "Making the BloomFilter thread-safe & lock-free", "Val Markovic", "Valloric", "05/04/17, 02:10:07 PM", "Previously, the BloomFilter wasn't thread-safe and required external locking to ensure safety. Now, it's thread-safe and lock-free through the use of atomics and compare-and-swap.\r\n\r\nThis PR introduces **no** API changes beyond an extra `@ThreadSafe` annotation on the BloomFilter class. It should also be entirely backwards (and forwards) compatible with the serialization format because that too isn't being changed. \r\n\r\nPlease extend extra scrutiny to the `LockFreeBitArray.putAll()` method because it's not present in our internal fork of the BloomFilter class and has thus not gone through our integ tests or has seen prod (I wrote it for this PR).\r\n\r\nFixes #2748.", "NaN"], ["2771", "Merge pull request #1 from google/master", "simiam", "monkeychen", "08/27/18, 03:35:44 PM", "\u5408\u5e76\u5b98\u65b9\u7248\u672c", "NaN"], ["2776", "Promote HostAndPort out of Beta.", "Jesse Wilson", "swankjesse", "10/06/18, 01:56:11 AM", "It's all grown up.", "NaN"], ["2789", "Add Throwables.propagateIf", "Felipe Rotilho", "rotilho", "10/03/17, 12:13:53 PM", "In a normal application is common to throw an exception after eval an expression like\r\n\r\n```\r\nif (balance < amount) {\r\n   throw new InsufficientFundsException();\r\n}\r\n```\r\n\r\n```\r\nif (!optional.isPresent()) {\r\n  throw new NotFoundException();\r\n}\r\n```\r\n\r\nThis PR aims to get rid of those boilerplate code with propagateIf\r\n\r\n```\r\nThrowables.propagateIf(balance < amount, () -> new InsufficientFundsException());\r\nThrowables.propagateIf(!optional.isPresent(), () -> new NotFoundException());\r\n```\r\n\r", "NaN"], ["2791", "Update InternetDomainName docs to reflect the most recent public suffix list.", "Dave Roberge", "dave-r12", "02/02/18, 04:46:19 PM", "It turns out `google` is now a public suffix!", "NaN"], ["2798", "Remove broken link in JavaDoc of CharMatcher", "Eric Edens", "EricEdens", "11/05/17, 05:33:54 AM", "The linked Google Spreadsheet is no longer available (at least externally). I think it's fine to remove since the link to unicode.org details which codepoints are defined as whitespace.\r\n\r\nAlso, I double checked, and the list hasn't changed compared to what's used in CharMatchers.", "NaN"], ["2799", "Fix deadlock if compute function throw a RuntimeException", "Mario Ivankovits", "imario42", "10/25/19, 09:31:20 PM", "If the computeIfAbsent methods fails with a runtime exception, successive calls to computeIfAbsent lock due to a call to oldValue.waitForValue which never will receive a value then.\r\n\r\nA test case to reproduce this behavior - the second computeIfAbsent will never return and your app is frozen.\r\nThe pull request restores the previous state of the cache on RuntimeException and the test will finish correctly.\r\n\r\n`public class TestGuava extends TestCase\r\n{\r\n    private Cache<String, Boolean> cache = CacheBuilder.newBuilder()\r\n            .maximumSize(10000)\r\n            .expireAfterAccess(30, TimeUnit.SECONDS)\r\n            .build();\r\n    private Map<String, Boolean> cacheMap = cache.asMap();\r\n\r\n    private final static Boolean TEST_BOOLEAN = new Boolean(true);\r\n    public void testComputeException()\r\n    {\r\n        try\r\n        {\r\n            cacheMap.computeIfAbsent(\"a\", key ->\r\n            {\r\n                throw new IllegalArgumentException();\r\n            });\r\n\r\n            fail();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            // expected\r\n        }\r\n\r\n        Boolean ret = cacheMap.computeIfAbsent(\"a\", key -> {\r\n            return TEST_BOOLEAN;\r\n        });\r\n\r\n        assertEquals(Boolean.TRUE, ret);\r\n        assertSame(TEST_BOOLEAN, ret);\r\n\r\n        ret = cacheMap.computeIfAbsent(\"a\", key -> {\r\n            return new Boolean(true); // should not create a new entry\r\n        });\r\n\r\n        assertEquals(Boolean.TRUE, ret);\r\n        assertSame(TEST_BOOLEAN, ret);\r\n    }\r\n}`", "NaN"], ["2802", "DO NOT SUBMIT - testing travis", "Ron Shapiro", "ronshapiro", "04/27/17, 06:52:31 PM", "NaN", "NaN"], ["2806", "Issue #1259: Fix misleading documentation on behaviour of Ints.tryParse with null input", "Deepak Sharma", "deepaks4077", "10/02/19, 08:54:45 PM", "Referencing #1259.\r\n\r\nThe documentation for Ints.trParse explicitly says that a NullPointerException is not thrown if the input is null. However, this is not true and the function does indeed throw a NPE.\r\n\r\nI have simply removed the misleading lines from the doc.", "NaN"], ["2807", "ImmediateEventBus that uses Dispatcher.IMMEDIATE", null, "DavesMan", "05/03/17, 08:45:27 AM", "New child of EventBus that uses immediate Dispatcher, which isn't used in any impl as of now.", "NaN"], ["2818", "merge back", "cenxui lin", "cenxui", "05/17/17, 02:28:24 AM", "NaN", "NaN"], ["2819", "merge google guava", "cenxui lin", "cenxui", "05/17/17, 02:42:12 AM", "NaN", "NaN"], ["2825", "Added some Unit Tests", "Michael Hausegger", "TheRealHaui", "05/25/17, 08:38:44 PM", "Added some Unit Tests that cover uncovered code until yet.", "NaN"], ["2844", "DO NOT SUBMIT", "Ron Shapiro", "ronshapiro", "06/13/17, 05:37:51 PM", "Test Travis with env matrix", "NaN"], ["2846", "Add an Automatic-Module-Name manifest entry", "Pepper Lebeck-Jobe", "eljobe", "07/06/17, 03:58:14 PM", "This is recommended for any java library which is being published to\r\nrepositories like MavenCentral or JCenter to ensure that when you do\r\neventually convert the library to a Java 9 module, it won't change\r\nnames requiring all of your consumers and the projects which depend\r\nupon your consumers to update their `moudle-info.java` files to\r\npick up the new name.\r\n\r\nWe can debate whether or not `com.google.guava` is the name you want\r\nto adopt for your module. Other possible candidates are:\r\n * `guava`\r\n * `google.guava`\r\n * `com.google.common.guava`\r\n * Something else\r\n\r\n[This article](http://blog.joda.org/2017/05/java-se-9-jpms-automatic-modules.html) covers\r\na lot of the reasons you might want to use `com.google.guava`, but I have also read reasonable arguments for more concise names if you aren't worried about module name conflicts.\r\n\r\nRelated (a little bit) to #2571", "NaN"], ["2848", "Support relaxed children() signature in TreeTraverser", "Piotr Findeisen", "findepi", "08/19/17, 08:14:48 PM", "Previously, the TreeTraverser required that `children()` extended\r\n`Iterable<T>`. This commit adds support for trees where children are\r\nreturned as `Iterable<? extends T>`.\r\n\r\nUse case: support for https://github.com/prestodb/presto/blob/master/presto-parser/src/main/java/com/facebook/presto/sql/tree/Node.java#L43 without need to copy children lists during traversal.", "NaN"], ["2849", "Fix typo in FluentIterable#stream javadoc", "Piotr Findeisen", "findepi", "06/21/17, 03:33:57 PM", "NaN", "NaN"], ["2856", "Add EquivalenceRelation and corresponding tests", "Ivan Osipov", "ivan-osipov", "10/21/19, 03:10:51 PM", "It resolves #2851 ", "NaN"], ["2869", "Refactored RateLimiter#create signature", "Ricardo Pinheiro", "maiph", "07/12/17, 04:04:30 PM", "Referencing: #2797 ", "NaN"], ["2875", "(refactor) some opportunities to use diamond operator", null, "desmorto", "07/26/17, 02:57:54 PM", "NaN", "NaN"], ["2881", "Hotfix/cachebuilder constructor", "Ihor Kryvenko", "igorKryvenko", "07/24/17, 10:27:34 PM", "Change CacheBuilder constructor modifier to private and rewrite corresponding tests.", "NaN"], ["2882", "Hotfix/cachebuilder constructor", "Ihor Kryvenko", "igorKryvenko", "07/24/17, 10:41:40 PM", "Change CacheBuilder constructor modifier to private and rewrite corresponding tests", "NaN"], ["2883", "Cache Builder refactor", "Ihor Kryvenko", "igorKryvenko", "08/01/17, 08:48:55 PM", "Change CacheBuilder constructor modifier to private, and rewrite corresponding tests.", "NaN"], ["2889", "Add generics with Maps. fromProperties().", null, "purplest", "10/02/19, 01:57:24 PM", "Add generics with Maps. fromProperties().\r\n\r\nIt can use like this:\r\n```java\r\nMap<Integer, Integer> maps = fromProperties(prop, (k)->Integer.valueOf(k), (v)->Integer.valueOf(v));\r\n```\r\nIt's very useful when we use it to convert properties to a generics map.\r\n\r\nAnd in other way, we can implement with BiFunction<T, U, R> to expand this method.", "NaN"], ["2893", "Fix typo in AbstractService log message.", null, "hawjo06", "08/05/17, 01:56:41 AM", "NaN", "NaN"], ["2894", "Fix typo in AbstractService log message.", null, "hawjo06", "08/08/17, 06:33:55 PM", "NaN", "NaN"], ["2895", "Fix typo in javadoc link", null, "hawjo06", "08/08/17, 03:10:48 PM", "NaN", "NaN"], ["2900", "Handle exception in LocalCache.asMap().compute(...)", "Milan Mimica", "mmimica", "08/09/17, 07:12:14 PM", "LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception. Demonstrated by the test.\r\nFixed by properly handling the exception and realising the lock.", "NaN"], ["2901", "LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception", "Milan Mimica", "mmimica", "05/23/18, 05:40:04 PM", "LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception. Demonstrated by the test. Fixed by properly handling the exception and realising the lock.", "NaN"], ["2902", "Static initializer references subclass", "ding peng", "Moriadry", "08/16/17, 12:22:23 PM", "Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load superclass and another thread tries to load subclass at the same time.\r\n\r\nMy refactor will not change the method provided to outer space.", "NaN"], ["2903", "Polishing", "Jonathan Bluett-Duncan", "jbduncan", "08/11/17, 06:10:08 PM", "This PR applies a good number of apparently applicable IntelliJ IDEA code inspections.", "NaN"], ["2904", "Fix javadoc link by including package name.", null, "hawjo06", "08/11/17, 04:25:31 PM", "In the javadoc for guava 23.0, the links are currently shown as text, and not generated as hyperlinks.  With this change, the links will be generated as hyperlinks.\r", "NaN"], ["2906", "FileBackedOutputStream constructor should take temp file dir #2205", null, "JoeHale", "10/05/20, 04:09:49 PM", "Simple change - added a few new constructors and passed the tmpDir in.\r\nThis will allow multiple threads to use this class and write to different places while preserving the existing functionality.", "NaN"], ["2907", "Extended toMap", "\u674e\u5fd7\u535a", "asasas234", "01/29/18, 03:16:54 PM", "I have extended a toMap function in the FluentIterable, you can flexibly specify the key and value, you can also specify the key conflict strategy", "NaN"], ["2908", "Fix javadoc link.", null, "hawjo06", "08/14/17, 03:05:05 PM", "The link was generated as plaintext. The change will result in the link\r\nbeing rendered as a hyperlink.", "NaN"], ["2916", "Javadoc update when delegate throws exception", "Kannan Ekanath", "kannanekanath", "08/28/17, 05:47:06 PM", "Clarify javadoc about the delegate being called utmost once. This is not true if the get method on the delegate throws RuntimeException.", "NaN"], ["2917", "Remove a dangling closing bracket from Javadoc", "Sebastian", "sebkur", "08/18/17, 02:57:00 PM", "There's a dangling closing curly bracket in the Javadoc example of\r\nMoreObjects.toStringHelper(). Remove that in the main and the android\r\nsources. See the incorrect rendering [here](\r\nhttp://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/MoreObjects.html#toStringHelper-java.lang.Class-)", "NaN"], ["2919", "fix some typos in java code", "ding peng", "Moriadry", "08/30/17, 06:38:37 AM", "NaN", "NaN"], ["2927", "Fix some typos in java code", "ding peng", "Moriadry", "09/01/17, 02:42:19 PM", "NaN", "NaN"], ["2938", "Update IteratorBenchmark.java", "Finsen Varghese", "fvarg00", "09/12/17, 03:13:48 AM", "Refer to objects by their interfaces(Item 52)", "NaN"], ["2942", "Moe sync", "Ron Shapiro", "ronshapiro", "09/18/17, 09:08:13 PM", "NaN", "NaN"], ["2945", "Fix #2914 by switching -android version suffix to -ga; revert vanilla\u2026", "Yegor Borovikov", "yborovikov", "09/28/17, 07:13:03 PM", "This patch changes `-android` version suffix to `-ga` for Android / Java 7 flavored version of Guava, resolving #2914.\r\n\r\nThe resolution piggy-backs on documented Maven [`ComparableVersion`](http://maven.apache.org/ref/3.5.0/maven-artifact/apidocs/org/apache/maven/artifact/versioning/ComparableVersion.html) feature that equates `ga`-suffixed versions (e.g. `24.0-ga`) with non-suffixed ones (e.g. `24.0`) in the context of comparing / ordering / determining the latest version.\r\n\r\nNote: This also reverts [the patch](https://github.com/google/guava/commit/61d2a6faec8b27d021b9f37f7dfb6655ae060fad) by @cpovirk, restoring the original vanilla (Java 8+) Guava versioning scheme (e.g. from patched `24.0-jre` back to `24.0`).\r\n\r\nNote: [`README.md`](https://github.com/google/guava/blob/master/README.md#latest-release) text should be updated before releasing the next version to reflect the suffix change for the Android version.", "NaN"], ["2946", "Splitter Test Cleanup", "Adam Lesiak", "lesiak", "09/21/17, 03:39:27 PM", "Removed duplicate tests, unified naming", "NaN"], ["2947", "Throwables#lazyStackTrace unsupported on IBM JDK 6", "Sergei Ustimenko", "fdesu", "09/25/17, 05:21:44 PM", "Fix addresses a problem occurred on IBM JDK 6. To ensure \r\nthat we can call underlying method, Throwables#getSizeMethod, \r\nto get  stack size, first a smoke test  with dummy exception. \r\nOnce method executed with success, it is safe to return it for \r\nfurther usage.\r\n\r\nIssue: https://github.com/google/guava/issues/2887", "NaN"], ["2954", "Fix Escaper.java comment typo", null, "magict4", "09/28/17, 11:39:31 PM", "Fix misspelled method name from \"substing\" to \"substring\".", "NaN"], ["2955", "Fix Escaper.java comment typo", null, "magict4", "09/29/17, 12:43:54 PM", "Fix misspelled method name from \"substing\" to \"substring\".", "NaN"], ["2961", "Add JPMS module name", "Stephen Colebourne", "jodastephen", "10/09/17, 03:47:54 PM", "Move to the correct pom.xml.\r\n\r\nFixes #2920\r\nCommit 9feba7c949ef9fd2092c05c29dcbe0ddba7a7cf5 of #2846 placed the `Automatic-Module-Name` declaration in the wrong`pom.xml`. As such, Guava still isn't a valid module, which blocks a whole heap of projects from declaring `module-info.java`.\r\n\r\nFeel free to make a separate change rather than merging this PR to satisfy any IP rules.", "NaN"], ["2973", "Fix minor spelling errors in tests.", "Keenan Thompson", "thekeenant", "10/19/17, 06:19:13 PM", "NaN", "NaN"], ["2977", "Docs - README.md  - adding tweaks (ToC, separators, thumbnail logo)", "Deleted user", "ghost", "01/24/18, 06:51:00 PM", "## Docs - README.md  - adding tweaks (ToC, separators, thumbnail logo)\r\n\r\n**this PR does basically aim at adding the following to the README.md file:**\r\n- *ToC (Table of contents)*\r\n- *separators*\r\n- *google logo*\r\n\r\n---\r\n\r\n**main motivation behind such does basically lie within:**\r\n- *improving overall document accessebility*\r\n- *encouraging further usage of the repo*\r\n- *encouraging further commitment of the repo*\r\n\r\n---\r\n\r\n<img src=\"https://avatars2.githubusercontent.com/u/1342004?s=200&v=4\" width=\"50\"></img> <img src=\"https://avatars1.githubusercontent.com/u/7303598?s=460&v=4\" width=\"50\"></img>", "NaN"], ["2983", "Remove @GwtCompatible annotations from classes in the hash package,", "Colin Alworth", "niloc132", "11/01/17, 06:29:16 PM", "which have no corresponding .gwt.xml file.\r\n\r\nAlternatively, if these are expected to be gwt-compatible, I can add the .gwt.xml and the missing emulation for LongAdder (which references other presently gwt-incompatible classes).", "NaN"], ["2989", "Modifying Quantiles to return ordered HashMap", "Hari Menon", "hshankar", "10/02/19, 05:48:45 PM", "Usually, when someone computes percentiles, they would end up iterating over the resulting map to print the percentiles or store them somewhere. It is useful to return the percentiles in the order in which they were requested.\r\ne.g,\r\nIf one computes `Quantiles.percentiles().indexes(50, 90, 99).compute(times)` and iterates over the result, it should be iterated in the order 50, 90, 99. Currently, we use HashMap, so the order is unpredictable. Making it a LinkedHashMap will ensure results in the expected order with very minimal perf impact.", "NaN"], ["2990", "Fix Types.toString for arrays", "Marid", "MaridProject", "01/29/18, 04:42:04 PM", "The current behaviour of `TypeToken.of(<array type>).toString()` mismatches with the `Types.toString()` javadoc: \r\n\r\n> For array type {@code Foo[]}, {@code \"com.mypackage.Foo[]\"} are returned\r\n\r\nFor example, `TypeToken.of(String[].class)` returns `[Ljava.lang.String;`.\r\n\r\nFortunately, a new java8 method `getTypeName()` has appeared whose behaviour is exactly the same as `Types.toString()` except that it can deal with arrays (including primitive ones).", "NaN"], ["3002", "Add builder for EventBus.", "anton", "aschatten", "10/15/19, 05:44:53 PM", "(Fixes: https://github.com/google/guava/issues/2375)\r\n### Summary of the change\r\nAllows setting identifier, SubscriberExceptionHandler and other\r\nparameters of EventBus independently.\r", "NaN"], ["3004", "Deprecate ConcurrentHashMultiset#createEntrySet()", "Grzegorz Ro\u017cniecki", "Xaerxess", "12/06/17, 03:15:49 PM", "Fixes #3003.", "NaN"], ["3005", "Extend Uninterruptibles with methods allowing awaiting on Condition", "Piotr Ciruk", "cpiotr", "12/09/17, 11:39:24 AM", "Issue: #2870 \r\n\r\nCondition class exposes a number of methods to await on it.\r\nMost of them throw exception when executing thread gets interrupted.\r\nIn scope of this change utility methods are introduced to serve as uninterruptible proxies.\r\n\r", "NaN"], ["3007", "Remove unused org.checkerframework:checker-compat-qual dependencies", null, "stevegutz", "12/07/17, 03:39:54 AM", "`org.checkerframework:checker-compat-qual` appears to be unused under both the jre and android flavors of `guava` and `guava-tests`. \r\n\r\nThe `org.checkerframework:checker-compat-qual:2.0.0` jar contains `.class` files with either `org.checkerframework` or `afu.plume` in their packages. I see the following after making this change, so I believe it is safe, though I could of course be missing something:\r\n```\r\n$ grep -r -l \"afu.plume\" .\r\n$ grep -r -l \"org.checkerframework\" .\r\n./android/guava-testlib/pom.xml\r\n./android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java\r\n./android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java\r\n./android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java\r\n./android/guava-testlib/src/com/google/common/testing/NullPointerTester.java\r\n./android/guava-testlib/src/com/google/common/testing/TestLogHandler.java\r\n./android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java\r\n./android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java\r\n./android/pom.xml\r\n./guava-testlib/pom.xml\r\n./guava-testlib/src/com/google/common/testing/ArbitraryInstances.java\r\n./guava-testlib/src/com/google/common/testing/ClassSanityTester.java\r\n./guava-testlib/src/com/google/common/testing/CollectorTester.java\r\n./guava-testlib/src/com/google/common/testing/FreshValueGenerator.java\r\n./guava-testlib/src/com/google/common/testing/NullPointerTester.java\r\n./guava-testlib/src/com/google/common/testing/TestLogHandler.java\r\n./guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java\r\n./guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java\r\n./pom.xml\r\n```\r\n\r\n---\r\nThis addresses https://github.com/google/guava/issues/3006.", "NaN"], ["3010", "Extend Uninterruptibles with methods allowing awaiting on Condition", "Piotr Ciruk", "cpiotr", "12/14/17, 02:22:41 PM", "Issue: #2870\r\n\r\nCondition class exposes a number of methods to await on it.\r\nMost of them throw exception when executing thread gets interrupted.\r\nIn scope of this change utility methods are introduced to serve as uninterruptible proxies.", "NaN"], ["3018", "POC: replace explicit null checks by automatic", "Denis", "denis-zhdanov", "01/24/18, 05:37:05 PM", "This *PR* illustrates an approach where explicit *null*-checks are replaced by automatic checks.  \r\n\r\nConsider a sample class - [Iterators](https://github.com/denis-zhdanov/guava/commit/71eee2dea89f6827f340e231bc715311120df6ca#diff-d2ea06a03a4988cf54d6d3d923deae88):  \r\n\r\n*Original source code*  \r\n\r\n```java\r\npublic static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {\r\n  checkNotNull(a);\r\n  checkNotNull(b);\r\n  return concat(consumingForArray(a, b));\r\n}\r\n```  \r\n\r\n*Suggested source code*  \r\n\r\n```java\r\npublic static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {\r\n  return concat(consumingForArray(a, b));\r\n}\r\n```  \r\n\r\nResulting bytecode looks like if it's compiled from the source below:  \r\n\r\n```java\r\npublic static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {\r\n  if (a == null) {\r\n    throw new NullPointerException(\"a was null\");\r\n  }\r\n  if (b == null) {\r\n    throw new NullPointerException(\"b was null\");\r\n  }\r\n  return concat(consumingForArray(new Iterator[] { a, b }));\r\n}\r\n```  \r\n\r\n*Raw bytecode*  \r\n\r\n```\r\njavap -c ./guava/target/classes/com/google/common/collect/Iterators.class\r\n...\r\n  public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>);\r\n    Code:\r\n       0: aload_0\r\n       1: ifnonnull     14\r\n       4: new           #5                  // class java/lang/NullPointerException\r\n       7: dup\r\n       8: ldc           #51                 // String a was null\r\n      10: invokespecial #7                  // Method java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\r\n      13: athrow\r\n      14: aload_1\r\n      15: ifnonnull     28\r\n      18: new           #5                  // class java/lang/NullPointerException\r\n      21: dup\r\n      22: ldc           #52                 // String b was null\r\n      24: invokespecial #7                  // Method java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\r\n      27: athrow\r\n      28: iconst_2\r\n      29: anewarray     #53                 // class java/util/Iterator\r\n      32: dup\r\n      33: iconst_0\r\n      34: aload_0\r\n      35: aastore\r\n      36: dup\r\n      37: iconst_1\r\n      38: aload_1\r\n      39: aastore\r\n      40: invokestatic  #54                 // Method consumingForArray:([Ljava/lang/Object;)Ljava/util/Iterator;\r\n      43: invokestatic  #55                 // Method concat:(Ljava/util/Iterator;)Ljava/util/Iterator;\r\n      46: areturn\r\n```  \r\n\r\n**Implementation**  \r\n\r\nThe checks are generated by the [Traute](http://traute.oss.harmonysoft.tech/) *javac* plugin - it finds [existing package-level *ParametersAreNonnullByDefault*](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/package-info.java#L215) annotation and adds checks for all method parameters not marked by *Nullable* annotation (*Checker*'s *NullableDecl* is [supported by default](http://traute.oss.harmonysoft.tech/core/javac/#73-nullable-annotations)).  \r\n\r\n**Restrictions**  \r\n\r\n*Traute* is a *javac* plugin and corresponding *API* is available since *java8*. Do you guys use something like `javac8 -source 1.7 -target 1.7` for generating *javac7* bytecode?  \r\n\r\n**Proposal**  \r\n\r\nI'd be glad to create a *PR*/modify current *PR* which replaces all explicit *null*-checks if the team likes the approach.", "NaN"], ["3027", "Restrict length of varargs array in immutable collection factory methods", "Vlastimil Dort", "panacekcz", "01/24/18, 08:09:15 PM", "This PR documents the restriction that immutable collection factory methods with varargs pose on the length of the last argument, and adds a check for this precondition to prevent `NegativeArraySizeException` from being thrown.\r\n\r\nFixes #3026.\r", "NaN"], ["3032", "Code Cleanup.", "Shahab Kondri", "shahabkondri", "01/16/18, 08:23:38 PM", "NaN", "NaN"], ["3045", "Change .orderedBy() builders generic type to <? super>", "Teubel Gy\u00f6rgy", "tgyurci", "02/23/18, 04:13:05 PM", "Using `.orderedBy(...)` over `new Builder<>(...)` is much more compact.\r\n\r\nIt compiles on both Java 7, 8 and 9.  It is source-compatible change, but I am not sure, whether it is fully binary-compatible or not.", "NaN"], ["3047", "Add CodeTriage badge to google/guava", "README Bot", "codetriage-readme-bot", "02/26/18, 09:24:31 PM", "Adds a badge showing the number of people helping this repo on CodeTriage.\n\n[![Open Source Helpers](https://www.codetriage.com/google/guava/badges/users.svg)](https://www.codetriage.com/google/guava)\n\n\n## What is CodeTriage?\n\nCodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed\n\n[Read more about the CodeTriage project](https://www.codetriage.com/what).\n\n## Why am I getting this PR?\n\nYour project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly 9 months ago, [cupello](https://github.com/cupello) added this project to CodeTriage in order to start contributing. Since then, 156 people have subscribed to help this repo.\n\n## What does adding a badge accomplish?\n\nAdding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.\n\nYou can see an example of a CodeTriage badge on these popular OSS READMEs:\n\n- [![](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails\n- [![](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal\n\n## Have a question or comment?\n\nWhile I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.\n\nIf you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.\n\nThanks for making your project Open Source! Any feedback is greatly appreciated.", "NaN"], ["3050", "Moe Sync", "Ron Shapiro", "ronshapiro", "02/28/18, 10:10:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct a typo in ImmutableBiMapTest.\n\n2c5dd53d4a4830bf6cb3a50f26d3d73429932833", "NaN"], ["3056", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/06/18, 04:59:10 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Traverser.java: add support for multiple start nodes.\n\nUpdate documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode().\n\nRELNOTES=`common.graph.Traverser`: add support for traversing from multiple start nodes.\n\n9dce1c3302ec118f73921c9319e7822114325a2d\n\n-------\n\n<p> Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).\n\nThis used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter, turning it into Foo<C>, and then List<Foo<C>> isn't a subtype of List<Foo<?>>.\n\nWildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context, wildcard should remain as is.\n\nI found this when trying to add isSubtypeOf() precondition check in getSubtype(), in response to https://github.com/google/guava/issues/3048.\n\nRELNOTES=TypeToken.isSubtypeOf() bug fix.\n\n9918890013cd07ff00074a28afefd3af2c00c515\n\n-------\n\n<p> Add isSubtypeOf() \"pre\"-condition check before getSubtype() returns.\n\nWe have to call it before return because before type variable substitution, isSubtypeOf() can't apply.\n\nSee https://github.com/google/guava/issues/3048\n\nRELNOTES=Validate `TypeToken.getSubtype()`.\n\nf6d1461e2579f05f1106892c817681a61fc401ae", "NaN"], ["3057", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/07/18, 05:59:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Change all instances of encoded.subSequence() to use a simple start index offset, which reduces the Java memory footprint for TrieParser by at at least 130 MBs. This is because the original call to subSequence() would generate a new String on the heap for each call, where as just using an offset avoids the need to generate a new String all together.\n\nThis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.OutOfMemoryError: GC overhead limit exceeded, mostly in the TrieParser class.\n\n100-test runs at original code:\nMemory usage\n- maximum: 503MiB (527,769,600 bytes)\n- average: 388MiB (407,225,077 bytes)\n\n100-test runs with my changes:\nMemory usage\n- maximum: 316MiB (325,271,552 bytes)\n- average: 221MiB (239,355,320 bytes)\n\nAt maximum: 187 MB saved\nAt average: 167 MB saved\n\nRELNOTES=Reduced heap memory usage when parsing domain names\n\n521c77000b665d5077524842cc0902583015043f", "NaN"], ["3061", "Add lcm method for big integers", "Shubham Agrawal", "srinivascodes", "03/08/18, 04:40:48 PM", "`/*Returns least common multiple of two big integers using gcd method*/`", "NaN"], ["3062", "Add lcm method for big integers.", "Shubham Agrawal", "srinivascodes", "03/08/18, 04:48:58 PM", "`/*Returns least common multiple of two big integers using gcd method*/`", "NaN"], ["3063", "Add LCM method for BigIntegers", "Shubham Agrawal", "srinivascodes", "10/02/19, 08:25:08 PM", "`/*Returns least common multiple of two BigIntegers using gcd method*/`", "NaN"], ["3070", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/13/18, 08:43:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add X-Download-Options header (IE8 header to control the \"Open\" button on the download dialog).\n\nRELNOTES=Defined an [X-Download-Options](https://blogs.msdn.microsoft.com/ieinternals/2009/06/30/internet-explorer-and-custom-http-headers) header\n\nb3acfc69329e40befab52f50a5ee66e37ad9f602", "NaN"], ["3071", "static method of print/println with formatting", null, "zenglian", "03/14/18, 06:12:04 PM", "NaN", "NaN"], ["3073", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/15/18, 10:57:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add @since NEXT to new methods on Traverser.\n\nf4aa91156f5d5a5805e1f91d2fcae62fe5bebdc6", "NaN"], ["3074", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/16/18, 08:22:37 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> In Ascii, define a constant for the character case bitmask, and use it in place of 0x20 and 0x5f throughout the class.\n\nc58f51bd68f89cd6119131a256e9de9d0f02b45f", "NaN"], ["3076", "HashBiMap: unnecessary call to rehashIfNecessary", "\u6731\u667a\u6167", "fxleyu", "03/22/18, 09:49:17 PM", "```java\r\nif (oldEntryForKey != null) {\r\n      delete(oldEntryForKey);\r\n      insert(newEntry, oldEntryForKey);\r\n      oldEntryForKey.prevInKeyInsertionOrder = null;\r\n      oldEntryForKey.nextInKeyInsertionOrder = null;\r\n     rehashIfNecessary();\r\n     return oldEntryForKey.value;\r\n}\r\n```\r\nAfter to insert the new key-value, the map's size will not increase. So, the `rehashIfNecessary();` is not necessary .", "NaN"], ["3077", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/20/18, 10:30:06 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make ByteSource.read() use sizeIfKnown(), if available, to help avoid extra byte array allocations/copies.\n\nAlso don't use 32 as the initial ByteArrayOutputStream size in either version of ByteStreams.toByteArray(); just seems way too small. Use the default size for buffers instead, at a minimum.\n\nAlso change ConcatenatedByteSource.sizeIfKnown() to return absent if its Iterable of sources is not a Collection; this is to prevent sizeIfKnown() trying to loop over an infinite Iterable, which previous caused an infinite loop. That is also fixed in this CL; ConcatenatedByteSource.size() and sizeIfKnown() now stop and return Long.MAX_VALUE if the result would exceed that rather than going negative and continuing. But looping over an infinite Iterable in sizeIfKnown() seems potentially slow even if it will eventually stop, and as such against the spirit of sizeIfKnown(), which should be fast.\n\n27d33d4fd1bbbf6f5aacd8835633943da33300a3\n\n-------\n\n<p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.\n\nThey were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array.\n\nInstead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it.\n\n47530cebb974612862c1e0f12e304ae1773ca9ce\n\n-------\n\n<p> Set serialVersionUID in TypeToken.java\n\nRELNOTES=Add a `serialVersionUID` to `TypeToken`\n\ndc8ef1a7ac05b17d3be6e2918809ada5e68b31bc", "NaN"], ["3079", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/22/18, 03:40:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128\n\n*** Reason for rollback ***\n\nCausing OutOfMemoryError in some tests.\n\n*** Original change description ***\n\nStop using ByteArrayOutputStream in ByteStreams.toByteArray methods.\n\nThey were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array.\n\nInstead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it.\n\n***\n\n8e341060fcef24921ecc5a079c256b184ca164f2", "NaN"], ["3080", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/22/18, 09:49:17 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> HashBiMap: unnecessary call to rehashIfNecessary\n\nCloses https://github.com/google/guava/pull/3076\n\n532ab835043d451e6884f463e2b97c4416e55cc6\n\n-------\n\n<p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.\n\nThey were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array.\n\nInstead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it.\n\n(Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed.)\n\ne1b6d117a5b1d688d7e7348c3ce36324f6283c7b", "NaN"], ["3083", "Adds Overloaded Methods to CacheBuilder", "Daryl Arouchian", "slyr91", "04/04/18, 06:46:02 PM", "Address #2999\nI have overloaded the methods listed in the issue so that they accept Duration as a parameter. One function I couldn't quite implement without a bunch of additional code was if the value was negative the error message would return the value + the unit. I cut the unit variable out and replaced it with nanoseconds. The value is also converted to nano.", "NaN"], ["3087", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/28/18, 07:03:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Supersource nullToEmpty and emptyToNull in Strings.java to native JS.\n\nThis allows us to improve performance in docs/xplat code that uses those methods.\n\nRELNOTES=GWT: Supersource `Strings.nullToEmpty()` and `Strings.emptyToNull()`\n\n1850b425de37bf017b0fc57dd02e9de3302b08dc\n\n-------\n\n<p> Open source refactorings directory.  This is knowingly very simple, without yet documentation or many refactorings; it's a prototype first.\n\n694060c9ab57a299607f025902ff920fcd438f25\n\n-------\n\n<p> Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.\n\nae891f29a5ccba8ef90a6733dc26be22eca3426b", "NaN"], ["3089", "Add missing test case for Comparators.emptiesLast()", "Istvan Neuwirth", "ineuwirth", "05/23/18, 05:40:05 PM", "There were two new utility methods added in a1a83d407f3f19891b7032e151d945363c441780 however only one of them is covered by unit tests.\r\n - adding missing test case for Comparators.emptiesLast()", "NaN"], ["3090", "Fix broken badge in Readme", "harold cooper", "hrldcpr", "04/04/18, 01:27:24 PM", "maven-badges.herokuapp.com is frequently (and currently) broken.", "NaN"], ["3095", "Dev", "Kumar Raman", "krdev", "03/28/18, 10:13:35 PM", "NaN", "NaN"], ["3097", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/03/18, 04:08:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix https://github.com/google/guava/issues/3081.\n\na446dd1890a324769ef7dc829052d5118e053abb", "NaN"], ["3099", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/04/18, 01:27:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add java.time.Duration overloads to CacheBuilder:\n  cacheBuilder.expireAfterAccess(Duration)\n  cacheBuilder.expireAfterWrite(Duration)\n  cacheBuilder.refreshAfterWrite(Duration)\n\nFixes https://github.com/google/guava/issues/2999\n\nRELNOTES=Add `java.time.Duration` overloads to `CacheBuilder`.\n\nffa5051884eacf180b5511ab270885960eb792d0\n\n-------\n\n<p> remove maven-badges.herokuapp.com from readme\n\nFixes #3090\n\nde5a62a3d185b41875be8318e633698e85c045bf", "NaN"], ["3103", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/09/18, 07:30:53 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Slightly discourage the use of the <long, TimeUnit> overloads on CacheBuilder.\n\nbabed10eeb8bc5571bdebecec94d48eb3b4748e8\n\n-------\n\n<p> Fix tests that failed if we couldn't recursively delete securely by using Jimfs and just getting rid of the whole file system each time.\n\nFixes https://github.com/google/guava/issues/3100\n\n1974d26799780c448ef72c09eee2201dc7812fbb\n\n-------\n\n<p> Fix typo in Future javadoc.\n\n7416b725e7a657cd215783651984217aad0840cc", "NaN"], ["3107", "Fix toString of NonSerializableMemoizingSupplier", "Alice", "alicederyn", "04/18/18, 07:56:51 PM", "Delegate is set to null once the value has been computed, but is still referenced by the toString method. When it's null, use the value instead.", "NaN"], ["3109", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/12/18, 12:50:23 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction.\n\nd7874ed808bad3031796854432c39358894eff08\n\n-------\n\n<p> Update Public Suffix data.\n\nThis copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\n3c3aedeb600306c689655fc8ca950f662cada625", "NaN"], ["3117", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/18/18, 07:56:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix toString of NonSerializableMemoizingSupplier\n\nFixes #3107\n\n9185822ee16cdd641657c0f8e7ead755c9e9a564\n\n-------\n\n<p> Use Splitter instead of String.split, in InternetDomainName.\n\ne56f1aa3d21b04eed8f5481d4103c05af5c51ec7\n\n-------\n\n<p> Use Splitter for IPv6, too. This eliminates usage of java.util.regex from this file (which is used via String.split, otherwise).\n\n65a2a7de4ef4eea913f769a5cbbce6e35e1fccce\n\n-------\n\n<p> Use Diamond.\n\n27eb336c2a2d9068878edbf49edcca493cd69cd8\n\n-------\n\n<p> Automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.\n\nIt looks like the original change can cause an infinite loop in LocalCache.LoadingValueReference.get().\n\nc2266a6ff8c6f298673688d6779b8b7368fe9147\n\n-------\n\n<p> Don't enable use of Unsafe.getLong() on aarch64 devices.\n\nAndroid devices may report to run aarch64 while running in 32-bit mode, and then\ncrash when loading 64-bit values at unaligned addresses.\n\n263bbcf6cf0cfae6768ddf9e9f3d749da555e422", "NaN"], ["3121", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/20/18, 06:55:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adding a new (initially internal, pending API Review) static factory to Striped.\n\nThis allows for custom Lock injection, which might be useful for cases not covered by the currently existing factories. With this, Striped<Lock> with fair sync is possible.\n\n69a5c285ca6be0e63c521dcb5ecf8782eb1d6379", "NaN"], ["3123", "Remove references to @DoNotMock", "Liam Miller-Cushon", "cushon", "04/23/18, 06:45:53 PM", "which is not longer part of open source Error Prone.", "NaN"], ["3124", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/24/18, 01:53:45 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make SuppliersTest.testMemoizeExceptionThrown() actually memoize the suppliers before testing them.\n\nFixes https://github.com/google/guava/issues/3122\n\n7622bb803ff6c0ae1e3d1d1b2311c7ad1be9c6f3\n\n-------\n\n<p> Use https for API docs\n\n938839f401cadd29fbd94b1e9afc82b663c5a641", "NaN"], ["3125", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/24/18, 05:57:40 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Strip @DoNotMock annotations\n\nRELNOTES=N/A\n\n88134a2ed0b37c219b2912bdbff320e15dbe1a2e", "NaN"], ["3127", "Use @SafeVarargs annotation for Sets#cartesianProduct", "sagar shah", "sagar-shah94", "04/30/18, 04:29:31 PM", "We already had `@SafeVarargs` annotation for `Lists.cartesianProduct(List<? extends B>... lists`. but `Sets.cartesianProduct(Set<? extends B>... sets) ` was missing this annotation so i have added that annotation in order to fix issue.\r\nFixes #2724 ", "NaN"], ["3129", "collect: add Sets#newSingleElementSet", "Tiramisu Mokka", "kofemann", "04/26/18, 06:54:31 PM", "In many situations APIs force to use Set, where only a single element is\r\nrequired. Such use cases can be covered by Sets#newHashSet(element).\r\nHowever, if we know in advance that this is an immutable Set with a\r\nsingle element a more efficient implementation can be used.\r\n\r\nAdd a new Sets#newSingleElementSet method to create a lightweight Set\r\nto store a single element.", "NaN"], ["3130", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/30/18, 06:56:37 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use @SafeVarargs annotation for Sets.cartesianProduct().\n\nFixes https://github.com/google/guava/pull/3127\nFixes https://github.com/google/guava/issues/2724\n\n63a2f5a3928b64f9892f9751269ad1e27a718162", "NaN"], ["3132", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/04/18, 01:20:23 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix a few formatting nits\n\nRELNOTES=N/A\n\n6251cc89ad889458ed7ad4911f5b41d9733cc0b1", "NaN"], ["3134", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/04/18, 05:43:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Bump jsr305 version.\n\n31047249de250f2835640e02485f47a0b8bb4e84", "NaN"], ["3138", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/08/18, 06:50:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Replace http://errorprone.info with https://errorprone.info since that site\nserves from https now\n\n9cccb7fa18d8b8da45edada58a439e9d7632b9ac", "NaN"], ["3139", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/09/18, 03:17:26 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Support type annotations in NullPointerTester\n\nRELNOTES=N/A\n\nfeefa807349f68c90589aca91d121ba2991fe7f5\n\n-------\n\n<p> Continue type annotation preparations in NullPointerTester\n\n9f4014505d9d368f4fbd607586b7349081e3b021\n\n-------\n\n<p> Add Token Binding HTTP header names to header libraries.\n\n5406f50eb39519a00062ab1e0cf5b1ac0ef76e80\n\n-------\n\n<p> Use the type annotation version of @Nullable in the Java 8 branch\n\nRELNOTES=Use the type annotation version of @Nullable in the Java 8 branch\n\ndaa53ccf373aedee90abbceb3a33c2355d189e5c", "NaN"], ["3141", "Fix #3140", "Ava Kelley", "avakel", "07/10/18, 07:39:29 PM", "Javadoc indicated that returned unmodifiable Multimaps would return\r\nmodifiable collections for removeAll and replaceValues when the actual\r\nimplementation throws an UnsupportedOperationException for those\r\nmethods.", "NaN"], ["3142", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/10/18, 02:28:18 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix a documentation error.\n\nFluentFuture.catchingAsync does not take a future as an argument.\n\nbf25a56ef0d350b2a631536809e4f9b958abf9e3", "NaN"], ["3144", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/11/18, 07:57:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Public Suffix data.\n\nThe copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\n16cb0383e37d26e1da4b6f7cfb7a9d21078d0912", "NaN"], ["3145", "Put type annotations on types, not declarations", "Michael Ernst", "mernst", "05/14/18, 11:30:16 PM", "To improve readability, the Java Language Specification recommends that type annotations are written \"immediately before the type to which they apply\" (https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.4).  This pull request makes Guava conform to that style guideline.", "NaN"], ["3146", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/14/18, 11:30:16 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move type annotations immediately before the type they apply\nto\n\nFixes #3145\n\nRELNOTES=N/A\n\n4270efbda891a947c1bfdb3e5707741a63b40551", "NaN"], ["3148", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/15/18, 08:25:07 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Introduce Strings.lenientFormat(), copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.\n\nRELNOTES=Introduce `Strings.lenientFormat()`, copied from `Preconditions.format()`.\n\na728cdc8f254ad9ff5049199e4cf9cee9a573270\n\n-------\n\n<p> Branch eventbus, net, and escape for Java 7\n\nRELNOTES=N/A\n\neeee4ba1b814f540dcb4516bf1079c3a83bc3e68\n\n-------\n\n<p> Swap Preconditions and Verify over to Strings.lenientFormat.\n\n2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935", "NaN"], ["3149", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/16/18, 10:50:00 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Continue migrating to type annotations for @Nullable\n\nRELNOTES=N/A\n\nf642763e15c2814c2ed6208fb7302235d6518829\n\n-------\n\n<p> Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don't need to (and shouldn't) include CaliperMain anymore.\n\nSuch benchmarks should be run via the java_benchmarks generated binary directly.\n\nGITHUB_BREAKING_CHANGES=n/a\n\n84d45bc4e1a9b2a87256e30374c517fed329dcae", "NaN"], ["3152", "Put @NullableDecl last in lists of annotations", "Michael Ernst", "mernst", "05/23/18, 05:40:05 PM", "Conceptially, `@NullableDecl` is a type annotation (one day, Guava may be changed to use a type annotation instead), so it makes sense to put it as close as possible to where it would appear as a type annotation.  That means putting it last in lists of declaration annotations, closest to the return type.\r\n\r\nThis pull request makes that change.", "NaN"], ["3154", "Use api instead of compile for Android", "\u200b", "jereksel", "05/25/18, 05:39:01 PM", "NaN", "NaN"], ["3157", "fix a grammar mistake", "Yanwen An  Andy", "AYWWWWW", "05/28/18, 11:54:51 AM", "fix a grammar mistake", "NaN"], ["3158", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/25/18, 05:39:01 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use api instead of compile for Android\n\nFixes #3154\n\n03d7fd7e53382bc05795dc34632c4c81caf73b46", "NaN"], ["3159", "a", "Stevie Huang", "LittleFatz", "05/29/18, 03:50:09 PM", "NaN", "NaN"], ["3161", "fix a grammar mistake", "Yanwen An  Andy", "AYWWWWW", "05/31/18, 05:27:23 PM", "fix a grammar mistake", "NaN"], ["3163", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/29/18, 01:31:03 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()\n\nRELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()\n\n3eadb52dcb210704fefa547853b17e7bfa57e06c\n\n-------\n\n<p> Some changes to the Guava README.\n\nMove most information about the latest release to the release badge at the top, which now links to the GitHub release page for the latest release and automatically displays the latest release version number.\n\nNote: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that, but I didn't want to deal with that yet.\n\n0f364779d314470c8855a6c0c805f858ed418c65\n\n-------\n\n<p> Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int,Long,Double}.\n\n9e6e1d02faa4ff07f2c5746a1902ae36cd54335b\n\n-------\n\n<p> Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b\n\n*** Reason for rollback ***\n\nAppears to tickle a J2CL bug.\n\n*** Original change description ***\n\nFix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int,Long,Double}.\n\n***\n\n15db5b7f84531a19e7e0ab6f7932208e35b8b068", "NaN"], ["3170", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/31/18, 05:27:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> fix a grammar mistake\n\nFixes #3161\n\nd60f7f352c7ce8ae031c916b045eb30a6f1a8ab8\n\n-------\n\n<p> In open-source Guava, completely skip trying to discover pluggable PatternCompiler implementations.\n\nIt's never been possible to create such implementations externally, anyway, and users are now seeing problems running the useless discovery code under the module system.\n\nFixes https://github.com/google/guava/issues/3147\n\nRELNOTES=`base`: Fixed the `ServiceConfigurationError` that some users encountered when using Guava as a JPMS module.\n\n0954b82dc4e3fe400550fcba78ae2878a8604c3b\n\n-------\n\n<p> Suppress exceptions raised from argument's toString methods during lenient formatting - take 2.\n\n60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc\n\n-------\n\n<p> Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J.\n\ne0eae79a5ba94850ca447116cd033447240d489e\n\n-------\n\n<p> Fix b/80241237 to correctly *not* change segment weight, nor report an eviction, when a compute() call does not change the present value.\n\nRELNOTES=Fix a bug where Cache.asMap.compute* methods could cause nonsensical weights to be stored, breaking cache eviction.\n\n21b52f64ceda0119daec68f6be2712bee55f02af", "NaN"], ["3171", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/04/18, 03:24:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add a direct dependency from guava-gwt to checker-qual.\n\nThe GWT sources (specifically, GwtSerializationDependencies) use @Nullable directly, so we shouldn't rely on relying on it indirectly through guava-jre.\n\nHowever, what actually prompted this is a strange behavior in Compile-Testing, which Truth uses. This CL should help, though it might not be a fully solution.\nhttps://github.com/google/compile-testing/issues/149\n\n5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d\n\n-------\n\n<p> Fix mangled Javadocs.\n\n5928882017809a1d0e57bd1b55dd6abdcf5604d0", "NaN"], ["3176", "Test setValue(null) (both success and failure cases)", null, "nikhilbarar", "05/25/19, 03:27:37 AM", "Added tests:\r\n- entry.setValue(null)", "NaN"], ["3179", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/12/18, 11:25:43 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix nonpublic identifiers and documentation that use \"whitelist\" or \"blacklist\" to use less problematic terms.\n\n8a21b1c960067ef89e729eeeaeeb3e224692ee37", "NaN"], ["3186", "add 'oraclejdk10' to Travis build matrix", null, "sullis", "07/10/18, 07:39:28 PM", "NaN", "NaN"], ["3191", "Moe Sync", "Colin Decker", "cgdecker", "06/28/18, 04:27:16 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.", "NaN"], ["3193", "Moe Sync", "Colin Decker", "cgdecker", "07/10/18, 06:54:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.", "NaN"], ["3197", "Moe Sync", "Colin Decker", "cgdecker", "07/10/18, 07:39:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.", "NaN"], ["3204", "Moe Sync", "Ron Shapiro", "ronshapiro", "07/13/18, 03:29:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adds constants for Sec-Metadata header.\n\nhttps://github.com/mikewest/sec-metadata\n\nRELNOTES=Adds constants for Sec-Metadata header.\n\n2035a276dcecb354dcf68b41f11480786cdeb109\n\n-------\n\n<p> Update Public Suffix data.\n\nThis copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\n0dc71528308c0ff43961b4869df55b0f582c963b\n\n-------\n\n<p> Add @Nullable to AbstractSequentialIterator's computeNext() method return value so that [] doesn't complain\n\ne59ed3d738accabf895ede47ae07b9cf320b6c8a\n\n-------\n\n<p> Internally, use PatternCompiler from Doubles.tryParse.\n\n(Redo of CL 202132002, which was partially rolled back in CL 202139691.)\n\nThis time including tests to cover the RE2J approach.\nTo avoid the errors of last time, I had to remove the possessive quantifiers under RE2J and replace \\p{XDigit} with [0-9a-fA-F] (which is equivalent; see the Pattern Javadoc).\n\ne51afe5a60f68c169e1aec6d30112bb77e423fdd", "NaN"], ["3205", "Moe Sync", "Ron Shapiro", "ronshapiro", "07/16/18, 08:43:02 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included\n\nNow they depend only on host and port.\n\nUseful for storing IPv6 addresses in Set and Map\n\nRELNOTES=`net.HostAndPort`: Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port.\n\n6684d0f68ae91d41eac67873d87e13e2ae2b1db0", "NaN"], ["3211", "Check the array indexes in Quantiles.ScaleAndIndexes is non empty", "Ricky D", "NhatDinh", "10/02/19, 04:48:51 PM", "Fix [Issue #3210 ](https://github.com/google/guava/issues/3210)", "NaN"], ["3213", "Missing Performance Optimization for toArray of size zero #3209", "spags", "thespags", "10/02/19, 01:40:52 PM", "Proof of concept for improving RegularImmutableList's toArray performance.", "NaN"], ["3216", "gradle syntax highlighting", "Elias Ojala", "theel0ja", "08/16/18, 10:28:59 PM", "NaN", "NaN"], ["3217", "Change toString() redundant use of StringBuilder since Java 1.6 >", "Trent", "trentkjackson", "08/13/18, 05:07:01 PM", "From Java 1.6 > the plus operator is changed into StringBuilder by compiler.", "NaN"], ["3218", "Moe Sync", "Ron Shapiro", "ronshapiro", "07/31/18, 01:38:11 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.\n\nNoticed during discussion of https://github.com/google/guava/issues/3202\n\n813ebd6909096797c6587487a1c67931e73b2bc5\n\n-------\n\n<p> Remove Futures methods that implicitly use directExecutor().\n\nRELNOTES=Removed the `Futures` methods that implicitly use `directExecutor()`.\n\n52fa8683024d7093bb90df2789ac0a8ebf5aea04\n\n-------\n\n<p> Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.\n\nEffects on MultimapSynchronizedProGuard:\nJAR bytes: 148295 bytes => 50236 bytes (-66%)\nClasses: 67 classes => 28 classes (-58%)\nMethods: 458 methods => 155 methods (-66%)\n\nb42b6d20bb20ff239a361d990fc3f42048a4d217\n\n-------\n\n<p> Remove deprecated CharMatcher constants.\n\nRELNOTES=Removed deprecated `public static` fields from `CharMatcher`. Use the equivalent `public static` methods instead.\n\n2786afac3ef177232a2e543703c97d42a277c2d8\n\n-------\n\n<p> Move ExecutionSequencer into guava as @Beta.\n\nRELNOTES=Added `ExecutionSequencer`, a new utility to run a series of asynchronous operations serially.\n\n3b25fe7882459991f2336c5021c46f0c374a152b\n\n-------\n\n<p> Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.\n\n*** Original change description ***\n\nMove ExecutionSequencer into guava as @Beta.\n\n***\n\n35aa102cfe256bdf8a23aa89d259ba4916f50c62", "NaN"], ["3221", "Update README.md", null, "xamuel", "08/13/18, 01:49:18 PM", "Added CONTRIBUTING,md into README,md\r", "NaN"], ["3224", "add java lazy model", "ideal", "harbby", "08/03/18, 03:43:12 PM", "  scala lazy demo:\r\n```\r\n  private lazy val conn = DriverManager.getConnection(\"jdbc: full url....\")\r\n```\r\n  java demo :\r\n```\r\n  public class LazyReferenceTest\r\n{\r\n    private final LazyReference<Connection> conn = LazyReference.goLazy(() -> {\r\n        try {\r\n            return DriverManager.getConnection(\"jdbc:url....\");\r\n        }\r\n        catch (SQLException e) {\r\n            throw new RuntimeException(\"Connection create fail\", e);\r\n        }\r\n    });\r\n   // .....\r\n}\r\n```", "NaN"], ["3225", "Change ImmutableSet.Builder to keep overflow hashtables and only deduplicate within table to improve performance", "Bob (Yifan) Yang", "bobyangyf", "08/14/18, 05:39:21 PM", "This fixes #3223 \r\n\r\nBuilding large sets in ImmutableSet.RegularSetBuilderImpl regressed with change mentioned in the issue, with a slightly gain over the original performance.\r\n\r\nInstead of deduplicating all elements and rehashing when table needs to expand, we keep a list of overflow tables, and only deduplicate within each hashtable. This saves work from consistently rehashing elements while still allowing deduplication of elements as they come.\r\n\r\nJMH benchmarks results (Note: small set is 3 distinct elements, large set is 1000000 insertions, 500000 distinct elements, elements are Integers, building is `add()` and `build()` operations)\r\n\r\ntestname | Without Regression: | With Regression | With this change\r\n----------|---------------------|------------------|------------------\r\naddAndBuildSmallSet | 12315677.054 \u00b1  690237.444  ops/s | 14177773.234 \u00b1 1175789.157  ops/s  ops/s | 12664284.533 \u00b1 1089245.357  ops/s\r\naddAndBuildLargeSet | 17.900 \u00b1 1.522  ops/s |  11.184 \u00b1 1.794  ops/s | 19.312 \u00b1 2.329  ops/s\r\n\r\nhttps://gist.github.com/bobyangyf/05189f515d37b6c3a471ff1659024e12", "NaN"], ["3226", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/07/18, 02:17:50 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add a note about the relative ordering of afterDone and listener execution\n\n25ab9de6336c2040a36aff7bed96b20fc5c30111\n\n-------\n\n<p> Insulate AbstractFuture from Futures.java/MoreExecutors.java dependency\n\nMade DirectExecutor package-private so that we can refer to it directly in AbstractFuture.\n\n660d9154e553b97df367979ccfe19971c9154bff\n\n-------\n\n<p> Remove reference to Strings.isNullOrEmpty from AbstractFuture.\n\nc72e9c73cf468c2c55092912a0178a668f975e2e\n\n-------\n\n<p> Introduce Trusted interface.\n\nSo we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.\n\n227d67fc6600a6041a3a3881f1e1b6652d3cf75c\n\n-------\n\n<p> Automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c\n\n*** Original change description ***\n\nIntroduce Trusted interface.\n\nSo we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.\n\n***\n\ne058d91f7d676a8791cba1bdda6b745ccc44f8b8", "NaN"], ["3229", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/09/18, 10:27:30 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1\n\n*** Reason for rollback ***\n\nThe test that caused the inital rollback is buggy\n\n*** Original change description ***\n\nIntroduce Trusted interface.\n\nSo we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.\n\n***\n\n683eb054a0c9846e73aa9a4f1a47d4821ea5ef60\n\n-------\n\n<p> Optimize ImmutableCollection.toArray(T[]) as per https://shipilev.net/blog/2016/arrays-wisdom-ancients/, the key goal being to avoid the necessity of zeroing a newly created array where possible.\n\nAddresses https://github.com/google/guava/issues/3209.\n\nf5a3541fd118d370488b9f9c15facd408e180b17\n\n-------\n\n<p> Adds WASM as a supported Media type to Google Java utilities.\nAdds WASM support to the StaticFileAction in devserver (so that it is served\nwith the correct Content Type).\n\nRELNOTES=Adds WASM as a supported Media type to Google Java utilities.\n\n67bb79e4ea2e0f6da956c29dd700ad7d756948b7\n\n-------\n\n<p> Allow Service to transition from STARTING to TERMINATED. Add a new \"doCancelStart\" method that is called when a service is stopped while still starting. This gives implementations a chance to abort code which may be preventing the service from starting.\n\nRELNOTES=Added `doCancelStart` protected method to `AbstractService`\n\n6cdea3a7b0fe3953e181cb9660df5834550ba498\n\n-------\n\n<p> Fix javadoc typo in LinkedListMultimap\n\nFixes https://github.com/google/guava/issues/3228\n\n1d0eeee14d09912362695e6e1c847fc50bc96ebf\n\n-------\n\n<p> Add callable's toString to null failure message.\n\nI find this happens in mock-heavy tests, and this makes it easier to identify the source of the bad mock call.\n\n9c03abcca29fb267ed55fc80e668327e5d46e230\n\n-------\n\n<p> Enhance toString() for futures returned from ExecutionSequencer.\n\nAlso make tests for ExecutionSequencer actually run, by porting them to junit3 :-(\n\n0c2b6fb916214ffe092edc8577bd7818d58fe664\n\n-------\n\n<p> Make ordering of Primitives#all{Wrapper,Primitive}Types deterministic\n\nRELNOTES=N/A\n\nc8ad64d04071f0fc20cbcba0bb9ee944746b5ef2", "NaN"], ["3236", "Use newGuard() to make example in Monitor class javadoc more concise.", null, "jsampson2", "09/12/18, 09:42:21 PM", "This commit also cleans up the method javadoc for newGuard() itself and replaces a lingering `throw Throwables.propagate(throwable)` with simply `throw throwable` (not related to newGuard(), but good to clean up).\r\n\r\n_Note:_ I have not modified the copy of Monitor.java under the android directory because the newGuard() method was never added there.", "NaN"], ["3237", "Optimize ImmutableSet.copyOf to use expectedSize and avoid redundant copying", "Bob (Yifan) Yang", "bobyangyf", "05/23/19, 05:28:13 AM", "ImmutableSet.copyOf() was not taking advantage of expectedSize when copying other sets.\r\nIt was also creating redundant copies of arrays during copying that is later discarded.\r\n\r\nThis partially fixes #3223 in terms of this method.\r\nBenchmarks below: These are adding 2000 distinct Objects with unique hashcodes that simply return the value of a field.\r\n\r\ntest name | with regression | without regression | with fix\r\n-----------|------------|---------|--------\r\ncopySet |   12295.914 \u00b1  264.252  ops/s | 32206.487 \u00b1  882.676  ops/s | 35881.393 \u00b1 2244.604  ops/s\r\ncopyList | 14.723 \u00b1 6.335  ops/s | 4.547 \u00b1 5.599  ops/s | 14.331 \u00b1 4.146  ops/s\r\ncopyImmutableList | 13571.475 \u00b1 1155.980  ops/s | 43166.369 \u00b1 2471.499  ops/s | 43718.413 \u00b1 1952.942  ops/s\r", "NaN"], ["3238", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/16/18, 10:28:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time's Interval.gap when migrating to Java Time which has no Interval class.\n\nJoda Time:\nInterval interval = ...;\nInterval gap = interval.gap(interval);\n\nJava Time (after this CL):\nRange<Instant> interval = ...;\nRange<Instant> gap = interval.gap(otherInterval);\n\nRELNOTES=Adds a gap() method to Range that computes the Range that lies between them.\n\n856f3bc431f7f145f35c6a42a07e1f7158964467\n\n-------\n\n<p> Use gradle formatting\n\nFixes https://github.com/google/guava/pull/3216\n\n44abd86cf18afa64d1776b19a7bedabda395877f\n\n-------\n\n<p> Add missing @since tag.\n\nhttps://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)\n\nNoticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793\n\n2e93145e51699a3e533c72db2633456f65542ad7\n\n-------\n\n<p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.\n\nb155e35606632c756e8db2c414145237a02ef9ca\n\n-------\n\n<p> Remove unnecessary local.\n\nIt is a holdover from when we used the value locally, rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8\n\n94134ff0559baefa9ecc8df2a7c61945b6dfc523\n\n-------\n\n<p> Make delayed get() test more resilient to thread scheduling delays.\n\ncc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f\n\n-------\n\n<p> Switch FluentFuture and AbstractFuture in inheritance chain\n\nRELNOTES=AbstractFuture doesn't expose FluentFuture APIs anymore.\n\n4d8e0a81d78cea279441625adc96467a5b7d0879", "NaN"], ["3243", "Add MediaType for \"application/geo+json\".", "Simon Legner", "simon04", "06/03/19, 02:10:12 PM", "GeoJSON Format has been standardized in August 2016 as https://tools.ietf.org/html/rfc7946. This PR adds a `MediaType.GEO_JSON` constant.", "NaN"], ["3244", "Javadoc for MediaType.KML+KMZ+MBOX", "Simon Legner", "simon04", "08/21/18, 10:47:19 PM", "This PR adds Javadoc for the constants `MediaType.KML`, `MediaType.KMZ`, `MediaType.MBOX`.", "NaN"], ["3245", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/20/18, 02:43:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Don't allocate a CancellationException if cancellation causes are not enabled.\n\n99393cf80ba7a5c861b564b3289debbf5dbbeb51", "NaN"], ["3247", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/21/18, 10:46:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add Javadoc for MediaType.KML+KMZ+MBOX\n\nVia https://github.com/google/guava/pull/3244\n\nOriginal Author=Simon Legner (simon04)\n\n7ac917c8d73768129499bd76fe41aa651391ba93\n\n-------\n\n<p> [guava concurrent] Inlined getDone() and getUninterruptibly() to break the source dependency from AbstractFuture to other classes in /util/concurrent.\n\nb6726e17f9aa455ff5aa8ee7cee6089d37feb1ba", "NaN"], ["3248", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/29/18, 12:52:48 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix parameter name in Javadoc\n\n`name` doesn't exist in the current context.\n\n#CodeHealth\n\nRELNOTES=Fix parameter name in Javadoc\n\n9dbaf13b31c58b67ecc7d1ae3950534cdf04a344", "NaN"], ["3254", "Moe Sync", "Ron Shapiro", "ronshapiro", "08/30/18, 07:56:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.\n\nf380040f0041f94c83d24623c10f32de58d436c4\n\n-------\n\n<p> Suppress warnings on thread suspending test.\n\nd51037de530cfe76884271f164b3fbe914493fdb\n\n-------\n\n<p> Suppress violation of MissingEqualsCall for EqualsTesterTest, given it quite legitimately fails to call #testEquals.\n\n16e6fcebf07c0f2ce92411604bd3c9d03407374c\n\n-------\n\n<p> Automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4\n\n*** Reason for rollback ***\n\nTest depends on incorrect Future implementation\n\n*** Original change description ***\n\nAdd more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.\n\n***\n\n47d758e506f838ebc14da5cb85b7f3150efe00fb\n\n-------\n\n<p> Update Public Suffix data.\n\nThe copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\n5fafe7832579ab221804480a7545d486a14d083d", "NaN"], ["3256", "Moe Sync", "Ron Shapiro", "ronshapiro", "09/04/18, 07:52:15 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.\n\n49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255\n\n-------\n\n<p> Bail early without a CancellationException in AbstractTransformFuture.\n\n2ba14fdad20628de9eb7ea537af22e198d4d31a0", "NaN"], ["3257", "Moe Sync", "Ron Shapiro", "ronshapiro", "09/12/18, 02:31:13 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use TrustedFuture where possible\n\n5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf", "NaN"], ["3261", "Moe Sync", "Chris Povirk", "cpovirk", "09/12/18, 09:42:10 PM", "NaN", "NaN"], ["3262", "Moe Sync", "Ron Shapiro", "ronshapiro", "09/14/18, 03:38:12 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove trustedGetException()\n\ntryInternalFastPathGetFailure gives access to similar fast-path\n\nRELNOTES=N/A\n\n9d9d4d253c377a41919542ac65c5fa7205bd7f52", "NaN"], ["3268", "Update truth, animal sniffer, error prone annotations, and JUnit", "Jesse Wilson", "swankjesse", "09/19/18, 04:28:10 PM", "All of these dependencies are out of date from those used in gRPC, and preventing\r\nme from getting a current build of Guava into gRPC.", "NaN"], ["3269", "A utility for single execution of  Runnable", "Tareq Sharafy", "tareqhs", "09/25/18, 02:18:29 PM", "A funtionality similar to ``Suppliers.memoize()`` for Runnable", "NaN"], ["3270", "Moe Sync", "Chris Povirk", "cpovirk", "09/19/18, 04:27:52 PM", "NaN", "NaN"], ["3273", "Update the \u201cNo removed APIs since\u201d counter to 26.0", "Jesse Wilson", "swankjesse", "09/24/18, 02:39:14 PM", "Removal of one of the catchingAsync overloads caused me some grief\r\nbecause one of my projects\u2019 transitive dependencies was using it.\r\n\r\nhttps://github.com/google/guava/commit/87d87f5cac5a540d46a6382683722ead7b72d1b3\r\nhttps://github.com/vitessio/vitess/pull/4214", "NaN"], ["3274", "add [openjdk11] to Travis build matrix", null, "sullis", "09/28/18, 07:25:35 PM", "NaN", "NaN"], ["3275", "Check input collection size in PowerSet before actually copying it's content", "Teubel Gy\u00f6rgy", "tgyurci", "09/24/18, 07:02:25 PM", "It helpes avoiding OOMs for big Sets.", "NaN"], ["3276", "Add ofNull() method to Suppliers.", "Merlin Osayimwen", "ehenoma", "09/25/18, 02:44:33 PM", "Despite the fact that I avoid the use of nullable references, there are often few alternatives, especially if third-party libraries are used.\r\n\r\nIf, in such cases, a supplier is needed that returns `null` continuously, the current solution with the Guava library is to call the `ofInstance()` method with the argument `null` . This is not really clean and can be easily improved.\r\n\r\nMy added method makes the user's code cleaner and more readable.\r\n\r\n_Without my method:_\r\n```java\r\nSupplier<?> nullSupplier = Suppliers.ofInstance(null);\r\n```\r\n\r\n_With my method:_\r\n```java\r\nSupplier<?> nullSupplier = Suppliers.ofNull();\r\n```", "NaN"], ["3280", "Removed @Beta for toImmutableList and toImmutableMap", "Yuyumao", "yuyumao", "04/29/19, 08:56:37 PM", "https://github.com/google/guava/issues/3251", "NaN"], ["3281", "Moe Sync", "Colin Decker", "cgdecker", "10/01/18, 07:24:07 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.", "NaN"], ["3282", "remove @Beta toImmutableSortedMap", "Yuyumao", "yuyumao", "10/02/18, 08:43:26 AM", "NaN", "NaN"], ["3287", "Narrow @Beta annotations to the methods of Futures", "Jesse Wilson", "swankjesse", "02/26/19, 07:18:55 PM", "Right now the @Beta annotation on the class is easy to miss, especially\r\nsince certain methods are also directly-annotated @Beta.\r\n\r\nRemove the annotation from the class and apply it to each public member.\r\n\r\nIn a follow-up PR I'd like to remove the @Beta annotation from a few\r\nmethods (transformAsync, catchingAsync, immediateFuture).", "NaN"], ["3294", "maven-compiler-plugin 3.8.0", null, "sullis", "11/06/18, 10:53:23 PM", "\r\nnotes: https://blogs.apache.org/maven/entry/apache-maven-compiler-plugin-version\r", "NaN"], ["3296", "Added split to Guava immutable list metod", null, "Dunemaster", "10/17/18, 07:11:49 PM", "For those, who want to use ImmutableList and dont want to pay extra overhead of creating a unmodifiableWrapper or copying to ImmutableList", "NaN"], ["3297", "Removed @Beta from Files class", null, "LianyanGu", "11/02/18, 05:40:32 PM", "Issue number #3285", "NaN"], ["3298", "Moe Sync", "Ron Shapiro", "ronshapiro", "10/18/18, 05:35:24 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Enable GoodTime API checker for Guava\n\n753e1d5be8e1cc4c5ebaa080b095c7ef24117cba", "NaN"], ["3305", "Moe Sync", "Ron Shapiro", "ronshapiro", "10/23/18, 04:25:06 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Enable goodtime-api for Guava (with some exceptions).\n\n603ecca60c11d9a343423ae908bbc325521a7f50\n\n-------\n\n<p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.\n\nThis is in response to (and should resolve) https://github.com/google/guava/issues/3299.\n\n9db70c6519ef588697a9c522ee36aea439f36241\n\n-------\n\n<p> Suppress warnings in classes that implement equals() without also implementing\nhashCode().\n\nThe contract for Object.hashCode states that if two objects are equal, then\ncalling the hashCode() method on each of the two objects must produce the same\nresult. Implementing equals() but not hashCode() causes broken behaviour when\ntrying to store the object in a collection.\n\n73f7e84a345805dc4fcc9927201e03fdbf408c5f", "NaN"], ["3306", "Moe Sync", "Ron Shapiro", "ronshapiro", "10/29/18, 04:43:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Document that Chars.lexicographicalOrdering is different than Alphabetical\nordering, which is more appropriate for user text.\n\n5377565bc5be4bcce52a07952595b50c11c75f1a", "NaN"], ["3309", "Add MediaType for Microsoft Outlook", null, "Tomschi", "11/06/18, 10:53:23 PM", "NaN", "NaN"], ["3310", "release of references in ExpiringMemoizingSupplier", "Tareq Sharafy", "tareqhs", "11/13/18, 02:57:11 PM", "nullify the value reference before calling the delegate to avoid\r\nunexpected leaks if the delegate fails", "NaN"], ["3312", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/06/18, 10:53:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\r\n\r\nCommits:\r\n=====\r\n<p> Add MediaType.MICROSOFT_OUTLOOK and add missing javadocs to a few other MediaTypes.\r\n\r\nCloses https://github.com/google/guava/pull/3309\r\n\r\n522d3aa499742f7ca0cf1753c4d7688acdc0410a\r\n\r\n-------\r\n\r\n<p> Use maven-compiler-plugin version 3.8.0.\r\n\r\nCloses https://github.com/google/guava/pull/3294.\r\n\r\nf31bf941cab3acbee83f7d000b4b09bc24ca1032", "NaN"], ["3313", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/09/18, 07:00:58 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct documentation for Splitter#withKeyValueSeparator(Splitter)\n\n8340e5a770401494da5194e33153079754381006\n\n-------\n\n<p> Standardise message format for \"duplicate key\" IllegalArgumentException thrown from ImmutableTable.Builder.build().\n\nInternally, ImmutableTable.Builder.build() delegates to two classes, {Dense,Sparse}ImmutableTable and these currently have inconsistent error messages when a duplicate key is detected.\n\nPrior to this CL, SparseImmutableTable had a message formatted like:\n  \"Duplicate value for row=%rowKey%, column=%columnKey%: %newValue%, %oldValue%\"\nWhereas DenseImmutableTable had:\n  \"duplicate key: (%rowKey%, %columnKey%)\"\n\nAfter this CL both classes will format the message like:\n  \"Duplicate key: (row=%rowKey%, column=%columnKey%), values: [%newValue%, %oldValue%].\"\n\nRELNOTES=Standardise message format for \"duplicate key\" IllegalArgumentException thrown from ImmutableTable.Builder.build().\n\n96e21ae4f9fce2dc622658cff322b01f1721012e\n\n-------\n\n<p> common.graph PackageSanityTests: specify a default object for EndpointPair inputs.\nThis should resolve a few internal flaky test issues\n\n4210f57678985b51439b0fa37779ec5b369024b8", "NaN"], ["3314", "Field, parameter, and variable.", null, "reudismam", "11/12/18, 03:49:36 PM", "The final modifier can be used in fields, parameters, and local variables to indicate they cannot be re-assigned. This edit improves clarity and it helps with debugging.", "NaN"], ["3315", "Use the class Path to represent a path instead of a String.", null, "reudismam", "10/02/19, 03:11:52 PM", "Strings can be used to represent a file system path even though some classes are specifically designed for this task. For instance, java.nio.Path. It is useful to change the type of the variable to Path, since strings can be combined in an undisciplined way, which can lead to invalid paths. Second, different operating systems use different file separators, which can cause bugs.", "NaN"], ["3318", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/16/18, 04:07:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Address why users should prefer our immutable collections to things like Collections.emptyList().\n\n2b9f74c16acbb9bbe18bc20e171996c79a476e31\n\n-------\n\n<p> Add the Origin-Trial HTTP response header.\n\n229188e18e6504ffa9747e8bd00622d28e460477", "NaN"], ["3319", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/20/18, 07:19:01 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Create a Guava BOM.\n\nRELNOTES=Create a BOM for Guava.\n\n0a6c51ed24ba85e207ae5f258f5e264b94bf0961", "NaN"], ["3324", "Didn't update readme with latest version for Android.", "abuicke", "abuicke", "11/25/18, 07:13:56 PM", "Didn't update readme with latest version for Android.", "NaN"], ["3325", "Moe Sync", "Colin Decker", "cgdecker", "11/26/18, 07:19:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.", "NaN"], ["3327", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/29/18, 06:10:10 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Public Suffix data.\n\nThe copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated, the copy is updated 3 weeks before the\nEstimated Week of Stable:\n\nhttps://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates\n\n648071f0c529c87cb28537488f27f971bce3c3c5", "NaN"], ["3330", "Moe Sync", "Ron Shapiro", "ronshapiro", "11/30/18, 08:07:15 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Internal change\n\n3e74359d4e0479bf6c461d031bb4761b06cf2e66\n\n-------\n\n<p> Add the @Immutable a few more classes. Both annotations enforce at compile-time that the annotated class meets the annotation\u2019s requirements.\n\n16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0", "NaN"], ["3332", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/02/18, 08:03:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing documentation and @since tags to MediaType entries that were added\nafter its initial relase of 12.0\n\nb545d0ed1066906d238852f2f510132cbfcc4af8\n\n-------\n\n<p> Remove \"Media type for\" or similar phrasing for visible constants in the MediaType class.\n\n172bb45c149601a52e45bff8b2e3aa409f66d658", "NaN"], ["3334", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/05/18, 11:21:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make example compile (i.e. supply a Path/File) and use depth first instead of breadth first.\n\nReason: Depth first is more common for file traversal.\n\nRELNOTES=N/A\n\ne7b80454e4d463af61fc81c3beb96b5e46b07312", "NaN"], ["3337", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/12/18, 01:25:13 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use the primitive \"number\" type instead of the object counterpart \"Number\" to avoid a jscompiler error.\n\nAn upcoming change to J2CL that simplifies how casting logic is transpiled will make the code \"(Number) (Object) 3\" here transpile to just \"/** @type {Number} */ (3)\" and jscompiler will see the \"invalid cast\" since \"3\" is not \"Number\" in the closure type system.\n\n065a831ca171767dcc73b7b74c996029a5f286e3", "NaN"], ["3339", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/14/18, 04:34:43 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add the application/jose and application/jose+json media types.\n\nhttps://www.iana.org/assignments/media-types/application/jose\nhttps://www.iana.org/assignments/media-types/application/jose+json\nhttps://tools.ietf.org/html/rfc7515#section-9.2\n\nRELNOTES=Add MediaType for \"application/jose\" and \"application/jose+json\".\n\ne846cdf26bb7cc52b664e8f78e670222da88ac51\n\n-------\n\n<p> Suppress soon to be GoodTime errors ('time' is now considered a keyword).\n\n2705b06e3c61dfe16eb14befe52de2c37d9e0313", "NaN"], ["3344", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/18/18, 07:03:44 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use maven-javadoc-plugin 3.0.1.\n\ncd52f44bf6f1943ad3b9a60053acff133cf2b152", "NaN"], ["3350", "Moe Sync", "Ron Shapiro", "ronshapiro", "12/24/18, 04:08:33 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Hide Files methods that are @Deprecated internally\n\ncf8ea79dc50d7c0441045b020873561a4bb3791b", "NaN"], ["3355", "Remove unused imports and update/remove suppress warning", "Oleksii Bondar", "OleksiiBondar", "12/25/18, 01:48:13 AM", "NaN", "NaN"], ["3356", "Remove unused imports and warnings", "Oleksii Bondar", "OleksiiBondar", "02/26/19, 07:18:54 PM", "* Remove unused imports.\r\n* Remove suppress warning annotations where not applicable and/or update suppression types\r", "NaN"], ["3359", "Moe Sync", "Ron Shapiro", "ronshapiro", "01/03/19, 05:26:05 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.\n\nFixes https://github.com/google/guava/issues/3343\n\nRELNOTES=Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.\n\n7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4", "NaN"], ["3362", "Remove @Beta from EventBus #3360", null, "rickybiswas25", "04/19/21, 03:13:40 PM", "NaN", "NaN"], ["3363", "Moe Sync", "Ron Shapiro", "ronshapiro", "01/15/19, 09:40:57 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct the spelling of the Range class.\n\nIt's Range not Ranges.\n\n40993be1bf4c7dc33190b20d9712bea7f6487af1", "NaN"], ["3364", "rename literal", "Jun", "mjaow", "02/14/19, 02:38:19 PM", "refactor the literal 6 in LockFreeBitArray to LONG_ADDRESSABLE_BITS", "NaN"], ["3366", "Moe Sync", "Ron Shapiro", "ronshapiro", "01/24/19, 05:18:28 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Enable GoodTimeApi for c.g.common.cache\n\nRELNOTES=Enable GoodTimeApi for c.g.common.cache\n\nacf26c962dedc93852bd2617868a8acacfdab7c0\n\n-------\n\n<p> refactor literal to named constant\n\nFixes #3364\n\n47a6942c23b62662c35e8fe69de433000eb51d17", "NaN"], ["3368", "Moe Sync", "Ron Shapiro", "ronshapiro", "02/13/19, 01:55:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Enable GoodTimeApi for c.g.common.cache\n\nRELNOTES=Enable GoodTimeApi for c.g.common.cache\n\n7a3e5abd01dea7d0d6d065dc8538af0419087f4f\n\n-------\n\n<p> refactor literal to named constant\n\nFixes #3364\n\na2829817926037d99975a9f05399edbe730f9bda\n\n-------\n\n<p> Adds constants for Sec-Fetch-(Dest|Mode|Site|User) headers.\n\nhttps://github.com/mikewest/sec-metadata\n\nRELNOTES=Adds constants for Sec-Fetch headers.\n\ncfb1208e326c24e8110dc6ef2412074f9d8ead03\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from c.g.c.collect.Ordering.min/max()\n\nRELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.Ordering.min/max()\n\na83bb5f2d7839a746f285ddceddcca205133c74b\n\n-------\n\n<p> Swap the parameter order of the Collections.disjoint call in Sets.intersection\n\nCollections.disjoint is implemented in such a way that it has better\nperformance if its 2nd parameter is the smaller of the two when both params are\ninstances of Set. The Sets.intersection javadoc says it has better performance\nwhen set1 is the smaller set, but that is currently not the case for the\nisEmpty operation specifically.\n\nOur team ran into a pathological case of this where we check for an empty\nintersection of two sets, one being ~5 orders of magnitude larger than the\nother.\n\nRELNOTES=Update isEmpty operation of intersection to follow the smaller set first advice in the javadoc.\n\n1162460c408203facbfde8889bb89f74bc78d612\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from c.g.c.collect.ClassToInstanceMap.getInstance()\n\nRELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.ClassToInstanceMap.getInstance()\n\necb601f6d89ac351b0178364034dc255fe639f03\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from c.g.c.collect.Iterators.getOnlyElement()\n\nRELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.Iterators.getOnlyElement()\n\nf8ee1a2bfab18d2d5af1e7fda41e2cb9cecd37ca\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from c.g.c.base.Ticker\n\nRELNOTES=Remove @CanIgnoreReturnValue from c.g.c.base.Ticker\n\n44e129f1930ba4d1b3c7765f38273d5e13586283", "NaN"], ["3377", "Removed @Beta from RangeMap, RangeSet and their implementations #3376", "Artem Chernyshov", "tyomka", "02/08/19, 02:46:03 PM", "NaN", "NaN"], ["3378", "Removed @Beta from RangeMap, RangeSet and their implementations #3376", "Artem Chernyshov", "tyomka", "02/08/19, 03:04:35 PM", "NaN", "NaN"], ["3379", "Removed @Beta from RangeMap, RangeSet and their implementations #3376", "Artem Chernyshov", "tyomka", "02/08/19, 03:24:30 PM", "NaN", "NaN"], ["3382", "Document the JDK 9+ alternative to `Iterators#forEnumeration`", "Stephan Schroevers", "Stephan202", "10/02/19, 04:48:51 PM", "- Copied the phrasing from the various `Streams.stream(Optional*)` methods.\r\n- Didn't update the documentation in the Android code base. (Which also mirrors the approach taken for the `Streams.stream(Optional*)` methods.)\r\n- Not completely sure whether the `UnmodifiableIterator`/`Iterator` distinction is worth pointing out.", "NaN"], ["3383", "Document the JDK 9+ alternative to `MoreObjects#firstNonNull`", "Stephan Schroevers", "Stephan202", "10/02/19, 09:34:36 PM", "Analogous to #3382.", "NaN"], ["3384", "Document the JDK 9+ alternatives to `Preconditions#{checkElementIndex,checkPositionIndexes}`", "Stephan Schroevers", "Stephan202", "01/13/20, 09:27:18 PM", "Analogous to #3382 and #3383. I can imagine these two suggestions will cause some debate, since they have overloads that accept a `@Nullable String desc` for which there is no counterpart in the standard library.\r\n\r\nOne way to settle the debate could be to benchmark whether the JDK builtins are more efficient. (`Objects#checkIndex` is annotated `@ForceInline` and delegates to a `@HotSpotIntrinsicCandidate`, so it may be.)", "NaN"], ["3385", "Document the JDK 9+ alternative to `Maps#immutableEntry`", "Stephan Schroevers", "Stephan202", "02/26/19, 07:18:55 PM", "I think this suggestion is worthwhile for two reasons:\r\n- The JDK 9+ alternative is null-hostile, fully in line with Guava's philosophy. (In fact, my colleagues and I were surprised to learn that `Maps.immutableEntry` allows nulls.)\r\n- The excellent arguments in favour of `Immutable*` types put forth in #2969 do not hold here, since `Maps.immutableEntry` does not have a special return type that communicates its immutability.", "NaN"], ["3386", "Moe Sync", "Ron Shapiro", "ronshapiro", "02/26/19, 03:39:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add Report-To header.\n\nhttps://www.w3.org/TR/reporting/\n\n24f15fdc8f8e12c082107b6a4293ff23761d389c\n\n-------\n\n<p> Remove unused imports and warnings.\n\nFixes #3356\n\n3d35188141ca572ac6ba9e3fe180242d5f511dc8\n\n-------\n\n<p> Reformat with google-java-format\n\nRELNOTES=N/A\n\n7722bf9ec4e055c50780effbb2c1dd52ba7f4869\n\n-------\n\n<p> Add missing @Override annotations\n\n492f1a65b497efeee0d0d0c3af7deb8af9121da9\n\n-------\n\n<p> Document the retention of listeners added to Guava implementations of ListenableFuture.\n\nRELNOTES=The retention of listeners added to Guava implementations of ListenableFuture is now documented.\n\n3d56928669d11b310f4c79bad5e26b8bf09b3aca\n\n-------\n\n<p> Reformat with google-java-format\n\nRELNOTES=N/A\n\n12168b6b99d4ff681aae880516869aa2c9859a7b\n\n-------\n\n<p> Name the method parameter 'unused' for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn't complain)\n\n0451f49cf714ef628280a87700eca3e68cd9b20f\n\n-------\n\n<p> Remove @Beta from APIs:\n\ncollect\n- most Collectors (aside from BloomFilter and ImmutableRange*, as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity))\n- Maps: asConverter, immutableEnumMap\n- MultimapBuilder\n- Streams: stream(Iterable), concat\n\nio\n- ByteStreams: copy, toByteArray\n- CharStreams: copy, toString\n- Files: as(Char|Byte)(Source|Sink)\n\nutil.concurrent\n- Futures: addCallback, getDone, getUnchecked, immediateCancelledFuture, immediateFailedFuture, immediateFuture\n- ListeningScheduledExecutorService\n- Uninterruptibles\n\nother\n- HtmlEscapers\n- Splitter.splitToList\n- Ticker\n\nFixes https://github.com/google/guava/pull/3287\nFixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*, but those whole classes are @Beta, anyway)\nAddresses the main concerns of https://github.com/google/guava/issues/3285 but doesn't cover the broader request\nFixes https://github.com/google/guava/issues/3340\nPartially addresses https://github.com/google/guava/issues/3239\n\nRELNOTES=Removed `@Beta` from a number of frequently used APIs.\n\n91c249dd28e52f1cbc735f36a23ccac47d0c81f3\n\n-------\n\n<p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java's internal encoding.\n\na02262db50ebeeecc66cf70cda7758b62b68e67a\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().\n\nRELNOTES=`@CanIgnoreReturnValue` removed from `Ordering.sortedCopy() and `immutableSortedCopy()`.\n\ncbbcc983ea0b0972721821569bc162e628b1864f\n\n-------\n\n<p> Make a constructor private.\n\n(I'm looking into EnumMap stuff for other reasons, and I got to wondering if this was used outside the file. Nope.)\n\n9d015114e66ed86ce86a60efb8bcb27901336476\n\n-------\n\n<p> Delete WellBehavedMap.\n\nThe bug it worked around was fixed in Java 7:\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706\n\nAnd I don't believe it was ever present under Android:\nhttps://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146\n\nI haven't looked for the absolute first version ever of GWT, but the still very old GWT file doesn't have the bug, either.\n\nDeleting this class will simplify some work I'm doing around our EnumMap usage for j2cl.\n\nf83623923077944770b1af495f296cde8fd4265e\n\n-------\n\n<p> Internal GWT change\n\ncd334655f6ade9e07685b976db1572674382b157\n\n-------\n\n<p> Automated rollback of changelist cd334655f6ade9e07685b976db1572674382b157\n\n*** Original change description ***\n\nInternal GWT change\n\n***\n\nb937ab0eea849ebd78e9554b86bdcf318c999f94\n\n-------\n\n<p> Use J2ObjC's @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.\n\nTESTED=Created a map inside a autorelease pool and saved a reference to the\nkeyset. Checked that the keyset functions correctly outside the autorelease\npool. Checked that both the keyset and the map are deallocated by the\nautorelease pool when not holding a reference to the keyset. Did this test with\nboth ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).\n\nRELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.keySet().\n\n31ade173f5cc9c000040cfe34fb71330535cb863\n\n-------\n\n<p> Annotate checkNotNull's input and output as @NonNull.\n\nWe don't want to go down the road of annotating most things @NonNull, as we eventually want to use tools that assume that that's the default. However, it's pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools, so let's annotate just that method and see how it goes.\n\nGITHUB_BREAKING_CHANGES=N/A\nRELNOTES=Annotated `checkNotNull`'s input and output as `@NonNull`.\n\n68ee322ac12f557b86def13b5ce9b3d247e11bf8", "NaN"], ["3387", "Deduplicate common logic in Uninterruptibles class, avoiding allocations", "Nick Hill", "njhill", "11/05/19, 04:00:33 PM", "I recently came across [this discussion](https://github.com/google/guava/issues/2384#issuecomment-181137856) around the reason for having duplicated logic in `Uninterruptibles`, and am offering this as an approach which avoids per-method call allocations and reflection. There is some overhead in terms of class count though, apologies if this was already discounted for that reason.\r\n\r\nAlso related: #1409", "NaN"], ["3392", "CharMatcher: Improving the way it is deprecated", "Jason Mirra", "mirraj2", "03/01/19, 10:49:27 PM", "I've updated the documentation to try to provide clearer instructions on ways that people can migrate away from some of the deprecated methods.\r\n\r\nI also added a method called asciiDigit() because I think it is important to give developers an easy way to handle one of the most common use cases.", "NaN"], ["3393", "Moe Sync", "Ron Shapiro", "ronshapiro", "02/26/19, 07:18:55 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add Report-To header.\n\nhttps://www.w3.org/TR/reporting/\n\n504978f1032ab9b6284ffadd1f94bdb7c870557a\n\n-------\n\n<p> Remove unused imports and warnings.\n\nFixes #3356\n\nf0945a2ca741ead2a435cf52ddae2217763cc092\n\n-------\n\n<p> Reformat with google-java-format\n\nRELNOTES=N/A\n\n7809097021927058b21523e7b4d24d1f7fdb91b8\n\n-------\n\n<p> Add missing @Override annotations\n\n8843b6ca39c8baddcf01991ea34ad91f87b30d82\n\n-------\n\n<p> Document the retention of listeners added to Guava implementations of ListenableFuture.\n\nRELNOTES=Document the retention of listeners added to Guava implementations of `ListenableFuture`.\n\nf6287e1b85eb4daf5678d252aaaf215a82f4fd2d\n\n-------\n\n<p> Reformat with google-java-format\n\nRELNOTES=N/A\n\n28cff42bc92b7685937c5771868167e0c03155d3\n\n-------\n\n<p> Name the method parameter 'unused' for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn't complain)\n\n0967c796d6e6be72b0d9e8d68af66d6a7b524b54\n\n-------\n\n<p> Remove @Beta from APIs:\n\ncollect\n- most Collectors (aside from BloomFilter and ImmutableRange*, as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity))\n- Maps: asConverter, immutableEnumMap\n- MultimapBuilder\n- Streams: stream(Iterable), concat\n\nio\n- ByteStreams: copy, toByteArray\n- CharStreams: copy, toString\n- Files: as(Char|Byte)(Source|Sink)\n\nutil.concurrent\n- Futures: addCallback, getDone, getUnchecked, immediateCancelledFuture, immediateFailedFuture, immediateFuture\n- ListeningScheduledExecutorService\n- Uninterruptibles\n\nother\n- HtmlEscapers\n- Splitter.splitToList\n- Ticker\n\nFixes https://github.com/google/guava/pull/3287\nFixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*, but those whole classes are @Beta, anyway)\nAddresses the main concerns of https://github.com/google/guava/issues/3285 but doesn't cover the broader request\nFixes https://github.com/google/guava/issues/3340\nPartially addresses https://github.com/google/guava/issues/3239\n\nRELNOTES=Removed `@Beta` from a number of frequently used APIs.\n\n068cb9005cc701ed98e31df9b56117b86df21d0f\n\n-------\n\n<p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java's internal encoding.\n\ne7ec53773bcf89533496de1611ac4dddd876fb54\n\n-------\n\n<p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().\n\nRELNOTES=Remove `@CanIgnoreReturnValue` from `Ordering.sortedCopy()` and `immutableSortedCopy()`.\n\nda2895f5c3a55b84771488e0f8a38c67e0f63543\n\n-------\n\n<p> Make a constructor private.\n\n(I'm looking into EnumMap stuff for other reasons, and I got to wondering if this was used outside the file. Nope.)\n\nb1933ce7d8c8ff0fac90b494b33ab8af159e1906\n\n-------\n\n<p> Delete WellBehavedMap.\n\nThe bug it worked around was fixed in Java 7:\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706\n\nAnd I don't believe it was ever present under Android:\nhttps://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146\n\nI haven't looked for the absolute first version ever of GWT, but the still very old GWT file doesn't have the bug, either.\n\nDeleting this class will simplify some work I'm doing around our EnumMap usage for j2cl.\n\n2115c74c21ab47c3a41c2fb73a16aa6d051bf784\n\n-------\n\n<p> Internal GWT change\n\n1d49ade94c3e7d2c056893a630739c8a6b897f66\n\n-------\n\n<p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66\n\n*** Original change description ***\n\nInternal GWT change\n\n***\n\n46a2123f4b077840b4b466fe6344579ac4b52bad\n\n-------\n\n<p> Use J2ObjC's @RetainedWith annotation instead of @Weak on ImmutableMap.keySet\nto prevent crashes on iOS.\n\nTESTED=Created a map inside a autorelease pool and saved a reference to the\nkeyset. Checked that the keyset functions correctly outside the autorelease\npool. Checked that both the keyset and the map are deallocated by the\nautorelease pool when not holding a reference to the keyset. Did this test with\nboth ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).\n\nRELNOTES=J2ObjC: Fixes crashes from use of `ImmutableMap.keySet()`.\n\n76c954518752acb36256009840ed004eef412291\n\n-------\n\n<p> Annotate checkNotNull's input and output as @NonNull.\n\nWe don't want to go down the road of annotating most things @NonNull, as we eventually want to use tools that assume that that's the default. However, it's pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools, so let's annotate just that method and see how it goes.\n\nRELNOTES=Annotated `checkNotNull`'s input and output as `@NonNull`.\n\n63d0b31e62b4d4da33ec61a1d84d026391ffd126\n\n-------\n\n<p> Document the JDK 9+ alternative to `Maps#immutableEntry`\n\nFixes #3385\n\n998858f9abd06b3774bf72a3b4f2fdaa18a88ceb\n\n-------\n\n<p> Modernize book reference.\n\n7eafede7552490351956e8038bb07596b227e3ef\n\n-------\n\n<p> Create constants for the SourceMap header\n\nNone of the tests like this header name, so each required some workarounds.\n\nRELNOTES=Add the SourceMap header to HttpHeaders\n\n81f191e80265001b3dc8b4544cd0bb277a05ba7b\n\n-------\n\n<p> Internal GWT change\n\ndb6ada7b4f9db07b8de6ec549ca7e2ab6079b354\n\n-------\n\n<p> Use J2ObjC's @RetainedWith annotation instead of @Weak on ImmutableMap.values\nto prevent crashes on iOS.\n\nTESTED=Created a map inside an autorelease pool and saved a reference to the\nvalues collection. Checked that the values collection functions correctly\noutside the autorelease pool. Checked that both the values collection and the\nmap are deallocated by the autorelease pool when not holding a strong reference\nto the values collection. Did this test with ImmutableMap.of(<2 entries>) and\nImmutableMap.copyOf(<EnumMap with 2 entries>).\n\nRELNOTES=J2ObjC: Fixes crashes from use of `ImmutableMap.values()`.\n\n05ac56322f6c3a4b0109aab2b46671716f109cb5\n\n-------\n\n<p> Fix Javadoc breakage under JDK11 canary.\n\nhttps://bugs.openjdk.java.net/browse/JDK-8212233\nhttps://bugs.openjdk.java.net/browse/JDK-8193030\n\nd8bdef58d54712286d86a9146778d25614fd3c9a\n\n-------\n\n<p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.\n\nRELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.\n\nbe02df5ad4a530d5cb206a7042de8c2f5dbbff32", "NaN"], ["3398", "Fixed some links", "Lorenz Nickel", "LorenzNickel", "05/05/19, 06:02:36 PM", "Updated invalid links where I could find an alternative, removed others", "NaN"], ["3399", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/08/19, 07:25:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use J2ObjC's @RetainedWith annotation instead of @Weak on\nImmutableMap.entrySet() to prevent crashes on iOS.\n\nTESTED=Created a map inside an autorelease pool and saved a reference to the\nentry set. Checked that the entry set functions correctly outside the\nautorelease pool. Checked that both the entry set and the are deallocated by the\nautorelease pool when not holding a strong reference to the entry set. Did this\ntest with the following constructions to cover all entry set implementations:\n- ImmutableMap.of(<2 entries>)\n- ImmutableMap.copyOf(<EnumMap with 2 entries>)\n- ImmutableSortedMap.of(<2 entries>)\n- ImmutableBiMap.of(<2 entries>).inverse()\n\nRELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().\n\nc4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd", "NaN"], ["3404", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/20/19, 05:01:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Lazily allocate CompactHash backing arrays on first write\n\nEmpty maps/sets are extremely common. Lazily allocating the backing arrays can\nsave hundreds of KB of heap and reduce load on the garbage collector.\n\nWhile here:\n- Use serialized size to pre-size the arrays\n- Respect ordering during serialization (without using an iterator)\n- Consistently mark unused links as UNSET\n\nMemory savings before first write (bytes):\n- CompactHashMap.create(): 184 -> 64\n- CompactLinkedHashMap.create(): 240 -> 80\n- CompactHashSet.create(): 136 -> 40\n- CompactLinkedHashSet.create(): 200 -> 56\n- CompactHashMap.createWithExpectedSize(0): 136 -> 64\n- CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80\n- CompactHashSet.createWithExpectedSize(0): 96 -> 40\n- CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56\n\n801e018184d2f5196c80e2b2168a883c093ffe5a", "NaN"], ["3407", "Merge pull request #1 from google/master", "Ramesh Thangamani", "rthangam", "03/20/19, 05:01:18 PM", "Merge from latest version", "NaN"], ["3408", "Initialize uninterruptibles with current interrupt state of thread", null, "belugabehr", "01/06/20, 09:03:40 PM", "If a thread comes into Uninterruptibles already in an interrupted state, the first call to the target action will immediately fail with InterruptedException.  Initialize the 'interrupted' flag with the current state of the thread so that the first attempt can complete (assuming the thread is not interrupted again immediately after the initialization).", "NaN"], ["3410", "Guava - debeta and spring clean", "_Apenstaartje_", "ThomasKoreman", "05/24/19, 03:49:24 PM", "First of all this is my first project on Guava so I just did the simple part, removing @beta's and some deprecated methods that should've been removed earlier.\r\nIf there is anything incorrect to this PR please reply and feel free to give some feedback.\r\nThe de-``@beta`` stuff will close several issues already: #3403, #3360, #3253, (#3362 is also part of ``3360``).", "NaN"], ["3412", "Update checker-qual to 2.8.0, because it is now OSGi compatible", "Travis Haagen", "travishaagen", "05/20/19, 07:22:00 PM", "Update checker-qual to 2.8.0, because it is now OSGi compatible. Prior to this fix, an OSGi application that uses Guava would encounter OSGi compatibility failures.\r\n\r\nSee also https://github.com/typetools/checker-framework/pull/2281", "NaN"], ["3413", "Rejuvenate log levels", "Raffi Khatchadourian", "khatchad", "04/04/19, 06:28:30 PM", "## Introduction\r\n\r\nWe are in the process of evaluating our [research prototype Eclipse plug-in](https://github.com/ponder-lab/Logging-Level-Evolution-Plugin) that \"rejuvenates\" log statement levels based on how \"interesting\" the enclosing methods are to the developers. The assumption is that methods that are worked on more and more recently by developers should have higher log levels (e.g., INFO as compared to FINEST). Our end goal is to reduce information overload, as well as alleviate developers from manually making log level changes.\r\n\r\nThe transformation decision is made by analyzing the \"degree of interest\" (DOI) values of enclosing methods for logging invocations. DOI value is a kind of real number for a program element which shows how developers are interested in it. It is computed from the interaction events between developer and element, such as developer edits the element. In this project, we compute the DOI using the project's git history.\r\n\r\nWe are looking for feedback on our tool from developers. If you can, we would appreciate if you can **comment on each of the transformations** in the case that this PR is not accepted. Of course, we would also love to contribute to your project.\r\n\r\n## Transformed Logging Statements\r\n\r\nHere is a list of DOI values for enclosing methods of transformed log invocations in your projects:\r\n\r\nlog expression | original log level | transformed log level | type FQN | enclosing method | DOI value\r\n-- | -- | -- | -- | -- | --\r\nlogger.log(Level.FINE,\"Service   {0} has terminated. Previous state was: {1}\",new Object[]{service,from}) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceListener | terminated(com.google.common.util.concurrent.Service.State) | 0\r\nlogger.log(Level.FINE,\"Starting   {0}.\",service) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceListener | starting() | 0\r\nlogger.log(Level.FINE,\"Started {0}   in {1}.\",new Object[]{service,stopwatch}) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceManagerState | transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service.State,com.google.common.util.concurrent.Service.State) | 0\r\nlogger.fine(\" Testing: \" +   name) | FINE | FINEST | com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"Expanded: \" +   formatFeatureSet(features)) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.log(Level.INFO,\"message\",EXCEPTION) | INFO | FINEST | com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest | foo() | 0\r\nlogger.fine(\" Testing: \" +   name) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"\u00a0\u00a0 Sizes: \" +   formatFeatureSet(sizesToTest)) | FINE | FINEST | com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"Features: \" +   formatFeatureSet(features)) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.finer(Platform.format(\"%s:   excluding because it was explicitly suppressed.\",test)) | FINER | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | matches(junit.framework.Test) | 0\r\n\r\n\r\n\r\n##  Manual Change \r\nThis pull request contains one manual change where we changed (please see below) adjusted a test case to reflect our change. This is not part of the output of our tool but simply a necessary change to make the test pass.\r\n\r\n```diff\r\ndiff --git a/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java b/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\nindex 678f1ea4b..9ca57fab7 100644\r\n--- a/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\n+++ b/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\n@@ -56,7 +56,7 @@ public class TestLogHandlerTest extends TestCase {\r\n     assertTrue(handler.getStoredLogRecords().isEmpty());\r\n     ExampleClassUnderTest.foo();\r\n     LogRecord record = handler.getStoredLogRecords().get(0);\r\n-    assertEquals(Level.INFO, record.getLevel());\r\n+    assertEquals(Level.FINEST, record.getLevel());\r\n     assertEquals(\"message\", record.getMessage());\r\n     assertSame(EXCEPTION, record.getThrown());\r\n   }\r\n```\r\n\r\n## Bug Fix\r\n\r\nWe found a bug in the same test case where only log messages having level `INFO` or above are tested. Now, all levels are tested. This was also a manual fix.\r\n\r\n## Settings\r\n\r\nWe have several settings to analyze these DOI values. The settings we are using in this pull request are:\r\n- Treat  CONFIG/WARNING/SEVERE level as a category and not a traditional level, i.e., our tool ignores CONFIG/WARNING/SEVERE log level (setting 1).\r\n- Never lower the logging level of logging statements within catch blocks (setting 2).\r\n- The number of commits evaluated: 1000 (setting 3).\r\n\r\nHead: 74fc49f\r\n\r\nWe can vary these settings and rerun our if you desire.\r\n\r\n## DOI Intervals\r\n\r\nFor your information, we also generate a list of DOI value intervals. Given this list, our tool could rejuvenate log levels by knowing which intervals the DOI values of enclosing methods for log invocations are in:\r\n\r\nsubject | DOI boundary | log level\r\n-- | -- | --\r\nguava | [0.0, 0.8812485) | FINEST\r\nguava | [0.8812485, 1.762497) | FINER\r\nguava | [1.762497, 2.6437454) | FINE\r\nguava | [2.6437454, 3.524994) | INFO\r\nguava-gwt | [0.0, 0.30324998) | FINEST\r\nguava-gwt | [0.30324998, 0.60649997) | FINER\r\nguava-gwt | [0.60649997, 0.90975) | FINE\r\nguava-gwt | [0.90975, 1.2129999) | INFO\r\nguava-testlib | [0.0, 2.8239996) | FINEST\r\nguava-testlib | [2.8239996, 5.6479993) | FINER\r\nguava-testlib | [5.6479993, 8.471999) | FINE\r\nguava-testlib | [8.471999, 11.295999) | INFO\r\nguava-tests | [0.0, 1.4872494) | FINEST\r\nguava-tests | [1.4872494, 2.9744987) | FINER\r\nguava-tests | [2.9744987, 4.461748) | FINE\r\nguava-tests | [4.461748, 5.9489975) | INFO", "NaN"], ["3428", "Moe Sync", "Ron Shapiro", "ronshapiro", "03/29/19, 02:47:43 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.\n\n50eddd03e92dc2855a3ae05c3b8d93de18e6bddd\n\n-------\n\n<p> Adds constants for prefetch headers.\n\nOf note, X-Purpose is NOT just a google specific header as previously defined.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F\n\nhttps://developers.google.com/web/updates/2018/07/nostate-prefetch\n\nRELNOTES=Adds constants for prefetch headers.\n\n966879ff982425a4418341c9ccbe9a7249bb0a4d\n\n-------\n\n<p> Implement GraphBuilder.immutable().\n\nRELNOTES=`graph`: Added `GraphBuilder.immutable()` for building immutable graphs in a fluent way\n\n7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b\n\n-------\n\n<p> Add FluentFuture.from(FluentFuture) factory method.\n\nThis follows the steps of FluentIterable.from(FluentIterable) and other\n\u201cmigration aid\u201d methods that are deprecated from inception and are just here to\npoint out code that is no longer needed.\n\nRELNOTES=Added deprecated `FluentFuture.from(FluentFuture)` to point out redundant code.\n\n2d060028e9d99f798a29fd1ec09c844f4fc58a1d\n\n-------\n\n<p> Use byte[]/short[]/int[] for hashtable depending on size\n\nThe hashtable is stored as an Object and cast to the correct type using\ninstanceof checks.\n\nMemory:\nbyte[] sizes (2-89): 12-41% better (average: 32% better)\nshort[] sizes (90-22937): 20-29% better (average: 24% better)\nint[] sizes (22938+): unchanged\n\nRuntime on a Pixel 2:\ncreateAndPopulate: 9% better to 6% worse (average: 4.3% better)\nget: 1% better to 8% worse (average: 3.5% worse)\niterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse)\niterateWithEntrySet: unchanged (doesn't use hashtable)\n\nEffects on ImmutableMapProGuard:\n59105 bytes => 60369 bytes (+2.1%)\n21 classes => 21 classes (0%)\n200 methods => 201 methods (+0.5%)\n\nEffects on ImmutableBiMapProGuard:\n68893 bytes => 70235 bytes (+1.9%)\n25 classes => 25 classes (0%)\n232 methods => 233 methods (+0.4%)\n\nb1a11396bd731ddcd1efd60850b0aa004c9f874b\n\n-------\n\n<p> Add ValueGraphBuilder.immutable().\n\nRELNOTES=`graph`: Added `ValueGraphBuilder.immutable()` for building immutable value graphs in a fluent way\n\n79e0a573fc00db17f0916426ce2107d3bf63d481\n\n-------\n\n<p> Remove unnecessary Type parameter\n\n6f0b66d172a9532aaa82dac8a1add496c916ad97\n\n-------\n\n<p> Add NetworkBuilder.immutable().\n\nRELNOTES=`graph`: Added `NetworkBuilder.immutable()` for building immutable networks in a fluent way\n\na812af75ee14d8cb01a1a180b2c369c2f16311a3", "NaN"], ["3431", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/02/19, 02:07:05 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove unused configuration of load factor\n\nThis allows removal of loadFactor/threshold which saves 8 bytes per object.\n\nWhile here:\n- Reduce diff between Map/Set classes\n- Make base forEach() work for Linked classes\n\nShallow object size (bytes):\n- CompactHashMap: 64 -> 56\n- CompactLinkedHashMap: 80 -> 72\n- CompactHashSet: 40 -> 32\n- CompactLinkedHashSet: 56 -> 48\n\n062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7", "NaN"], ["3433", "DoubleUtils.bigToDouble replaced with BigInteger.doubleValue", "Pawe\u0142", "Klapsa2503", "11/01/19, 05:56:43 PM", "NaN", "NaN"], ["3434", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/05/19, 05:26:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix @param tag as per https://github.com/google/guava/pull/3431#pullrequestreview-221507095\n\ncc @jbduncan\n\nc691708b4c214b5caf9a92826cdfa07b19485f6e", "NaN"], ["3435", "Rejuvenate logging statement levels", "Raffi Khatchadourian", "khatchad", "04/05/19, 04:53:27 PM", "## Introduction\r\n\r\nWe are in the process of evaluating our [research prototype Eclipse plug-in](https://github.com/ponder-lab/Logging-Level-Evolution-Plugin) that \"rejuvenates\" log statement levels based on how \"interesting\" the enclosing methods are to the developers. The assumption is that methods that are worked on more and more recently by developers should have higher log levels (e.g., INFO as compared to FINEST). Our end goal is to reduce information overload, as well as alleviate developers from manually making log level changes.\r\n\r\nThe transformation decision is made by analyzing the \"degree of interest\" (DOI) values of enclosing methods for logging invocations. DOI value is a kind of real number for a program element which shows how developers are interested in it. It is computed from the interaction events between developer and element, such as developer edits the element. In this project, we compute the DOI using the project's git history.\r\n\r\nWe are looking for feedback on our tool from developers. If you can, we would appreciate if you can **comment on each of the transformations** in the case that this PR is not accepted. Of course, we would also love to contribute to your project.\r\n\r\n## Transformed Logging Statements\r\n\r\nHere is a list of DOI values for enclosing methods of transformed log invocations in your projects:\r\n\r\nlog expression | original log level | transformed log level | type FQN | enclosing method | DOI value\r\n-- | -- | -- | -- | -- | --\r\nlogger.log(Level.FINE,\"Service   {0} has terminated. Previous state was: {1}\",new Object[]{service,from}) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceListener | terminated(com.google.common.util.concurrent.Service.State) | 0\r\nlogger.log(Level.FINE,\"Starting   {0}.\",service) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceListener | starting() | 0\r\nlogger.log(Level.FINE,\"Started {0}   in {1}.\",new Object[]{service,stopwatch}) | FINE | FINEST | com.google.common.util.concurrent.ServiceManager$ServiceManagerState | transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service.State,com.google.common.util.concurrent.Service.State) | 0\r\nlogger.fine(\" Testing: \" +   name) | FINE | FINEST | com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"Expanded: \" +   formatFeatureSet(features)) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.log(Level.INFO,\"message\",EXCEPTION) | INFO | FINEST | com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest | foo() | 0\r\nlogger.fine(\" Testing: \" +   name) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"\u00a0\u00a0 Sizes: \" +   formatFeatureSet(sizesToTest)) | FINE | FINEST | com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder | createTestSuite() | 0\r\nlogger.fine(\"Features: \" +   formatFeatureSet(features)) | FINE | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | createTestSuite() | 0\r\nlogger.finer(Platform.format(\"%s:   excluding because it was explicitly suppressed.\",test)) | FINER | FINEST | com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder | matches(junit.framework.Test) | 0\r\n\r\n\r\n\r\n##  Manual Change \r\nThis pull request contains one manual change where we changed (please see below) adjusted a test case to reflect our change. This is not part of the output of our tool but simply a necessary change to make the test pass.\r\n\r\n```diff\r\ndiff --git a/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java b/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\nindex 678f1ea4b..9ca57fab7 100644\r\n--- a/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\n+++ b/guava-testlib/test/com/google/common/testing/TestLogHandlerTest.java\r\n@@ -56,7 +56,7 @@ public class TestLogHandlerTest extends TestCase {\r\n     assertTrue(handler.getStoredLogRecords().isEmpty());\r\n     ExampleClassUnderTest.foo();\r\n     LogRecord record = handler.getStoredLogRecords().get(0);\r\n-    assertEquals(Level.INFO, record.getLevel());\r\n+    assertEquals(Level.FINEST, record.getLevel());\r\n     assertEquals(\"message\", record.getMessage());\r\n     assertSame(EXCEPTION, record.getThrown());\r\n   }\r\n```\r\n\r\n## Bug Fix\r\n\r\nWe found a bug in the same test case where only log messages having level `INFO` or above are tested. Now, all levels are tested. This was also a manual fix.\r\n\r\n## Settings\r\n\r\nWe have several settings to analyze these DOI values. The settings we are using in this pull request are:\r\n- Treat  CONFIG/WARNING/SEVERE level as a category and not a traditional level, i.e., our tool ignores CONFIG/WARNING/SEVERE log level (setting 1).\r\n- Never lower the logging level of logging statements within catch blocks (setting 2).\r\n- The number of commits evaluated: 1000 (setting 3).\r\n\r\nHead: 74fc49f\r\n\r\nWe can vary these settings and rerun our if you desire.\r\n\r\n## DOI Intervals\r\n\r\nFor your information, we also generate a list of DOI value intervals. Given this list, our tool could rejuvenate log levels by knowing which intervals the DOI values of enclosing methods for log invocations are in:\r\n\r\nsubject | DOI boundary | log level\r\n-- | -- | --\r\nguava | [0.0, 0.8812485) | FINEST\r\nguava | [0.8812485, 1.762497) | FINER\r\nguava | [1.762497, 2.6437454) | FINE\r\nguava | [2.6437454, 3.524994) | INFO\r\nguava-gwt | [0.0, 0.30324998) | FINEST\r\nguava-gwt | [0.30324998, 0.60649997) | FINER\r\nguava-gwt | [0.60649997, 0.90975) | FINE\r\nguava-gwt | [0.90975, 1.2129999) | INFO\r\nguava-testlib | [0.0, 2.8239996) | FINEST\r\nguava-testlib | [2.8239996, 5.6479993) | FINER\r\nguava-testlib | [5.6479993, 8.471999) | FINE\r\nguava-testlib | [8.471999, 11.295999) | INFO\r\nguava-tests | [0.0, 1.4872494) | FINEST\r\nguava-tests | [1.4872494, 2.9744987) | FINER\r\nguava-tests | [2.9744987, 4.461748) | FINE\r\nguava-tests | [4.461748, 5.9489975) | INFO\r\n\r\n## Notes\r\n\r\nThis supersedes https://github.com/google/guava/pull/3413 to workaround CLA bot issue. ", "NaN"], ["3436", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/10/19, 02:45:42 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Bumped the FPP to prevent OOMs on JDK 11.\n\n8acb5b990f7fe0467dd318e262dd423b19b710b7", "NaN"], ["3438", "Use optimized for loop indexOf()", "Manu P.", "manu-p-1", "07/05/19, 01:58:21 AM", "Added length locally to loop. Ultimately depends on compiler optimization.", "NaN"], ["3439", "Upgrade error_prone", "Elliotte Rusty Harold", "elharo", "04/12/19, 04:18:51 PM", "to sync with the version protobuf is now using", "NaN"], ["3440", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/10/19, 05:48:13 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add websocket headers to HTTP header listings.\n\nThis adds five headers, as defined in RFC 6455: Sec-WebSocket-Accept,\nSec-WebSocket-Extensions, Sec-WebSocket-Key, Sec-WebSocket-Protocol, and\nSec-WebSocket-Versions.\n\nThis also changes the C++ per-header unit test so that it can recognize the\nalternate capitalization of WebSocket, instead of adding five special cases. The\nGo and Java versions use the \"Websocket\" capitalization instead.\n\n78fe31027ec67c0648667582e40d49351757cfe9", "NaN"], ["3441", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/12/19, 04:18:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update GraphBuilder documentation with option of building an immutable graph\n\n9b01341e204457911174d5b3fbb0222b543ba0e6\n\n-------\n\n<p> Simplify graph.PackageSanityTests by applying the new immutable graph builder.\n\nc6c6c7323a16371dbbc65f5e31862bab3e38206c\n\n-------\n\n<p> Upgrade error_prone\n\nFixes #3439\n\n0e928fc2b8ed23d2cca05c6cee40d95e495bc87c", "NaN"], ["3445", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/16/19, 09:58:53 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove obsolete parent per https://github.com/sonatype/oss-parents\nand Fixes https://github.com/google/guava/issues/2756\n\n0bc019e4540f2ea126efa99b0f3c07c13e7e834f", "NaN"], ["3447", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/29/19, 03:41:43 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Override a method instead of special-casing it.\n\nf6bd487900b1cfd0ef263e280cbad1f5234a45c3\n\n-------\n\n<p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making \"half and half\" expectations about un-duplicated inputs in ImmutableSet creation.\n\nRELNOTES=Mitigate https://github.com/google/guava/issues/3223.\n\n506432bc2f46a450a062fdeb993e149e1947f7fa", "NaN"], ["3448", "Add java.util.UUID to ArbitraryInstances", null, "petedmarsh", "05/08/19, 02:35:08 PM", "I hope this counts as a trivial change. This adds `java.util.UUID` to `ArbitratyInstances` - I have recently been working on a project where we used `UUID` and `NullPointerTester` and we've often had to set a default manually, this should avoid that.", "NaN"], ["3449", "Moe Sync", "Ron Shapiro", "ronshapiro", "04/29/19, 03:41:56 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Override a method instead of special-casing it.\n\n75e7b296f6530a9f58b501822457fc3be03e7948\n\n-------\n\n<p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making \"half and half\" expectations about un-duplicated inputs in ImmutableSet creation.\n\nRELNOTES=Mitigate https://github.com/google/guava/issues/3223.\n\nf1aa0f6194814b9b8821e5438216098c850a2ed9\n\n-------\n\n<p> Update ValueGraphBuilder documentation with option of building an immutable graph.\n\n5879ed3133f4154ccca013941166be8c61f1ed97\n\n-------\n\n<p> Update NetworkBuilder documentation with option of building an immutable graph.\n\ncdb288c576ff3c1e71e0315cde03cc68e4af33f3\n\n-------\n\n<p> Enable GoodTime-API\n\nb34102f9b9ea11187de8f9961d02ab4d7e603fae\n\n-------\n\n<p> Fix misspelled Sec-WebSocket-Version header.\n\nThe correct name is Sec-WebSocket-Version, not Sec-WebSocket-Versions.\n\n86ffa6e267b88db547b7aab9587d3e8a19081bf0\n\n-------\n\n<p> Match the casing of the WebSocket HTTP headers to the RFC directly.\n\nRELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.\n\n517b59607597d659fb54bc6c71e33e974c41c494\n\n-------\n\n<p> Update Public Suffix data.\n\n646d0e06333a3b64b101fdbe0ef93fa948b62c49\n\n-------\n\n<p> Remove outdated references to the \"next release of Guava\".\n\nf2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237\n\n-------\n\n<p> Update to Truth 0.44.\n\nb61237ca571489a0a0ac738f707a4a0359c59e86\n\n-------\n\n<p> Migrate from isNotSameAs to isNotSameInstanceAs.\n\nThe two behave identically, and isNotSameAs is being removed.\n\n8c4225f652e289025040f2454fefeaa90671310f", "NaN"], ["3453", "Add testlib readme", "Elliotte Rusty Harold", "elharo", "10/02/19, 05:48:45 PM", "NaN", "NaN"], ["3454", "Upgrade maven compiler plugin", "William Collishaw", "WilliamCollishaw", "05/08/19, 02:35:08 PM", "Package upgraded from 3.8.0 to [3.8.1](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12343484)", "NaN"], ["3455", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/05/19, 06:02:36 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fixed some links.\n\nThe comparisons to the Android Hash* classes haven't been accurate since at least CL 81367572, so I've removed them entirely.\n\nFixes #3398\n\n1dc514b56a0fa213baa242acf9e58163638abef8\n\n-------\n\n<p> Migrate from assertThat(foo).named(\"foo\") to assertWithMessage(\"foo\").that(foo).\n\n(The exact change is slightly different in some cases, like when using custom subjects or check(), but it's always a migration from named(...) to [assert]WithMessage(...).)\n\nnamed(...) is being removed.\n\nThis CL may slightly modify the failure messages produced, but all the old information will still be present.\n\ne70a2f9e53583c1c508a0f7b16bdcad8c3f2f740\n\n-------\n\n<p> Migrate from is(Not)SameAs to is(Not)SameInstanceAs.\n\nThey behave identically, and the old names are being removed.\n\nOpen-source note: The new methods are available in Truth as of version 0.44.\n\nc19256717b493127a355fabf1eeb827fd0c64973\n\n-------\n\n<p> A few more doc tweaks, caught by @jbduncan in f2591b5c2a\n\n414084c20aeb4b74fb85eab5cf0a787d76234939\n\n-------\n\n<p> Remove CheckedFuture from Guava.\n\nRELNOTES=Removed deprecated `CheckedFuture` and related utilities.\n\ncae1b9190e4bad3b6c01afbb08d9b0a366813c99\n\n-------\n\n<p> Migrate from assertThat(foo).named(\"foo\") to assertWithMessage(\"foo\").that(foo).\n\n(The exact change is slightly different in some cases, like when using custom subjects or check(), but it's always a migration from named(...) to [assert]WithMessage(...).)\n\nnamed(...) is being removed.\n\nThis CL may slightly modify the failure messages produced, but all the old information will still be present.\n\n1f5c4780e522c32f9412e29cd2880124c81275e7", "NaN"], ["3456", "Upgrade maven dependency plugin - security upgrade", "William Collishaw", "WilliamCollishaw", "05/07/19, 03:02:57 PM", "Maven dependency plugin has a dependency on plexus-archiver.\r\nPlexus-archiver is vulnerable to the Zip Slip vulnerability ([CVE-2018-1002200](https://www.cvedetails.com/cve/CVE-2018-1002200/)) in versions prior to 3.4.1 & 3.6.0 ([reference](https://maven.apache.org/security-plexus-archiver.html)).\r\nMaven-dependency-plugin version [3.1.1](https://blogs.apache.org/maven/entry/apache-maven-dependency-plugin-version1) upgrades to plexus-archiver [3.6.0](https://github.com/codehaus-plexus/plexus-archiver/blob/master/ReleaseNotes.md#plexus-archiver-360)\r\nVersions bypassed:\r\n- [3.0.0](https://blog.soebes.de/blog/2016/12/16/apache-maven-dependency-plugin-version-3-dot-0-0-released/)\r\n- [3.0.1](https://blog.soebes.de/blog/2017/05/16/apache-maven-dependency-plugin-version-3-dot-0-1-released/)\r\n- [3.0.2](https://blog.soebes.de/blog/2017/09/19/apache-maven-dependency-plugin-version-3-dot-0-2-released/)\r\n- [3.1.0](https://blogs.apache.org/maven/entry/apache-maven-dependency-plugin-version)\r", "NaN"], ["3459", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/07/19, 03:02:57 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Upgrade maven dependency plugin.\n\nFixes https://github.com/google/guava/pull/3456\n\n2ef701fbfdd81587cf7f45856140c1b5071dc595", "NaN"], ["3463", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/08/19, 02:35:09 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add app.link to the Public Suffix List.\n\nThis is a temporary solution to stop app.link affiliated websites being grouped together in the Password Manager UI. We will reach out to the owners of app.link and work with them to update the public version of the PSL.\n\n8268487ae35ede205c770797baa4b11b171e6025\n\n-------\n\n<p> Add java.util.UUID to ArbitraryInstances\n\nFixes #3448\n\nad3d9adf8c846f4853be966dda779f05d4e4060c\n\n-------\n\n<p> Upgrade compiler plugin.\n\nFixes https://github.com/google/guava/pull/3454.\n\n7092295b535033b4b00786f9bc4c0708cf3e5165\n\n-------\n\n<p> Update versions of some Guava dependencies.\n\nFixes https://github.com/google/guava/issues/3405\n\ned830d31f824eb34df6898bbeb4de5b649300164", "NaN"], ["3465", "Define project build source encoding as UTF-8", "William Collishaw", "WilliamCollishaw", "05/28/19, 02:48:48 PM", "At build time the following warning appears:\r\n`[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!\r\n`\r\n\r\nDefining a project build source encoding removes the warning and can prevent platform dependent issues in the future.\r\n\r\nFix summary by maven [here](http://maven.apache.org/general.html#encoding-warning) and [here](https://maven.apache.org/plugins/maven-resources-plugin/examples/encoding.html)", "NaN"], ["3466", "Upgrade maven source plugin from 2.1.2 to 3.1.0", "William Collishaw", "WilliamCollishaw", "10/02/19, 09:34:36 PM", "~~Upgrade maven source plugin from 2.1.2 to [3.0.1](https://blog.soebes.de/blog/2016/06/23/apache-maven-source-plugin-version-3-dot-0-1-release/) \r\nDefine the version as a maven variable due to the version being referenced more than once\r\n3.0.1 is the latest version and has been available since June, 2016 so appears very stable.~~\r\n**EDIT**:\r\nUpgrade maven source plugin from 2.1.2 to [3.1.0](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317924&version=12336941) \r\nAfter three years with no change, 3.1.0 was release with minor changes.\r\n\r\nVersions bypassed:\r\n- [3.0.1](https://blog.soebes.de/blog/2016/06/23/apache-maven-source-plugin-version-3-dot-0-1-release/) \r\n- [3.0.0](https://blog.soebes.de/blog/2016/02/17/apache-maven-source-plugin-version-3-dot-0-0-released/)\r\n- [2.4](https://blog.soebes.de/blog/2014/10/11/apache-maven-source-plugin-version-2-dot-4-released/)\r\n- [2.3](https://blog.soebes.de/blog/2014/07/11/apache-maven-source-plugin-version-2-dot-3-released/)\r\n- 2.2.1 (unable to find release notes)\r\n- 2.2  (unable to find release notes)\r\n\r", "NaN"], ["3471", "Fix \"Apache License, Version 2.0\" spelling", "Vincent Privat", "don-vip", "05/28/19, 02:48:48 PM", "There are many Java libraries licensed under \"Apache License, Version 2.0\" that do not use its official spelling.\r\nThis causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling, it's difficult in large projects to have a clear view of all licenses in use.\r\nThis PR changes the license spelling to the official one, as advised by Maven developers.", "NaN"], ["3472", "change keyToKeyList from HashMap to LinkedHashMap", "hao", "aikawarazu", "10/02/19, 07:31:08 PM", "in  constructor method ,keyToKeyList was set as HashMap ,keyToKeyList should keep insertion-order   .\r\nlike in readObject()  method do : keyToKeyList = Maps.newLinkedHashMap();", "NaN"], ["3474", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/15/19, 05:04:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).\n\n#goodtime\n\nRELNOTES=Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).\n\ndcb5d431e288374666b70214de836ee09053b425\n\n-------\n\n<p> Add Queues.drain(BlockingQueue, Collection, int, Duration) and drainUninterruptibly(BlockingQueue, Collection, int, Duration).\n\nRELNOTES=add Duration-based Queues drain methods.\n\n5963112d7548abb44f5502d0bec1edda91d530fc\n\n-------\n\n<p> Add a new header field \"CDN-Loop\" to httputils.\n\nMore details: https://tools.ietf.org/html/rfc8586\n\nRELNOTES=Add CDN-Loop header to library according to RFC8586.\n\nd9f85b46fd5d85c3f4db91fd1d7387f6befa90ae\n\n-------\n\n<p> Remove app.link from the Public Suffix List.\n\n8fa55701cc99c3016e9bda5b2807921c0e8b39cd", "NaN"], ["3475", "Merge pull request #1 from google/master", "runzhigege", "runzhigege", "05/20/19, 05:55:12 PM", "\u66f4\u65b0", "NaN"], ["3476", "Upgrade Maven Javadoc Plugin to 3.1.0", "William Collishaw", "WilliamCollishaw", "05/21/19, 05:46:36 AM", "Upgrade Maven Javadoc Plugin from 3.0.1 to [3.1.0](https://blog.soebes.de/blog/2019/03/04/apache-maven-javadoc-plugin-version-3-dot-1.0-released/)\r\nAdditionally added wildcard syntax to the list of excluded package names due to failing without it after the upgrade\r\n\r\nComment from @njhill in PR #3370 notes a javadoc plugin issue with JDK 11 that should be resolved in this most recent version.", "NaN"], ["3478", "Upgrade Maven Javadoc Plugin from 3.0.1 to 3.1.0", "William Collishaw", "WilliamCollishaw", "05/28/19, 02:48:48 PM", "Recreated PR from #3476\r\nUpgrade Maven Javadoc Plugin from 3.0.1 to 3.1.0\r\nAdditionally added wildcard syntax to the list of excluded package names due to failing without it after the upgrade\r\n\r\nComment from @njhill in PR #3370 notes a javadoc plugin issue with JDK 11 that should be resolved in this most recent version.\r\n\r\nThe functionality as described in the excludePackageNames [documentation](https://maven.apache.org/plugins/maven-javadoc-plugin/examples/exclude-package-names.html)  does not work as explained which did previously work in 3.0.1. I raised [MJAVADOC-605](https://issues.apache.org/jira/browse/MJAVADOC-605), which duplicated [MJAVADOC-584](https://issues.apache.org/jira/browse/MJAVADOC-584) explaining the issue and have included a work around for the issue which significantly increased the size of the excludePackageNames list.", "NaN"], ["3481", "Fix javadoc links in the Graph package.", "William Collishaw", "WilliamCollishaw", "05/28/19, 02:48:48 PM", "The following warning was observed when building with JDK 8:\r\n```\r\nINFO] --- maven-javadoc-plugin:3.0.1:jar (attach-docs) @ guava ---\r\n[INFO] \r\n4 warnings\r\n[WARNING] Javadoc Warnings\r\n[WARNING] ~/Documents/GitHub/guava/guava/src/com/google/common/graph/GraphBuilder.java:101: warning - Tag @link: can't find Builder in com.google.common.graph.ImmutableGraph\r\n[WARNING] ~/Documents/GitHub/guava/guava/src/com/google/common/graph/NetworkBuilder.java:113: warning - Tag @link: can't find Builder in com.google.common.graph.ImmutableNetwork\r\n[WARNING] ~/Documents/GitHub/guava/guava/src/com/google/common/graph/ValueGraphBuilder.java:107: warning - Tag @link: can't find Builder in com.google.common.graph.ImmutableValueGraph\r\n[WARNING] ~/Documents/GitHub/guava/guava/src/com/google/common/collect/ImmutableTable.java:225: warning - Tag @link: can't find Builder() in com.google.common.collect.ImmutableTable.Builder\r\n```\r\n\r\nDid not edit the ImmutableTable link due to it being fully functional in JDK 11 and it was previously discussed in #2908\r\n\r\nThe resolved links were not functional in either JDK 8 or 11 prior to this fix.", "NaN"], ["3482", "RFC1123 Compliant InternetDomainName Test Cases", "William Collishaw", "WilliamCollishaw", "06/03/19, 03:25:52 PM", "RFC1123 compliant InternetDomainName test cases\r\n\r\nAdd tests to prove URLs with leading digits are valid and containing only digits are valid.\r\n#1872 was resolved at some point from 2014 to now without the issue getting closed. This PR adds test cases proving this issue can be closed. \r\n\r\nSome sample real domains from related to these tests would be [www.9gag.com](https://www.9gag.com/) and [www.9292.nl](https://www.9292.nl/)", "NaN"], ["3483", "Replace maven prerequisites with the enforcer plugin", "William Collishaw", "WilliamCollishaw", "06/03/19, 03:25:53 PM", "As of [Maven version 3.5](https://maven.apache.org/docs/3.5.0/release-notes.html) the prerequisites tag was deprecated.\r\n\r\nAdds minimum required maven and java version into the parent poms which gets inherited by all children. The deprecated prerequisites tag does not get inherited by children ([reference](https://maven.apache.org/enforcer/maven-enforcer-plugin/faq.html))\r\n\r\nAdditionally bump the minimum maven version requirement from 3.0.3 to [3.0.5](https://maven.apache.org/docs/3.5.0/release-notes.html) to prevent the [vulnerable](https://www.cvedetails.com/cve/CVE-2013-0253/) version 3.0.4 ever being used.\r\n\r\nSample error messages when invalid versions are used:\r\n- Using Java 8 when minimum requirement of Java 11+ is defined:\r\n```\r\n[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-versions) @ guava-parent ---\r\n[WARNING] Rule 1: org.apache.maven.plugins.enforcer.RequireJavaVersion failed with message:\r\nDetected JDK Version: 1.8.0-212 is not in the allowed range 1.11.0.\r\n```\r\n- Using Maven 3.3.9 when minimum requirement of Maven 3.6+ is defined:\r\n```\r\n[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-versions) @ guava-parent ---\r\n[WARNING] Rule 0: org.apache.maven.plugins.enforcer.RequireMavenVersion failed with message:\r\nDetected Maven Version: 3.3.9 is not in the allowed range 3.6.\r\n```\r\nIn both cases the build will fail.\r\n\r\nUpdate specific Java version can be specified, for example the following would require Java 8 update 211:\r\n`<version>1.8.0-211</version>`", "NaN"], ["3484", "Update documentation to refer correct method name.", null, "AnuragPorwal", "05/28/19, 11:00:54 PM", "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-", "NaN"], ["3485", "Clarify behavior of `ImmutableList#copyOf` for null argument.", null, "AnuragPorwal", "06/06/19, 03:06:20 PM", "NaN", "NaN"], ["3486", "Moe Sync", "Ron Shapiro", "ronshapiro", "05/28/19, 02:48:49 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add a link back to the goodtime rate bug.\n\n5750fb6c05d0f8b32060f56b0a94a12a52c89260\n\n-------\n\n<p> Copy Durations.saturatedToNanos(Duration) to package-private c.g.c.u.c.Internal so it can be used by the concurrent package (and in Guava).\n\n#goodtime\n\n568cbb67101fdb56436e75467a23de8d027b1089\n\n-------\n\n<p> Tighten the GoodTime suppression locations in RateLimiter.\n\n#goodtime\n\n0df55a98cf54e2c3ccf1c1180ad4a20419d69a55\n\n-------\n\n<p> Add Duration-based overloads to Uninterruptibles.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to Uninterruptibles.\n\ne194e7578e5e8fea2edddd5a9544ebdeac961141\n\n-------\n\n<p> Always complete TimeoutFuture, even if toString() throws\n\n6c09c1732c040050752b5a087a1070ebf899ae9f\n\n-------\n\n<p> Add Duration-based overloads to MoreExecutors.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to MoreExecutors.\n\ne2da132822d1e62d000564e51816c789dc823998\n\n-------\n\n<p> Add Duration-based overloads to FluentFuture.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to FluentFuture.\n\n7f5390dcb99c6930facb2a91cca056a25b8581a4\n\n-------\n\n<p> Add Duration-based overloads to Futures.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to Futures.\n\n070e07da83e8320f2c368709cb773f08a383797f\n\n-------\n\n<p> Add Duration-based overloads to AbstractScheduledService.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to AbstractScheduledService.\n\ne7a7a1f0c4962231d73f72d101deeaa2c2b0144c\n\n-------\n\n<p> Add Duration-based overloads to Service.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to Service.\n\n76718f4617a2d4daea00a578f808cae59c5cdc59\n\n-------\n\n<p> Add Duration-based overloads to ServiceManager.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to ServiceManager.\n\n6c6edfa0b24148d5665a8e31a1811df7045b9460\n\n-------\n\n<p> Remove CheckedFuture utilities from util.concurrent.Futures.\n\nd3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b\n\n-------\n\n<p> Add Duration-based overloads to RateLimiter.\n\n#goodtime\n\nRELNOTES=Add Duration-based overloads to RateLimiter.\n\n7aee4f5c283e501c854ae06aaa201fc5328ebe4f\n\n-------\n\n<p> Add Duration-based overload to Monitor.\n\n#goodtime\n\nRELNOTES=Add Duration-based overload to Monitor.\n\nac540c41979ade6931d9d604eff1e6223e247a9a\n\n-------\n\n<p> Define project build source encoding as UTF-8\n\nCloses https://github.com/google/guava/pull/3465\n\n196dd9edd4a8d7caa2f5f073268fab759d91b3e2\n\n-------\n\n<p> Fix \"Apache License, Version 2.0\" spelling\n\nThere are many Java libraries licensed under \"Apache License, Version 2.0\" that do not use its official spelling.\nThis causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling, it's difficult in large projects to have a clear view of all licenses in use.\nThis PR changes the license spelling to the official one, as advised by Maven developers.\n\nCloses https://github.com/google/guava/pull/3471\n\neb8695c81d20d83871ddd105954bd5ac3528de71\n\n-------\n\n<p> Fix Streams.zip documentation typo.\n\n8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65\n\n-------\n\n<p> Add MediaType for \"application/geo+json\".\n\nvia https://github.com/google/guava/pull/3243\n\nRELNOTES=Add MediaType for \"application/geo+json\".\n\nb47e9ba4e2efa318a0cc44cd9acdb1c215d41c42\n\n-------\n\n<p> Upgrade maven-javadoc-plugin to 3.1.0.\n\nFixes https://github.com/google/guava/pull/3478.\n\n34b7a1eff5091a14ed3a325a5966c9c43b219754\n\n-------\n\n<p> Add Cross-Origin-Resource-Policy header name constants.\n\nDetails https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header\n\nRELNOTES=Add Cross-Origin-Resource-Policy header to library.\n\n161241d58e93dfdba5a9021d2ee8dc64e3cd3937\n\n-------\n\n<p> Fix Javadoc links.\n\nFixes https://github.com/google/guava/pull/3481\n\n86be2d13b5677207cbc49bfb4431142b119647e6\n\n-------\n\n<p> Update documentation to refer correct method name.\n\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-\n\nRELNOTES=N/A\n\na6f7253500de9a6a88c56e94858759c437dee20b", "NaN"], ["3487", "Fix Javadoc.", null, "AnuragPorwal", "06/03/19, 03:25:53 PM", "NaN", "NaN"], ["3489", "MapMakerInternalMap - Remove redundant if statement", "William Collishaw", "WilliamCollishaw", "06/03/19, 03:25:53 PM", "Null check is redundant", "NaN"], ["3490", "Upgrade maven-gpg-plugin to 1.6", "William Collishaw", "WilliamCollishaw", "06/06/19, 03:10:13 PM", "Latest maven-gpg-plugin version has been at 1.6 since [2015](https://blog.soebes.de/blog/2015/01/20/apache-maven-gpg-plugin-version-1-dot-6-released/). Bumping up to this latest version from version 1.1, released in 2010.\r\nVersions bypassed:\r\n\r\n- [1.5](http://mail-archives.apache.org/mod_mbox/maven-announce/201402.mbox/%3CCA+nPnMxvcd8wEJOeVP5DTS4HHCrC-0V4Kyk1Dv0QAuacGuzRBg@mail.gmail.com%3E)\r\n- 1.4 (unable to find release notes)\r\n- 1.3 (unable to find release notes)\r\n- 1.2 (unable to find release notes)", "NaN"], ["3492", "LocalCache clean up", "William Collishaw", "WilliamCollishaw", "06/06/19, 03:22:06 PM", "Remove two redundant if statements\r\nRemoved some unused imports\r\nComment grammar fixes", "NaN"], ["3495", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/06/19, 03:06:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove `@Beta` from `setFuture`.\n\nRELNOTES=Removed `@Beta` from `setFuture`.\n\n2c717c0092ad5abbbe6a34d426e084623c651354\n\n-------\n\n<p> Upgrade maven-gpg-plugin to 1.6\n\nFixes github.com/google/guava/pull/3490\n\nc10a1647ffa968a96273d0961a6f9e0181a4fe70\n\n-------\n\n<p> Clarify behavior of `ImmutableList#copyOf` for null argument.\n\nFixes #3485\n\n6f655fb940809499719ba7679a425961e39a8feb\n\n-------\n\n<p> Make the incidentEdges() documentation a little bit more clear.\n\nb0a05097900ab2decf17681d3dcd9154f225d91f\n\n-------\n\n<p> Simplify implementation of Graphs.reachableNodes()\n\nb917492c31401a2e6092c8f3f6bc60040c1dcebe\n\n-------\n\n<p> Make the adjacentNodes() documentation a little bit more clear.\n\n7a5a43b66a4f0a22077918404fa95a165ede2811\n\n-------\n\n<p> Delete deprecated callWithTimeout().\n\nfa13235f2c8edff9cd6c434f8a164250decf0249", "NaN"], ["3497", "Upgrade animal sniffer version to 1.18", "William Collishaw", "WilliamCollishaw", "06/30/19, 02:58:50 PM", "Version [1.18](https://github.com/mojohaus/animal-sniffer/milestone/5?closed=1) resolves a JDK8 compatibility issue, resource leak and ends support for JDK 7", "NaN"], ["3498", "Remove single character string concatenation - EventBus", "William Collishaw", "WilliamCollishaw", "06/10/19, 03:43:19 PM", "Minor performance improvement. \r\n[Stack Overflow discussion on this optimization](https://stackoverflow.com/questions/24859500/concatenate-char-literal-x-vs-single-char-string-literal-x)", "NaN"], ["3499", "Fix typo in 'testFindClassesToTest_ignoreUnderscores' function name", "William Collishaw", "WilliamCollishaw", "06/10/19, 02:24:54 PM", "NaN", "NaN"], ["3500", "Fix typo in 'stoppingCount' variable name", "William Collishaw", "WilliamCollishaw", "06/30/19, 02:58:50 PM", "NaN", "NaN"], ["3505", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/20/19, 01:30:26 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\n6123f09d9a4892852c566bdd8631b34471f50121\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\n9122cefee6b5e4d74e55045c69396d8489ec8859\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\ne86764ed2c5831e91a746b1c48b900e0d5d09c3c\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\n3e3c1f93c579c1d3ef03820da4f786ce3385d0ce\n\n-------\n\n<p> Document default values of builder setters.\n\n46a7e558772ddd039317ed76f89da21db67f7205\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\n3b0729d5d4c25ea705ac4ec9660bc7cb993888b6", "NaN"], ["3507", "Update Javadoc of UnsignedBytes.java", "Kartikeya Goswami", "gokaco", "10/31/19, 08:40:18 PM", "UnsignedBytes ```min()``` and ```max()``` method treat its parameter as unsigned and returns the least and greatest value also too as unsigned respectively. It should be updated in the Javadoc.\r\n\r\nTest Case:-\r\n\r\nInput:-\r\n```\r\nimport com.google.common.primitives.UnsignedBytes;\r\n\r\nclass ex{\r\n    static void pr(byte []a) {\r\n        System.out.println(UnsignedBytes.min(a)); // 10 is less than -100 when treated as unsigned\r\n        System.out.println(UnsignedBytes.max(a)); // -100 is greater than 10 when treated as unsigned\r\n    }\r\n    public static void main(String[] args) {\r\n        byte []a={-100,10};\r\n        pr(a);\r\n    }\r\n}\r\n```\r\nRun it by typing in the terminal:-\r\n```\r\njavac ex.java\r\njava ex\r\n```\r\nOutput:-\r\n```\r\n10\r\n-100\r\n```", "NaN"], ["3510", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/25/19, 08:28:22 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\n4d0d51ab450690e39a9c44286c824c5c849cf819\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\nc7bf11a9175a3f22a11f178af510897d5ce8cc8a\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\n546d0848c45b3b5f1b31f586171fe3109961a7c8\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\n96a8801a2a115dbd548cab486e8889f09e44c3fc\n\n-------\n\n<p> Document default values of builder setters.\n\n6c5c57435fa65d1c28ec305e66929eac7a90a493\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\n8622cd883c103c0aa5feacdf892cf1dd2b15a387\n\n-------\n\n<p> Tweaks to the list of Guava features.\n\n679330915ab397ba70fe2f9b544440078fb230be", "NaN"], ["3513", "Update .travis.yml", null, "ghatwala", "10/05/20, 04:09:44 PM", "updating power support.", "NaN"], ["3515", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/28/19, 10:33:59 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\na0a7f8cc72962f93c9690211d0ab4dc76e12861a\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\ne8e771a312fef1a2ff5c5fd869a7c5c11e9a589f\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\n93f55d341da144d8193d096ea62e61782c5f753b\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\na6be15b89743383e2bd96bfabd4301521c54ec34\n\n-------\n\n<p> Document default values of builder setters.\n\nf1fa6fa51e30cd8df46817ebc650911cecf4aee5\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nf70d866882a2c7f41b57d3e776327c20c86be0cb\n\n-------\n\n<p> Tweaks to the list of Guava features.\n\n02621addd7e9509832e90695f1f67ffdcf40b8c1\n\n-------\n\n<p> Add more @Nullables to variadic parameter lists.\n\nRELNOTES=Add more @Nullables to variadic parameter lists.\n\nebe07deba52e87aacc7854aaf6acf68adac72fb9\n\n-------\n\n<p> Halve memory consumption when creating a Bloom filter.\n\nAtomicLongArray(long[]) clones its input, which is a waste when we're passing\nin a new array.\n\nRELNOTES=Halve VmPeak when creating a Bloom filter.\n\nf35a0c3de7623c083ea650549125b6f7525fe62e\n\n-------\n\n<p> Use LongMath.saturatedAdd/Subtract in CacheStats.\n\nFixes https://github.com/google/guava/issues/3503\n\nRELNOTES=avoid overflows/underflows in CacheStats\n\n0a0f357f0d240db0d8ac49faffe794cb35f7376d", "NaN"], ["3516", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/28/19, 03:26:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\n3ed8d5a4304cf6b542a32aabecec669ae1b32a06\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\n8b5ac449c9f556dbd8dc8dec3c7312d866365108\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\n58b5d821d7cc7e1a73a5d67b6482d64d9046616b\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\n2ce707f56a785b1d47b2f710c32c2c91f68a8dd5\n\n-------\n\n<p> Document default values of builder setters.\n\n4aa8139d74d79424155225f0cb85ceb05d7357ab\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\n4c8d1a993d991ec3fab18164c63befe4f63f5268\n\n-------\n\n<p> Tweaks to the list of Guava features.\n\n8245e948a6f290d1070bd031ca557f643bae2070\n\n-------\n\n<p> Add more @Nullables to variadic parameter lists.\n\nRELNOTES=Add more @Nullables to variadic parameter lists.\n\n6478f3157f733d18bd4caea4eea663541a050649\n\n-------\n\n<p> Halve memory consumption when creating a Bloom filter.\n\nAtomicLongArray(long[]) clones its input, which is a waste when we're passing\nin a new array.\n\nRELNOTES=Halve VmPeak when creating a Bloom filter.\n\n3e65237e957ecd0455a5ff8c00c1a78ee2b5b6f1\n\n-------\n\n<p> Use LongMath.saturatedAdd/Subtract in CacheStats.\n\nFixes https://github.com/google/guava/issues/3503\n\nRELNOTES=avoid overflows/underflows in CacheStats\n\nde789288fe3ae2698d317d351ee2caf00db19a05", "NaN"], ["3518", "DO NOT SUBMIT: trying to fix travis", "Ron Shapiro", "ronshapiro", "06/28/19, 03:27:03 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\n3ed8d5a4304cf6b542a32aabecec669ae1b32a06\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\n8b5ac449c9f556dbd8dc8dec3c7312d866365108\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\n58b5d821d7cc7e1a73a5d67b6482d64d9046616b\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\n2ce707f56a785b1d47b2f710c32c2c91f68a8dd5\n\n-------\n\n<p> Document default values of builder setters.\n\n4aa8139d74d79424155225f0cb85ceb05d7357ab\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\n4c8d1a993d991ec3fab18164c63befe4f63f5268\n\n-------\n\n<p> Tweaks to the list of Guava features.\n\n8245e948a6f290d1070bd031ca557f643bae2070\n\n-------\n\n<p> Add more @Nullables to variadic parameter lists.\n\nRELNOTES=Add more @Nullables to variadic parameter lists.\n\n6478f3157f733d18bd4caea4eea663541a050649\n\n-------\n\n<p> Halve memory consumption when creating a Bloom filter.\n\nAtomicLongArray(long[]) clones its input, which is a waste when we're passing\nin a new array.\n\nRELNOTES=Halve VmPeak when creating a Bloom filter.\n\n3e65237e957ecd0455a5ff8c00c1a78ee2b5b6f1\n\n-------\n\n<p> Use LongMath.saturatedAdd/Subtract in CacheStats.\n\nFixes https://github.com/google/guava/issues/3503\n\nRELNOTES=avoid overflows/underflows in CacheStats\n\nde789288fe3ae2698d317d351ee2caf00db19a05\n\n-------\n\n<p> \n\nd5c258eb6519fc50fb54ba9a8667d4bf038ad533", "NaN"], ["3519", "Moe Sync", "Ron Shapiro", "ronshapiro", "06/30/19, 02:58:50 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing description tags to guava-parent poms.\n\nWe were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. \"Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing\"\n\nc417618b2be5c127baf8a739789615b3f5c5fe7c\n\n-------\n\n<p> Fix typo in 'stoppingCount' variable name\n\nFixes #3500\n\nc168ba2f5939102ee0b3e3cbd941f213d3ff8e8a\n\n-------\n\n<p> Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.\n\nReflectiveOperationException isn't available on the old versions of Android that we support.\n\nAs far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do.\n\nPrepares for #3497\n\n15c9a9385713910a1ecf9e5a5e6e50e13755fef3\n\n-------\n\n<p> Upgrade animal sniffer version to 1.18\n\nFixes #3497\n\nafdecf706fa86c5d4760b8211df2b00806e9458c\n\n-------\n\n<p> Document default values of builder setters.\n\nd5dca3613d5a47b87ed88a332e35e2f60a025630\n\n-------\n\n<p> Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\nRELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows.\n\n7d04f72bf355e9bac1312debb3af7dca28833077\n\n-------\n\n<p> Tweaks to the list of Guava features.\n\n4dbc7c1a545bdf5dd20a5934ff66c171806957db\n\n-------\n\n<p> Add more @Nullables to variadic parameter lists.\n\nRELNOTES=Add more @Nullables to variadic parameter lists.\n\nfbae3f47239fbea0555b4df2c4aea474f23d4b70\n\n-------\n\n<p> Halve memory consumption when creating a Bloom filter.\n\nAtomicLongArray(long[]) clones its input, which is a waste when we're passing\nin a new array.\n\nRELNOTES=Halve VmPeak when creating a Bloom filter.\n\nf4998201486012d050092ebbdbfb10713e9df549\n\n-------\n\n<p> Use LongMath.saturatedAdd/Subtract in CacheStats.\n\nFixes https://github.com/google/guava/issues/3503\n\nRELNOTES=avoid overflows/underflows in CacheStats\n\n9f3d0481768aa3b0e08de20ab881df4579d6ad18\n\n-------\n\n<p> Fix the travis build\n\nba4111cb700754c4f6e9be3a5a35ab420610e2eb", "NaN"], ["3523", "Fix typo in ImmutableList.java", "Jia Tan", "crazytan", "06/29/19, 10:37:01 PM", "NaN", "NaN"], ["3525", "Moe Sync", "Ron Shapiro", "ronshapiro", "07/09/19, 04:11:30 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix typo in ImmutableList.java.\n\n922214b3068213d28b20316997a9bbab77080d52\n\n-------\n\n<p> Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it's been adopted by WebAppSec.\n\nRELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it's been adopted by WebAppSec.\n\n2ae2f73318946f99f05af4e0867fb04495ee66bf\n\n-------\n\n<p> Add a test for LongAdder overflow behavior.\n\nSee https://github.com/google/guava/issues/3503\n\n558321c2ba739f1b7d0a7bf5046e6867e4aea9d5\n\n-------\n\n<p> Fix some rawtypes in com.google.common.cache.\n\n310de86d74c2c77924c1a69d22c7acdf286bd258\n\n-------\n\n<p> Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.\n\nFixes https://github.com/google/guava/issues/3503\n\nRELNOTES=Fix potential overflow/IAE during cache stats calculations.\n\nb28a260a3b847b627cc4c33dd4fd6bed05d4e2f6\n\n-------\n\n<p> Add RangeMap#merge, analogous to Map#merge.\n\n8dc46a72fa5417d02063052f05fd0355703411fc\n\n-------\n\n<p> Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc\n\n*** Reason for rollback ***\n\nBreaking a number of projects\n\n*** Original change description ***\n\nAdd RangeMap#merge, analogous to Map#merge.\n\n***\n\n44d0870b7e4d6a9fa8cca847bf35652111bd7539", "NaN"], ["3526", "optimize buffer-memory allocation", "bernd hopp", "berndhopp", "07/09/19, 09:39:45 AM", "This patch is to avoid unnecessary allocation of memory to create transfer-buffers to e.g. move data from an InputStream to an OutputStream by introducing a package-local class TransferBuffer to the com.google.io package. The code does not change the public API in any way. \r\n\r\nTransferBuffers provide to package-local static methods to obtain a TransferBuffer for byte- or char-arrays, TransferBuffer.getCharArrayTransferBuffer() and TransferBuffer.getByteArrayTransferBuffer(). These are being used to avoid memory-allocation in a couple of places in the com.google.io-package, \r\n\r\nThe microbenchmarks show that avoiding buffer allocation yields a significant performance boost\r\n\r\n| tested method | bytes copied | runtime (seconds) with patch | runtime (seconds) without patch | performance increase in % |\r\n| --- | --- | --- | --- | --- |\r\n| ByteStreams.copy | 10 | 105569 | 681130 | 545,2 |\r\n| ByteStreams.copy | 100 | 107411 | 698152 | 549,98 |\r\n| ByteStreams.copy | 10000 | 840354 | 1186307 | 41,17 |\r\n| ByteStreams.readBytes | 10 | 68917 | 633365 | 819,03 |\r\n| ByteStreams.readBytes | 100 | 69802 | 660336 | 846,01 |\r\n| ByteStreams.readBytes | 10000 | 360357 | 934588 | 159,35 |\r\n| ByteStreams.toByteArray | 10 | 122681 | 750095 | 511,42 |\r\n| ByteStreams.toByteArray | 100 | 131705 | 773561 | 487,34 |\r\n| ByteStreams.toByteArray | 10000 | 1962961 | 4962929 | 152,83 |\r\n| ByteSource.contentEquals | 10 | 647140 | 3614650 | 458,56 |\r\n| ByteSource.contentEquals | 100 | 685559 | 647694 | 453,81 |\r\n| ByteSource.contentEquals | 10000 | 5987317 | 9460941 | 58,02 |\r\n\r\nreferences\r\n\r\n[ByteStreamsBenchmark w/ ThreadLocal](https://microbenchmarks.appspot.com/runs/087a68fc-af92-4971-97ae-346be17ee50b#r:scenario.benchmarkSpec.methodName,scenario.benchmarkSpec.parameters.n)\r\n[ByteStreamsBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/dfb1c1b7-b9e2-431c-91f9-3be2f19db2a7#r:scenario.benchmarkSpec.methodName,scenario.benchmarkSpec.parameters.n)\r\n[ByteSourceBenchmark w ThreadLocal](https://microbenchmarks.appspot.com/runs/f5517421-8f23-4237-9de1-f7d9e4c8f3ce#r:scenario.benchmarkSpec.parameters.n)\r\n[ByteSourceBenchmark w/out ThreadLocal](https://microbenchmarks.appspot.com/runs/573ac1ff-a1e9-4870-9b0d-414e77e163e6#r:scenario.benchmarkSpec.parameters.n)\r\n\r\nthere had been a similar PR from me before, but I think it is worth reconsidering the new code, which is a re-write of the original idea.", "NaN"], ["3529", "Add unit tests for com.google.common.hash.LittleEndianByteArray", "Braavos", "EricHetti", "12/19/19, 07:03:10 PM", "I've analysed your codebase and noticed that `com.google.common.hash.LittleEndianByteArray` is not fully tested.\r\nI've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).\r\n\r\nHopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important in a subsequent PR.", "NaN"], ["3531", "Moe Sync", "Ron Shapiro", "ronshapiro", "07/16/19, 05:22:28 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Clarify that SortedSetMultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.\n\n09bf107763561ae37ddd99cf024d6c5604eedfff\n\n-------\n\n<p> Remove unneeded @SuppressWarnings from @Benchmark methods.\n\nRELNOTES=none\n\n3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f\n\n-------\n\n<p> Rename a method to avoid J2ObjC collisions\n\nPrevent J2ObjC from treating `getAddSuppressed` as a getter by renaming it `generateAddSuppressed`. This silences a -Wobjc-property-implementation warning; soon, such warnings will become errors. See the referenced bug for full context.\n\ncc5a55e487791db6ab2b7a98bcfd1be69d7a3638", "NaN"], ["3533", "Moe Sync", "Nick", "nick-someone", "07/24/19, 12:49:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add RangeMap#merge, analogous to Map#merge.\n\nRollback of 8000dc992d0124372972729b20df40a42b27a849\n\ncebc1985b8d64f3960e363b5641428447e6d33ae", "NaN"], ["3534", "Upgrade maven jar plugin from 3.0.2 to 3.2.0 - Reproducible Builds", "William Collishaw", "WilliamCollishaw", "12/01/19, 11:16:22 PM", "Upgrade maven jar plugin from 3.0.2 to the latest [3.2.0](https://blogs.apache.org/maven/entry/apache-maven-jar-plugin-version3)\r\nMaven source and jar plugins both introduced [build reproducibility](https://maven.apache.org/guides/mini/guide-reproducible-builds.html) (Maven source plugin upgrade in #3681) in 3.2.0\r\n\r\nVersions bypassed:\r\n\r\n- [3.1.0](https://blogs.apache.org/maven/entry/apache-maven-jar-plugin-version)\r\n- [3.1.1](https://blogs.apache.org/maven/entry/apache-maven-jar-plugin-version1)\r\n- [3.1.2](https://blogs.apache.org/maven/entry/apache-maven-jar-plugin-version2)", "NaN"], ["3537", "Moe Sync", "Nick", "nick-someone", "07/25/19, 02:44:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Link to guava-announce.\n\nf088027eb9adc7308954cadeb920f32d6cead728", "NaN"], ["3538", "optimized code", "Goat", "yangfancoming", "07/29/19, 01:44:49 AM", "I make a litte changes ,  please take a look .  thx!", "NaN"], ["3540", "Guava/consistent hash validate buckets", "Alexandros Bantis", "ambantis", "07/28/19, 12:08:27 AM", "This addresses issue https://github.com/google/guava/issues/3539.\r\n\r\nI'm not sure whether this is undocumented (expected) behavior or a bug. But if it is a bug that should be fixed, we should document and alert users to the actual behavior pending a bug fix.", "NaN"], ["3545", "Moe Sync", "Nick", "nick-someone", "08/07/19, 05:28:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove inaccurate comment.\n\ndabcfd49f7c6d57da4064832f2377e14df947604\n\n-------\n\n<p> Change the Splitter::limit arg to maxItems, for IDE usage.\n\nThe old name of `limit` was uninformative when presented in e.g. IDE autocompletions. `maxItems` will help distinguish it from the alternative meaning of max number of splits to make.\n\ncb7a0f377ddf90a8466beac1b19d03c70539d310\n\n-------\n\n<p> Adjust testModule.gwt.xml due to an internal restructure of how truth targets are built.\n\nace42bca6f797245292e5cec9f442ebb30cb6dea", "NaN"], ["3551", "Moe Sync", "Colin Decker", "cgdecker", "08/05/19, 04:45:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove inaccurate comment.\n\n2cc9ccd8f58402927f4903ebf40f19a63f47c789\n\n-------\n\n<p> Change the Splitter::limit arg to maxItems, for IDE usage.\n\nThe old name of `limit` was uninformative when presented in e.g. IDE autocompletions. `maxItems` will help distinguish it from the alternative meaning of max number of splits to make.\n\n013d0f1b058f7c6e3ac159745fcead5f481f5b66\n\n-------\n\n<p> gwt.xml change from internal change.\n\na13896bd6b55883dbe1f4ae71603597f3831a89d\n\n-------\n\n<p> Add MediaType for \"image/heif\" and \"image/jp2\"\n\nRELNOTES=Add MediaType for \"image/heif\" and \"image/jp2\"\n\n4c70d7f3c3083946aa74e59098b51f521da27239\n\n-------\n\n<p> Change a use of Iterable.forEach, which isn't available under Desugar.\n\n6508a374b7483ea2ec7f5170b94489cb9dc3537d", "NaN"], ["3556", "Add shuffle method to Ints", "Roman Kvasnytskyi", "Periecle", "08/10/19, 02:19:16 PM", "New method for Ints due to #3555 ", "NaN"], ["3557", "Add shuffle method to Ints due to #3555", "Roman Kvasnytskyi", "Periecle", "10/02/19, 07:29:35 PM", "NaN", "NaN"], ["3558", "Simplify code", "liming", "NB216ers", "08/10/19, 08:19:14 PM", " Unnecessary 'null' check . isActuallyE(element)  method checks 'null' already.", "NaN"], ["3559", "Simplify the code", "liming", "NB216ers", "10/04/19, 04:39:36 PM", "Unnecessary 'null' check . isActuallyE(element) method checks 'null' already.", "NaN"], ["3560", "Moe Sync", "David P. Baker", "netdpb", "08/16/19, 05:24:22 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix an issue where the InputStream returned by BaseEncoding.decodingStream(Reader) could fail to throw DecodingException while decoding an invalid string.\n\nThis was caused by the default behavior of InputStream.read(byte[], int, int), which swallows any IOException thrown by any call to the single-byte read() method other than the first. To fix it, just override that method with an implementation that does not swallow any exceptions.\n\nFixes https://github.com/google/guava/issues/3542\n\n4e6478d4bec284f047a686b8a16dc2b32628639a\n\n-------\n\n<p> Add more clarification on what \"access\" means in expireAfterAccess().\nPrevious comment doesn't mention \"containsKey()\"\n\nCopied from https://github.com/google/guava/wiki/CachesExplained#asmap\n\nRELNOTES=comment change\n\nf2bd7744e575393f065253c8f1bc2a512d452b63\n\n-------\n\n<p> Document that HashBiMap.containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap.containsValue()).\n\nFixes #1973\n\n7d57c233c9922ca9adbbef552b5f8f66bd7856f0\n\n-------\n\n<p> Add note about {@code ByteSource.wrap}'s use of the given byte array.\n\nFixes https://github.com/google/guava/issues/2603\n\n9276a79f6e9b012935b791a3e6d0b7f3d00b715b\n\n-------\n\n<p> Fix https://github.com/google/guava/issues/3156 by implementing a proper `CollectSpliterators.flatMapTo{Int,Long,Double}`.\n\nAlso, modify the existing `CollectSpliterators.flatMap` to accept `null` from its `function` by treating it as an empty `Stream`, like `Stream.flatMap` does. Add tests for this behavior.\n\nTo test that the new methods also accept `null` through both their `{Int,Long,Double}Consumer` APIs and their `Consumer` APIs, add `of{Int,Long,Double}` methods to `SpliteratorTester`. They test the given `Spliterator.of{Int,Long,Double}` through both APIs.\n\n0763099e769963bd0d93f865a4e7c3a5b320085a\n\n-------\n\n<p> Temporarily update public_suffix to include web.app\n\nWithout this, developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web.app domain.\n\n41b8aeaeb71cab1a151d4359a409bfd54bb81262", "NaN"], ["3561", "Improve ImmutableList#of Javadoc", "Will", "wilmol", "10/22/19, 03:47:51 PM", "- link to the JDK equivalent Collections#singletonList rather than Collections#singleton (which returns a Set)", "NaN"], ["3565", "Remove usages of deprecated CharMatcher functions", null, "karthikbhat13", "11/07/19, 01:26:46 AM", "Methods like charMatcher.digit() or javaLetterDigit() which would match digit and digit or letters in string is being deprecated by guava. Such methods are replace by inRange methods. For example, instead of digit(), it would be inRange('0', '9').\r\n\r\nThis PR closes #3544.\r", "NaN"], ["3571", "Fix https://github.com/google/guava/issues/3570", null, "tomasisonfire", "08/21/19, 06:48:27 PM", "Fix https://github.com/google/guava/issues/3570 by resetting expandTableThreshold and maxRunBeforeFallback after resizing the hashTable. Unit test included: testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements", "NaN"], ["3572", "Moe Sync", "Chris Povirk", "cpovirk", "08/21/19, 03:35:08 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add toString() to ForwardingFluentFuture, to match ForwardingFuture\n\nRELNOTES=N/A\n\ncedfa4a718a128d30f9af953f304b425b52b6f94", "NaN"], ["3573", "MOE sync", "Chris Povirk", "cpovirk", "08/21/19, 06:48:24 PM", "NaN", "NaN"], ["3575", "Moe Sync", "Chris Povirk", "cpovirk", "08/23/19, 06:23:35 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adds constant for the Upgrade-Insecure-Requests header.\n\nhttps://w3c.github.io/webappsec-upgrade-insecure-requests/#preference\n\nRELNOTES=Adds constant for the Upgrade-Insecure-Requests header.\n\n7e5aa662985c6e54396b1e751149bef17236bc27", "NaN"], ["3577", "simply code RP", "\u8d56\u5e8a\u5c0f\u80fd\u624b", "Mixpa", "08/26/19, 06:36:54 PM", "NaN", "NaN"], ["3578", "Moe Sync", "Chris Povirk", "cpovirk", "08/26/19, 02:15:17 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Restore Javadoc unintentionally lost in CL 264984423.\n\nhttps://github.com/google/guava/pull/3575#issuecomment-524440221\n\n0a9ddbca861d787f2b1d110905e043c25dacfc89", "NaN"], ["3579", "Moe Sync", "Chris Povirk", "cpovirk", "08/26/19, 06:36:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix \"bug\" link that was actually a CL.\n\n4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8\n\n-------\n\n<p> Simplify while+break into do-while.\n\nFixes #3577\n\n39aadb3531f7d73ed634780abe2679c9e42bcb17\n\n-------\n\n<p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.\n\nRELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete\n\na840d5bec35b56a6a6e195477e35a1b0e92d3681\n\n-------\n\n<p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.\n\nWhen the time comes, we'll flip the default value, and users who didn't see our earlier warnings can use a system property to restore support until they can stop serializing our types.\n\n[]\n\n967010aa4d5ecf35fd3861913c3f17c10c4f6d40", "NaN"], ["3580", "Simplify some code", null, "OLPMO", "10/02/19, 04:48:51 PM", "Remove some redundant 'if' statement.Besides, I use .toArray(new MyClass[0])  replace .toArray(new MyClass[myList.size()]) for improving the  efficiency  of the code.\r\nhttps://stackoverflow.com/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size", "NaN"], ["3583", "Moe Sync", "Kurt Alfred Kluever", "kluever", "08/29/19, 04:06:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Release the input futures as soon as we submit the combiner task. But really, redo how we release resources in general.\n\nThis is a followup to CL 265489523, which \"only\" released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn't if the combiner returned a Future that was still pending). That CL was good enough for practical purposes, but I wanted to better understand how we release resources.\n\nThis CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*], merging logic from releaseResources(), releaseResourcesAfterFailure(), and AsyncCallableInterruptibleTask.setValue(...). As part of that, it merges AggregateFuture and AggregateFutureState/RunningState into a single object.\n\n[*] OK, except seenExceptions, which gets its own handling. As a bonus, I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically, it clears it when all inputs are done, rather than when the combiner task has finished running.\n\nIt turns out that blindly nulling out fields is too aggressive, so we need to be careful in 2 cases:\n\n1. CombinedFuture.releaseResources() can't null out `task` until the future is done or the task is done running. That's because it may need to interrupt the task. To handle this, I don't null out `task` in releaseResources() unless isDone(). To ensure that `task` still gets nulled out as soon as it's done running, I null it out directly in afterRanInterruptibly(). (OK, this is another exception to my claim that releaseResources() handles nulling out \"all\" fields....)\n\n2. Even if the output future is done, processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this, I store them in the listener and pass them through to processCompleted() (when necessary).\n\nThe changes to prod code are net negative in line count, at least ignoring the added comments. I've also added a couple tests, only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward, despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications, like not bothering to check collectsValues before calling collectOneValue(...).)\n\n(Aside: This CL's releaseResources() is like our proposed afterCommit() API but different. First, releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second, CombinedFuture may rely on the fact that it's called twice in some cases: It's called once when all inputs complete, but it doesn't null out `task`, and then it can be called again if the output is cancelled, at which point it *does* null out `task`. But that probably doesn't matter too much because the task was probably handed to an executor in the meantime, so CombinedFuture is unlikely to hold the final reference to it. Anyway, for more discussion of afterCommit(), see https://github.com/google/guava/issues/2886)\n\n[]\n\n41a8adb81e2ebf27e9d85f70671ff8f97fd7721b", "NaN"], ["3586", "Moe Sync", "Kurt Alfred Kluever", "kluever", "08/30/19, 03:51:45 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Let ListenableFuture implement thenable via a default interface method in J2CL\n\nRELNOTES=Let ListenableFuture implement thenable via a default interface method in J2CL\n\nf6bb300d5fe145486dbeb28c544867f562ddc185\n\n-------\n\n<p> Let ListenableFuture implement thenable via a default interface method in J2CL\n\n***\n\nf45705983f8dbaf48896b8ec783b4d56e7b1f184\n\n-------\n\n<p> Update Public Suffix data.\n\nThe copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated, the copy is updated 3 weeks before the\nEstimated Week of Stable:\n\nhttps://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates\n\na793784ba71562cdabf41ba87aad849440b145a7", "NaN"], ["3588", "Moe Sync", "Kurt Alfred Kluever", "kluever", "09/01/19, 09:08:10 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Modify comment about safeOctets.length to be consistent with code.\n\nf7012fc03d4a3c0337e6f45a7f81052bfa0718b9", "NaN"], ["3589", "Allow for names that have labels starting with underscore", null, "mwullink", "09/02/19, 07:12:10 AM", "This fix allows for names that have labels starting with underscore, this is useful for parsing names that have non-final labels that start with an underscore.\r\n\r\nmultiple protocols use this naming scheme, such a DKIM, which uses _domainkey labels.\r\nsee: https://tools.ietf.org/html/rfc6376", "NaN"], ["3597", "Moe Sync", "Kurt Alfred Kluever", "kluever", "09/06/19, 02:43:56 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Explicitly document that whenAllComplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).\n\n98971ae01e62ed36f99c8bb5c4e897eac8cb1988", "NaN"], ["3600", "Update the comment for toOptional method", null, "dacheng", "10/02/19, 02:32:23 PM", "Change the description to more clearly state that the method will throw NPE if the only element if null.\r\n\r\nThe original description made me a bit confused.\r\n\r\nThat is said, it is just my feeling, and I am not an expert of English,  please feel free to reject if the original description makes more sense.\r\n\r\nRELNOTES=n/a", "NaN"], ["3601", "Update the comment for toOptional method", null, "dachengy", "10/02/19, 07:01:58 PM", "Change the description to more clearly state that the method will throw NPE if the only element if null.\r\n\r\nThe original description made me a bit confused. \r\n\r\nThat is said, it is just my feeling, and I am not an expert of English,  please feel free to reject if the original description makes more sense.\r\n\r\nRELNOTES=n/a", "NaN"], ["3605", "Moe Sync", "Colin Decker", "cgdecker", "09/13/19, 05:34:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Combine ImmediateSuccessfulFuture into ImmediateFuture.\n\nImmediateFuture used to have other implementations, but we switched those to extend TrustedFuture instead.\n\nd780cd5f2b0ccc2610c039c30c04e987771dd0a5\n\n-------\n\n<p> Rollback previous commit.\n\n0812745bec6e345b232154d815ad242cbb4fda37\n\n-------\n\n<p> Roll forward previous rollback, but without making the type final.\n\n4c984c649e1f4665a7dbee5f568cfa25def76727\n\n-------\n\n<p> Fix (and in one case, suppress) low-hanging rawtypes warnings.\n\nIt looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe.\n\ncabc402dbf3805f04e19ba9d72e7f8802ab6bb75\n\n-------\n\n<p> Increase various tests' timeouts.\n\n25842ed29c2c13b949836082552c5fee0cdcb0d5", "NaN"], ["3607", "simplify code", "MaAng", "playasim", "11/07/19, 10:45:42 PM", "Simplified some code for numerical comparison.", "NaN"], ["3609", "Update to version v28.1", "Michael Ernst", "mernst", "09/16/19, 03:53:20 AM", "NaN", "NaN"], ["3614", "Update README.md", "xiazhen", "weiwensangsang", "09/20/19, 05:04:30 PM", "I use guava through maven in this way:\r\n```\r\n<dependency>\r\n  <groupId>com.google.guava</groupId>\r\n  <artifactId>guava</artifactId>\r\n  <version>28.1-jre</version>\r\n  <!-- or, for Android: -->\r\n  <version>28.1-android</version>\r\n</dependency>\r\n\r\n```\r\nIt will be clearer to describe it separately. \r\n```\r\n<dependency>\r\n  <groupId>com.google.guava</groupId>\r\n  <artifactId>guava</artifactId>\r\n  <version>28.1-jre</version>\r\n</dependency>\r\n\r\n``````\r\n<dependency>\r\n  <groupId>com.google.guava</groupId>\r\n  <artifactId>guava</artifactId>\r\n  <version>28.1-android</version>\r\n</dependency>\r\n\r\n```\r\n\r\n\r\n\r\n\r\nThe caller can copy these two paragraphs directly. I know this is a small problem, but I met a lot of people who copied directly, and then went back and modified.\r", "NaN"], ["3618", "Moe Sync", "David P. Baker", "netdpb", "09/23/19, 08:19:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Export new AtomicLongMapBasherTest to open-source repo.\n\nhttps://github.com/google/guava/pull/3605#discussion_r324303026\n\n704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f\n\n-------\n\n<p> Add @LazyInit and @RetainedWith annotations to the lazily calculated \"entries\" field of ImmutableSetMultimap.\n\nThis field is lazily evaluated by entries() without holding a lock, but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.\n\n996369d89362e0ec93f7dd6e9a6860aa08858c80\n\n-------\n\n<p> Let ListenableFuture implement thenable via a default interface method in J2CL.\n\nThis is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.\n\n44909d9d5fc5b394c710a6b8b0d6c3786c765af5\n\n-------\n\n<p> Add test for behavior described in #1900\n\n7329a66694d59bb22e2589eb9a2f620c98a881f9\n\n-------\n\n<p> Undo test CL 9a50815df26be7416be0fac489e29feee7a3c220.\n\nIt produces a tiny diff between the common.base and common.collect copies of AbstractIterator.\n\nc82f7916879a46539a1e53ac98dda90e9c5537b8\n\n-------\n\n<p> Add Splitter.splitToStream().\n\n6c984121f74d5cea97ac1ffabfe98938bc7c96c4\n\n-------\n\n<p> Add comment explaining TABLE and MULTIPLIER in CharMatcher.Whitespace\n\nFixes #1661\n\n5430b140cae37b078fd4dda9b1a57a025664cfe1\n\n-------\n\n<p> Rollback of adding Splitter.splitToStream().\n\n*** Reason for rollback ***\n\nMy guess is that this change somehow upsets an allowed list of\none-definition violations.\n\n3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391\n\n-------\n\n<p> Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL.\n\n38c9a029e6cc538bcc46b9ad23fe03a62739d433\n\n-------\n\n<p> Clean up leftovers from MapMaker.makeComputingMap:\n\n- Remove makeComputingMap from the GWT emulation.\n- Deprecate ComputationException.\n\n0b93365c2440981c04a94f6e5596d3f723549ea3", "NaN"], ["3621", "Moe Sync", "David P. Baker", "netdpb", "09/25/19, 02:17:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Test iteration over a collection containing null.\n\nf9675a07e0fa21ce705626cdcc95101b95f46531", "NaN"], ["3622", "Some code can be simplified", "Scott_Yu", "Scott-YuYan", "04/19/21, 08:50:40 PM", "1.Anonymous can be replaced with lambda.\r\n2.`for` loop replaceable with `foreach`.", "NaN"], ["3623", "Moe Sync", "David P. Baker", "netdpb", "09/26/19, 05:58:07 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> s/a/an/\n\ne2564c321bd3bc71cbb77a6af7ccac1be30e9b46\n\n-------\n\n<p> Add Splitter.splitToStream().\n\n61affd0d3d70fdadf90100d54e1a83425b717f56", "NaN"], ["3627", "Moe Sync", "Chris Povirk", "cpovirk", "09/30/19, 05:29:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add Futures.submit().\n\nRELNOTES=`util.concurrent`: Added `Futures.submit()`\n\n479c41dab94cbc6a6a1bb952c56a90b89f793ecc", "NaN"], ["3628", "Update errorprone to 2.3.3", "Elliotte Rusty Harold", "elharo", "10/01/19, 01:06:06 AM", "NaN", "NaN"], ["3629", "Moe Sync", "Chris Povirk", "cpovirk", "10/01/19, 01:06:06 AM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update errorprone to 2.3.3\n\nFixes #3628\n\nc24688d4f69cc00d11de6d183c28bdf0a86a032a", "NaN"], ["3630", "MOE sync", "Chris Povirk", "cpovirk", "10/01/19, 01:52:24 PM", "NaN", "NaN"], ["3631", "Changed the string concat to append for the testGrowBuffer()", "Sanskar Gupta", "Sanskar95", "10/02/19, 03:36:42 PM", "Will help in performance issues as appned is much faster in a loop.", "NaN"], ["3633", "Code improvement `if` statement instead of a for `statement` to a single item", "Jos\u00e9 Augusto Martins Regis", "ze12augusto", "10/02/19, 09:34:36 PM", "Code improvement, using `if` statement instead of a for `statement` to a single item.\r\n\r\nI also found some classes with empty methods that are not being used by the project, is this correct? If these methods can be removed, I'd like to open a pr for this.\r\n\r\nex: `AllEqualOrdering_CustomFieldSerializer.deserialize(SerializationStreamReader reader, AllEqualOrdering instance)`", "NaN"], ["3634", "Moe Sync", "Chris Povirk", "cpovirk", "10/02/19, 03:59:46 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing @since 20.0.\n\n52ba7eb195ad4c1f8095d99216610df39ce4e644\n\n-------\n\n<p> Add constant for the Cross-Origin-Opener-Policy header.\n\n[]\n\nRELNOTES=Adds constant for the Cross-Origin-Opener-Policy header.\n\naa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466", "NaN"], ["3635", "Moe Sync", "Chris Povirk", "cpovirk", "10/02/19, 04:48:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Check the array indexes in Quantiles.ScaleAndIndexes is non empty.\n\nFixes #3210\nFixes #3211\n\n823a432ddaa2d274b539e12ed2bb46e5be0658ee\n\n-------\n\n<p> Simplify some code.\n\nFixes #3580\n\ne2362def3408478a4a74d24671aef39171a1e93f\n\n-------\n\n<p> Document the JDK 9+ alternative to `Iterators#forEnumeration`\n\nFixes #3382\n\ne432be553038b4c67f22abb8c27f82ab6d480f3d\n\n-------\n\n<p> Add a MIME type MPEG-DASH (mpd files)\n\nFixes #2677\n\nRELNOTES=`net`: Added the `MediaType` constant for MPEG-DASH.\n\n579ccf6c0181097be7b895ec145f04502234ef0e\n\n-------\n\n<p> Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.\n\nWhile there, also support thread renaming under App Engine.\n\nFixes https://github.com/google/guava/issues/3598\nRelevant to https://github.com/google/guava/issues/3606\n(also, the CL in which I experimented with https://github.com/google/guava/issues/3569 before backing it out)\n\n7bd4b2351c1483f34e7192768b4f3e7a10447c33", "NaN"], ["3636", "Moe Sync", "Chris Povirk", "cpovirk", "10/02/19, 05:48:45 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add testlib readme.\n\nFixes #3453\n\n3b0f1e580b4e0bde8fd4806c832389d0aade4063\n\n-------\n\n<p> Change Quantiles' compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().\n\nFixes https://github.com/google/guava/pull/2989\n\nRELNOTES=`math`: `Quantiles` `compute()` methods which return a `Map` now return a map with entries in the same order in which the indexes were provided.\n\n6a2d070ac268c138d6ad039605de54f535d5f5f3", "NaN"], ["3637", "Moe Sync", "Chris Povirk", "cpovirk", "10/02/19, 09:34:36 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Bump version, which went out of date since the previous CL was created.\n\n90f4a1c88941d1d68ec2fc68397a5e11fefa7355\n\n-------\n\n<p> Use if statement instead of for statement for a single item.\n\nFixes #3633\n\n020621e474e228b4b9c12dbd24badd9590b0af8e\n\n-------\n\n<p> Upgrade maven source plugin from 2.1.2 to 3.1.0\n\nFixes https://github.com/google/guava/pull/3466\n\ne87b8807798808d5a526a6fd2f49b484bb4a846a\n\n-------\n\n<p> Document the JDK 9+ alternative to `MoreObjects#firstNonNull`\n\nFixes https://github.com/google/guava/pull/3383\n\n145da12d85b536d6f2a527e1ccf2430147fa6b83", "NaN"], ["3638", "Add isBlank method to Strings class", "Samuel Griff", "slgriff", "10/03/19, 12:03:55 AM", "Add `isBlank` method to Strings class", "NaN"], ["3639", "Using optional.ofNullable instead of comparing with 0 and null", "Sanskar Gupta", "Sanskar95", "10/03/19, 02:22:27 PM", "It shows the possibility of null as a valid response, which is often assumed that it wont be returned.", "NaN"], ["3640", "Moe Sync", "Chris Povirk", "cpovirk", "10/03/19, 03:15:57 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Change tryParse methods to explicitly document that they throw NPE if the input is null.\n\nThis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception \"if parsing fails\".\n\nFixes https://github.com/google/guava/issues/1259\n\n995c07eb95d5e5fac35f3f1219dbb4e4bed83d11", "NaN"], ["3643", "Skip file.createNewFile in Files.touch if file exists.", "Jasmin Patel", "vVv-AA", "10/04/19, 09:23:54 PM", "When calling Files.touch(foo) on a file that already exists,\r\n java.io.File#createNewFile() will should not be called.\r\n\r\nFixes #3612 ", "NaN"], ["3644", "Moe Sync", "Chris Povirk", "cpovirk", "10/04/19, 08:22:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove duplicate null check from EnumMultiset.\n\nFixes https://github.com/google/guava/pull/3559\n\n079d1732c6740da9d499b2ff4c94fb37b1b66b57", "NaN"], ["3647", "Add Lists.splitBy", "Pascal", "pascalgn", "10/14/19, 01:34:41 PM", "Fixes #3136", "NaN"], ["3648", "Moe Sync", "Nick", "nick-someone", "10/09/19, 02:40:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Address TSAN errors:\n\n1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse, which inherits AbstractBiMap's keySet and values fields, which are themselves @LazyInit), so they are safe to read racily.\n\n2. Mark some graph \"cache\" fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...)), the graph stores the entry in a field. That way, if the user then queries it again (such as to look up the value associated with a key during iteration), the graph doesn't have to perform a potentially mildly expensive lookup. But this caching isn't implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread, safely publish it, and then read it concurrently from other threads. But because of the racy reads of the cached entry fields, I don't think this is guaranteed to be safe.\n\nRELNOTES=`graph`: Fixed data race.\n\n07eba15451f7d0dc10ab8328a6d595ab1e68abac", "NaN"], ["3649", "Make animal sniffer annotations optional", "Elliotte Rusty Harold", "elharo", "10/10/19, 03:06:47 PM", "Per https://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/ this should not be inherited by dependents\r\n\r\n@cpovirk ", "NaN"], ["3650", "Moe Sync", "Nick", "nick-someone", "10/10/19, 01:48:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Require tokens to be non-empty.\n\nFollowup to CL 272190935.\n\nFixes https://github.com/google/guava/issues/3626 (again :))\n\nb080067280ab22f262880d222c0a75d043962f4f\n\n-------\n\n<p> Log warnings for users who send Guava types over GWT-RPC.\n\nI've left this change out of the Android branch. For starters, it's not necessary there, since we don't support GWT. But normally we'd include it anyway to minimize diffs. However, doing so increases the number of classes retained after running Proguard (thanks, I assume, to the Logger field). There are other ways of getting around this, but for a temporary feature, the diffs seem tolerable.\n\nRELNOTES=***Warning to users of GWT-RPC:*** The first Guava release of 2020 will [remove support for GWT-serializing Guava types](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ). To test ahead of time with GWT-RPC support for Guava types disabled, set the `guava.gwt.emergency_reenable_rpc` system property to `false`.\n\n750db498a0108802f3de1905a2a56d956cd9cda3\n\n-------\n\n<p> Steam -> Stream in the names of certain locals in ByteStream.\n\n0ee31e21a41be3f87831446374e323c7f08f0011\n\n-------\n\n<p> [OpenSearch] Add MediaType for \"application/opensearchdescription+xml\"\n\nRELNOTES=Add MediaType for \"application/opensearchdescription+xml\"\n\n6be97d88570e0990fbe5a91326620df9f2a09853\n\n-------\n\n<p> Revert previous CL:\n\n============\nLog warnings for users who send Guava types over GWT-RPC.\n\nI've left this change out of the Android branch. For starters, it's not necessary there, since we don't support GWT. But normally we'd include it anyway to minimize diffs. However, doing so increases the number of classes retained after running Proguard (thanks, I assume, to the Logger field). There are other ways of getting around this, but for a temporary feature, the diffs seem tolerable.\n\n82838c5a9a161937c4ac91f3abd3bf7a26202f53", "NaN"], ["3652", "switch to an internal annotation for ignoring JRE requirements", "Elliotte Rusty Harold", "elharo", "10/11/19, 01:53:35 PM", "@cpovirk This completely removes the dependency on animal-sniffer annotations", "NaN"], ["3653", "update failureaccess version to match docs with code", "Elliotte Rusty Harold", "elharo", "10/14/19, 07:43:51 PM", "@cpovirk fix #3651 \r\n\r\nOther uses of 1.0.0 are in `@since` tags", "NaN"], ["3654", "Moe Sync", "Nick", "nick-someone", "10/11/19, 01:53:35 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> switch to an internal annotation for ignoring JRE\nrequirements\n\nFixes #3652\n\nRELNOTES=Removed dependency on `animal-sniffer-annotations`.\n\n3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86\n\n-------\n\n<p> Rename package-private Duration APIs:\n  saturatedToNanos() -> toNanosSaturated()\n  saturatedToMillis() -> toMillisSaturated()\n\n#goodtime\n\nf3a053ea12ae808ddd52094d36fcd88fe95881f2\n\n-------\n\n<p> Suppress more GoodTime errors.\n\n9e885c85265c3686aa876acebe6bb6bda18de1f3", "NaN"], ["3656", "Moe Sync", "Kurt Alfred Kluever", "kluever", "10/14/19, 07:43:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Log warnings for users who send Guava types over GWT-RPC.\n\n(Roll forward CL 273803350, which was rolled back in CL 273825377. This time with updates to one-definition whitelist.)\n\n[]\n\n09a11ae36f186ba1ed5b0cd4d9eef2733028c496\n\n-------\n\n<p> update failureaccess version to match docs with code\n\nFixes #3653\n\ndc01afd344fdf669f28e9e806dc8864622152177", "NaN"], ["3657", "Moe Sync", "Kurt Alfred Kluever", "kluever", "10/16/19, 02:11:56 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add Stream support to Stats and StatsAccumulator.\n\nThis adds:\n - A static method Stats.toStats() that returns a Collector<Number, StatsAccumulator, Stats>.\n - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream, IntStream, and LongStream.\n - A StatsAccumulator.addAll overload that takes StatsAccumulator.\n\n(In passing, this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting, which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality, and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that, in some cases, the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)\n\nRELNOTES=Add Stream support to Stats and StatsAccumulator.\n\na59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d", "NaN"], ["3658", "Moe Sync", "Kurt Alfred Kluever", "kluever", "10/17/19, 02:38:01 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Resolve some rawtypes warnings in Converter\n\n4e37244fb859e1f99ce3356ffab5b2e8333ad268", "NaN"], ["3660", "Remove @beta: from FluentIterable.from(E[])", "xiantang", "xiantang", "10/18/19, 11:59:47 AM", "NaN", "NaN"], ["3663", "fix #3662: ByteStreams.fixUpTo avoids unnecessary large allocations", "Carter Kozak", "carterkozak", "10/20/19, 04:25:42 PM", "The fallback read buffer is allocated only when fallback reads\r\nare used. The buffer size is bounded by the remaining bytes\r\nto skip, allowing small skip requests which do require a fallback\r\nread to avoid an 8k buffer allocation.", "NaN"], ["3664", "Moe Sync", "Kurt Alfred Kluever", "kluever", "10/20/19, 04:25:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix ByteStreams.skipUpTo to avoid making unnecessary allocations.\n\n- Fixes https://github.com/google/guava/issues/3662\n- Closes https://github.com/google/guava/issues/3663\n\ncb0ac2bf8a3a95862b1209fe11a35403554ca611", "NaN"], ["3666", "Moe Sync", "Colin Decker", "cgdecker", "10/22/19, 03:47:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix ImmutableList#of Javadoc\n\nFixes #3561\n\na14d317807e63770c5e57a4307cd1e69ea233ba0\n\n-------\n\n<p> Attempt to fix inheriting Javadoc from the JDK again.\n\nIt's currently missing:\nhttps://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object-\n\nBut I haven't managed to reproduce the problem locally.\n\nI'm trying this on the theory that java.home might be pointing to the JDK (the top-level directory in which src.zip lives) rather than the JRE (a subdirectory).\n\nNote that JDK11 has src.zip in a lib/ subdirectory. I tried adding it to a Java 11 build of Guava, but things blew up because the JDK contains module declarations, which naturally are incompatible with our -source 8. Possibly the right fix there is to avoid -source 8 in favor of the approach I used for jimfs in CL 272937179 -- except that maybe I already tried that and it wasn't sufficient? I'm happy to punt on that for now, especially since I just tried removing -source 8 and got a bunch of \"too many module declarations found\" errors :)\n\n4c83832db7e6ae8d0cd351fac7fe28f4116ef0de", "NaN"], ["3668", "Moe Sync", "Colin Decker", "cgdecker", "10/24/19, 06:57:49 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add ElementOrder.stable().\n\ne5f03e5f8f94cb15cc931eda2f17121af5c4a864\n\n-------\n\n<p> Use int[] for entries and byte[]/short[]/int[] for hashtable\n\nThe entries array containing the hash and next index was reduced from a long[]\nto int[]. This is achieved by storing only the bits of the hash not covered by\nthe hashtable mask; the bits covered by the hashtable mask are implied-by and\ncan be inferred-from the hashtable bucket index. By ensuring that next pointers\nare always less than or equal to the hashtable mask, everything needed can be\npacked into an int[]. Inferring the missing hash bits from the hashtable bucket\nindex is only required for rehashing (the hashtable bucket chains must be\nwalked) and is the source of the slowdown for unsized instances.\n\nThe hashtable is created as a byte[]/short[]/int[] based on size, stored as an\nObject, and cast to the correct type using instanceof checks.\n\nAndroid performance impact varies but stays within +/-15% (average: 3% better).\nJVM performance impact generally stays within +/-15% but unsized instances are\nup to 42% worse (average: 5% worse).\n\nCompactHashSet Android memory usage:\nbyte[] sizes (1-255): 14-48% better (average: 43% better)\nshort[] sizes (256-65535): 24-40% better (average: 38% better)\nint[] sizes (65536+): 0-25% better (average: 22% better)\n\nCompactHashMap Android memory usage:\nbyte[] sizes (1-255): 10-40% better (average: 34% better)\nshort[] sizes (255-65535): 19-33% better (average: 31% better)\nint[] sizes (65536+): 0-20% better (average: 18% better)\n\nEffects on CompactHashSetProGuard:\n12817 bytes => 14189 bytes (+11%)\n3 classes => 3 classes (0%)\n39 methods => 44 methods (+13%)\n\nEffects on CompactHashMapProGuard:\n19133 bytes => 21883 bytes (+14%)\n11 classes => 11 classes (0%)\n75 methods => 83 methods (+11%)\n\nd1ebe51111e9c54be3ccf4ac3fbf5bbd02805b07\n\n-------\n\n<p> Fix Javadoc errors (and sometimes warnings).\n\nThese are mostly (perhaps entirely) problems new with Java 11's javadoc (or at least with Java 9+).\n\ncc2f4e68bd5a68309d0cd875ee55afea1ed3774f\n\n-------\n\n<p> Make inheriting Javadoc from the JDK work under JDK11.\n\n131e1b69dc7b193985691c1bb1bbbb5bb4bc027e\n\n-------\n\n<p> Prepare to move gwt-user to test scope after we remove GWT-RPC support.\n\nWhen we do that, we'll no longer be able to compile ForceGuavaCompilationEntryPoint as part of the normal javac compile or build its Javadoc (because of the \"missing\" dependency).\n(ForceGuavaCompilationEntryPoint lives under the main (i.e., non-test) sources because we want to ensure that our prod code compiles without any dependencies added by our tests.)\n\nSo exclude it from the javac compile, and turn off building Javadoc altogether. (Javadoc already isn't useful for guava-gwt, since it covers only ForceGuavaCompilationEntryPoint and the internal serialization classes. Once the serialization classes go away and ForceGuavaCompilationEntryPoint is hidden, we would get an error from Javadoc because it wouldn't find *any* sources.)\n\nRemoving ForceGuavaCompilationEntryPoint from the javac compile is fine: I've verified that the GWT compiler still runs and identifies any GWT compilation errors. And I've diffed the resulting GWT jars.\n\nWhile here, I moved some GWT-specific configuration into the guava-gwt pom.xml.\n\nRelevant to https://github.com/google/truth/issues/637\n\nbb737f0dbeb8d246be046c97f50bf3a9992048f4", "NaN"], ["3671", "Upgrade checker-qual to v2.11.1", "Adrian Gonzalez-Martin", "adriangonz", "01/14/20, 04:33:39 PM", "The `checker-qual` version that `guava` is using (`v2.8.1`) is a few releases behind. It would be good to upgrade to the latest version `v2.11.1`. There doesn't seem to be any breaking changes on the [changelog](https://github.com/typetools/checker-framework/releases) and tests are passing after the change.\r\n\r\n## Changelog\r\n\r\n- Upgrade `org.checkerframework:checker-qual` from v2.8.1 to v2.11.1.", "NaN"], ["3672", "Add more unit tests for Booleans.BooleanComparator.compare()", null, "apirom9", "10/05/20, 04:09:37 PM", "Add more unit tests for null input to Booleans.BooleanComparator.compare() method", "NaN"], ["3673", "Update 'adding Guava to your build using Gradle' snippet", "Jendrik Johannes", "jjohannes", "10/28/19, 02:49:43 PM", "Hello from Gradle \ud83d\udc4b \r\n\r\nI noticed that the 'adding Guava to your build using Gradle' section in the README could use an update. So here it is.\r\n\r\nThe notation with brackets - () - and double quotes - \" - is valid in both Gradle's Groovy and Kotlin DSL. The keyword (the 'configuration') determines the scopes in which  the dependency is visible. \"compile\" is already discouraged since some time and officially deprecated with Gradle 6. \"implementation\" and \"api\" are both possible, but the initial recommendation for using a\r\nlibrary should be \"implementation\".\r\n\r\nhttps://docs.gradle.org/6.0-rc-1/userguide/java_library_plugin.html#sec:java_library_recognizing_dependencies", "NaN"], ["3674", "Moe Sync", "Colin Decker", "cgdecker", "10/28/19, 02:49:44 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Rollback\n\n*** Reason for rollback ***\n\nDidn't work: https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object-\n\n*** Original change description ***\n\nAttempt to fix inheriting Javadoc from the JDK again.\n\nIt's currently missing:\nhttps://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object-\n\nBut I haven't managed to reproduce the problem locally.\n\nI'm trying this on the theory that java.home might be pointing to the JDK (the top-level directory in which src.zip lives) rather than the JRE (a subdirectory).\n\nNote that JDK11 has src.zip in a lib/ subdirectory. I tried adding it to a Ja...\n\n***\n\n5b6537baac6ae0569b9411e578c8d37f75cc716a\n\n-------\n\n<p> Update 'adding Guava to your build using Gradle' snippet\n\nThe notation with brackets - () - and double quotes - \" - is valid\nin both Gradle's Groovy and Kotlin DSL.\n\nThe \"compile\" configuration is already discouraged since some time and\nofficially deprecated with Gradle 6.\n\nFixes #3673\n\nf4866c6d50df1551a75986b1bb5d34b9245634d1\n\n-------\n\n<p> Format README.md.\n\nc850b5742a68be52b5d08a7fdf544627088beb4d", "NaN"], ["3675", "MOE Sync 2019-10-29", "David P. Baker", "netdpb", "10/29/19, 02:34:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString(), so that even if the latter is overriden we can include the SetFuture detail.\n\nThis is useful for futures that initially do some of their own work, but then delegate to setFuture(), as FutureCombiner.callAsync() does.\n\n68bdc31a5cc1ff0dfb3af4003703d93d09ef6485", "NaN"], ["3676", "Precautions for null pointer exception", "Emrullah YILDIRIM", "Sangaibisi", "10/30/19, 01:22:50 PM", "NaN", "NaN"], ["3677", "MOE Sync 2019-10-31", "David P. Baker", "netdpb", "10/31/19, 08:40:18 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix toString exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.\n\nThis is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.\n\n82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c\n\n-------\n\n<p> Handle StackOverflowError from both pendingToString and appendUserObject.\n\nAdds a bunch of tests to validate error handling in toString code\n- Verify that a future completing during the toString call results in a done formatted string\n- Verify that an exception thrown by pendingToString doesn't cause toString to fail\n- Verify that cycles don't cause toString to fail\n- Verify that deep chains of SetFuture don't cause toString to fail\n\nRELNOTES=Catch StackOverflowError in AbstractFuture.toString to prevent long chains of futures from failing toString calls.\n\n29981d416d6b4214e65360ad3d932ba0881a4c8f\n\n-------\n\n<p> Update Documentation\n\nFixes #3507\n\n8a0d6bb345341fc0ba91781070da5b522d4b714b", "NaN"], ["3681", "Upgrade maven source plugin from 3.1.0 to 3.2.0 - Reproducible Builds", "William Collishaw", "WilliamCollishaw", "12/01/19, 11:16:35 PM", "Upgrade maven source plugin from 3.1.0 to [3.2.0](https://maven.apache.org/guides/mini/guide-reproducible-builds.html) \r\nMaven source and jar plugins both introduced [build reproducibility](https://maven.apache.org/guides/mini/guide-reproducible-builds.html) (Maven jar plugin upgrade in #3534) in 3.2.0", "NaN"], ["3684", "MOE Sync 2019-11-06", "Kurt Alfred Kluever", "kluever", "11/07/19, 01:26:46 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add @SuppressWarnings(\"DoNotMock\") to mocked com.google.common types\n\n@DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked.\n\n13ed6d3846bb3765b19ec06819a215ae93644b6c\n\n-------\n\n<p> Add GraphBuilder.incidentEdgeOrder().\n\n2c1db61cfae457a58554f4390c3907f18f406b6a\n\n-------\n\n<p> Remove usages of deprecated CharMatcher functions\n\nFixes #3565\n\n213ec90d8647412c4d25870fbc1c8bb3a44798ff\n\n-------\n\n<p> Have ImmutableGraph.Builder set incidentEdgeOrder to stable().\n\nc43a2bf57ccc089bb64f2704321e175a611cdc4b\n\n-------\n\n<p> Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers\n\nThe former is deprecated and replaced by the latter in Mockito 2. However, there is a\nfunctional difference: ArgumentMatchers will reject `null` and check the type\nif the matcher specified a type (e.g. `any(Class)` or `anyInt()`). `any()` will\nremain to accept anything.\n\nAll remaining `any(Class)` references are migrated to `nulllable(Class)` to maintain the functionality of Mockito 1.\nAll remaining `anyString()` references are migrated to `nullable(String.class)` to maintain the functionality of Mockito 1.\n\n3e96e06575ea0bb1e8be61ce2edd57ac9427c71d", "NaN"], ["3686", "MOE Sync 2019-11-07", "Kurt Alfred Kluever", "kluever", "11/07/19, 04:12:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Upgrade maven source plugin from 3.1.0 to 3.2.0\nUpgrade maven jar plugin from 3.0.2 to the latest 3.2.0\nMaven source and jar plugins both introduced build reproducibility in 3.2.0\n\nSee https://github.com/google/guava/pull/3534\nSee https://github.com/google/guava/pull/3681\n\n5f14dfb3b249c4b153892ecf74627c76c13b501d", "NaN"], ["3689", "Update broken links", "Michael Silver", "mikesterlingw", "11/07/19, 10:46:28 PM", "* Updates `DoubleAdder` link to a non-broken one\r\n* Remove `DoubleMaxUpdater` link as it no longer exists", "NaN"], ["3690", "MOE Sync 2019-11-07", "Kurt Alfred Kluever", "kluever", "11/07/19, 10:45:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Simplify some range constraints.\n\nFixes https://github.com/google/guava/pull/3607.\n\n88ef8691008d0c8c65f06a8eeb6a4e253a7a4868\n\n-------\n\n<p> Add javadoc in attempt to help readers differentiate Futures.allAsList() vs Futures.successfulAsList().\n\n980e6e68b72c1adb89b01862b12fdf554b1d5f33\n\n-------\n\n<p> Fix broken links in AtomicDouble.\n\nSee https://github.com/google/guava/pull/3689\n\n6c501c499020db010dd96918c26b3a07a655a1dd", "NaN"], ["3692", "Add README-kor.md for Korean", "LeeJuHyun", "JuHyun419", "11/08/19, 03:19:54 PM", "Check the README-kor.md File \r\n\ud83d\udc4d  ", "NaN"], ["3694", "Removed some deprecated methods in FilesTest and replaced with suggested. ", "MaAng", "playasim", "11/10/19, 10:05:23 PM", "I removed some deprecated methods in FilesTest.java and replaced them with suggested", "NaN"], ["3695", "MOE Sync 2019-11-11", "Chris Povirk", "cpovirk", "11/11/19, 04:48:18 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Roll forward CL 269313299.\n\n*** Original change description ***\n\nLet ListenableFuture implement thenable via a default interface method in J2CL\n\n639d873cc139a32b270ba5a11a7ceb87cf8460c0", "NaN"], ["3698", "MOE Sync 2019-11-13", "Chris Povirk", "cpovirk", "11/13/19, 04:02:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Migrate from arrays to ImmutableSets in InetAddressesTest.\n\nb827d92dbdd949550ecdf975111e4e0a4a4c7740", "NaN"], ["3699", "MOE Sync 2019-11-13", "Chris Povirk", "cpovirk", "11/13/19, 06:47:33 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Clean up some unnecessary initializations.\n\ndf0d13f964c729a3e0311f0b9db7e42fea70945e", "NaN"], ["3702", "MOE Sync 2019-11-14", "Chris Povirk", "cpovirk", "11/14/19, 04:57:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move the big integer conversion code into InetAddresses\n\nRELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers\n\n1a13905a8c1cf29142ab22e5c3ce384d97a5113d\n\n-------\n\n<p> Add support for scope IDs to InetAddresses.isInetAddress().\n\nFixes https://github.com/google/guava/issues/2587\n\n2d45ed1e2fba3801b6e5e46c157f342aa7e4d937", "NaN"], ["3703", "MOE Sync 2019-11-14", "Chris Povirk", "cpovirk", "11/14/19, 06:08:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move the big integer conversion code into InetAddresses\n\nRELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers\n\na544e97d10572d0a71c481e2b833ad19a3a7de4f\n\n-------\n\n<p> Add support for scope IDs to InetAddresses.isInetAddress().\n\nFixes https://github.com/google/guava/issues/2587\n\n1d3780724431da91b28bbf50fcb13f27459f4710\n\n-------\n\n<p> Format with Locale.ROOT.\n\nThis guarantees that the message matches across locales, including hi-IN, which we test with under Maven:\nhttps://travis-ci.org/google/guava/jobs/611945191\nhttps://github.com/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pom.xml#L212\n\nb29efa54b23b3cb28f4e150d045b83b8196d9050", "NaN"], ["3704", "MOE Sync 2019-11-14", "Chris Povirk", "cpovirk", "11/14/19, 09:08:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use Truth assertions instead of JUnit assertions in InetAddressesTest.\n\nMake assertions stronger if possible (check object equality instead of reference equality).\n\n79e2c4efcbebf40ad651fddb107273b960874841\n\n-------\n\n<p> Correct documentation of getCoercedIPv4Address.\n\n848d95b7e9e998cf9d8c952aeaf661902c364eb5", "NaN"], ["3706", "checker-qual 2.10.0", null, "sullis", "11/18/19, 04:13:57 PM", "NaN", "NaN"], ["3709", "WIP +eventbus Add EventDispatchTask to help retrieve the original event.", "kerr", "hepin1989", "11/18/19, 07:23:34 PM", "I need this to retrieve the original event", "NaN"], ["3710", "MOE Sync 2019-11-18", "Nick", "nick-someone", "11/18/19, 04:13:57 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> checker-qual 2.10.0\n\nFixes #3706\n\n8f2ec6330b05f156985dd0c9dc2acebbb8a711c2", "NaN"], ["3711", "MOE Sync 2019-11-19", "Nick", "nick-someone", "11/19/19, 04:07:47 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Public Suffix data.\n\nThe [] copy is updated whenever Chrome's copy is updated, which is\ntypically every 6 weeks. Star the following to watch Chrome's updates:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=610495\n\nWhen that bug is not updated, the [] copy is updated 3 weeks before the\nEstimated Week of Stable:\n\nhttps://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates\n\nFor this update, []\n\nd6c3cd99a466583651a7058505371fab8b76e554\n\n-------\n\n<p> Update to Truth 1.0\n\ne6225a652e1a4651541fdeed15a400cdcba29b7a", "NaN"], ["3712", "Rejuvenate log levels", "Grace Tang", "saledouble", "11/19/19, 06:41:37 PM", "We appreciate your previous feedback and it's very helpful! Here's a reissue of https://github.com/google/guava/pull/3435 with a new version of our tool. The tool made many fewer transformations. Again, we'd appreciate any feedback and are willing to make further changes if you wish to incorporate our PR into your project.\r\n\r\nSettings\r\n---\r\nWe have several analysis settings. We can vary these settings and rerun if you desire. The settings we are using in this pull request are:\r\n\r\nTreat CONFIG/WARNING/SEVERE levels as a category and not a traditional level, i.e., our tool ignores these log levels.\r\nNever lower the logging level of logging statements within catch blocks.\r\nNever lower the logging level of logging statements within if statements.\r\nNever lower the logging level of logging statements containing certain (important) keywords.\r\nNever raise the logging level of logging statements without particular keywords in their messages.\r\nAvoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.\r\nThe greatest number of commits from HEAD evaluated: 1000.\r\nThe head at the time of analysis was: 71de4064ac005e1d283b8a6d4153aab834903720\r", "NaN"], ["3713", "Rejuvenate log levels", "Grace Tang", "saledouble", "12/09/19, 04:41:18 PM", "We appreciate your previous feedback and it's very helpful! Here's a reissue of https://github.com/google/guava/pull/3435 with a new version of our tool. The tool made many fewer transformations. Again, we'd appreciate any feedback and are willing to make further changes if you wish to incorporate our PR into your project.\r\n\r\nSettings\r\n---\r\nWe have several analysis settings. We can vary these settings and rerun if you desire. The settings we are using in this pull request are:\r\n\r\nTreat CONFIG/WARNING/SEVERE levels as a category and not a traditional level, i.e., our tool ignores these log levels.\r\nNever lower the logging level of logging statements within catch blocks.\r\nNever lower the logging level of logging statements within if statements.\r\nNever lower the logging level of logging statements containing certain (important) keywords.\r\nNever raise the logging level of logging statements without particular keywords in their messages.\r\nAvoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.\r\nThe greatest number of commits from HEAD evaluated: 1000.\r\nThe head at the time of analysis was: 71de4064ac005e1d283b8a6d4153aab834903720\r", "NaN"], ["3715", "MOE Sync 2019-11-20", "Nick", "nick-someone", "11/20/19, 03:29:04 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> subject verb agreement\n\n2367571b5cbbd17788a497e395f3e4590c4ec38e", "NaN"], ["3716", "Rejuvenate log levels using setting 2", "Grace Tang", "saledouble", "12/09/19, 04:41:26 PM", "Thank you for your feedback in our previous PR (https://github.com/google/guava/pull/3713)! That PR has a setting that only transforms log levels below `INFO`. I rerun our tool with the new settings as mentioned below to make this PR. This PR has two additional transformations that we think they are reasonable.\r\n\r\nSettings\r\n---\r\nThe settings we are using in this pull request are:\r\n\r\nTreat CONFIG levels as a category and not a traditional level, i.e., our tool ignores these log levels.\r\nNever lower the logging level of logging statements within catch blocks.\r\nNever lower the logging level of logging statements within if statements.\r\nNever lower the logging level of logging statements containing certain (important) keywords.\r\nNever raise the logging level of logging statements without particular keywords in their messages.\r\nAvoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.\r\nThe greatest number of commits from HEAD evaluated: 1000.\r\nThe head at the time of analysis was: 71de4064ac005e1d283b8a6d4153aab834903720\r\n\r\nThese are CSV files generated by our tool.\r\n[CSV_files_c_1000.tar.gz](https://github.com/google/guava/files/3871921/CSV_files_c_1000.tar.gz) (updated)\r\n\r", "NaN"], ["3723", "MOE Sync 2019-11-27", "Nick", "nick-someone", "11/27/19, 09:19:33 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use internal fast path for getting failure without allocating a wrapper ExecutionException\n\nAlso fix GWT AbstractFuture so that it respects the trusted interface. (More motivation for https://github.com/google/guava/issues/2934)\n\nRELNOTES=N/A\n\n736b09299f7ce844fdf28c5675eb126ea6b43e02\n\n-------\n\n<p> Support incidentEdgeOrder for directed Graphs\n\nfd2255edf013f6592b83ee17432d0997d8db74d5\n\n-------\n\n<p> Add @JsOptional annotations to the 2nd parameter of the 'then' method, since the second parameter is actually optional. This satisfies JsCompiler type checking.\n\n73be65bd36e498f133549ddc24523176152aa8dc", "NaN"], ["3725", " Re-expose constructor and method that were made private at Guava 22.0", "Scott Babcock", "sbabcoc", "12/09/19, 06:09:16 PM", "This set of revisions restores the constructor and method of the\r\nSimpleTimeLimiter class that were introduced in Guava 19.0 and made\r\nprivate in Guava 22.0. This enables clients of the UrlChecker class of\r\nSelenium 2 to upgrade to the latest Guava release to fix a security\r\ndefect.", "NaN"], ["3726", "MOE Sync 2019-12-01", "Nick", "nick-someone", "12/02/19, 02:22:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make incidentEdges() return edges in insertion order\n\ndf2c5527d5fe4a50135239f0b6b516058a37c5fa\n\n-------\n\n<p> AbstractNetwork: fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.\n\nRELNOTES=Fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  Originally reported as GitHub issue #3721.\n\n8e0f821430acaa5b77c5c2c05380e3d29f18e410\n\n-------\n\n<p> Refactor AbstractGraphTest to allow for tests with ImmutableGraph.\n\nReason: ImmutableGraph implementations are undertested compared to MutableGraph implementations. The current tests didn't catch a bug I deliberately introduced in [] Also, it would be nice to be able to share the incident edge order tests.\n\nNote about design: I started out by making an AbstractGraphTest subclass for mutable graphs. However, that would lead to a duplication of all 7 subclasses and most of their tests. The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable. The proposed solution is somewhat unconventional, but at least allows us to share much more code between the tests.\n\na6d0db50f6d678839f17c82a76341bb0d3d60b29\n\n-------\n\n<p> Merge AbstractXGraphTest and ConfigurableSimpleXGraphTest, thus removing one layer from the AbstractGraphTest tree.\n\nReason: Nobody in [] is using these abstract test classes (even though they are designed for general purpose graphs). However, even though they aren't used, these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of ImmutableGraph tests and stable incident edge order tests.\n\nce50502b9bd6fbd909abed1afd1de2976246eef9\n\n-------\n\n<p> Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.\n\nf5ac328e048606d0b40c7e0b1b55bccd6ff177eb\n\n-------\n\n<p> Merge StandardMutableDirectedGraphTest and its variant with stable order.\n\nThis is in preparation for adding an Immutable version that also needs tests for the stable order.\n\na0ebd7b6d2789a168df5e3e0a224513dfe1257ee\n\n-------\n\n<p> Add StandardImmutableDirectedGraphTest\n\n033535490cf36040b4c2aba6a94e9b0f3e59564e\n\n-------\n\n<p> Annotate benign race in AbstractTable so as to avoid TSAN issues.\n\na4c3bcd7d1c8438d02d368a18c46c1b39f27e80d", "NaN"], ["3727", "Update to errorprone 2.3.4", "David Hatanian", "dhatanian", "12/09/19, 05:08:37 PM", "Errorprone 2.3.3 was missing classes such as `DoNotMock` . This didn't affect Guava, but it led to dependency conflicts for people using both Guava and Lombok.\r\n\r\nVersion 2.3.4 adss `DoNotMock` back, which solves this issue.", "NaN"], ["3729", "fix CaseFormat", "zhixiangyuan", "zhixiangyuan", "12/05/19, 05:32:02 AM", "The extra space requested here is for the new separator, so you need to use the passed separator.", "NaN"], ["3730", "fix CaseFormat", "zhixiangyuan", "zhixiangyuan", "12/09/19, 07:56:39 PM", "The extra space requested here is for the new separator, so you need to use the passed separator.", "NaN"], ["3732", "MOE Sync 2019-12-06", "Colin Decker", "cgdecker", "12/06/19, 05:59:58 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Use \"IPv4\" instead of \"Ipv4\" for consistency.\n\nThis CL goes against the style guide, but we should be consistent within the file. We could instead rename the existing, lightly used methods to match the style guide, but I don't think this will be the best use of someone's time.\n\n4a627d3ea2ac16e7e970f78939df6a163335df1c\n\n-------\n\n<p> Add @SuppressWarnings(\"GoodTime\") to GWT supersource for LocalCache operating in primitive millis.\n\n95e7e1af8ef059e874f4c00230b010f651322e71\n\n-------\n\n<p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo(), rather than proxy methods\n\n1fc1f11779159183f0b4daeb388c6def36a4a2e3\n\n-------\n\n<p> Make equally named putEdge() method adjacent\n\n9a1f2e28f76a623501e8178262359202055139c2\n\n-------\n\n<p> Support stable incident edge order for directed Immutable[Value]Graphs.\n\n2608ca43cf15c4b2a7ad21a900550358f5e6fc76", "NaN"], ["3734", "MOE Sync 2019-12-09", "Colin Decker", "cgdecker", "12/09/19, 07:56:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add @DoNotMock to several com.google.common types\n\nRelnotes:\n  - Add @DoNotMock to several com.google.common types.\n\ndbd97473cab26185e48620b7916159915621bb14\n\n-------\n\n<p> Add @DoNotMock to ListenableFuture\n\nRemove @DoNotMock from AbstractFuture, as it is now covered by @DoNotMock on ListenableFuture\n\nRELNOTES=N/A\n\nad9d3eae25e3f7a8bb07a0b00105ec4426beab88\n\n-------\n\n<p> Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.\n\nFixes https://github.com/google/guava/pull/3730\n\n0dc680192f18b7664f900304576736c1914d14ba", "NaN"], ["3735", "Documentation: format the Javadoc of ByteStreams.read with @throw tags.", "Pengyu Nie", "pengyunie", "12/17/19, 04:05:34 PM", "Formated the descriptions of possible exceptions of `ByteStreams.read` into `@throw` tags.", "NaN"], ["3739", "MOE Sync 2019-12-16", "Kurt Alfred Kluever", "kluever", "12/16/19, 03:36:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove @DoNotMock from HashFunction.\n\nUsers need some kind of way to, e.g., easily produce collisions in cases in which collisions should be rare.\nMaybe we can provide a better way to do this, but for now, let's at least not forbid using mocking frameworks.\n\nc9ae0d314031ac9521d57aab8743ddba0c5f4717", "NaN"], ["3740", "MOE Sync 2019-12-17", "Kurt Alfred Kluever", "kluever", "12/17/19, 04:05:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Format the Javadoc of ByteStreams.read() with @throw tags.\n\nFixes https://github.com/google/guava/pull/3735\n\n907ec2ea8655ba1c69d8b003c3e51689ec02b864", "NaN"], ["3741", "MOE Sync 2019-12-18", "Kurt Alfred Kluever", "kluever", "12/18/19, 06:24:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Actually map Thenable helper interface to JS IThenable. The name is different to avoid a clash with elemental2 IThenable.\n\n8207e996f569381719eff09ee836509136734cc0\n\n-------\n\n<p> Use Error Prone's @GuardedBy enforcement to make sure that mutable state is appropriately synchronized.\n\nf6d239520285c399978597c4a6665bf41fe8395d", "NaN"], ["3743", "MOE Sync 2019-12-20", "Kurt Alfred Kluever", "kluever", "12/20/19, 03:07:47 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Expand Android access to Compact*Hash*\n\nAlso rename newCompactHashMapWithExpectedSize(int) to newCompactHashMap(int) to\nmatch newCompactHashSet(int).\n\nb2723ea162d6c4d7df62722e87f609f70478840a", "NaN"], ["3745", "Refactor Lambda can be replaced method reference", null, "wangzhaoning", "12/23/19, 06:49:46 PM", "NaN", "NaN"], ["3746", "MOE Sync 2019-12-23", "Kurt Alfred Kluever", "kluever", "12/23/19, 03:42:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make Compact(Linked)HashMap fall back to a java.util.(Linked)HashMap if hash flooding is detected, just as the immutable collections do.\n\n40d75c94d568935159ce838c61940430fce54249", "NaN"], ["3747", "MOE Sync 2019-12-23", "Chris Povirk", "cpovirk", "12/23/19, 04:59:40 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected, just as the immutable collections do.\n\n5dffec12c07ea23bcba653198036e55df27792f0\n\n-------\n\n<p> Fix Maven test failures from CL 286604248:\n- Make \"abstract\" class abstract. (And make its constructor package-private while we're at it.)\n- Add a dummy test method (similar to what FilteredCollectionsTest already has).\n\nThese should fix:\n- warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase()\n- warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest\n\nhttps://travis-ci.org/google/guava/jobs/628734577\n\n(Also, address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)\n\n8ccd51880e63c487af858c6de57a2d37eb2cf4ac\n\n-------\n\n<p> Add @SuppressWarnings for new violations of the GuardedBy checker.\n\n98736425927413862c058d11f1aaeae53bbe0f91", "NaN"], ["3748", "MOE Sync 2019-12-23", "Chris Povirk", "cpovirk", "12/23/19, 06:49:46 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> refactor: Lambda can be replaced method reference\n\nFixes #3745\n\n1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e", "NaN"], ["3749", "Adding travis_wait to mvn install", "Fanon Jupkwo", "FanJups", "12/23/19, 08:09:56 PM", "Why ?\r\nBuilding such big APIs as guava   can take a lot of time.  **It's possible to get a time out**.\r\n[Here](https://github.com/4hwc/4HWCAutonomousCar/commit/96c6396d444f0364150241c5bed3e0b9fc7ba5c8), I got a time out due to generating javadoc. Then, I decided to add travis_wait and it works pretty well.\r\n\r\nOfficial docs : https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received", "NaN"], ["3752", "MOE Sync 2019-12-24", "Chris Povirk", "cpovirk", "12/26/19, 03:26:08 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct @Nullable and use Ints.constrainToRange()\n\n5d9fc397a80618ea90786f026962f208b979bece", "NaN"], ["3753", "MOE Sync 2019-12-26", "Chris Povirk", "cpovirk", "12/26/19, 03:47:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix external GWT breakage from CL 272446666.\n\na950b04670789853d923be2d96079a91d3f8995d", "NaN"], ["3755", "MOE Sync 2019-12-26", "Chris Povirk", "cpovirk", "12/26/19, 07:51:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Stop classifying AbstractHashFloodingTest as a test to be run directly.\n\nWhen it's classified as a test to be run directly, our custom infrastructure generates AbstractHashFloodingTest_gwt, and Maven tries to run it, failing with:\n  No tests found in com.google.common.collect.AbstractHashFloodingTest_gwt\n\nIdeally, our infrastructure would recognize that an abstract class could never be run directly, at which point we wouldn't need to manually classify tests like this. But I don't remember seeing this problem in a long time, so we probably won't bother.\n\n55e4929f978eec17a829fb0a7c6f338710720b19", "NaN"], ["3756", "documenting IllegalArgumentException for too-large Cartesian Product in Sets.cartesianProduct", "Mitchell Irvin", "mitchellirvin", "12/26/19, 08:47:29 PM", "#3742 mentions that there's no documentation for an IllegalArgumentException being thrown.\r\n\r\nIt turns out there's a test case here that covers this case, but it's not mentioned in the JavaDoc: https://github.com/google/guava/blob/d9b73b20964b9d87457c56d1e422a67f45c2c257/guava-tests/test/com/google/common/collect/SetsTest.java#L774\r\n\r\nThe original exception is thrown here in the CartesianList constructor: https://github.com/google/guava/blob/d9b73b20964b9d87457c56d1e422a67f45c2c257/guava/src/com/google/common/collect/CartesianList.java#L59\r\n\r\nI've just added a `throws` line in both of the JavaDocs for `Sets.cartesianProduct()`", "NaN"], ["3757", "MOE Sync 2019-12-27", "Chris Povirk", "cpovirk", "12/27/19, 03:51:30 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Assign the result of contains() and containsAll() to a variable.\n\nThis satisfies the CheckReturnValue checker.\n[]\n\nd99aad23b74bf91eb3084b2b40625e787e758ff3", "NaN"], ["3758", "MOE Sync 2020-01-02", "Nick", "nick-someone", "01/02/20, 04:07:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix instances of {#foo} in Javadoc.\n\n31b05b7c67b4a6fe620dc14f33cc9818f7ee107c", "NaN"], ["3759", "Allow user-provided Ticker in RateLimiter", "Piotr Findeisen", "findepi", "02/21/20, 09:08:33 PM", "Fixes https://github.com/google/guava/issues/3037. Fixes https://github.com/google/guava/issues/1774\r\n\r\nAs mentioned in https://github.com/google/guava/issues/3037#issuecomment-570493413, this is needed to remove `Thread.sleep` from unit tests of classes that internally use `RateLimiter` (eg https://github.com/prestosql/presto/blob/cb62e11aa72116c13bcac50ddcfb8e0f01bbb02a/presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestThrottledAsyncQueue.java#L105).", "NaN"], ["3761", "Fix off-by-one error in AsciiDigits.asciiDigits initialization", "Micha\u0142 Sobkiewicz", "perceptron8", "01/09/20, 03:25:27 PM", "`AsciiDigits.digit('[')` should return -1 instead of 36.\r\n\r\nI changed both loops to consistently use strict inequalities. Now it's clear that there are 10 + 26 = 36 digits / iterations in total.\r\n\r\nFortunately this bug doesn't affect anything other than `Longs.tryParse` where it is - by accident - harmless.\r\n\r\nhttps://github.com/google/guava/blob/v28.2/guava/src/com/google/common/primitives/Longs.java#L405\r\nhttps://github.com/google/guava/blob/v28.2/guava/src/com/google/common/primitives/Longs.java#L414\r\n\r\nNote that `Longs.tryParse('[', 36)` and `Longs.tryParse('0[', 36)` currently return `null` because of `digit >= radix` condition, not `digit < 0` as it should be.\r\n\r\n\r", "NaN"], ["3763", "MOE Sync 2020-01-06", "David P. Baker", "netdpb", "01/06/20, 07:21:49 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update to JUnit 4.13\n\n15262018825b31559b39e1ea84cccb29903f44e0\n\n-------\n\n<p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.\n\n55fdde6aee4878820e8fc7615c05ec8d0e365b5f\n\n-------\n\n<p> Suppress ignored return values from Collection#contains*.\n\nI think this is all of them!\n\nb574bfaead6951521ba9d174c935b55309fa51b8", "NaN"], ["3764", "MOE Sync 2020-01-07", "David P. Baker", "netdpb", "01/07/20, 07:38:22 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Ensure that we generate a non-empty Javadoc jar for guava-gwt.\n\nWithout it, we get an error during Sonatype deployment:\n  Missing: no javadoc jar found in folder '/com/google/guava/guava-gwt/28.2-jre'\n\nI hacked around this on the GitHub release branch for 28.2 by reenabling Javadoc:\nhttps://github.com/google/guava/commit/a1b3c06876803a0b0e5d2f16708e1328da1bac09\n\nBut as you may recall from CL 276327335, we're soon going to have no classes to generate Javadoc for (after we remove GWT-RPC support). So even with Javadoc generation enabled, we'd end up with no jar.\n\nTo ensure that we get a jar, I've introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).\n\n80210f266950156ccd1eb56d18af7552f41dd274\n\n-------\n\n<p> ValueGraph: Support incidentEdgeOrder=stable\n\nf05442beb167e9e7953022983f3885cb219d9968\n\n-------\n\n<p> ImmutableValueGraph: Support incidentEdgeOrder=stable\n\nRELNOTES=N/A\n\n12b0521095bde73b06c13ccd9558be10cd648d4f\n\n-------\n\n<p> Graph: Support stable incidentEdgeOrder for undirected graphs\n\ne541ab5ee31f86733a0bfa0caa11f872292f51cd\n\n-------\n\n<p> Add StandardImmutableUndirectedGraphTest\n\n5fddc483ad638b46badddcc44ca0501b9a185c5c\n\n-------\n\n<p> Suppress GuardedBy violation in LocalCache.\n\nThis looks like it's just for testing, which I think makes it /probably OK/, but feel free to suggest otherwise.\n\ndb04af06932fe7ff009a7903e44471e945ea057d", "NaN"], ["3765", "MOE Sync 2020-01-08", "David P. Baker", "netdpb", "01/09/20, 03:25:27 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.\n\naee54682770a3166c231bbfecced91f31c55d32a\n\n-------\n\n<p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest\n\n0aba85dd247e254e10fcd84e7b2940fa0383e14e\n\n-------\n\n<p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.\n\nFixes #3761.\n\n2b27d9f906e18ae1105766d41e0940122ce686a0\n\n-------\n\n<p> Disable GWT-RPC by default in the open-source release.\n\nRELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support, set the `guava.gwt.emergency_reenable_rpc` system property to `true`.\n\nff0cd947f82d24611e39fb3d86e3d19da4af801f", "NaN"], ["3766", "MOE Sync 2020-01-09", "David P. Baker", "netdpb", "01/09/20, 03:24:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.\n\n845bc959a299f70f380c66fa9bf5da9459b1bdf7\n\n-------\n\n<p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest\n\n5cc9a391837b0ac5b8e745c2bc8bdf85ff0543a8\n\n-------\n\n<p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.\n\nFixes #3761.\n\n7704a939a9910ca7f1339cbc0d65e431b8eb6bfe\n\n-------\n\n<p> Disable GWT-RPC by default in the open-source release.\n\nRELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support, set the `guava.gwt.emergency_reenable_rpc` system property to `true`.\n\n50622528d589c17e9bd9f20841f7c35066263410\n\n-------\n\n<p> Add incidentEdgeOrder() to the [Value]Graph interface\n\nRELNOTES=`graph`: Add `incidentEdgeOrder()` to the `[Value]Graph` interfaces\n\n3446a348d5750f999cd429af57ca909b37a72655\n\n-------\n\n<p> Make incidentEdgeOrder() public for [Value]Graph\n\nRELNOTES=`graph`: Allow setting a stable incident edge order by calling the newly added method `[Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable())`.\n\nfab6309ae6cd256bd6ae826cd3eb61eb76a198f7", "NaN"], ["3767", "MOE Sync 2020-01-09", "David P. Baker", "netdpb", "01/09/20, 08:24:44 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add incidentEdgeOrder() to the [Value]Graph interface\n\nRELNOTES=`graph`: Add `incidentEdgeOrder()` to the `[Value]Graph` interfaces\n\nae2710e8cb1d0ab80e247334273695da0c7b3afb\n\n-------\n\n<p> Make incidentEdgeOrder() public for [Value]Graph\n\nRELNOTES=`graph`: Allow setting a stable incident edge order by calling the newly added method `[Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable())`.\n\n0ceaed084bb7e52d8fa3b0760cb0ffe486918a00", "NaN"], ["3769", "MOE Sync 2020-01-14", "Colin Decker", "cgdecker", "01/14/20, 04:33:40 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Upgrade checker-qual to v2.11.1.\n\nFixes https://github.com/google/guava/pull/3671\n\nf85d76f668074f9cb396a5f55bf9588d9262a5fa", "NaN"], ["3772", "MOE Sync 2020-01-16", "Colin Decker", "cgdecker", "01/16/20, 08:01:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Public Suffix data.\n\nfea136b2585cd01765e67de83e54dad6a0aebae5\n\n-------\n\n<p> Rewrite the Stopwatch docs to explain elapsed vs wall time\n\n81b9816a5e8347a05518c7869464e0f357be58b7", "NaN"], ["3773", "MOE Sync 2020-01-17", "Colin Decker", "cgdecker", "01/18/20, 07:36:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Resource.getResource to allow ignoring return value for existence checks.\n\nSpecifically this impacts getResource(contextClass, resourceName) as this is already present on getResource(resourceName)\n\nRELNOTES=Update Resource.getResource(*) to allow ignoring return value for existence checks.\n\n383c278b7b8044feac53153c0dd3202d3fa0b3c6", "NaN"], ["3774", "Write type annotations on types, not on declarations", "Michael Ernst", "mernst", "01/21/20, 04:54:32 PM", "NaN", "NaN"], ["3786", "MOE Sync 2020-01-28", "Chris Povirk", "cpovirk", "01/28/20, 09:42:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Link directly to guava.dev for Javadoc.\n\n70f7d83f89d99d24d8a1a041dc8a7329316e03ce", "NaN"], ["3788", "Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval", "Elliott Brossard", "ElliottBrossard", "02/07/20, 02:44:29 AM", "Context: https://github.com/google/guava/issues/3784", "NaN"], ["3793", "MOE Sync 2020-02-04", "Chris Povirk", "cpovirk", "02/04/20, 04:27:05 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Annotate upperCase and lowerCase with @LazyInit.\n\nThis eliminates a TSAN warning.\n\nf325f04c86c8159f5bd9d771e697217a866c46d2", "NaN"], ["3794", "Love le changement", null, "Govjo", "02/06/20, 10:27:55 PM", "NaN", "NaN"], ["3795", "DO NOT MERGE: Make AbstractFuture compatible with ForkJoinPool (taken over from #3788)", "Chris Povirk", "cpovirk", "02/06/20, 08:10:22 PM", "NaN", "NaN"], ["3796", "MOE Sync 2020-02-06", "Chris Povirk", "cpovirk", "02/07/20, 02:44:29 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval.\n\nFixes #3788, #3784\n\nRELNOTES=Made it safe to load the `AbstractFuture` class from a `ForkJoinPool` thread under a security manager.\n\ne589b5c884a5996f7040ae38bdf02709f9e300da", "NaN"], ["3797", "MOE Sync 2020-02-10", "Chris Povirk", "cpovirk", "02/11/20, 04:23:59 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add missing @Nullable.\n\nafa21015d337d38bbaa752aa29b2d50c700f8190", "NaN"], ["3799", "MOE Sync 2020-02-12", null, "kevinb9n", "02/12/20, 09:59:04 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Apply changes from https://github.com/google/guava/pull/3778 (which edited guava.dev) to README.md.\n\n528621033995a445a7cf0e69bdbbe4622ceaf6ea", "NaN"], ["3800", "Simplify redundant `Collection.addALl()` call", "Teng Zhang", "zhangt2333", "02/23/20, 10:51:09 PM", "Simplify redundant `Collection.addALl()` call and Optimize performance.", "NaN"], ["3801", "MOE Sync 2020-02-17", "Kurt Alfred Kluever", "kluever", "02/17/20, 09:58:45 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Rename 'ConfigurableX' to 'StandardX' for [Value]Graph, which better captures what these implementations represent.\n\nNote that this work was already started in the past with the abstract StandardGraph tests.\n\n1be4110bac4c8540053fb4d096fdbb6d28d8a504", "NaN"], ["3802", "MOE Sync 2020-02-19", "Kurt Alfred Kluever", "kluever", "02/19/20, 05:37:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.\n\nPreviously this would lead to java.lang.NegativeArraySizeException.\n\ne0418c067aea976e3e59e23e035d15177112597a\n\n-------\n\n<p> Annotate FluentIterable.from(FluentIterable) with @DoNotCall\n\nRELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall\n\ne3264687f823752dea2d724d2734b4a18e5c92a3\n\n-------\n\n<p> Fixing a typo in some Guava javadocs.\n\nRELNOTES=Fixing a typo in javadoc.\n\n5efab94ad9b77695012878c6b7c5a8815c7d2d36", "NaN"], ["3804", "MOE Sync 2020-02-21", "Kurt Alfred Kluever", "kluever", "02/21/20, 02:41:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Invalidate delegate iterators during clear() and make FPP tests more strict\n\n2cb0a5968938965027b9fc046f67db565a8cb68c", "NaN"], ["3805", "MOE Sync 2020-02-23", "Kurt Alfred Kluever", "kluever", "02/23/20, 10:51:09 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Simplify redundant `Collection.addAll()` calls.\n\nFixes #3800\n\nae564a1d7c39704e800f04cef427f4c8abd6f010", "NaN"], ["3806", "Remove @Beta from Service and ServiceManager", "Jesse Wilson", "swankjesse", "04/10/20, 03:45:52 PM", "This leaves AbstractListeningExecutorService as @Beta.\r\n\r\nCloses: https://github.com/google/guava/issues/3418", "NaN"], ["3807", "MOE Sync 2020-02-25", "Colin Decker", "cgdecker", "02/25/20, 08:31:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.\n\nNote: This is a pure refactor, no coverage is changing.\n\n1ae455b65162b8a1adf369e24f1d593b5f2886a3", "NaN"], ["3810", "MOE Sync 2020-02-27", "Chris Povirk", "cpovirk", "02/27/20, 06:02:07 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected, just as the immutable collections do.\n\na97eccf35da1290e69a2b95375b10cbced95c7b6\n\n-------\n\n<p> Make lenientToString easier for nullness-analysis tools to understand.\n\nAnd I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?\n\nAs far as tools know, String.valueOf is capable of throwing an Error or RuntimeException, even when it's called with a parameter whose values is null. Thus, tools conclude that the flow of the program might reach `o.getClass().getName()` when `o` is null. That would in turn produce NullPointerException.\n\nTools might not even be wrong, since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course, in that case we're going to have problems in the catch() block no matter what... :)\n\nTo avoid this, we check for null in lenientToString itself.\n\ne9d2fcc35213b848d2904e82768dc5d42d33039a\n\n-------\n\n<p> Make GWT compilation of tests no longer flaky.\n\nbb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2\n\n-------\n\n<p> Update Public Suffix data.\n\n1323cda77015764438d4febdd83240c006b9da48\n\n-------\n\n<p> Rename 'ConfigurableX' to 'StandardX' for Network, which better captures what these implementations represent.\n\nNote that this work was already done for [Value]Graph.\n\nef37cf45afbcd44a75de665b03966a075af7727a", "NaN"], ["3811", "MOE Sync 2020-02-27", "Chris Povirk", "cpovirk", "02/27/20, 06:40:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove remaining documentation references to configurable implementations\n\n9c3f315f62358c54a0e03fda782eba0e8d39419f\n\n-------\n\n<p> Delete unused method\n\n71f625f15620bf4893322011536977459321c1a5", "NaN"], ["3814", "MOE Sync 2020-03-02", "Colin Decker", "cgdecker", "03/02/20, 07:39:37 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make nullWriter().append(...) (both overloads) accept a null CharSequence.\n\nThe docs of Writer are misleading:\n\n\"\"\"\nAn invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation\n     out.write(csq.toString())\n\"\"\"\nhttps://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29\n\nBut that's not true, as the docs go on to say:\n\n\"\"\"\ncsq - The character sequence to append. If csq is null, then the four characters \"null\" are appended to this writer.\n\"\"\"\n\nAccepting null in the 2-arg method is arguably even weirder, but at least the docs call it out more prominently:\nhttps://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence,%20int,%20int%29\n\nCredit to the Checker Framework for identifying this bug.\n\na27746a876d9426a7252460ef288f4abf9c0d785", "NaN"], ["3815", "MOE Sync 2020-03-04", "Nick", "nick-someone", "03/04/20, 05:59:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Store each result in a \"Present<V>\" instance instead of an Optional<V>.\n\nWe can't store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519), which is likely to omit failures instead of mapping them to null as successfulAsList does).\n\nWe may have problems using Optional when we adopt new nullability annotations, since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type.\n\ne371bf1af65c4c6727d1194fd59ffcc99a8ea084\n\n-------\n\n<p> Migrate from @MonotonicNonNull to @Nullable.\n\nThe features of @MonotonicNonNull don't buy us anything in our use case, since we check the fields for null on every access, anyway.\n\nAnd @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt.\n\nhttps://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html\n\nd4d5d6293d45c41110cb35c3e6e3a27996fe91bc\n\n-------\n\n<p> Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break\n\n8a32d0b35e3c8342ef1cb503de9ef2881958ad68\n\n-------\n\n<p> Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d\n\nMake nullWriter().append(...) (both overloads) accept a null CharSequence.\n\nThe docs of Writer are misleading:\n\n\"\"\"\nAn invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation\n     out.write(csq.toString())\n\"\"\"\nhttps://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app...\n\n29992f2f557770a4c52c78f47750ae12b26d72fd", "NaN"], ["3816", "Add UTs for base64Url() decode in BaseEncoding", "Teng Long", "dyrone", "03/20/20, 09:49:54 PM", "I use base64Url in code if Gerrit to make the base64 URL safe.\r\n\r\nBut found that it doesn't cover some basic cases. ", "NaN"], ["3818", "MOE Sync 2020-03-09", "David P. Baker", "netdpb", "03/09/20, 06:09:37 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Document that our racy access is safe.\n\n2c9301827eab9df3769c09ca1ae74c7c8673ea76", "NaN"], ["3819", "MOE Sync 2020-03-10", "David P. Baker", "netdpb", "03/10/20, 05:54:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors.\n\na8d9fcb85edea8f185af28da6b4e12f2636e59a6\n\n-------\n\n<p> Simplify the AbstractNetworkTest tree (undirected branch): Delete StandardSimpleUndirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\nNote: This is a pure refactor: No tests were added or removed.\n\n34ed9b2c6d258e867b043401ebd9614a175476b8\n\n-------\n\n<p> Move all tests from StandardMutableUndirectedNetworkTest to AbstractStandardUndirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\nNote: This is a pure refactor: No tests were added or removed.\n\n6dfb447e78c21e1e206cb91453f4e4e03e6b261b\n\n-------\n\n<p> Make StandardMutableUndirectedNetworkTest parameterized so that it tests both with and without self loops.\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\nee6595018132ed9e859152f0d11450598c168774\n\n-------\n\n<p> Simplify the AbstractNetworkTest tree (directed branch): Delete StandardSimpleDirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\n45bb762daf790b278f7ceaaab8c94575b70df32d\n\n-------\n\n<p> Move all tests from StandardMutableDirectedNetworkTest to AbstractStandardDirectedNetworkTest\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\nNote: This is a pure refactor: No tests were added or removed.\n\nbd328cd0dfeb89d27225cf9b4caecc5756ed42b3\n\n-------\n\n<p> Make StandardMutableDirectedNetworkTest parameterized so that it tests both with and without self loops.\n\nThis is similar to an earlier refector of the AbstractGraphTest tree.\n\nc5d8c5b19184f54be74b27d56e7d4f29824fdeac", "NaN"], ["3820", " JDK 8  uses MAXIMUM_CAPACITY = Ints.MAX_POWER_OF_TWO", null, "kkraja555", "03/11/20, 06:15:41 AM", "If initialCapacity is greater than Ints.MAX_POWER_OF_TWO  then JDK 8 uses  Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY.\r\nSo, Even if return Integer.MAX_VALUE as MAXIMUM_CAPACITY, JDK  gonna use  Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY\r\n\r\n**Snippet from JDK 8 Source:**\r\n   public HashMap(int initialCapacity, float loadFactor) {\r\n        if (initialCapacity < 0)\r\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\r\n                                               initialCapacity);\r\n        if (initialCapacity > MAXIMUM_CAPACITY)\r\n            initialCapacity = MAXIMUM_CAPACITY;", "NaN"], ["3822", "Change maximum capacity for Maps as per JDK 8", null, "kkraja555", "03/16/20, 02:24:23 PM", "If initialCapacity is greater than Ints.MAX_POWER_OF_TWO then JDK 8 uses Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY.\r\nSo, Even if we return Integer.MAX_VALUE as MAXIMUM_CAPACITY, JDK gonna use Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY\r\n\r\nSnippet from JDK 8 Source:\r\npublic HashMap(int initialCapacity, float loadFactor) {\r\nif (initialCapacity < 0)\r\nthrow new IllegalArgumentException(\"Illegal initial capacity: \" +\r\ninitialCapacity);\r\nif (initialCapacity > MAXIMUM_CAPACITY)\r\ninitialCapacity = MAXIMUM_CAPACITY; // which is Ints.MAX_POWER_OF_TWO", "NaN"], ["3823", "MOE Sync 2020-03-16", "Chris Povirk", "cpovirk", "03/16/20, 04:26:02 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Replace Thread.currentThread().interrupted() with Thread.interrupted() or Thread.currentThread().interrupt(), whichever seems appropriate.\n\nThread.interrupted: static method on Thread which returns whether the thread has been interrupted (and resets the interrupt bit)\n\nThread.currentThread().interrupt(): interrupts the current thread\n\n744b356fa6769d4ae6924d649ac20da6c7e748ac", "NaN"], ["3824", "MOE Sync 2020-03-16", "Chris Povirk", "cpovirk", "03/16/20, 05:51:58 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Implement some more toString() methods for debugging.\n\nI added these locally while debugging, but they seem potentially generally useful.\n\nd52651a64c4965bb06be812b90aee6191e7a80f8", "NaN"], ["3825", "MOE Sync 2020-03-16", "Chris Povirk", "cpovirk", "03/16/20, 06:16:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Store `values` in a local first instead of repeatedly reading it from a field.\n\nAt worst, this is a no-op. At best, it may perform better.\n\nb6d4f65f1065dcf3fe75bbeb1b2df226280116c5", "NaN"], ["3826", "Fixed double slicing ByteSource #3501", "Buddy119", "Buddy119", "03/19/20, 02:55:43 PM", "Fixes #3501\r\n\r\nadd maxLength < 0 to check whether the offset is greater than the source size. If so, return an empty source according to the API description.", "NaN"], ["3827", "MOE Sync 2020-03-17", "Chris Povirk", "cpovirk", "03/17/20, 08:46:00 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add `Duration`-based default methods to `ListeningScheduledExecutorService`\n\nThey just delegate to the existing methods from the interface, using the existing saturated conversion to nanoseconds. This matches existing `Duration`-based overloads of `(long, TimeUnit)` methods in the same package.\n\nRELNOTES=Added `Duration`-based `default` methods to `ListeningScheduledExecutorService`.\n\nc7984e7e5c40868ca47faede472ad77c10965114", "NaN"], ["3828", "Fixed NoSuchElementException when using Lists.partition and remove #3790", "Buddy119", "Buddy119", "03/18/20, 05:13:34 PM", "NoSuchElementException occurs because of Iterator in AbstractList call hasNext() as below\r\n```\r\npublic boolean hasNext() {\r\n            return cursor != size();\r\n        }\r\n```\r\n\r\nBut after execute remove operation on List, the result of calling size() will change. So I make size as a final int listSize.", "NaN"], ["3829", "Fixed double slicing ByteSource #3501", "Buddy119", "Buddy119", "03/19/20, 04:56:44 PM", "As previous PR has commit should not occur. So I submit a new PR and add a test.", "NaN"], ["3830", "MOE Sync 2020-03-19", "Chris Povirk", "cpovirk", "03/19/20, 04:56:44 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fixed double slicing ByteSource (#3501).\n\nFixes #3829\n\n6fb7746b8bc39d4d547a1b2bb47549c6b8314af4", "NaN"], ["3831", "MOE Sync 2020-03-20", "Chris Povirk", "cpovirk", "03/20/20, 09:49:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add some unit tests for base64Url() in BaseEncoding\n\nFixes #3816\n\ne1c08a80e340efb4477dd601d6073936cc67617f", "NaN"], ["3832", "first commit", null, "flicker01", "03/23/20, 01:49:01 PM", "NaN", "NaN"], ["3833", "MOE Sync 2020-03-25", "Nick", "nick-someone", "03/25/20, 02:03:04 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make sure native.js files are included in the Guava GWT release.\n\nThis is needed for J2CL compatibility.\n\nb1511bdf9bd51b666d07550ba258f556a6bef2fa\n\n-------\n\n<p> Add missing `@since` for 1-arg `ServiceManager.addListener`.\n\nhttps://guava.dev/releases/15.0/api/diffs/changes/com.google.common.util.concurrent.ServiceManager.html#com.google.common.util.concurrent.ServiceManager.addListener_added%28com.google.common.util.concurrent.ServiceManager.Listener%29\n\n29d356e629ed4798ba2fe9a71600e708e132b529", "NaN"], ["3836", "MOE Sync 2020-03-30", "Nick", "nick-someone", "03/30/20, 01:06:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Deprecate 1-arg overload of ServiceManager.addListener.\n\nIt default to directExecutor(). directExecutor() is often useful, but it should be an explicit choice, as some usages are dangerous:\nhttps://guava.dev/releases/snapshot-jre/api/docs/com/google/common/util/concurrent/ListenableFuture.html#addListener-java.lang.Runnable-java.util.concurrent.Executor-\n\nhttps://github.com/google/guava/issues/3418\n\nRELNOTES=`util.concurrent`: Deprecated the 1-arg overload of `ServiceManager.addListener`.\n\n200056a4525bf28f1d252505f1564fdf26322ccb", "NaN"], ["3837", "MOE Sync 2020-03-30", "Nick", "nick-someone", "03/31/20, 01:12:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.\n\nRELNOTES=`util.concurrent`: Added `immediateVoidFuture`.\n\ne90c8bbe566429fc46a33f88930c6379e57a8094", "NaN"], ["3839", "MOE Sync 2020-03-31", "Nick", "nick-someone", "03/31/20, 03:47:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.\n\nRELNOTES=`com.google.common.collect.ImmutableSortedSet`: Added `ceiling` and `floor` methods for GWT emulated ImmutableSortedSet\n\n706830ee1c7903af3d1d04478a601c2bd0a763bc", "NaN"], ["3840", "MOE Sync 2020-03-31", "Nick", "nick-someone", "03/31/20, 04:36:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Making headSet(E, boolean), tailSet(E, boolean) public in GWT emulated ImmutableSortedSet.\n\nRELNOTES=`com.google.common.collect.ImmutableSortedSet`: Making `headSet(E, boolean)` and `tailSet(E, boolean)` methods public for GWT emulated ImmutableSortedSet.\n\ne6779e404f0cd44fdc4b955acc03ad39250ffbe3", "NaN"], ["3841", "MOE Sync 2020-04-02", "Nick", "nick-someone", "04/02/20, 04:08:56 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make `Duration` overloads of `awaitRunning` and `awaitTerminated` `final` in all `Abstract*Service` classes.\n\nThe other overloads already are already `final`. These ones aren't only because we didn't think to do this when adding the new `default` methods.\n\n929867a724fc2a9b4f881534dca8d1458c9ece9c\n\n-------\n\n<p> Extend deadline to fix flakiness.\n\nIt's possible that we don't really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven't bothered to look into it.\n\n1611de32e6a029ef713499b6e878c1af11f613ca", "NaN"], ["3842", "MOE Sync 2020-04-02", "Nick", "nick-someone", "04/02/20, 10:30:02 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add j2cl specializers for Doubles.min/max, Floats.min/max, Ints.min/max, and Shorts.min/max.\n\n79c378445bb29e204853b80645e6fb0f949c289c", "NaN"], ["3843", "Fix unnecessary method access level escalation", null, "aczaplinski", "04/09/20, 05:01:23 PM", "The overridden methods are protected in superclasses, and there is no need do make them public in subclasses. Why this change doesn't break anything? Because the objects containing the changed methods are passed as HashFunction implementations, which hides the methods anyway.", "NaN"], ["3844", "Issue 3610 - documented exception when last element of a value collection is removed", "Ben Schilke", "apostrophe", "04/08/20, 08:39:09 PM", "NaN", "NaN"], ["3845", "Make singletons' constructors private", null, "aczaplinski", "04/08/20, 09:09:42 PM", "NaN", "NaN"], ["3846", "MOE Sync 2020-04-03", "Nick", "nick-someone", "04/03/20, 09:04:18 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.\n\nBut also generate a bridge method with the old signature for binary compatibility.\n\nhttps://github.com/google/guava/issues/3418 (which I keep forgetting to mention from commits...)\n\n[]\n\nRELNOTES=`util.concurrent`: Changed the return type of `ServiceManager.servicesByState()` to `ImmutableSetMultimap` (but also retained a method with the old signature for binary compatibility).\n\nc467744698d85d56349fbc773cb75fae747a9a4c", "NaN"], ["3849", "Issue #3669: testing for presence of src.zip file in openjdk11", null, "developerhb", "05/13/20, 06:41:22 AM", "Issue #3669: testing for presence of src.zip file in openjdk11\r\n\r\nChanged the configuration of `.travis.yml` to list the files and directories of JDK. This PR is for testing the presence of `src.zip` file in openjdk11 during Travis CI check and not for any changes.", "NaN"], ["3852", "MOE Sync 2020-04-09", "Nick", "nick-someone", "04/09/20, 05:01:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.\n\n1f1a0a2fd37345ee966049e54091cb2f66f4c1c3\n\n-------\n\n<p> Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.\n\n8563c8706b499acd7f1e16c6cf42904f032aa5d1\n\n-------\n\n<p> Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.\n\nd50fcf89b5148f12e4d0713e3deab0a75ac47c1a\n\n-------\n\n<p> Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest\n\nbbce918101323bbaf2e8f063a1ceca4769d74996\n\n-------\n\n<p> Add StandardImmutableDirectedNetworkTest.\n\n879cec90e07092bf63d748dbac028f2d2b28a9bc\n\n-------\n\n<p> Fix unnecessary method access level escalation.\n\nFixes https://github.com/google/guava/pull/3843\n\n8ae733081feff0801bb1fb71e5bd39f713e19595", "NaN"], ["3853", "MOE Sync 2020-04-09", "Chris Povirk", "cpovirk", "04/09/20, 07:00:09 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Try yet again to inherit docs from the JDK when building Javadoc for snapshots.\n\nI am optimistic: See https://github.com/google/guava/issues/3669#issuecomment-611658339\n\n4b55cc246fc8c8660540f2e3b1617777333c0154", "NaN"], ["3854", "MOE Sync 2020-04-09", "Chris Povirk", "cpovirk", "04/09/20, 07:58:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Try yet again to inherit docs from the JDK when building Javadoc for snapshots.\n\nI am optimistic: See https://github.com/google/guava/issues/3669#issuecomment-611658339\n\nc76c0af95f7c115ec9d87c7961d0292d2ff9d736\n\n-------\n\n<p> Use @code instead of @link to allow imports to be stripped\n\nfd4ed9d63a985f16ee5eae9e3e64dae000f4d793\n\n-------\n\n<p> Don't request openjdk-11-source.\n\nWe don't need it yet, since we build Javadoc snapshots with OpenJDK 8.\nMaybe we'll need it someday, but currently it doesn't exist :)\n\nhttps://travis-ci.org/github/google/guava/jobs/673105448\nE: Unable to locate package openjdk-11-source\n\nFollowup to CL 305716744.\n\n6e89adb89e313f5dba7b2c2c88056fdaf0e5c434", "NaN"], ["3856", "MOE Sync 2020-04-10", "Chris Povirk", "cpovirk", "04/10/20, 03:45:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove `@Beta` from `Service` and `ServiceManager`.\n\nThis leaves `AbstractListeningExecutorService` as `@Beta`.\n\nFixes #3806, #3418\nRelevant to #2966\n\n(I have tweaked Jesse's initial PR to leave `AbstractExecutionThreadService.triggerShutdown` and `AbstractService.doCancelStart` as `@Beta`, since we aren't sure we like the locking behavior of the former, and we've realized that `Listener.stopping` _might_ be a reasonable substitute for both.)\n\nRELNOTES=`util.concurrent`: Removed `@Beta` from `Service` and related classes.\n\n33574d771b099991822ed78a726df0eea4646eea", "NaN"], ["3857", "Updated readme.MD with some grammar corrections", "Rohit Potdukhe", "rohitpotdukhe", "04/22/20, 02:45:07 PM", "Added ',' below the heading 'Adding Guava to your build'.\r\nAdded ',' in front of 'i.e' at the first 'Important Warnings'.\r\nRemoved an unnecessary ',' in the first 'Important Warnings'.", "NaN"], ["3863", "MOE Sync 2020-04-15", null, "kevinb9n", "04/15/20, 05:05:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix typo.\n\nedec878cd22137472cef45c4bef51bc85c47fe5f\n\n-------\n\n<p> Remove duplicate assumption.\n\n37b04ee8f96d1eb55bbd261d525a1ee5bd48b90e\n\n-------\n\n<p> Exclude Vim swap files from the jar we build.\n\nFixes https://github.com/google/guava/issues/3861\n\n9bcde055e730a60b5bb94594e3ee953f176b8bd4", "NaN"], ["3869", "MOE Sync 2020-04-20", "David P. Baker", "netdpb", "04/20/20, 06:51:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> This change suppresses DefaultPackage check for any java class which uses the default java package, in preparation for enabling a compiler error that will prevent new instances of the bug.\n\nThe Google Java Style Guide \u00a78.2.1 requires Java files to have a (non-default) package declaration.  Missing package declarations can cause odd problems that are difficult to debug, such as a class not being included in a test suite or confusion around package-private visibility.\n\nRELNOTES=suppresses warning for using default package\n\n6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4", "NaN"], ["3870", "Issue #3742 Changing the axesSizeProduct entries to Integer.MAX_VALUE instead of throwing exception", null, "HelenaGregg", "04/22/20, 01:06:18 AM", "#3742 said that they would like to be able to create a `Sets::cartesianProduct` object that would have more than 2^31-1 elements in the resulting set. Currently, it throws an `IllegalArgumentException` when this happens. @Meijuh said that since \"java.util.Set::size() specifies that if the size would be more than Integer.MAX_VALUE it would simply be Integer.MAX_VALUE\" this should be fixed.\r\nSo the code change is that instead of throwing an exception, the remaining lower parts of the axesSizeProduct integer array are set to Integer.MAX_VALUE so the size function (which returns axesSizeProduct[0]) will now return Integer.MAX_VALUE.", "NaN"], ["3872", "MOE Sync 2020-04-22", "David P. Baker", "netdpb", "04/22/20, 02:45:08 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update readme with some grammar corrections.\n\nCloses #3857\n\nc6707a7f1bbffad71b4a5f8ff7266cb41b0f9f66", "NaN"], ["3875", "MOE Sync 2020-04-23", "David P. Baker", "netdpb", "04/23/20, 05:07:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Hide InternetDomainName.region() from GWT/j2cl.\n\nThe method is not used from GWT/j2cl.\n\nc5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3\n\n-------\n\n<p> Update Public Suffix data.\n\nThe Guava copy is typically updated whenever Chrome's copy is updated, which\nis roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the\ndates.\n\n2cd759cecd0b76ab124d1a32522fb43880b5358b", "NaN"], ["3876", "MOE Sync 2020-04-24", "David P. Baker", "netdpb", "04/24/20, 02:58:34 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix GitHub #3873 by reimplementing Cartesian{Set,List}.contains.\n\nRELNOTES=Fixed #3873.\n\n27506700d2ce3a3a24840aa0ba932dba4a275663", "NaN"], ["3877", "Simplify some code", "richard Hu", "richard1230", "05/01/20, 09:37:09 PM", "I found some code can be simplified, when using IDEA for inspection. so I submit a PR here", "NaN"], ["3878", "Issue #3874: Improve cartesianProduct.lastIndexOf ", "Jans George Rautenbach", "Koellewe", "05/13/20, 02:20:39 PM", "Implemented `lastIndexOf()` in `CertesianList` and added appropriate tests.", "NaN"], ["3880", "Implement tryLockUninterruptibly", "Andrii Rosa", "arhimondr", "05/06/20, 11:35:55 PM", "Based on awaitUninterruptibly(Condition, ..)", "NaN"], ["3883", "Move comment to a more appropriate location", "Sebastian Zarnekow", "szarnekow", "04/28/20, 03:40:29 PM", "Signed-off-by: Sebastian Zarnekow <sebastian.zarnekow@gmail.com>", "NaN"], ["3884", "Smarter implementation of CartesianList#lastIndexOf", "Marcin L", "the-thing", "04/28/20, 09:01:38 AM", "As per https://github.com/google/guava/issues/3874 suggestion implemented a smarter version of `com.google.common.collect.CartesianList#lastIndexOf`.\r", "NaN"], ["3885", "MOE Sync 2020-04-28", "Chris Povirk", "cpovirk", "04/28/20, 03:40:29 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move comment to a more appropriate location\n\nThe comment was added along with putCoalescing in CL 143507326.\n\nFixes #3883\n\n8a704a86f565065a7573a13bb95d919a6c5bcbeb", "NaN"], ["3886", "Fixed TreeRangeMap.SubRangeMap.putCoalescing", "Sebastian Zarnekow", "szarnekow", "04/28/20, 08:35:32 PM", "The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.\r\n\r\nSigned-off-by: Sebastian Zarnekow <sebastian.zarnekow@gmail.com>", "NaN"], ["3887", "MOE Sync 2020-04-28", "Chris Povirk", "cpovirk", "04/28/20, 08:35:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fixed TreeRangeMap.SubRangeMap.putCoalescing\n\nThe short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.\n\nFixes #3886\n\n6e0e978abc6d3de458ed7e2b9cb0533c735d36a2", "NaN"], ["3891", "Fix equals when comparing two PowerSet instances with different order", "Ryan Skonnord", "RyanSkonnord", "05/04/20, 08:39:03 PM", "Fixes https://github.com/google/guava/issues/3890", "NaN"], ["3892", "MOE Sync 2020-05-04", "Nick", "nick-someone", "05/04/20, 08:39:03 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same, but in a different iteration order.\n\nRELNOTES:\n  Fix issue where PowerSet.equals(PowerSet) would erroneously return\n  false if the PowerSet's underlying Sets were equal, but in a different\n  iteration order.\n\nFixes #3891, #3890\n\nbefd5ced9edc93a65c75201eb0698a571398005f", "NaN"], ["3893", "MOE Sync 2020-05-06", "Nick", "nick-someone", "05/06/20, 11:35:55 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adds constants for `Cross-Origin-Embedder-Policy(-Report-Only)?` headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).\n\nRELNOTES=Adds constants for `Cross-Origin-Embedder-Policy(-Report-Only)?` headers.\n\na061f7e066ad470b47b749c0514ac581cf2397e2\n\n-------\n\n<p> Implement tryLockUninterruptibly\n\nFixes #3880\n\nc9278360493d074ecc88c9d42adbcde2ad90f035", "NaN"], ["3898", "MOE Sync 2020-05-12", "Kurt Alfred Kluever", "kluever", "05/12/20, 01:48:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Ensure QueueWorker does not outlive SequentialExecutor on iOS.\n\nWhen `SequentialExecutor` is used on iOS as J2ObjC-transpiled code, we need to\nmake sure that `SequentialExecutor.QueueWorker` does not outlive its outer\nclass. Previously, because the inner class was annotated with `@WeakOuter`, it\ncould happen, and, when this happened, the inner class would then invoke\nmethods on a dangling pointer and crash the process in turn. The issue is now\nfixed by annotating the worker field in the outer class with `@RetainedWith`.\n\nAlthough `@RetainedWith` was initially designed for bimaps, the annotation\naddresses exactly the lifecycle problem here.\n\n180157a2ab9d4574d69eeed3d654ceaff7f5b59d", "NaN"], ["3899", "MOE Sync 2020-05-13", "Kurt Alfred Kluever", "kluever", "05/13/20, 02:20:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> In ImmutableIntArray, use Arrays.copyOf when expanding the internal array.\n\n909bdb290675c41238a194ad32e6686cda58f6dc\n\n-------\n\n<p> Implemented lastIndexOf in CartesianList\n\nFixes #3878\n\n13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f", "NaN"], ["3901", "More rounding methods: {long, BigInteger, BigDecimal} ->double ", "Dhruv Thakkar", "dhruvdeveloper", "05/14/20, 06:34:53 AM", "Added some nonstandard rounding methods in the new BigDecimalMath. Issue from @lowasser, issue number: #3895", "NaN"], ["3902", "More rounding methods: {long, BigInteger, BigDecimal} -> double", "Dhruv Thakkar", "dhruvdeveloper", "06/05/20, 10:25:37 PM", "Created new class BigDecimalMath for More rounding methods: {long, BigInteger, BigDecimal} -> double. \r\nIssue: #3895", "NaN"], ["3904", "MOE Sync 2020-05-14", "Kurt Alfred Kluever", "kluever", "05/14/20, 02:52:53 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Suppress IdentityHashMapBoxing check\n\nThis would soon become an ERROR in blaze.\n\n0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60\n\n-------\n\n<p> Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.\n\nSpec for header: https://wicg.github.io/ua-client-hints/\n\nbd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c", "NaN"], ["3905", "MOE Sync 2020-05-17", "Kurt Alfred Kluever", "kluever", "05/17/20, 04:22:48 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adding the rest of the client-hints headers (besides Arch which I don't think we need).\n\nHeader Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints\n\nRELNOTES=N/A\n\nfab81c3b8e934e47c7cb846b1428865781ac2200", "NaN"], ["3908", "#1315 Add awaitTerminationUninterruptibly(..) for ExecutorService - M\u2026", "Nisarg Chokshi", "NisargC", "07/22/20, 04:22:32 PM", "@cpovirk \r\nKindly review the changes and suggest edits.\r\n\r\nThanks,\r\nNisarg", "NaN"], ["3912", "Fix #3911 Efficient UnmodifiableMultimap forEach", "Carter Kozak", "carterkozak", "06/09/20, 01:09:33 AM", "forEach can pass calls directly to the delegate protected\r\ncollection because it is a read-only operation.", "NaN"], ["3915", "MOE Sync 2020-06-01", "David P. Baker", "netdpb", "06/01/20, 03:45:47 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Document that Ranges are immutable.\n\nFixes https://github.com/google/guava/issues/1813\n\n9485ee0fb525dfa69d91561aba0035b371d9c327", "NaN"], ["3917", "MOE Sync 2020-06-02", "David P. Baker", "netdpb", "06/02/20, 06:04:16 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Added support for the \"font\" Top-Level Media Type (https://tools.ietf.org/html/rfc8081)\n\nRELNOTES=`net`: Added support for \"font\" Top-Level Media Type\n\n45003f5fe824838cdce85fea05de84dcb6b54993\n\n-------\n\n<p> guava: disavow VisibleForTesting\n\nJohannes and I invented this class in the early days of Blaze,\nand in hindsight it was clearly a mistake; it encourages self-deception.\nThis change adds a comment discouraging its further use.\n\n8bb1bf1b54f6152c14b69c3699c7fe7f07332a9a", "NaN"], ["3919", "MOE Sync 2020-06-04", "David P. Baker", "netdpb", "06/04/20, 02:48:02 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove @DoNotCall from FluentIterable.from(FluentIterable).\n\n4ec122fa84a4d3384324250a74120d32e0ccfa1c\n\n-------\n\n<p> Update Public Suffix data.\n\nThis copy is typically updated whenever Chrome's copy is updated, which\nis roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the\ndates.\n\n0d5c668d46ecba2a1ec5656b603bbdb30786e9e1", "NaN"], ["3920", "Reuse ThreadFactory in MoreExecutors", "Denny Abraham Cheriyan", "dennyac", "06/08/20, 02:21:52 PM", "Currently we create a new ThreadFactory instance whenever we call ```MoreExecutors.newThread()```\r\n\r\nJust changing it to reuse the same instance. The only usage of ```platformThreadFactory()``` is in ```MoreExecutors.newThread()``` and they set the name of the thread in that method. ", "NaN"], ["3921", "MOE Sync 2020-06-05", "David P. Baker", "netdpb", "06/05/20, 02:53:56 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Implement BigIntegerMath.roundToDouble, which rounds to the nearest representable double value.\n\nPartially implements https://github.com/google/guava/issues/3895\n\nRELNOTES=`math`: Added `BigIntegerMath.roundToDouble`.\n\nd01a196043e7d1620f2880da5d35a31da9acd898", "NaN"], ["3922", "MOE Sync 2020-06-08", "Kurt Alfred Kluever", "kluever", "06/09/20, 01:09:33 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Efficient UnmodifiableMultimap forEach\n\nforEach can pass calls directly to the delegate protected\ncollection because it is a read-only operation.\n\nFixes #3911\nFixes #3912\n\n98a616453df021b0792beb71c81b94d73e0cb69b\n\n-------\n\n<p> Add Comparators.min/max\n\nRELNOTES=`collect`: Added two-element min and max methods to Comparators.\n\nfc7433e647e82057ccc040885bf38dc503465d54\n\n-------\n\n<p> Discourage Ordering.min(E, E) and max(E, E) in favor of Comparators.min(E, E, Comparator) and max(E, E, Comparator).\n\nRELNOTES=Discourage the use of Ordering.min(E, E) and max(E, E).\n\n8bf31e175d0f103ade07a351ed6135496f635991", "NaN"], ["3924", "MOE Sync 2020-06-09", "Chris Povirk", "cpovirk", "06/10/20, 01:17:04 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Suppress IdentityHashMapBoxing check\n\n6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83", "NaN"], ["3925", "MOE Sync 2020-06-10", "Chris Povirk", "cpovirk", "06/10/20, 03:17:46 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Break retain-cycle in Converter.java, when used in J2ObjC target.\n\n4e820ef25352203e042bc4fc45547fae3da7c55d", "NaN"], ["3930", "MOE Sync 2020-06-12", "Chris Povirk", "cpovirk", "06/12/20, 05:42:00 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Cleanup ByteStreamsTest.java to fix a couple of IntelliJ warnings/suggestions.\n\n#codehealh\n\nacc2296fdea9cb498431a92eb5b363262b74b313\n\n-------\n\n<p> Inline `ByteStreamsTest#assertEquals(byte[], byte[])`\n\n#codehealth\n\n62ee8a07ad4d3c66e255da66a3382ac790656e2d", "NaN"], ["3931", "MOE Sync 2020-06-12", "Chris Povirk", "cpovirk", "06/13/20, 01:03:39 AM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Upgraded ByteStreams#copy(InputStream, OutputStream) to use the faster FileChannel if possible.\nSee also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.\n\nRELNOTES=`io`: Upgraded `ByteStreams#copy(InputStream, OutputStream)` to use the faster `FileChannel` if possible.\n\n27bc3deb733b2f38bd853953fa21e2e116fc6c34", "NaN"], ["3933", "Replace anonymous with lambda expression", null, "bhawna94", "06/15/20, 11:48:19 AM", "Replace anonymous with a lambda expression", "NaN"], ["3934", "Replace anonymous class with lambda expression", null, "bhawna94", "06/16/20, 04:46:53 PM", "NaN", "NaN"], ["3936", "MOE Sync 2020-06-16", "Nick", "nick-someone", "06/16/20, 03:32:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4\n\nCausing some internal failures\n\n457767d10299005df3f7a3e7aba3eef8ee528b9a", "NaN"], ["3937", "MOE Sync 2020-06-17", "Nick", "nick-someone", "06/17/20, 03:32:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add a Guava wiki entry about finding the min/max for various circumstances.\n\n3bb0d85dd8f0e404684bede39c06bc0602b3f0c5\n\n-------\n\n<p> Avoid reentrancy in ExecutionSequencer.\n\ndb53357fea477695deeaa32746660bf86d6d51c1\n\n-------\n\n<p> Revert db53357fea477695deeaa32746660bf86d6d51c1\n\nBroke a test\n\n2ef8463838b23ae8c40c022fd96e7b143e0de018", "NaN"], ["3939", "MOE Sync 2020-06-18", "Nick", "nick-someone", "06/18/20, 02:23:05 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add LongMath.roundToDouble.\n\nRELNOTES=Add LongMath.roundToDouble (#3895)\n\n6f176593caf7fe7549c115ada136287ea31e2875\n\n-------\n\n<p> Add a test for the bug introduced by CL 316779471.\n\n68962e5893c9812d79508d82c8b70e9bb7350146", "NaN"], ["3941", "MOE Sync 2020-06-22", "Nick", "nick-someone", "06/22/20, 01:41:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Avoid reentrancy in ExecutionSequencer.\n\n37d4506a2874cd223d88ebf98e8d28ff333c11de", "NaN"], ["3942", "MOE Sync 2020-06-23", "Kurt Alfred Kluever", "kluever", "06/23/20, 03:04:16 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix memory leak in SingletonImmutableBiMap which would appear in transpiled J2ObjC code.\n\nThe @RetainedWith annotation can not be used on both sides of the retain-cycle. The RegularImmutableBiMap does not have this problem, because it uses Inverse inner class. This CL applies similar trick in SingletonImmutableBiMap, although without additional inner class.\n\nRELNOTES=Update SingletonImmutableBiMap to avoid retain-cycle in transpiled Obj-C code.\n\nd7d07d50c7ae699b71c9a239212f4c3728180327", "NaN"], ["3947", "MOE Sync 2020-06-29", "Kurt Alfred Kluever", "kluever", "06/30/20, 01:06:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE\n\n3d88ea8f940ecadea86d12f8993ac58f99684e6b\n\n-------\n\n<p> In ImmutableDoubleArray and ImmutableLongArray, use Arrays.copyOf when expanding the internal array.\n\nIn ImmutableIntArray, where we already made this change, remove an inconsistent `this.`.\n\n6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e\n\n-------\n\n<p> Implement BigDecimalMath.roundToDouble.\n\nRELNOTES=Add BigDecimalMath.roundToDouble.\n\n690b2a6b02bddcaab0a4050a92f490546c71e2ee", "NaN"], ["3949", "MOE Sync 2020-06-30", "Kurt Alfred Kluever", "kluever", "06/30/20, 04:29:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix Converter.java by moving @RetainedWith annotation to the correct side of the cycle.\n\nThe annotation should be placed inside the \"parent\" object, and not the \"child\" object.\n\nReference: https://developers.google.com/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/RetainedWith\n\nRELNOTES=N/A\n\n58ad44a9ac2fde40095f28c504c95c6fed902d1f", "NaN"], ["3950", "MOE Sync 2020-07-01", "Kurt Alfred Kluever", "kluever", "07/01/20, 07:32:40 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove unnecessary comment.\n\na3084e48846ebddfc9d046670f7be8c0f60e6cb3", "NaN"], ["3954", "MOE Sync 2020-07-06", null, "kevinb9n", "07/06/20, 10:08:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Hint with the type that `oldFuture` / `newFuture` / `ref`'s `Future` never contains a value.\n\nBeing clear may become slightly more valuable when we put nullness type annotations on this code.\n\ne655aa8df4bd53a11edf8bb99e8b35f746f54196", "NaN"], ["3956", "MOE Sync 2020-07-08", null, "kevinb9n", "07/08/20, 09:45:52 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix annotation positions in Guava.\n\n795b357bddc097c87340f0ce573160b2d39e97c6\n\n-------\n\n<p> Update Public Suffix data.\n\nThe [] copy is typically updated whenever Chrome's copy is updated, which\nis roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the\ndates.\n\nFor this update, []\n\n8ec74f444b4903871face31bf10139375749358b", "NaN"], ["3958", "MOE Sync 2020-07-10", null, "kevinb9n", "07/10/20, 08:46:36 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Declare static types as Queue instead of Deque.\n\nThis may slightly clarify how the object is used.\n\n(I was looking through com.google.common for Deque instances that were used as stacks, so I noticed this one that was used only as a queue.)\n\n752dd15c34f206b2103e2bd338610177088c4feb", "NaN"], ["3962", "MOE Sync 2020-07-13", "David P. Baker", "netdpb", "07/13/20, 03:39:58 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Speed up Traverser and cut about 30 lines of code.\n\nWhen stacked against the unsubmitted Walker, before the change:\n   breadthFirst was roughly on par;\n   preOrder/postOrder were about 70% slower (1359 vs. 2358);\n\nAfter adopting the Walker impl, the tree traversal preorder/postorder are improved close to Walker impl.\n\nThere is still about 10% slowness (2405 vs. 2268) remaining, which I suspect is due to Iterator being slower than Spliterator, because with Spliterator, we can tryAdvance() once for each element, while with Iterator, we have to call both hasNext() and next().\n\nThe graph traversal adoption is similar, with about 15% remaining slowness compared to Walker (1583 vs. 1338), which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().\n\nDid not adopt the Walker's breadth-first impl for the following reasons:\n\n1. Adopting the Walker's breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark, it's likely faster than consuming the successor iterator lazily.\n\nOn the other hand, the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.\n\nFor follow-up: It might be better to go complete lazy for breadth-first, even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.\n\nI'm going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.\n\nRELNOTES=Optimize Traverser\n\ne81f5012d5207c4f07b49007eeff3d19ae618cf8\n\n-------\n\n<p> Add toString() for SequentialExecutor's worker runnable\n\n1facb168dc541be1afa2bf26e15340b0a2e3cffe", "NaN"], ["3964", "MOE Sync 2020-07-14", "David P. Baker", "netdpb", "07/14/20, 06:37:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make breadth-first iterators consume the successor iterators lazily, and refactor to  cut about 150 lines of code.\n\nRELNOTES=Lazier Traverser#breadthFirst().\n\n579c06dc9453fc7b09c8b392507cba09e239c363", "NaN"], ["3967", "MOE Sync 2020-07-16", "David P. Baker", "netdpb", "07/16/20, 03:36:12 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Unconditionally call setException for RejectedExecutionException.\n\nUnder JDK11, the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I *suspect* that TSAN is incorrect (and that it is likely to identify the same \"problem\" in other code).\n\nHowever, we years ago questioned whether the code I'm removing served any real purpose...\n(fixes https://github.com/google/guava/issues/2877)\n...so now seems like a good time to get rid of it and, at minimum, hopefully eliminate the current TSAN failure.\n\nThe code that we're running in the executor is under our control. (That is, we're the ones who implement Runnable.run().) We're catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners, but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op).\n\nThe one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt(), which we learned a few years ago can call arbitrary code through nio callbacks. At some point, though, I throw my hands up and say \"whatever.\"\n\n(If the interrupt were to be a problem, it would have to be with an executor that executes tasks inline, like directExecutor. But I note that rejectionPropagatingExecutor, at least, already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again, only in concert with nio interrupt callbacks. I think.)\n\n238c383c13d05a75bb6b590f1542e5f4b11f0634\n\n-------\n\n<p> Add @DoNotMock to Traverser.\n\nRELNOTES=Add @DoNotMock to Traverser\n\n83e545cd90bbd64b71ac66ff51267bca670bf8f9", "NaN"], ["3970", "MOE Sync 2020-07-22", "Chris Povirk", "cpovirk", "07/22/20, 02:35:15 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Warn about stack overflows from directExecutor, add more warnings (including on AbstractFuture.set* and cancel), and move warnings to directExecutor itself.\n\ne649a158d3202beefd3375c1774db90a31228708", "NaN"], ["3971", "MOE Sync 2020-07-22", "Chris Povirk", "cpovirk", "07/22/20, 04:22:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add awaitTerminationUninterruptibly.\n\nFixes #3908\nFixes #1315\nSomewhat relevant to https://github.com/google/guava/issues/3655\nVaguely relevant to https://github.com/google/error-prone/issues/1490, since it creates a `@CheckReturnValue` variant of a `java.util.concurrent` method that returns `false` to indicate timeout.\n\nRELNOTES=`util.concurrent`: Added `awaitTerminationUninterruptibly`.\n\n1ec90b045a45b4603ea5bd1c296f284ec1c438db", "NaN"], ["3973", "MOE Sync 2020-07-23", "Chris Povirk", "cpovirk", "07/23/20, 05:31:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Shorten toString for AbstractFuture implementations inside util.concurrent.\n\n9da95c25c87f8ae009bfa56410db470ed0760f14\n\n-------\n\n<p> De-beta toImmutable* methods in GWT variants(\"emulated\") of common.collect.\n\n4e12478cc5955c20ea34095acf274a2c8172a2c2", "NaN"], ["3974", "Removed some redundant 'else's using early return", "Pradipta Sarma", "pradipta", "02/24/21, 05:19:12 PM", "NaN", "NaN"], ["3982", "MOE Sync 2020-08-04", "Kurt Alfred Kluever", "kluever", "08/04/20, 03:33:28 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Ensure that the set returned by ImmutableMap<K, V>.keySet() is serializable when K is serializable, and similarly for values().\n\nSet<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set, the original map is serialized is well. This change changes this so that only the keys are serialized.\n\nRELNOTES=`collect`: Ensure that the set returned by `ImmutableMap<K, V>.keySet()` is serializable when `K` is serializable (and similarly for `values()`).\n\ncf94f5601b32662a236f5534c1a7d4ceab132e76", "NaN"], ["3983", "MOE Sync 2020-08-06", "Kurt Alfred Kluever", "kluever", "08/06/20, 06:56:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix memory-leaks in LocalCache on iOS, caused by:\n\n1. Retain-cycle between outer LocalCache instance and inner Values, KeySet and EntrySet instances. The use of @Weak and @WeakOuter is incorrect there, since inner instances can outlive outer LocalCache instance. The correct solution is to use @RetainedWith annotation to inner-classes.\n\n2. Retain-cycle between ReferenceEntry objects which internally form a doubly-linked list. Fixed by adding @Weak annotation to \"next\" and \"previous\" links. This is correct, since ReferenceEntry instances are already retained by Segments.\n\nThe unit test for leak detection is added inside Xplat, because the required testing infrastructure is not present inside \"google_common\" (the IosAsserts class). Eventually, everything should be moved to \"google_common\".\n\nRELNOTES=Fix memory-leak in LocalCache on iOS\n\n8fb1cada24cae186226f0d3785704fc19ea2e9fa", "NaN"], ["3985", "MOE Sync 2020-08-07", "Kurt Alfred Kluever", "kluever", "08/07/20, 03:54:04 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.\n\n97638e61eb63e1fb3f994cbf3079c33205fa61b9\n\n-------\n\n<p> [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.\n\n0e6c0c99f06c7e7c510507b202a2546ab8026dcc", "NaN"], ["3987", "MOE Sync 2020-08-12", "Colin Decker", "cgdecker", "08/12/20, 03:24:36 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Avoid boxing in Doubles.constrainToRange() and Floats.constrainToRange().\n\nFixes https://github.com/google/guava/issues/3984\n\nf850db59358a3b5f9b2da96b7feea06802077b19\n\n-------\n\n<p> Remove `@Beta` from `Multimaps.toMultimap`.\n\nFixes https://github.com/google/guava/issues/3957\n\nRELNOTES=`collect`: Removed `@Beta` from `Multimaps.toMultimap`.\n\nb9fe10a7b1c67518d9c6b86fc6611473943c188c\n\n-------\n\n<p> Bring back previously deleted SerializedForms so that old data can still be read.\n\nRELNOTES=`collect`: Data that was previously serialized, and that originated from ImmutableMap.keySet() or .values(), is now deserializable again.\n\nd66fda44e127d00e401cadde1834454feffade86", "NaN"], ["3988", "MOE Sync 2020-08-14", "Colin Decker", "cgdecker", "08/14/20, 03:58:30 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.\n\nRELNOTES=`InetAddresses`: InetAddress parsing is now more efficient\n\n62a8cc4512d12d7afd1960ddca07b595be3eaf55", "NaN"], ["3991", "MOE Sync 2020-08-19", "David P. Baker", "netdpb", "08/19/20, 06:58:48 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Switch GWT rules implementation from native to .bzl.\n\nRELNOTES: GWT rules are now implemented in .bzl.\n\n8f12ec7d41b28b6855397e6963789dffaf956861", "NaN"], ["3993", "Simplify some code", "\u77f3\u5934", "EruDev", "08/21/20, 08:34:16 PM", "I found some code to simplify when using IDEA to inspect the code, so I submit a PR here.", "NaN"], ["3994", "MOE Sync 2020-08-21", "David P. Baker", "netdpb", "08/21/20, 05:22:30 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Don't directly call ByteBuffer, etc. methods that have covariant returns in Java 9+.\n\nDoing so produces a jar that doesn't work under Java 8.\n\nThis CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead), but we should also add safeguards.\n\nThe normal solution to this general problem is to use --release, but doing so here is complicated.\n\nFor more information, see https://github.com/google/guava/issues/3990\n\n406a4eafa25ccd8f456622be19e2ce1e624bc227", "NaN"], ["3996", "MOE Sync 2020-08-24", "David P. Baker", "netdpb", "08/24/20, 04:36:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Adding SEC-CH-UA-Arch header.\n\nHeader Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints\n\nRELNOTES=N/A\n\n8ed8696b2a1700bfcf5e7727f0be6141d2438e20\n\n-------\n\n<p> Work around an android bug in LockSupport, this time with @CanIgnoreReturnValue\n\na849f7f1264b586d44f2b34f274bac9f1d7eff19", "NaN"], ["3998", "MOE Sync 2020-08-25", "David P. Baker", "netdpb", "08/25/20, 03:19:28 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Throw if @Subscribe is applied to a method that takes a primitive parameter.\n\nFixes https://github.com/google/guava/issues/3992.\n\nRELNOTES=Prevent @Subscribe being applied to a method that takes a primitive, as that will never be called.\n\n9fe4ecdc84e628c7da0aa68fc6257932dc9dbced", "NaN"], ["4000", "MOE Sync 2020-08-27", "David P. Baker", "netdpb", "08/27/20, 03:38:44 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Deprecate Files.createTempDir(), noting that better alternatives exist for Android as well as for users running Java 7 or later.\n\nRELNOTES=`io`: Deprecated `Files.createTempDir()`.\n\n9258dd9071c850dde0461f0f0cad81105442fdce", "NaN"], ["4003", "MOE Sync 2020-08-31", "Chris Povirk", "cpovirk", "08/31/20, 03:37:28 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Update Public Suffix data.\n\nThe copy is typically updated whenever Chrome's copy is updated, which\nis roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the\ndates.\n\nac1b252294c4c5547384b86d40345e59e3dedc8a", "NaN"], ["4007", "Issue #4004 AssertionError from Range.gap.", "Koy", "Koooooo-7", "09/17/20, 03:21:08 PM", "Fix #4004, Got IAE instead of AssertionError.", "NaN"], ["4008", "MOE Sync 2020-09-08", "Nick", "nick-someone", "09/08/20, 01:24:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Minor internal change\n\n3a85bdca141a1c5c2bb29f06fa8f99c706e46ee8", "NaN"], ["4009", "MOE Sync 2020-09-08", "Nick", "nick-someone", "09/08/20, 04:30:18 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Minor whitespace-only change\n\n19c22993e371f53321c9c1a6331f6da329860566", "NaN"], ["4012", "Fixed Typos/Grammatical Errors", "Nishant Chatterjee", "nishantc1527", "09/15/20, 04:52:13 PM", "I just ran stuff through grammar checkers and found some typos/grammatical errors. Since I only added some small changes, I didn't think I needed to do anything special like open an issue or something, but if I should in the future please tell me. If you think I got some stuff wrong, I'll fix it but there are definitely some typos in there.", "NaN"], ["4015", "Added sort pom plugin and sorted the pom (mvn sortpom:sort)", "Amogh Kulkarni", "amoghcoolkarni983", "09/16/20, 06:22:59 PM", "Plugin Link:\r\n\r\nhttps://github.com/Ekryd/sortpom\r\n\r\n\r\nMaven Command:\r\n\r\nmvn sortpom:sort", "NaN"], ["4016", "Moe Sync", "Nick", "nick-someone", "09/15/20, 03:38:17 PM", "This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make ClosingFuture available in open-source Guava (@Beta).\n\nRELNOTES=`util.concurrent`: Add `ClosingFuture`.\n\n4da7927157c5c784385cb7c946f6f6302122be49\n\n-------\n\n<p> Fix typos and remove unnecessary words.\n\nFixes #4012\n\n970e8af57084436aa0bc54e076c5b113296e6a57", "NaN"], ["4018", "Bump checker-qual from 2.11.1 to 3.6.1", "Michael Ernst", "mernst", "09/15/20, 07:14:26 PM", "NaN", "NaN"], ["4019", "Issue #4002 UnsupportedOperationException when modify TreeRangeSet.subRangeSet(Range).", "Koy", "Koooooo-7", "09/18/20, 04:54:11 PM", "The same implementation as `remove`.", "NaN"], ["4020", "MOE Sync 2020-09-15", "Nick", "nick-someone", "09/15/20, 04:52:13 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make ClosingFuture available in open-source Guava (@Beta).\n\nRELNOTES=`util.concurrent`: Add `ClosingFuture`.\n\n48851566428571694e62dee9f277d9833e78f17a\n\n-------\n\n<p> Fix typos and remove unnecessary words.\n\nFixes #4012\n\n12c9012b0bde00a99cd454f1af6d90b1e5e11508\n\n-------\n\n<p> Bump checker-qual from 2.11.1 to 3.5.0.\n\nFor unfortunate reasons involving internal legacy infrastructure, this is easier than merging #4018. But at least it gets us on the newest major version. That makes it easier to see that it's safe to resolve a conflict between, say, 3.5.0 and 3.6.1 by just using the newer one.\n\na2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d\n\n-------\n\n<p> Remove spurious annotation to fix Travis build.\n\nf106608d0c58c2c67dcd56e638ace73472768f65", "NaN"], ["4021", "Fixed Typos", "Nishant Chatterjee", "nishantc1527", "09/17/20, 03:21:08 PM", "I found multiple typos in comments and class names, so I fixed it.", "NaN"], ["4024", "DO NOT MERGE", "Chris Povirk", "cpovirk", "09/16/20, 02:26:34 PM", "Fully qualify reference to DoNotMock to avoid\nhttps://bugs.openjdk.java.net/browse/JDK-7101822", "NaN"], ["4025", "MOE Sync 2020-09-16", "Nick", "nick-someone", "09/17/20, 02:21:21 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make EqualsTester test that non-Strings are not equal to their String representation.\n\nRELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.\n\n5f5a9b98d87d0439bb9670947a4bef331e8dcb4c", "NaN"], ["4026", "Update Joiner.java", "mieuf", "mieuf", "09/17/20, 02:16:54 PM", "add skipSpecifiedEle method to skip 'specified element'", "NaN"], ["4029", "MOE Sync 2020-09-17", "Kurt Alfred Kluever", "kluever", "09/17/20, 03:21:08 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix AssertionError from Range.gap.\n\nFixes #4007, #4004\n\n88593a07f3a04163f2c68cf323a54cd8f8efdd03\n\n-------\n\n<p> Fix random typos in Guava.\n\nFixes #4021\n\n1102d11be3bbe534a5a569832aeb0099aa0eaa61\n\n-------\n\n<p> Add back web.app to public suffix list\n\nd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d\n\n-------\n\n<p> Externally restore @DoNotMock to ClosingFuture.Combiner, and externally add @DoNotMock to ClosingFuture itself.\n\nThis implements an alternative workaround for https://bugs.openjdk.java.net/browse/JDK-7101822, replacing the one submitted in CL 331770482.\n\n7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5", "NaN"], ["4030", "MOE Sync 2020-09-18", "Kurt Alfred Kluever", "kluever", "09/18/20, 04:54:11 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).\n\nFixes #4019, #4002\n\n3685507ce36e24f111cabb45c6d5c5dd26565aad\n\n-------\n\n<p> Deal with Class#isInstance checks which are guaranteed to be false.\n\n2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71\n\n-------\n\n<p> Change `ForwardingMap.remove(Object)` parameter name from `object` to `key` to match `Map.remove(Object key)`.\n\nFixes https://github.com/google/guava/issues/4028\n\n204904cbe79852e29aec2e461273f9b6112bd2f9", "NaN"], ["4031", "Add poll() and offer() to Uninterruptibles class", "Tanmay Varun", "tanmauec", "09/20/20, 04:21:36 PM", "NaN", "NaN"], ["4032", "Add poll() and offer() to Uninterruptibles class", "Tanmay Varun", "tanmauec", "09/20/20, 04:21:34 PM", "NaN", "NaN"], ["4033", "Add poll() and offer() to Uninterruptibles class", "Tanmay Varun", "tanmauec", "09/20/20, 04:21:32 PM", "NaN", "NaN"], ["4035", "MOE Sync 2020-09-22", "Colin Decker", "cgdecker", "09/22/20, 04:12:13 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add brief test to Range for `[_, X].isConnected([X, _])`;\n\nRELNOTES: n/a\n\n4629a25981b1ff667315d481fc21bcb094d436dc", "NaN"], ["4036", "Remove unnecessary parens", "Tasuku Nakagawa", "T45K", "09/29/20, 01:44:27 PM", "This PR is related to PR #3191.\r\n\r\nIn #3191, unnecessary parens in `PairedStats` were omitted, but its similar class, `Stats` was not touched.\r\nI found unnecessary parens in the class, so removed.", "NaN"], ["5250", "google#2058 Add documentation on what happens when exception thrown b\u2026", "Tanmay Varun", "tanmauec", "10/14/20, 02:09:31 PM", "\u2026y Callback", "NaN"], ["5251", "MOE Sync 2020-09-28", "Colin Decker", "cgdecker", "09/28/20, 07:33:15 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Extract most of the meat of ClassPath.DefaultScanner into a superclass ResourceScanner to enable lazy scanning to a stream:\n\nstatic Stream<ResourceInfo> scan(ClassLoader);\n\nc034924b908de6d34cbd19cd194efcb70aa7e0a3\n\n-------\n\n<p> Internal ClassPath changes.\n\n3079cfd269838c09d303bdaddae79697fad4a3ed", "NaN"], ["5252", "MOE Sync 2020-09-29", "Colin Decker", "cgdecker", "09/29/20, 01:44:27 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Internal changes to ClassPath.\n\n643423a88d854deb863fa08f550a6e41d2823df5\n\n-------\n\n<p> Internal changes to ClassPath.\n\nb7e83b114f95f5b776ed60f5932420e5c5fc24ad\n\n-------\n\n<p> Remove unnecessary parens\n\nFixes #4036\n\n30c69a1ff047f8dad3abef2c315c305e052da0b2\n\n-------\n\n<p> Also print Android test failures.\n\n0644480db466a331b7bd9fa7a8690f37d05ddda2\n\n-------\n\n<p> Fix ClassPathTest on Android JDK 11.\n\n037e10c0da8159c06fa471142ae923dceb03e4ea", "NaN"], ["5253", "Update README.md", null, "harshalpawar41", "10/01/20, 09:17:37 PM", "for demo and Hacktoberfest event please accept my pull request.", "NaN"], ["5255", "Adding ppc64le architecture support on travis-ci", "kishor kunal raj", "kishorkunal-raj", "10/05/20, 04:09:34 PM", "Hi,\r\nI have added support for ppc64le architecture support on travis-ci in the branch. I believe it is ready for the final review and merge.\r\nThe travis-ci build log can be tracked on the link :  https://travis-ci.com/github/kishorkunal-raj/guava/builds/187593609 \r\nPlease have a look on it \r\n\r\nThanks !!", "NaN"], ["5256", "MOE Sync 2020-10-01", "Kurt Alfred Kluever", "kluever", "10/01/20, 02:55:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fully remove GWT-RPC support externally.\n\nReally, really closes https://github.com/google/guava/issues/3680.\n\nPossible future work:\n- Be consistent about whether we put @GwtCompatible on the remaining internal CustomFieldSerializer classes. (For those files, it probably acts only as documentation (of something that is pretty obvious :)). Our open-source build used to take action when it saw `@GwtCompatible(emulated=true)`, but (a) it doesn't anymore, (b) those files don't exist externally anymore, and (c) they weren't `emulated=true` :) I believe that our internal build requires @GwtCompatible on most files in our GWT target, but I think there's an exception for GWT-target-only sources.)\n- Remove some of the GwtSerializationDependencies classes. However, some of these classe are set up as *supertypes* of our prod classes, so this would require some surgery. Keeping them is harmless: It doesn't actually make the classes GWT-serializable.\n- Remove the usages of serializable=true on @GwtCompatible, at least externally but maybe just entirely.\n\nRELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) Even the earlier, temporary way to reenable support (`guava.gwt.emergency_reenable_rpc`) no longer has an effect.\n\n4d2eb90089e9115cb00477b815289a2fe56e8a24\n\n-------\n\n<p> Mark BigDecimalMathTest as fully @GwtIncompatible.\n\nCurrently it has every member annotated as @GwtIncompatible. This works fine internally, but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt:\nhttps://github.com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java\n\n0f9ee58d8caa8a12ac77fe01e097e39386157d2c", "NaN"], ["5258", "MOE Sync 2020-10-02", "Kurt Alfred Kluever", "kluever", "10/02/20, 04:24:51 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Begin tweaking Guava sources to satisfy Copybara.\n\n- Change from http to https (and from github.io links to guava.dev/truth.dev while I'm at it).\n- Remove go/ links.\n- Add whitespace around MOE directives.\n- Put MOE stripping directives alone in comments, moving other comment text to a separate comment.\n- One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e., /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment?\n- Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.\n\nThis is surely not a complete set of changes, but it's enough to get me started.\n\nb5dce621aed0d374d3abc000eb51cb513e7b496e", "NaN"], ["5259", "#3679 - Removed all references to now useless workaround", "Saucistophe", "Saucistophe", "10/02/20, 10:08:31 PM", "Fixes #3679 !", "NaN"], ["5260", "#3679 - Removed all references to now useless workaround", "Saucistophe", "Saucistophe", "10/05/20, 04:09:08 PM", "Fixes #3679 ", "NaN"], ["5261", "Clarified HashMultimap javadoc about concurrency", "Saucistophe", "Saucistophe", "10/05/20, 04:09:03 PM", "Fixes #3682 ", "NaN"], ["5263", "MOE Sync 2020-10-05", "David P. Baker", "netdpb", "10/05/20, 05:13:46 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove GWT tests from open source.\n\nWe will continue to run these tests internally.\n\nI'm not sure how much value the remaining open-source GwtTestSuite file provides us. Hopefully it's at least a sanity check on .gwt.xml files. But I haven't tested by breaking a .gwt.xml file to see what happens.\n\n5773612ad40c7ab38e2cc8e5dd5a526d5b672652\n\n-------\n\n<p> Tweak TODOs.\n\n58855f44498d1dd61cfad4f812a14bac2079e71c\n\n-------\n\n<p> Remove a couple GwtSerializationDependencies classes from open-source Guava after all.\n\nAs noted in 0cb89dd110ce88770207889901e95ea2ac896932, this isn't necessary. As *also* noted there, we have *additional* FooGwtSerializationDependencies classes that I'm leaving in place because they are *supertypes* of the prod classes and thus harder to remove.\n\nBut I'm removing these 2 because it saves me a few lines in the Copybara config :)\n\n(Followup after https://github.com/google/guava/issues/3680)\n\ncb6023b3285ba8c2b6c249c7ef977df2baac2b65", "NaN"], ["5264", "MOE Sync 2020-10-06", "David P. Baker", "netdpb", "10/06/20, 05:00:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Move gwt-user dep to test scope.\n\nWe no longer need it as a prod dependency (not even `provided`) after removing GWT-RPC support.\n\n(Followup after https://github.com/google/guava/issues/3680)\n\nFixes https://github.com/google/truth/issues/637, if GitHub will let me get away with closing a Truth issue with a Guava commit :)\n\n6a6285d1e12b8d2c62b8b752d6ee1a44f48d0dac", "NaN"], ["5265", "Removed all references to now useless workaround", "Saucistophe", "Saucistophe", "10/09/20, 03:43:19 PM", "Fixes #3679", "NaN"], ["5266", "Clarified HashMultimap javadoc about concurrency", "Saucistophe", "Saucistophe", "10/09/20, 03:43:18 PM", "Fixes #3682", "NaN"], ["5267", "MOE Sync 2020-10-08", "David P. Baker", "netdpb", "10/08/20, 04:05:54 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Run all zero of our GWT tests during presubmit/CI.\n\nUnfortunately, this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml).\n(And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)\n\nAs a result, this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I'll end up rolling it back if we reenable the tests externally someday. Still, for now it seems like a reasonable thing to clean up, if only to prevent me from trying to clean it up again 6 months from now :)\n\n(Followup after https://github.com/google/guava/issues/3680)\n\n9230b14efefc11d24c3c969f2dbae7f8595ef469\n\n-------\n\n<p> Check the generated PublicSuffixPatterns.java into Piper.\n\nCopybara can't export generated files.\n\nAlso, reformat the template (and then the file) so that autoformatting the file doesn't produce diffs.\n\neebb75ecc2beb4ff5c95cca974d3529505e31a60\n\n-------\n\n<p> Omit TestModuleEntryPoint from open-source repo.\n\nSince I've disabled GWT tests in the open-source repo, these no longer serve a purpose. (They're still listed in our testModule.gwt.xml files, but as noted in a previous commit, the GWT test infrastructure doesn't seem to care what we put in those files anymore.)\n\nWe could still include them, but they're generated during our build, so that complicates exporting them with Copybara.\n\n5948a59b546c02d61ac9c2f590483fb4a7271ddd", "NaN"], ["5268", "MOE Sync 2020-10-09", "David P. Baker", "netdpb", "10/09/20, 03:43:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Clarify `HashMultimap` docs about concurrency.\n\nCloses #5266.\nFixes #3682.\n\ne6b523481b34b2c2007046ea987bf62df92eb0f8\n\n-------\n\n<p> Removed all references to now useless workaround\n\nFixes #3679\nFixes #5265\n\n26da0949c1cf54eb730578e75fe087f67110ee71", "NaN"], ["5272", "Clarify how to use `IteratorTester`", "Jonathan Bluett-Duncan", "jbduncan", "10/13/20, 02:34:45 PM", "Partially addresses #5254.", "NaN"], ["5273", "Bump junit from 4.13 to 4.13.1", null, "dependabot[bot]", "12/17/20, 10:08:32 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.13 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.13...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.13&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/guava/network/alerts).\n\n</details>", "NaN"], ["5274", "Bump junit from 4.13 to 4.13.1 in /android", null, "dependabot[bot]", "12/17/20, 10:08:32 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.13 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.13...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.13&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/guava/network/alerts).\n\n</details>", "NaN"], ["5275", "MOE Sync 2020-10-13", "Chris Povirk", "cpovirk", "10/13/20, 02:34:45 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Clarify how to use `IteratorTester`\n\nWhen using `IteratorTester`, IntelliJ IDEA automatically imports\n`AbstractIteratorTester.KnownOrder`. However `AbstractIteratorTester`\nis private, and it is not obvious that one was meant to import\n`IteratorTester.KnownOrder` instead. Therefore this commit updates the\nJavadoc to give an example of how to use the API properly.\n\nFixes #5272\n\nc3172e1a55041b118a984bc5863082fda32d8243\n\n-------\n\n<p> Add a bunch of warnings to ExecutionSequencer.\n\nSee discussion on CL 335046640.\n\n0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac", "NaN"], ["5276", "Fix example in documentation for `IteratorTester`", "Jonathan Bluett-Duncan", "jbduncan", "10/13/20, 06:49:19 PM", "Partially addresses #5254 (and fixes my own mistake in https://github.com/google/guava/commit/9f03c474d92e724d2193ab64b5cfbd2b232a715e).", "NaN"], ["5277", "MOE Sync 2020-10-13", "Chris Povirk", "cpovirk", "10/13/20, 06:49:19 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Don't call toString() on the results of successful futures.\n\nRELNOTES=AbstractFuture.toString() no longer includes the toString() of the result.\n\n771629df701dfe565024db1cabfe19d7a5b2abfc\n\n-------\n\n<p> Fix example in documentation for `IteratorTester`\n\nI made a mistake and accidentally included an example that does not\ncompile. Specifically, importing `KnownOrder` as-is does not compile;\ninstead one needs to import `IteratorTester.KnownOrder`. See #5254 for\nmore information.\n\nI also changed the example to use `Collections#unmodifiableList`\nrather than `ArrayList` because `ArrayList#iterator` does not satisfy\nall the requirements of `IteratorFeature#MODIFIABLE`.\n\nFixes #5276\n\n448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0", "NaN"], ["5278", "MOE Sync 2020-10-14", "Chris Povirk", "cpovirk", "10/14/20, 02:09:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Clarify that Interner should be preferred instead of String.intern(); the existing language implies it's intended _only_ for other types.\n\nSee also https://github.com/google/guava/issues/399#issuecomment-61307754\n\n1034a2ee444ad03ec869638efa53b3ae880c7f4d\n\n-------\n\n<p> Document what happens when FutureCallback throws exception.\n\nFixes #5250, #2058\n\n3d573ac2514c53d678c3855b28d9223fea9c7e8f", "NaN"], ["5280", "MOE Sync 2020-10-15", "Chris Povirk", "cpovirk", "10/15/20, 02:42:13 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771\n\nRemove cancellation propagation test, as the intent of not propagating cancellation is to make sure run order is as expected.\n\nIf we propagate cancellations, the test fails.\n\nc8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a", "NaN"], ["5281", "Update IteratorTester example with a greater \"steps\" value", "Jonathan Bluett-Duncan", "jbduncan", "10/16/20, 07:26:20 PM", "Builds upon my earlier work in https://github.com/google/guava/pull/5272 and https://github.com/google/guava/pull/5276, whilst also addressing https://github.com/google/guava/issues/5254 a bit.", "NaN"], ["5282", "Added power support for the travis.yml file with ppc64le, added \"maven\" on packages", null, "sreekanth370", "10/23/20, 03:33:23 PM", "Added power support for the travis.yml file with ppc64le. This is part of the Ubuntu distribution for ppc64le. This helps us simplify testing later when distributions are re-building and re-releasing\r\n\r\nadded \"maven\"  packages like below.\r\npackages:\r\n      - maven\r", "NaN"], ["5283", "MOE Sync 2020-10-16", "Chris Povirk", "cpovirk", "10/16/20, 02:00:25 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Encode all primes less-than 66 into a bitmask\n\nUse a bitmask to make prime computation for all values less-than 66 O(1) and avoid any remainder calculations in these cases.\n\na2fcd41b7c10847d22943e083da450749a99c72b\n\n-------\n\n<p> Added `@CanIgnoreReturnValue` to `cancel`.\n\na4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33", "NaN"], ["5285", "MOE Sync 2020-10-16", "Chris Povirk", "cpovirk", "10/16/20, 05:55:35 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Remove deprecated method Files.fileTreeTraverser() that isn't being used anymore.\n\n295dd8008d06d73a99ffe076d1c302113b5a8f54", "NaN"], ["5286", "MOE Sync 2020-10-16", "Chris Povirk", "cpovirk", "10/16/20, 07:26:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Prepare for release 30.0.\n\n06c1d37ea914125b88bc27d0a570df84fe900a4f\n\n-------\n\n<p> Remove deprecated 1-arg ServiceManager.addListener.\n\n[]\n\nRELNOTES=`util.concurrent`: Removed the deprecated 1-arg `ServiceManager.addListener(Listener)`. Use the 2-arg `addListener(Listener, Executor)` overload, setting the executor to `directExecutor()` for equivalent behavior.\n\nd13ebb04258a0caecea56d908a391e7e694004b2\n\n-------\n\n<p> Update IteratorTester example with a greater \"steps\" value\n\nThis allows IteratorTester to check the edge case that when an iterator has been exhausted (that is, \"next\" has been called repeatedly until \"hasNext\" returns false) then calling \"next\" on the iterator again exhibits the same behavior as the user's chosen \"known good\" reference implementation.\n\nFixes #5281\n\nb094a4b3f43645298a7c9bce9b5d72184d7ff4cf", "NaN"], ["5287", "#3951 - Joiner implements Collector", "Saucistophe", "Saucistophe", "10/22/20, 04:12:49 PM", "Fixes #3951 ", "NaN"], ["5293", "MOE Sync 2020-10-24", "Nick", "nick-someone", "10/26/20, 01:59:42 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Add ClassInfo.isTopLevel().\n\nSeems like a useful method? I can't remember why I didn't add it in the first place. Perhaps just an oversight.\n\nPartially addresses https://github.com/google/guava/issues/3349\n\nRELNOTES=`reflect`: Added `ClassInfo.isTopLevel()`.\n\n14173d1bd5997fab0da2e8636e3c3a78f8e7cd61", "NaN"], ["5294", "MOE Sync 2020-10-26", "Nick", "nick-someone", "10/26/20, 06:12:31 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Fix minor documentation typos, thanks to @Stephan202 and @jbduncan\n\nfe37cd815ed687f7bd6881cb60717e0d641b3e1b", "NaN"], ["5298", "Verify maximumWeight before setting", "Aleksei Semin", "alllex", "11/10/20, 04:47:40 PM", "The maximumWeight builder method is the only method that does the argument verification before the assignment.\r\nIt looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform.", "NaN"], ["5300", "MOE Sync 2020-11-06", "Colin Decker", "cgdecker", "11/10/20, 04:48:03 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Refactor ClassPath: replace Scanner with Location class.\n\nafaaf1e3bd9e93aedaa9762573b2e0e1cc3108d2\n\n-------\n\n<p> Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.\n\nThe implementation of toString() goes through the bytes in the same order that asBytes() returns, so if the order of the underlying bytes is little-endian (as is the case for fingerprint2011 and LongHashCode), then the string will also be little-endian, contradicting what the documentation says.\n\n22955b574bd2a675c7cf468bcb4e968a13e886be\n\n-------\n\n<p> Optimize Hashing.crc32c() by eliminating two xors for every byte of input.\n\n7ecc705097f995c38cb8b5118f50d7c4a2670b88\n\n-------\n\n<p> Add constant for Origin Isolation header\n\nSpec: https://github.com/WICG/origin-isolation\n\nRELNOTES=Adds constant for the Origin-Isolation header.\n\naec265fc9653bcff3c1349c3879fdff41b254d3b\n\n-------\n\n<p> Remove outdated reference in docs\n\ne6282a474b3dc8d62dd8efcc7d2f2eec3aa47973\n\n-------\n\n<p> Add additional test for `Crc32cHashFunction`.\n\nd4c7293ebdf634dc317fa774ec94eaeec54100f7\n\n-------\n\n<p> Verify maximumWeight before setting\n\nThe maximumWeight builder method is the only method that does the argument verification before the assignment.\nIt looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform.\n\nFixes #5298\n\n5458f93c04ab0b26ec7457e2151b588d05a1ab3d\n\n-------\n\n<p> Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.\n\nThis is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available.\n\n2c2953c1de85ba7ff35be2bcd01b146a40cf10b1\n\n-------\n\n<p> Rollback of change:\n\nDo 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.\n\nThis is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available.\n\n2bea3212e63234d4ad1c307abcfd7975c966ff09", "NaN"], ["5301", "Fix LoadingCache minor documentation typo", "linyimin", "linyimin-bupt", "11/07/20, 03:27:09 PM", "NaN", "NaN"], ["5302", "Fix LoadingCache minor documentation typo", "linyimin", "linyimin-bupt", "11/07/20, 03:32:56 PM", "NaN", "NaN"], ["5303", "Fix LoadingCache minor documentation typo", "linyimin", "linyimin-bupt", "11/12/20, 09:32:43 AM", "NaN", "NaN"], ["5306", "Add `X-Request-ID` to `HttpHeaders`", "Tiago Grosso", "TiagoGrosso", "11/10/20, 04:47:40 PM", "NaN", "NaN"], ["5307", "MOE Sync 2020-11-10", "Colin Decker", "cgdecker", "11/10/20, 04:47:40 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Refactor ClassPath: replace Scanner with Location class.\n\n75c2c543c6ac64943037630cfa40945feff10f42\n\n-------\n\n<p> Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.\n\nThe implementation of toString() goes through the bytes in the same order that asBytes() returns, so if the order of the underlying bytes is little-endian (as is the case for LongHashCode), then the string will also be little-endian, contradicting what the documentation says.\n\n841129afbd77f8c78bb469de2ece758b418d322b\n\n-------\n\n<p> Optimize Hashing.crc32c() by eliminating two xors for every byte of input.\n\nBenchmarks suggest a modest speedup around 8%.\n\nb685bf7068044cfef0c73163408a0ccebacef203\n\n-------\n\n<p> Add constant for Origin Isolation header\n\nSpec: https://github.com/WICG/origin-isolation\n\nRELNOTES=Adds constant for the Origin-Isolation header.\n\nf3d79119d1e1f9937f332a8c73ed1690dfbb8ffb\n\n-------\n\n<p> Remove outdated reference in docs\n\n3ac6e42a8622be4b122dfd4b9eef989148141148\n\n-------\n\n<p> Add additional test for `Crc32cHashFunction`.\n\n4f7e925397e6ca2b17ce3d563ba1968e94959bd1\n\n-------\n\n<p> Verify maximumWeight before setting\n\nThe maximumWeight builder method is the only method that does the argument verification before the assignment.\nIt looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform.\n\nFixes #5298\n\nf1d40c3dd5243c5a29fe683fb42f7ff61b2a3068\n\n-------\n\n<p> Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.\n\nThis is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available.\n\n6d9e9e33c6a784f86b51c3fac785532351374271\n\n-------\n\n<p> Rollback\n\n*** Original change description ***\n\nDo 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.\n\nThis is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available.\n\n***\n\n916807371db167b99bb8b591a22c9ec07fe2bac2\n\n-------\n\n<p> Backport `combine` to java7 for `ImmutableList` & `ImmutableSet`.\n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.\n\na275458c2601c33bfb5ba6ec54e2458feeeff06a\n\n-------\n\n<p> Fix `LoadingCache` minor documentation typo.\n\nFixes #5503.\n\n59a9556d82fc233acf8c0a3ad00de14e02384f75\n\n-------\n\n<p> Added submitAsync to ClosingFuture.\n\nRELNOTES=\"Added `submitAsync(AsyncClosingCallable)` to `ClosingFuture`.\"\n\n187db6d240a896be6efb6fc98f014b9d4690fe30\n\n-------\n\n<p> Add `X-Request-ID` to `HttpHeaders`.\n\nFixes #5306.\n\nRELNOTES=Add `X-Request-ID` to `HttpHeaders`.\n\n0f5a31bbc213f61404189d777b2039842210cab5\n\n-------\n\n<p> Fix Android test failure in ClassPathTest.\n\nReproduced the error and verified that this change fixes it.\n\nc1f6ac185f0e72998ed30ae72a0983804c5a4f5a", "NaN"], ["5308", "MOE Sync 2020-11-11", "David P. Baker", "netdpb", "11/11/20, 09:27:41 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Backport `combine` to java7 for `ImmutableMap`.\n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.\n\nThe Java8/Java7 implementations branched once again, where Java8 uses an array of Entries, whereas Java7 uses an array of alternating key/value pairs. Either way, the implementations were pretty trivial this time.\n\n2afe372fb9fd390ceb671003588c053b7d463399\n\n-------\n\n<p> Backport combine to java7 for `ImmutableRangeSet`/`ImmutableRangeSet`.\n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.\n\nI saved this for last, but they turned out to be the easiest to do. Tests are kind of crap, but honestly, baseline tests also seemed a little bit light to me.\n\na742fca6c4f0f96bfedac86b0722efec196b9052\n\n-------\n\n<p> Backport `combine` to java7 for Sorted collections & (Immutable)BiMap.\n\nThis is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.\n\n4c7fe5993f6938d60ecbf90494c93b827253101e\n\n-------\n\n<p> Fix memory leaks and potential crashes in HashBiMap, which occur in transpiled ObjC code.\n\n450bf69d33c855032e3698ee96bae3994cc0377e", "NaN"], ["5310", "MOE Sync 2020-11-12", "David P. Baker", "netdpb", "11/12/20, 04:07:02 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Tidy up description since this shows up in search results, Maven Central, and many other places around the web.\n\nCL automatically created by:\n    replace_string \\\n      'google'\\''s collections, io classes, and much' \\\n      'Google'\\''s collections, I/O classes, and'\n\n21633ac58673b82a59930c001fdc0b1d85e30642", "NaN"], ["5312", "MOE Sync 2020-11-13", "David P. Baker", "netdpb", "11/16/20, 05:41:01 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Replaces cycle_finder references to \"--whitelist\" with \"--suppress-list\", and \"--blacklist\" with \"--restrict-to\".\n\nc8c30409561c77baa59939b56bc84a7314888ee9\n\n-------\n\n<p> Add AndroidAccessToCollectors.\n\nThis adds the base Immutable collectors already in CollectCollectors, but is still lacking the Table-collections, Multi-collections, and mutable-collections.\n\nb52b63ba2d1c8c89bad579756b3622cd78c9db92\n\n-------\n\n<p> Backport ImmutableTable.combine\n\nThat should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations.\n\nda6a2890917e65297ea4d12bd8fa231eceb5cfa0\n\n-------\n\n<p> Add to[Immutable]Multiset to AndroidAccessToCollectors\n\n10983434ad0ad9c1b424f4d0e749d02276895fcb\n\n-------\n\n<p> Backport combine to Immutable[List|Set]Multimap\n\nInterestingly, ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight.\n\n7652606d2d2f00a4bb29a0bd22a73607b264bab0\n\n-------\n\n<p> Add Multimap collectors to AndroidAccessToCollectors\n\nff5ba7859e2ce3e37c1e8f45becba801c156a2d3\n\n-------\n\n<p> Add TableCollectors to AndroidAccessToCollectors\n\nfc08b687ebe8c8af834461db5672813caf3d9efb", "NaN"], ["5321", "MOE Sync 2020-11-16", "David P. Baker", "netdpb", "11/16/20, 05:40:35 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Replaces cycle_finder references to \"--whitelist\" with \"--suppress-list\", and \"--blacklist\" with \"--restrict-to\".\n\nRELNOTES=none\n\n3bf14a6ebdcaba662e39ea1d98e20e15cf53370d\n\n-------\n\n<p> Add AndroidAccessToCollectors.\n\nThis adds the base Immutable collectors already in CollectCollectors, but is still lacking the Table-collections, Multi-collections, and mutable-collections.\n\ne93c0557542e53a90ac3b5bae31a41bc102da806\n\n-------\n\n<p> Backport ImmutableTable.combine\n\nThat should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations.\n\n564439f883f709843801bb260e998ed6ac6a427d\n\n-------\n\n<p> Add to[Immutable]Multiset to AndroidAccessToCollectors\n\n2a232a71cb980c689ee6b43ac241a0764d41cfbf\n\n-------\n\n<p> Backport combine to Immutable[List|Set]Multimap\n\nInterestingly, ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight.\n\nc9dd38f640734604397db8fdeea3f315afb8c487\n\n-------\n\n<p> Add Multimap collectors to AndroidAccessToCollectors\n\n4a89571b10379e2e885ce221173365c7deb1b1be\n\n-------\n\n<p> Add TableCollectors to AndroidAccessToCollectors\n\n7b5f741e939c80f0924bec4353d3b1f672d79eb4\n\n-------\n\n<p> Fix open source \u201cNo tests found in com.google.common.collect.TableCollectorsTest\u201d\n\nd5f07055a1a38227c98c4ec038d74ce7504b3d6f\n\n-------\n\n<p> Update Public Suffix data.\n\na132338a913fba14384234649f2a6a170f7b7dca", "NaN"], ["5322", "MOE Sync 2020-11-17", "David P. Baker", "netdpb", "11/17/20, 08:57:23 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make toImmutableEnum[Set|Map] to AndroidAccessToCollectors\n\nI think that\u2019s the last of them.\n\nThe implementations I moved verbatim, and there was no change of code there.\n\n660f036a37966bbee88b3b002d1ad9d1afa8e50e", "NaN"], ["5324", "Fix #4011: Files::createTempDir security vulnerability", "Melloware", "melloware", "01/29/21, 06:36:23 PM", "I am submitting this PR because...\r\n\r\n- this method is marked both `Beta` and `Deprecated`.\r\n- This change still has the code work correctly it just uses NIO which does not have the vulnerability\r\n- Allows security companies like Sonatype and Snyk to stop reporting this as vulnerable", "NaN"], ["5331", "MOE Sync 2020-11-24", "Chris Povirk", "cpovirk", "11/24/20, 04:52:05 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Make toImmutableSortedMap levarage collect collectors\n\nb499958c1439b0c1c76732ec50daec8b46a1789b", "NaN"], ["5332", "MOE Sync 2020-11-24", "Chris Povirk", "cpovirk", "11/24/20, 05:39:01 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Internal change.\n\n412db47018be7ccee39905468f65cd1f7b9f0eb2", "NaN"], ["5338", "MOE Sync 2020-11-30", "David P. Baker", "netdpb", "11/30/20, 03:12:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> PUBLIC: Add missing Override annotations.\n\nda5e9d98f43b039c64a62182614f74ca188cd2ce", "NaN"], ["5339", "MOE Sync 2020-12-02", "David P. Baker", "netdpb", "12/02/20, 06:44:49 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Suppress TSAN errors for benign races.\n\nCompare other usages of `@LazyInit` on collection views, such as `HashBiMap.inverse` and `AbstractTable.cellSet`.\n\n2dd065fb4e67aa61c0db2e8851ae002e3b8959a2", "NaN"], ["5343", "MOE Sync 2020-12-03", "David P. Baker", "netdpb", "12/03/20, 05:09:20 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Explain when StandardSystemProperty.value() can return a null value, and deprecate JAVA_EXT_DIRS.\n\nvalue()'s return type has been @Nullable since 4232450e7bb7c46c08868f699323db3e787507c8, but I had forgotten the details about why, despite past CLs to update the test for specific missing keys.\n\nI assume that we'll never actually *remove* JAVA_EXT_DIRS.\n\n(Just slightly relevant to https://github.com/google/guava/issues/2571)\n\nRELNOTES=`base`: Deprecated `StandardSystemProperty.JAVA_EXT_DIRS`. We do not plan to remove the API, but in recent versions of Java, that property always has a value of `null`.\n\n5cdf73749704cdb752b922ec8c66dff2d36b22de\n\n-------\n\n<p> Automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.\n\n*** Reason for rollback ***\n\nCausing Sheets iOS crash\n\n*** Original change description ***\n\nFix memory leaks and potential crashes in HashBiMap, which occur in transpiled ObjC code.\nAdd iOS specific unit tests in XPlat, because Guava is missing infrastructure for iOS tests.\n\n***\n\nd2568df195c16cdbc62c6ab93ce489f9a4a81dc3", "NaN"], ["5347", "MOE Sync 2020-12-04", "David P. Baker", "netdpb", "12/04/20, 09:30:39 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> System.getProperties().getProperty => System.getProperty.\n\nMy motivation was that it's slightly easier for a nullness checker to determine that System.getProperty(standardProperty) is (generally speaking) non-null. But it turns out that java.runtime.name is not a standard property!\n\nStill, this is a slight simplification, so I guess I'm submitting.\n\n96203a3d7a76dda7190e30d58431515fd9ad4ea3\n\n-------\n\n<p> Fix a bug in HashBiMap which was causing crashes in Sheets on iOS.\n\nThe crash was caused by the fact, that linked-list of BiEntry instances inside a bucket were using @Weak references, and only the first entry in the list was strongly referenced. The remaining ones were deallocated.\n\nWith this change, Sheets iOS is not crashing anymore.\n\n847c0235ef0a768a4d19274a1fe8264bcbfc190a", "NaN"], ["5348", "Fix compatibility between the cache compute methods and a load", "Ben Manes", "ben-manes", "02/12/21, 04:09:15 PM", "The `asMap().compute` implementation did not take into account that the present value may be loading. A load does not block other writes to that entry and takes into account that it may be clobbered, causing it to automatically discard itself. This is a known design choice that breaks linearizability assumptions (#1881). The compute should check if a load is in progress and call the appropriate internal removal method.\r\n\r\nBecause a zombie entry remained in the cache and still is marked as loading, the loader could discover entry and try to wait for it to materialize. When the computation is a removal, indicated by a null value, the loader would see this as the zombie's result. Since a cache loader may not return null it would throw an exception to indicate a user bug.\r\n\r\nA new `ComputingValueReference` resolves both issues by indicating that the load has completed. The compute's `removeEntry` will then actually remove this entry and the loader will not wait on the zombie. Instead if it observes the entry, it will neither receive a non-null value or wait for it to load, but rather try to load anew under the lock. This piggybacks on the reference collection support where an entry is present but its value was garbage collected, causing the load to proceed. By the time the lock is obtained the compute method's entry was removed and the load proceeds as normal (so no unnecessary notification is produced).\r\n\r\nfixes #5342\r\nfixes #2827\r\nresolves underlying cause of #2108", "NaN"], ["5349", "#3945 - Fixed parent.relativePath issue in guava-bom", "Abhyankar Chaubey", "abchaubey", "12/10/20, 03:48:59 PM", "Fixed : #3945", "NaN"], ["5350", "checkWeightWithWeigher ,Simplify if else", "loveincode", "loveincode", "12/09/20, 06:19:00 AM", "Simplify if else  ,Streamline the code", "NaN"], ["5351", "checkWeightWithWeigher ,Simplify if else", "loveincode", "loveincode", "12/10/20, 04:01:14 PM", "Simplify if else  ,Streamline the code", "NaN"], ["5352", "MOE Sync 2020-12-10", "Kurt Alfred Kluever", "kluever", "12/10/20, 03:48:59 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> First step in cleaning up PSL handling. Next stage will be to change the template to store the trie string as a separate static constant, so that I can write a unit test that verifies that.\n\nf0c496c1a6b7a7de08f95bf750aeefc5319121d0\n\n-------\n\n<p> Fix `relativePath` warning for guava-bom.\n\nFixes #3945.\nCloses #5349.\n\naa80e236c6251b7a8fe529abc3d10e269594baf2", "NaN"], ["5354", "MOE Sync 2020-12-11", "Kurt Alfred Kluever", "kluever", "12/11/20, 04:21:15 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.\n\n8d571ca36055d207635d84db4159607c511de649\n\n-------\n\n<p> Log a warning if running under a Java 7 VM.\n\nMore precisely, log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes, that's fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations.\n\nThis is a step toward removing Java 7 support entirely: https://github.com/google/guava/issues/5269\n\nRELNOTES=Introduced a warning log message when running under Java 7. This warning is not _guaranteed_ to be logged when running under Java 7, so please don't rely on it as your only warning about future problems. If the warning _itself_ causes you trouble, you can eliminate it by silencing the logger for `com.google.common.base.MoreObjects$ToStringHelper` (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems.\n\n0357006a920c9cf84d47901471a525da85deba34", "NaN"], ["5355", "MOE Sync 2020-12-14", "Chris Povirk", "cpovirk", "12/14/20, 03:44:32 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Prepare for release 30.1.\n\n81e941f66865d6bece7c3f09cde513a6cc50b858", "NaN"], ["5357", "MOE Sync 2020-12-16", "Colin Decker", "cgdecker", "12/16/20, 06:33:14 PM", "This code has been reviewed and submitted internally. Feel free to discuss on\nthe PR, and we can submit follow-up changes as necessary.\n\nCommits:\n=====\n<p> Internal changes.\n\n965731aaf97ab84a3af5c21db64e76152bcba744", "NaN"], ["5360", "Set @Target on @IgnoreJRERequirement.", null, "copybara-service[bot]", "12/17/20, 07:46:54 PM", "Set @Target on @IgnoreJRERequirement.\n\nValues:\nhttps://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/apidocs/org/codehaus/mojo/animal_sniffer/IgnoreJRERequirement.html\n\nContext:\nThis doesn't \"fix\" anything, but it prevents us from replicating an error I just made in the future:\nhttps://github.com/mojohaus/animal-sniffer/issues/131#issuecomment-747628259\nRELNOTES=n/a", "NaN"], ["5361", "Bump deps.", null, "copybara-service[bot]", "12/17/20, 10:08:31 PM", "Bump deps.\n\nMy methodology was something like:\n\n```\n( for F in . android; do ( mvn org.codehaus.mojo:versions-maven-plugin:2.8.1:update-properties org.codehaus.mojo:versions-maven-plugin:2.8.1:use-latest-releases -f $F/pom.xml -DgenerateBackupPoms=false ); done )\n```\n\nFixes https://github.com/google/guava/pull/5273\nFixes https://github.com/google/guava/pull/5274\nMore completely addresses https://github.com/google/guava/pull/4018\n\nRELNOTES=n/a", "NaN"], ["5363", "Added checkstyle to force the code style to be Google's Java Style compliant", "Alberto Sinigaglia", "AlbertoSinigaglia", "12/21/20, 09:25:59 PM", "Hi,\r\nI've added to the main `pom.xml` the `checkstyle` plugin, in order to enforce the code to be Google's Java Style as specified on the file [CONTRIBUTING.md](https://github.com/google/guava/blob/master/CONTRIBUTING.md)\r\n\r\nThis however cause \"a awful lot\" of warnings in the `guava` sub-project, which if you wan i can take care, but it would be a very big PR, and so i don't know if it could be actually a great choice \r\n\r\n\\[cpovirk edit: related to #5362\\]", "NaN"], ["5364", "Cache only .m2/repository, not all of .m2.", null, "copybara-service[bot]", "12/21/20, 09:56:52 PM", "Cache only .m2/repository, not all of .m2.\n\nHopefully this will fix \"Could not find artifact org.apache.maven.plugins:maven-checkstyle-plugin:jar:3.1.1 in google-maven-central\" from https://github.com/google/guava/pull/5363\n\nCompare CL 310633203 for Truth.\n\nRELNOTES=n/a", "NaN"], ["5365", "Temporary PR to retry #5363 to see if Travis config was fixed by #5364.", "Chris Povirk", "cpovirk", "12/21/20, 10:16:26 PM", "Co-authored-by: Alberto Sinigaglia <sinigagliaalberto@gmail.com>", "NaN"], ["5367", "Optimize CRC32C.", null, "copybara-service[bot]", "12/23/20, 06:30:57 PM", "Optimize CRC32C.", "NaN"], ["5370", "Internal change.", null, "copybara-service[bot]", "12/28/20, 08:46:02 PM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5371", "Internal change", null, "copybara-service[bot]", "12/30/20, 07:04:18 PM", "Internal change\n\nRELNOTES=n/a", "NaN"], ["5373", "Update Public Suffix data.", null, "copybara-service[bot]", "12/30/20, 08:54:30 PM", "Update Public Suffix data.\n\nRELNOTES=n/a", "NaN"], ["5374", "Add Strings.reverse(CharSequence).", null, "copybara-service[bot]", "05/24/21, 10:10:13 PM", "Add Strings.reverse(CharSequence).", "NaN"], ["5378", "Fix a comment to reflect that the ImmutableSortedMap copyOf method uses the natural ordering of the keys, rather than a provided comparator.", null, "copybara-service[bot]", "01/05/21, 03:37:18 PM", "Fix a comment to reflect that the ImmutableSortedMap copyOf method uses the natural ordering of the keys, rather than a provided comparator.", "NaN"], ["5382", "Removed some redundant 'else's using early return", "LeeJuHyun", "JuHyun419", "01/19/21, 04:57:18 PM", "removed some redundant 'else' ", "NaN"], ["5383", "Normative modification", "gongxuanzhang", "gongxuanzhang", "01/19/21, 05:02:15 PM", "1.Add annotation @override to interesting methods \r\n2.Extract method parameters as static  to improve performance", "NaN"], ["5384", "Add missing link to ImmutableSortedMultiset in package-info", null, "Marcono1234", "01/30/21, 03:20:38 AM", "NaN", "NaN"], ["5385", "Remove `@Beta` from `HashCode`.", null, "copybara-service[bot]", "01/19/21, 12:23:50 AM", "Remove `@Beta` from `HashCode`.\n\nhttps://github.com/google/guava/issues/3284\n\nRELNOTES=Remove @Beta from HashCode.", "NaN"], ["5386", "Fix assertion for `FilesTest.testCopyIdenticalFiles()`.", null, "copybara-service[bot]", "01/19/21, 06:08:16 PM", "Fix assertion for `FilesTest.testCopyIdenticalFiles()`.\n\nFixes https://github.com/google/guava/issues/5381\n\nRELNOTES=n/a", "NaN"], ["5394", "Remove `@Beta` from `CountingOutputStream`.", null, "copybara-service[bot]", "01/28/21, 06:09:50 PM", "Remove `@Beta` from `CountingOutputStream`.\n\nRELNOTES=`io`: Removed `@Beta` from `CountingOutputStream`.", "NaN"], ["5395", "Add a link to `ImmutableSortedMultiset` to `collect/package-info.java`.", null, "copybara-service[bot]", "01/30/21, 03:20:38 AM", "Add a link to `ImmutableSortedMultiset` to `collect/package-info.java`.\n\nFixes https://github.com/google/guava/pull/5384\n\nRELNOTES=n/a", "NaN"], ["5400", "Add `@CheckReturnValue` to some `com.google.common.cache` APIs.", null, "copybara-service[bot]", "02/06/21, 03:43:45 PM", "Add `@CheckReturnValue` to some `com.google.common.cache` APIs.\n\nRELNOTES=Add `@CheckReturnValue` to some `com.google.common.cache` APIs.", "NaN"], ["5401", "change in peek() method of PeekingImpl class.", "Nihal Agarwal", "NihalAgarwal", "02/09/21, 09:47:41 AM", "Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true. ", "NaN"], ["5402", "change in peek() method of PeekingImpl class.", "Nihal Agarwal", "NihalAgarwal", "02/09/21, 10:46:56 AM", "Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true.", "NaN"], ["5403", "change in peek() method of PeekingImpl class", "Nihal Agarwal", "NihalAgarwal", "02/12/21, 08:49:42 PM", "Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not, we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true.", "NaN"], ["5404", "Assign or use the result of a primitive wrapper method invocation (it will soon be an ERROR to ignore it).", null, "copybara-service[bot]", "02/10/21, 06:08:01 PM", "Assign or use the result of a primitive wrapper method invocation (it will soon be an ERROR to ignore it).\n\nRELNOTES=N/A", "NaN"], ["5406", "Fix compatibility between the cache compute methods and a load.", null, "copybara-service[bot]", "02/12/21, 04:09:15 PM", "Fix compatibility between the cache compute methods and a load.\n\nFixes #5348\nFixes #5342\nFixes #2827\nResolves underlying cause of #2108\n\nRELNOTES=Fix compatibility between the cache compute methods and a load.", "NaN"], ["5407", "chore: remove deprecated method Class#newInstance()", "suraj dhamecha", "surajdhamecha", "02/16/21, 03:24:58 AM", "NaN", "NaN"], ["5409", "Migrate off deprecated Class#newInstance().", null, "copybara-service[bot]", "02/16/21, 03:24:58 AM", "Migrate off deprecated Class#newInstance().\n\nFixes #5407\n\nRELNOTES=n/a", "NaN"], ["5412", "This is causing upper bounds errors in google-http-java-client", null, "copybara-service[bot]", "02/19/21, 09:12:45 PM", "This is causing upper bounds errors in google-http-java-client\n\nRELNOTES=update error prone annotations", "NaN"], ["5414", "Delete hardcoded test .gwt.xml files.", null, "copybara-service[bot]", "02/23/21, 05:33:12 PM", "Delete hardcoded test .gwt.xml files.\n\nAs noted in CL 335869875, our open-source tests are already not looking at the contents of these files.\n\nTested:\n  ( cd guava-gwt && JAVA_HOME=/usr/local/buildtools/java/jdk mvn clean install -Dtest.include=DoesNotMatchAnything -Dmaven.javadoc.skip )\nRELNOTES=n/a", "NaN"], ["5415", "Remove redundant `else` blocks.", null, "copybara-service[bot]", "02/24/21, 05:19:13 PM", "Remove redundant `else` blocks.\n\nFixes #3974.\n\nRELNOTES=n/a", "NaN"], ["5416", "Add `@DoNotCall` to the mutator methods on immutable types", null, "copybara-service[bot]", "02/24/21, 08:49:30 PM", "Add `@DoNotCall` to the mutator methods on immutable types\n\nRELNOTES=Add `@DoNotCall` to the mutator methods on immutable types", "NaN"], ["5418", "Update Public Suffix data.", null, "copybara-service[bot]", "02/25/21, 02:26:13 PM", "Update Public Suffix data.\n\nRELNOTES=n/a", "NaN"], ["5420", "Internal change.", null, "copybara-service[bot]", "02/26/21, 07:31:04 PM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5421", "Internal change.", null, "copybara-service[bot]", "02/26/21, 09:35:55 PM", "Internal change.", "NaN"], ["5422", "update enforcer-rule", null, "copybara-service[bot]", "03/01/21, 03:05:49 PM", "update enforcer-rule\n\nRELNOTES=n/a", "NaN"], ["5423", "update JUnit", null, "copybara-service[bot]", "03/01/21, 03:32:14 PM", "update JUnit\n\nRELNOTES=n/a", "NaN"], ["5424", "Add `@DoNotCall` to a few more Guava APIs that are guaranteed to always throw `UnsupportedOperationException`.", null, "copybara-service[bot]", "03/02/21, 12:08:31 AM", "Add `@DoNotCall` to a few more Guava APIs that are guaranteed to always throw `UnsupportedOperationException`.\n\nRELNOTES=n/a", "NaN"], ["5425", "Create a CI build and test using GitHub Actions.", "Carl Dea", "carldea", "03/16/21, 05:13:41 PM", "This will run tests and utilize GitHub's CI infrastructure. ", "NaN"], ["5426", "ToStringHelper: omitEmptyValues() - Benchmark updates", null, "copybara-service[bot]", "03/03/21, 10:47:56 PM", "ToStringHelper: omitEmptyValues() - Benchmark updates\n\nRELNOTES=n/a", "NaN"], ["5427", "Not a tracked issue- Refactor TrieParser", null, "olofeldre", "03/04/21, 09:50:55 AM", "This branch / commit contains a modified version of TrieParser,\r\nwhich does not use LinkedList, and it has been replaced with ArrayDeque\r\nfrom the java standard library. ALL tests pass.", "NaN"], ["5428", "Move Java-7-VM warning from `MoreObjects` to `Preconditions`.", null, "copybara-service[bot]", "03/09/21, 02:01:38 AM", "Move Java-7-VM warning from `MoreObjects` to `Preconditions`.\n\nRELNOTES=Increased the aggressiveness of [Guava 30.1](https://github.com/google/guava/releases/tag/v30.1)'s warning log message for running `guava-android` under a Java 7 VM. (Android VMs are unaffected.) If the warning _itself_ causes you trouble, you can eliminate it by silencing the logger for `com.google.common.base.Preconditions` (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for [`NullPointerException`](https://stackoverflow.com/a/41017717/28465) or even [deadlock](https://stackoverflow.com/a/48009613/28465). (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.)", "NaN"], ["5429", "Issue #2394 - Replace LinkedList with ArrayDeque", "Anton L\u00f6vstr\u00f6m", "antonlovstrom", "03/11/21, 09:31:51 PM", "#2394\r\n\r\nRefactor TrieParser, LineReader, and CacheLoaderTest by replacing LinkedList with ArrayDeque. LinkedList still occur at a few places where it does not make sense to replace it.", "NaN"], ["5430", "Replace LinkedList with ArrayDeque.", null, "copybara-service[bot]", "03/11/21, 09:31:51 PM", "Replace LinkedList with ArrayDeque.\n\nRefactor TrieParser, LineReader, and CacheLoaderTest by replacing LinkedList with ArrayDeque.\n\nFixes https://github.com/google/guava/pull/5429\n\nCo-authored-by: Olof Gren <olofthegren@gmail.com>\nCo-authored-by: Caroline Larsen <e.caroline.larsen@gmail.com>\nCo-authored-by: Joakim Skoog <joakim.skoog.97@gmail.com>\nCo-authored-by: Robin W\u00e4nlund <robin.wanlund@hotmail.com>\nRELNOTES=n/a", "NaN"], ["5431", "Internal change.", null, "copybara-service[bot]", "03/12/21, 12:50:43 AM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5432", "improve documentation", "Eclixal", "Eclixal", "03/17/21, 04:35:56 PM", "Improved documentation of the Platform class", "NaN"], ["5434", "Add documentation to a couple of `Platform` methods.", null, "copybara-service[bot]", "03/17/21, 04:35:56 PM", "Add documentation to a couple of `Platform` methods.\n\nCloses https://github.com/google/guava/pull/5432.\n\nRELNOTES=n/a", "NaN"], ["5436", "Prepare for release 30.1.1.", null, "copybara-service[bot]", "03/19/21, 04:16:33 PM", "Prepare for release 30.1.1.\n\nRELNOTES=n/a", "NaN"], ["5437", "Document that we test under both JDK8 and JDK11 (and that we do that for the Android flavor, too).", null, "copybara-service[bot]", "03/19/21, 04:39:10 PM", "Document that we test under both JDK8 and JDK11 (and that we do that for the Android flavor, too).\n\nRELNOTES=n/a", "NaN"], ["5440", "Internal change", null, "copybara-service[bot]", "03/22/21, 04:33:17 PM", "Internal change\n\nRELNOTES=n/a", "NaN"], ["5441", "Internal change.", null, "copybara-service[bot]", "03/23/21, 04:14:01 PM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5442", "Allow usages of java.util.Objects.requireNonNull in the backport.", null, "copybara-service[bot]", "03/23/21, 03:54:31 PM", "Allow usages of java.util.Objects.requireNonNull in the backport.\n\nRelevant to https://github.com/google/guava/issues/5269 in that it's an exception -- a case in which we *are* willing to use a Java 7 API because we know this particular API is safe to use under Android.\n\nRELNOTES=n/a", "NaN"], ["5443", "Clarify docs about annotation-only dependencies.", null, "copybara-service[bot]", "03/23/21, 04:22:56 PM", "Clarify docs about annotation-only dependencies.\n\nRELNOTES=n/a", "NaN"], ["5444", "Set `-source 8 -target 8` in the open-source build, and remove Java8Usage.", null, "copybara-service[bot]", "03/23/21, 07:14:28 PM", "Set `-source 8 -target 8` in the open-source build, and remove Java8Usage.\n\nThis is largely a rollback of the original Java8Usage change, but I've modified it in a few ways:\n\n- I set `-source 8 -target 8` in the backport.\n- I kept the code to make includes/excludes fully work with maven-compiler-plugin, since that could save us some confusion down the line.\n- I incorporated a rollback of the changes to Preconditions from CL 361700569, in which I moved the warning from MoreObjects to Preconditions.\n- I added errors to our internal release scripts so that we don't accidentally make a release that drops Java 7 support before we're ready.\n\nFixes https://github.com/google/guava/issues/5269", "NaN"], ["5445", "Create Dependabot config, only for GitHub Actions for now.", null, "copybara-service[bot]", "03/24/21, 01:21:49 AM", "Create Dependabot config, only for GitHub Actions for now.\n\nRELNOTES=n/a", "NaN"], ["5446", "Add `@Nullable` to the bound of `Supplier`.", null, "copybara-service[bot]", "03/24/21, 11:43:50 PM", "Add `@Nullable` to the bound of `Supplier`.\n\nRELNOTES=`base`: Marked the bound of the type parameter in `Supplier` as `@Nullable` -- including in `guava-android`. TODO(cpovirk): In the release, consider either reverting this or making sure that we've adopted such annotations thoroughly.", "NaN"], ["5447", "Belatedly remove the GWT-only overloads of `Futures.catching` and `catchingAsync` that let callers omit the `Executor`.", null, "copybara-service[bot]", "03/24/21, 11:23:52 PM", "Belatedly remove the GWT-only overloads of `Futures.catching` and `catchingAsync` that let callers omit the `Executor`.\n\nWe removed these long ago from the non-GWT versions.\n\nRELNOTES=`util.concurrent`: Removed the GWT-only overloads of `Futures.catching` and `catchingAsync` that let callers omit the `Executor`. This matches a change made years ago to the non-GWT API.", "NaN"], ["5448", "Update Public Suffix data.", null, "copybara-service[bot]", "03/25/21, 01:17:45 AM", "Update Public Suffix data.\n\nRELNOTES=n/a", "NaN"], ["5452", "Mark `Abstract*.delegate` methods in `graph` as package-private.", null, "copybara-service[bot]", "03/29/21, 05:37:42 PM", "Mark `Abstract*.delegate` methods in `graph` as package-private.\n\nThe method was exposing the package-private `BaseGraph` type through the public type `ImmutableGraph`.\n\n(But it was exposing it only as `protected`, and no one could subclass `ImmutableGraph` outside the package. So this should be mostly academic.)\n\nFixes https://github.com/google/guava/issues/5450\n\nRELNOTES=n/a", "NaN"], ["5453", "Move dependabot.yml out of workflows.", null, "copybara-service[bot]", "03/29/21, 05:59:31 PM", "Move dependabot.yml out of workflows.\n\nRELNOTES=n/a", "NaN"], ["5454", "Remove `protected` from some more members in `graph`.", null, "copybara-service[bot]", "03/29/21, 06:12:49 PM", "Remove `protected` from some more members in `graph`.\n\nFor now, I've left the methods of the original report (https://github.com/google/guava/issues/5451) alone:\n- `edgeCount`\n- `isOrderingCompatible`\n- `validateEndpoints`\n\nSo most of the changes in this CL have no effect on even the API visible in Javadoc. However, a few changes do show up in Javadoc:\n\n`StandardNetwork`:\n- fields `nodeConnections` and `edgeToReferenceNode`\n- methods `checkedConnections`, `checkedReferenceNode`, `containsNode`, and `containsEdge`\n...affecting guava.dev/ImmutableNetwork\n\n`StandardValueGraph`:\n- fields `nodeConnections` and `edgeCount`\n- methods `checkedConnections`, `containsNode`, `hasEdgeConnecting_internal`, and `edgeValueOrDefault_internal`\n...affecting guava.dev/ImmutableValueGraph\n\nAs in https://github.com/google/guava/issues/5450, this makes essentially no difference to users other than the cleaner Javadoc: The `Immutable*` types are not subclassable outside the package, so no one could call the `protected` methods, anyway.\n\nRELNOTES=n/a", "NaN"], ["5455", "Introduce transitional package-private nullness annotations, and apply them to `Supplier`.", null, "copybara-service[bot]", "03/30/21, 02:50:38 PM", "Introduce transitional package-private nullness annotations, and apply them to `Supplier`.\n\nRELNOTES=n/a", "NaN"], ["5458", "Bump project.version from HEAD-android-SNAPSHOT to 30.1.1-android in /android/guava-bom", null, "dependabot[bot]", "03/31/21, 09:06:18 PM", "Bumps `project.version` from HEAD-android-SNAPSHOT to 30.1.1-android.\nUpdates `guava` from HEAD-android-SNAPSHOT to 30.1.1-android\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `guava-testlib` from HEAD-android-SNAPSHOT to 30.1.1-android\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava-testlib's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/guava/network/alerts).\n\n</details>", "NaN"], ["5459", "Bump project.version from HEAD-jre-SNAPSHOT to 30.1.1-jre in /guava-bom", null, "dependabot[bot]", "03/31/21, 09:06:32 PM", "Bumps `project.version` from HEAD-jre-SNAPSHOT to 30.1.1-jre.\nUpdates `guava` from HEAD-jre-SNAPSHOT to 30.1.1-jre\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `guava-gwt` from HEAD-jre-SNAPSHOT to 30.1.1-jre\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava-gwt's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `guava-testlib` from HEAD-jre-SNAPSHOT to 30.1.1-jre\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava-testlib's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/guava/network/alerts).\n\n</details>", "NaN"], ["5461", "In...", null, "copybara-service[bot]", "04/02/21, 03:31:33 PM", "In...\n\nRELNOTES=n/a", "NaN"], ["5463", "Use `@ParametricNullness` in the mainline just as CL 365809233 did in the backport.", null, "copybara-service[bot]", "04/05/21, 08:33:19 PM", "Use `@ParametricNullness` in the mainline just as CL 365809233 did in the backport.\n\nRELNOTES=n/a", "NaN"], ["5465", "Added Ints, Longs.tryParse(CharSequence) overloading methods regarding #2549.", "Noam Greenshtain", "noamgrinch", "04/06/21, 05:58:42 PM", "The algorithms are basically the same as the tryParse(String) methods with very small changes.", "NaN"], ["5466", "Recognize `@ParametricNullness` in `NullPointerTester`.", null, "copybara-service[bot]", "04/05/21, 08:55:05 PM", "Recognize `@ParametricNullness` in `NullPointerTester`.\n\nIn short: Take a method parameter whose type is a type-variable usage `T`. `NullPointerTester` assumed that the method should throw an exception when passed `null` unless the parameter type is annotated `@Nullable T`. But for a type like `Predicate<T>`, we don't want a `Predicate<@Nullable String>` to throw an exception if passed `null`. The only case in which a class should _definitely_ throw for such a parameter is if it doesn't permit nullable type arguments at all (like `ImmutableList`). Yet, in our new world, we don't want to annotate the argument of `Predicate.apply` as `@Nullable`.\n\nThe annotation `@ParametricNullness` is our new way of distinguishing `Predicate` (where we'll use it) from `ImmutableList` (where we won't).\n\nEventually, we will remove the annotation, at which point we'll either update `NullPointerTester` to distinguish `Predicate` from `ImmutableList` based on their type parameters' bounds or else we'll disable `NullPointerTester` at least temporarily.\n\nRELNOTES=n/a", "NaN"], ["5467", "Internal change.", null, "copybara-service[bot]", "04/26/21, 05:23:21 PM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5468", "Recognize that `<T extends @Nullable Object>` implies nullability.", null, "copybara-service[bot]", "04/06/21, 06:50:46 PM", "Recognize that `<T extends @Nullable Object>` implies nullability.\n\nIf you have a method with a parameter of type `T`, we should not expect it to\nthrow an exception when called with null.\n\nRELNOTES=In NullPointerTester, a parameter of type `<T extends @Nullable Object>` is allowed to be null.", "NaN"], ["5469", "Bump actions/setup-java from v1 to v2", null, "dependabot[bot]", "04/06/21, 08:17:02 PM", "Bumps [actions/setup-java](https://github.com/actions/setup-java) from v1 to v2.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-java/commit/8764a52df183aa0ccea74521dfd9d506ffc7a19a\"><code>8764a52</code></a> Rename v2-preview to v2 in docs and tests (<a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/151\">#151</a>)</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/b53500dabc37db6cc1dcd35059bdcd85df25d140\"><code>b53500d</code></a> Merge &quot;v2-preview&quot; branch into &quot;main&quot; (<a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/150\">#150</a>)</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/ebb424f2cb8fcb418a7b62a00e052ee78fc9ed68\"><code>ebb424f</code></a> Beatify &quot;main&quot; warning about breaking changes (<a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/144\">#144</a>)</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/9c7940b9c600aa59f59155ebf16e815fb97bd6a4\"><code>9c7940b</code></a> Add breaking change warning to 'main' branch (<a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/138\">#138</a>)</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/fc62ccaa4ff0ce26bfc693d16da2da265b83dc3d\"><code>fc62cca</code></a> V2 setup-java ADR (<a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/97\">#97</a>)</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/e73e96a93bda891eeb423b3bb3cdaa494b5eae42\"><code>e73e96a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/131\">#131</a> from actions/v-malob/update-codeowners</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/ea31b1d738cf047c87bfa75751fdd0e635083e6c\"><code>ea31b1d</code></a> Update CODEOWNERS</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/ff0054dfbf8f244970a8f943f689536670d92603\"><code>ff0054d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/123\">#123</a> from dmitry-shibanov/fix-documentation-for-gpg-import...</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/81290cdb8c027e945e66c40b9efd912511c40859\"><code>81290cd</code></a> change imported to exported</li>\n<li><a href=\"https://github.com/actions/setup-java/commit/546dae7e879c55a8e4cc84039c0746b57b477100\"><code>546dae7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-java/issues/122\">#122</a> from dmitry-shibanov/update-docs-for-maven-and-gpg</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-java/compare/v1...8764a52df183aa0ccea74521dfd9d506ffc7a19a\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["5470", "Update CI to cancel previous runs and to use v2 of setup-java.", null, "copybara-service[bot]", "04/06/21, 08:16:26 PM", "Update CI to cancel previous runs and to use v2 of setup-java.\n\nRELNOTES=n/a", "NaN"], ["5472", "Internal change.", null, "copybara-service[bot]", "04/08/21, 10:48:52 AM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5473", "Annotate Predicate for nullness.", null, "copybara-service[bot]", "04/08/21, 10:57:18 AM", "Annotate Predicate for nullness.\n\nRELNOTES=n/a", "NaN"], ["5474", "Annotate Objects for nullness.", null, "copybara-service[bot]", "04/08/21, 07:35:45 PM", "Annotate Objects for nullness.\n\nObjects was in much the same shape as Optional.\n\nThe main interesting change is Objects.hashCode, which accepts a nullable array of nullable objects. As part of our effort to use declaration annotations where possible, its parameter changes from...\n\n```\n@Nullable Object @Nullable ... objects\n```\n\n...to...\n\n```\n@CheckForNull @Nullable Object... objects\n```\n\nRELNOTES=n/a", "NaN"], ["5475", "Annotate Optional for nullness.", null, "copybara-service[bot]", "04/08/21, 07:53:19 PM", "Annotate Optional for nullness.\n\nThe annotations were already correct, so the actual work here was to switch the mainline to declaration annotations to accommodate Kotlin.\n\nI also added `@ElementsAreNonnullByDefault`, which changes the return types from platform types to non-null types in Kotlin's eyes. But I suspect this has essentially no practical effects except removing `!` from any error messages that users see in the future.\n\nRELNOTES=n/a", "NaN"], ["5477", "Annotate some more fairly boring classes for nullness.", null, "copybara-service[bot]", "04/09/21, 12:49:26 AM", "Annotate some more fairly boring classes for nullness.\n\nThe changes are almost all just to replace `@Nullable`/`@NullableDecl` with `@CheckForNull`. The mildly interesting one again involves arrays, this time in lenientFormat.\n\nRELNOTES=n/a", "NaN"], ["5478", "Annotate various boring classes for nullness.", null, "copybara-service[bot]", "04/09/21, 12:53:00 AM", "Annotate various boring classes for nullness.\n\nAside from class-level annotations, the only nullness annotation in these classes is on the return type of a non-user-visible computeNext method in Splitter.\n\nRELNOTES=n/a", "NaN"], ["5479", "Add a suppression where we are missing a nullness annotation, and add some explicit null checks for cases in which our nullness checker can't prove that the value is non-null.", null, "copybara-service[bot]", "04/09/21, 02:49:10 PM", "Add a suppression where we are missing a nullness annotation, and add some explicit null checks for cases in which our nullness checker can't prove that the value is non-null.\n\nRELNOTES=n/a", "NaN"], ["5480", "Annotate Equivalence for nullness.", null, "copybara-service[bot]", "04/09/21, 06:54:05 PM", "Annotate Equivalence for nullness.\n\nRELNOTES=n/a", "NaN"], ["5481", "Generalize the signature for Equivalance.onResultOf.", null, "copybara-service[bot]", "04/09/21, 07:58:23 PM", "Generalize the signature for Equivalance.onResultOf.\n\nTraditionally, we don't add wildcards unless they make new calls possible. This wildcard, by contrast, only lets users select a slightly different return type from the method.\n\n...except now that we're more focused on supporting nullness analyses. For users of nullness analyses, this signature change opens up the possibility of passing a `Function<@Nullable Foo, ...>`.\n\nRELNOTES=n/a", "NaN"], ["5483", "deprecate `ImmutableList.asList()`", null, "copybara-service[bot]", "04/09/21, 10:22:55 PM", "deprecate `ImmutableList.asList()`\n\nRELNOTES=n/a", "NaN"], ["5484", "Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0", null, "dependabot[bot]", "04/12/21, 10:13:00 PM", "Bumps [styfle/cancel-workflow-action](https://github.com/styfle/cancel-workflow-action) from 0.8.0 to 0.9.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/styfle/cancel-workflow-action/releases\">styfle/cancel-workflow-action's releases</a>.</em></p>\n<blockquote>\n<h2>0.9.0</h2>\n<h3>Minor Changes</h3>\n<ul>\n<li>Add <code>all_but_latest</code> flag - cancel all workflows but the latest: <a href=\"https://github-redirect.dependabot.com/styfle/cancel-workflow-action/issues/35\">#35</a></li>\n<li>Cleanup <code>all_but_latest</code>: <a href=\"https://github-redirect.dependabot.com/styfle/cancel-workflow-action/issues/67\">#67</a></li>\n</ul>\n<h3>Credits</h3>\n<p>Huge thanks to <a href=\"https://github.com/thomwiggers\"><code>@\u200bthomwiggers</code></a> for helping!</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/styfle/cancel-workflow-action/commit/89f242ee29e10c53a841bfe71cc0ce7b2f065abc\"><code>89f242e</code></a> 0.9.0</li>\n<li><a href=\"https://github.com/styfle/cancel-workflow-action/commit/1f01010c62353732693b6d4b9317a5e1964efb5c\"><code>1f01010</code></a> Cleanup all_but_latest (<a href=\"https://github-redirect.dependabot.com/styfle/cancel-workflow-action/issues/67\">#67</a>)</li>\n<li><a href=\"https://github.com/styfle/cancel-workflow-action/commit/1adde81177c51394e6482cd911704cf9ba77faad\"><code>1adde81</code></a> Optionally cancel all workflows but the latest (<a href=\"https://github-redirect.dependabot.com/styfle/cancel-workflow-action/issues/35\">#35</a>)</li>\n<li>See full diff in <a href=\"https://github.com/styfle/cancel-workflow-action/compare/0.8.0...89f242ee29e10c53a841bfe71cc0ce7b2f065abc\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["5485", "Use Truth in some `ServiceManagerTest` tests.", null, "copybara-service[bot]", "04/12/21, 05:08:28 PM", "Use Truth in some `ServiceManagerTest` tests.\n\nRELNOTES=n/a", "NaN"], ["5486", "Annotate Converter for nullness.", null, "copybara-service[bot]", "04/12/21, 08:58:45 PM", "Annotate Converter for nullness.\n\nRELNOTES=n/a", "NaN"], ["5487", "Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0", null, "copybara-service[bot]", "04/12/21, 10:13:00 PM", "Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0\n\nBumps [styfle/cancel-workflow-action](https://github.com/styfle/cancel-workflow-action) from 0.8.0 to 0.9.0.\n- [Release notes](https://github.com/styfle/cancel-workflow-action/releases)\n- [Commits](https://github.com/styfle/cancel-workflow-action/compare/0.8.0...89f242ee29e10c53a841bfe71cc0ce7b2f065abc)\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nFixes #5484\n\nRELNOTES=n/a", "NaN"], ["5488", "Bump actions/cache from v2.1.4 to v2.1.5", null, "dependabot[bot]", "04/15/21, 10:04:05 PM", "Bumps [actions/cache](https://github.com/actions/cache) from v2.1.4 to v2.1.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.5</h2>\n<ul>\n<li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/527\">actions/cache#527</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/1a9e2138d905efd099035b49d8b7a3888c653ca8\"><code>1a9e213</code></a> Update cache module to v1.0.7 (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/562\">#562</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/981fa981ed950efef5277587ee4ba0eead30cadf\"><code>981fa98</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/469\">#469</a> from ericmj/patch-1</li>\n<li><a href=\"https://github.com/actions/cache/commit/4498c5b4d8b0673dbc7d9731bc11d9cc5a2c6087\"><code>4498c5b</code></a> Drop the example based on using pip's internals (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/519\">#519</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/4134e6de47156381d31ff74f8aabf86718858f70\"><code>4134e6d</code></a> It is not recommended to cache node_modules (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/537\">#537</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/62a4d754427893bc6d043c6d4f5486490cab29b6\"><code>62a4d75</code></a> Also cache _build for Elixir</li>\n<li>See full diff in <a href=\"https://github.com/actions/cache/compare/v2.1.4...1a9e2138d905efd099035b49d8b7a3888c653ca8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["5489", "Fix comment in Converter.", null, "copybara-service[bot]", "04/13/21, 03:34:07 PM", "Fix comment in Converter.\n\nConverter.apply is annotated as returning null, so it's sound. The LegacyConverter problem arises only if users view the converter as a Function<A, B>, since Function<A, B>.apply is *not* annotated as returning null (and yet a LegacyConverter may do so, even given a non-null input).\n\nRELNOTES=n/a", "NaN"], ["5490", "Fix a rounding bug in `UnsignedLong.doubleValue()` and `.floatValue()`.", null, "copybara-service[bot]", "04/14/21, 12:53:04 AM", "Fix a rounding bug in `UnsignedLong.doubleValue()` and `.floatValue()`.\n\nSee the bug report for a detailed analysis.\n\nFixes https://github.com/google/guava/issues/5375. Thanks to @harpocrates (Alex Theriault) for the bug report and suggested fix.\n\nRELNOTES=Fixed a rounding bug in `UnsignedLong.doubleValue()`.", "NaN"], ["5491", "Add `ServiceManager.startupDurations()`.", null, "copybara-service[bot]", "04/14/21, 01:58:46 PM", "Add `ServiceManager.startupDurations()`.\n\nRELNOTES=Add `ServiceManager.startupDurations()`.", "NaN"], ["5492", "Mark `ServiceManager.startupDurations()` as `@J2ObjCIncompatible`.", null, "copybara-service[bot]", "04/14/21, 04:30:38 PM", "Mark `ServiceManager.startupDurations()` as `@J2ObjCIncompatible`.\n\nRELNOTES=n/a", "NaN"], ["5493", "Annotate `escape` for nullness.", null, "copybara-service[bot]", "04/14/21, 06:45:22 PM", "Annotate `escape` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5494", "Sort and uniquify .gwt.xml <inherits> lines.", null, "copybara-service[bot]", "04/14/21, 09:10:05 PM", "Sort and uniquify .gwt.xml <inherits> lines.\n\nRELNOTES=n/a", "NaN"], ["5495", "Annotate XmlEscapers for nullness.", null, "copybara-service[bot]", "04/14/21, 10:01:57 PM", "Annotate XmlEscapers for nullness.\n\nRELNOTES=n/a", "NaN"], ["5496", "Annotate HTML escapers for nullness.", null, "copybara-service[bot]", "04/14/21, 10:09:01 PM", "Annotate HTML escapers for nullness.\n\nRELNOTES=n/a", "NaN"], ["5497", "Bump actions/cache from v2.1.4 to v2.1.5", null, "copybara-service[bot]", "04/15/21, 10:04:06 PM", "Bump actions/cache from v2.1.4 to v2.1.5\n\nBumps [actions/cache](https://github.com/actions/cache) from v2.1.4 to v2.1.5.\n- [Release notes](https://github.com/actions/cache/releases)\n- [Commits](https://github.com/actions/cache/compare/v2.1.4...1a9e2138d905efd099035b49d8b7a3888c653ca8)\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nFixes #5488\n\nRELNOTES=n/a", "NaN"], ["5498", "Use AbstractOwnableSynchronizer as a blocker when parking until interrupt is delivered.", null, "copybara-service[bot]", "04/16/21, 04:39:43 PM", "Use AbstractOwnableSynchronizer as a blocker when parking until interrupt is delivered.\n\nRELNOTES=n/a", "NaN"], ["5499", "Presize list builder for inCompletionOrder", null, "copybara-service[bot]", "04/19/21, 03:39:15 PM", "Presize list builder for inCompletionOrder\n\nRELNOTES=n/a", "NaN"], ["5500", "Suppress or fix all compiler warnings in util/concurrent", null, "copybara-service[bot]", "04/16/21, 07:23:00 PM", "Suppress or fix all compiler warnings in util/concurrent\n\nRELNOTES=n/a", "NaN"], ["5501", "Annotate most of `reflect` for nullness.", null, "copybara-service[bot]", "04/16/21, 09:10:16 PM", "Annotate most of `reflect` for nullness.\n\nAnd add some documentation relevant to https://github.com/google/guava/issues/3349\n\nRELNOTES=n/a", "NaN"], ["5502", "Recommend Caffeine over common.cache.", null, "copybara-service[bot]", "04/19/21, 04:18:12 PM", "Recommend Caffeine over common.cache.\n\nRELNOTES=n/a", "NaN"], ["5503", "Link to the immutable collectors from the utility classes.", null, "copybara-service[bot]", "04/19/21, 04:22:31 PM", "Link to the immutable collectors from the utility classes.\n\nRELNOTES=n/a", "NaN"], ["5504", "Document issues with `ClassPath`, and recommend ClassGraph.", null, "copybara-service[bot]", "04/19/21, 04:51:54 PM", "Document issues with `ClassPath`, and recommend ClassGraph.\n\nRelevant to https://github.com/google/guava/issues/2130 and https://github.com/google/guava/issues/3349.\n\nRELNOTES=n/a", "NaN"], ["5505", "clarify `AtomicDoubleArray.set()` javadocs.", null, "copybara-service[bot]", "04/19/21, 05:21:42 PM", "clarify `AtomicDoubleArray.set()` javadocs.\n\nRELNOTES=n/a", "NaN"], ["5506", "Add some documentation to `ByteSource` and `CharSource` about the general expectations for source behavior and what the behavior might be if those expectations aren't met.", null, "copybara-service[bot]", "04/19/21, 05:28:16 PM", "Add some documentation to `ByteSource` and `CharSource` about the general expectations for source behavior and what the behavior might be if those expectations aren't met.\n\nRELNOTES=n/a", "NaN"], ["5507", "fix `CacheBuilder` javadoc error.", null, "copybara-service[bot]", "04/19/21, 05:58:46 PM", "fix `CacheBuilder` javadoc error.\n\nRELNOTES=n/a", "NaN"], ["5508", "Document that `ImmutableType.of()` returns a singleton instance.", null, "copybara-service[bot]", "04/19/21, 06:06:10 PM", "Document that `ImmutableType.of()` returns a singleton instance.\n\nRELNOTES=n/a", "NaN"], ["5509", "Discourage usage of EventBus.", null, "copybara-service[bot]", "04/19/21, 07:44:42 PM", "Discourage usage of EventBus.\n\nRELNOTES=n/a", "NaN"], ["5510", "Bump deps.", null, "copybara-service[bot]", "04/19/21, 07:17:58 PM", "Bump deps.\n\nRELNOTES=n/a", "NaN"], ["5511", "fix javadoc typos", null, "copybara-service[bot]", "04/19/21, 08:08:28 PM", "fix javadoc typos\n\nRELNOTES=n/a", "NaN"], ["5512", "Clarify LRU behavior of `CacheBuilder`.", null, "copybara-service[bot]", "04/19/21, 08:23:12 PM", "Clarify LRU behavior of `CacheBuilder`.\n\nRELNOTES=n/a", "NaN"], ["5513", "Fix exception message in `CacheBuilderSpec`.", null, "copybara-service[bot]", "04/19/21, 08:28:05 PM", "Fix exception message in `CacheBuilderSpec`.\n\nRELNOTES=n/a", "NaN"], ["5514", "Fix typo.", null, "copybara-service[bot]", "04/19/21, 09:26:55 PM", "Fix typo.\n\nhttps://github.com/google/guava/pull/5502#discussion_r616031995\n\nRELNOTES=n/a", "NaN"], ["5515", "Remove `@Beta` from `EventBus` and related classes.", null, "copybara-service[bot]", "04/19/21, 08:44:47 PM", "Remove `@Beta` from `EventBus` and related classes.\n\nNote that we're primarily removing this because we do not intend to make further changes to the package, and we're discouraging its use. (See https://github.com/google/guava/commit/82a3ecf42cf63f2ea4db5c605d80c4478d8877ae.) We're not going to actually `@Deprecate` it, though, because that would be unnecessarily disruptive especially given that migrating to another solution is not necessarily straightforward.\n\nFixes https://github.com/google/guava/issues/3360.\n\nRELNOTES=n/a", "NaN"], ["5516", "Replace old-style loops with enhanced for loops", null, "copybara-service[bot]", "04/19/21, 08:50:39 PM", "Replace old-style loops with enhanced for loops\n\nFixes #3622\n\nRELNOTES=n/a", "NaN"], ["5517", "Clarify what \"different equivalence relations\" means.", null, "copybara-service[bot]", "04/19/21, 09:33:28 PM", "Clarify what \"different equivalence relations\" means.\n\nFixes https://github.com/google/guava/issues/3808.\n\nRELNOTES=n/a", "NaN"], ["5518", "Discourage use of `ArrayTable`.", null, "copybara-service[bot]", "04/19/21, 09:40:57 PM", "Discourage use of `ArrayTable`.\n\nRELNOTES=n/a", "NaN"], ["5519", "Delete the `FileBackedOutputStream` temp file if writing to it fails.", null, "copybara-service[bot]", "04/20/21, 02:16:20 PM", "Delete the `FileBackedOutputStream` temp file if writing to it fails.\n\nWe don't delete the temp file when the stream is closed, because that would be a change in observable behaviour.\n\nFixes https://github.com/google/guava/issues/1664.\n\nRELNOTES=If writing to the temp file in `FileBackedOutputStream` fails, we now delete it before propagating the exception.", "NaN"], ["5520", "Annotate `hash` for nullness.", null, "copybara-service[bot]", "04/20/21, 06:44:07 PM", "Annotate `hash` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5521", "Make `MoreFiles.deleteRecursively()` throw `NoSuchFileException` when the `path` argument itself doesn't exist.", null, "copybara-service[bot]", "04/20/21, 08:22:26 PM", "Make `MoreFiles.deleteRecursively()` throw `NoSuchFileException` when the `path` argument itself doesn't exist.\n\nFixes #3203.\n\nRELNOTES=n/a", "NaN"], ["5523", "Annotate `eventbus` for nullness.", null, "copybara-service[bot]", "04/22/21, 01:05:56 PM", "Annotate `eventbus` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5524", "Annotate `primitives` for nullness.", null, "copybara-service[bot]", "04/22/21, 01:09:32 PM", "Annotate `primitives` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5525", "Use ConcurrentHashMap.newKeySet() in Sets.newConcurrentHashSet()", null, "copybara-service[bot]", "04/22/21, 06:13:19 PM", "Use ConcurrentHashMap.newKeySet() in Sets.newConcurrentHashSet()\n\nCollections.newSetFromMap implements 'add' using an unconditional 'put'\non the underlying map, which for ConcurrentHashMap results in acquiring\na lock. ConcurrentHashMap.newKeySet() implements 'add' using\nputIfAbsent, which as of https://bugs.openjdk.java.net/browse/JDK-8161372\navoids acquiring a lock if the key is already present.\n\nRELNOTES=N/A", "NaN"], ["5526", "checkNotNull's argument should not be marked as NonNull", "Tomasz Gaw\u0119da", "TomaszGaweda", "05/17/21, 02:07:54 PM", "checkNotNull ensures that output it's not null, it's this method responsibility to check non-nullability. NotNull on input parameter should be used if method assumes input is not null/requires it.\r\n\r\nAdding NotNull broke IntelliJ's code analysis. IntelliJ assumed that NonNull argument must be null on method input, however in fact method's contract is to ensure that on output the value is not null.", "NaN"], ["5530", "Add warnings to documentation of some multimaps and `Multiset` that modifying a value with respect to `equals()` is dangerous.", null, "copybara-service[bot]", "04/26/21, 05:32:52 PM", "Add warnings to documentation of some multimaps and `Multiset` that modifying a value with respect to `equals()` is dangerous.\n\nSee #357.\n\nRELNOTES=n/a", "NaN"], ["5531", "Annotate `graph` for nullness.", null, "copybara-service[bot]", "04/26/21, 05:43:47 PM", "Annotate `graph` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5532", "Make `MapIteratorCache` and `MapRetrievalCache` mostly hostile to nulls.", null, "copybara-service[bot]", "04/26/21, 04:23:40 PM", "Make `MapIteratorCache` and `MapRetrievalCache` mostly hostile to nulls.\n\nNone of our graph classes hold nulls, so there is no need to be able to do so here: We only ever instantiate these classes with non-null types, and we nearly always pass arguments that are known to be non-null.\n\nTo be fair, the downsides to holding nulls here would be relatively minor:\n\n- We'd need to declare type parameters like `K extends @Nullable Object` instead of just `K` (and parameters like `@CheckForNull Object key` instead of `Object key`). (Granted, in order to implement null hostility, we end up adding boilerplate of another kind in the form of `checkNotNull` calls to make `NullPointerTester` happy.)\n\n- We'd need to catch from `@Nullable K` to `K` in `MapRetrievalCache.get`. This is doable, but it's ugly (see `c.g.c.base.NullnessCasts`), and of course it's not checked at runtime.\n\nOn net, it feels simplest to be consistent with the rest of the package.\n\nWhile I'm here, I also demoted some `public` methods to package-private. They're defined in package-private types that never escape the package, so this is academic, but it's nice to know that immediately when looking at the source. This is spirtually similar to https://github.com/google/guava/issues/5451.\n\nRELNOTES=n/a", "NaN"], ["5533", "Reject `null` in `CharStreams.asWriter(appendable).write(string[, ...])`.", null, "copybara-service[bot]", "04/26/21, 07:35:12 PM", "Reject `null` in `CharStreams.asWriter(appendable).write(string[, ...])`.\n\nThis brings its behavior in line with other `Writer` implementations. Unfortunately, the docs don't describe this behavior:\n\nhttps://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Writer.html#write(java.lang.String)\n\nNote also that this behavior differs from the behavior of `Writer.append(null)`, which is to write the four characters \"null.\" That behavior is itself poorly documented, since the docs for `append(CharSequence)` claim that it is equivalent to `out.write(csq.toString())`, which would throw NPE... though at least *that* is contradicted in the `@param` tag. (The difference between `write` and `append` presumably arises from inheriting `append` from the newer `Appendable` API.)\n\nRELNOTES=`io`: Changed `CharStreams.asWriter(appendable).write(string[, ...])` to reject a null `string`.", "NaN"], ["5534", "Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively.", null, "copybara-service[bot]", "04/26/21, 08:05:13 PM", "Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively.\n\nRELNOTES=n/a", "NaN"], ["5535", "Deflake `HashingTest`.", null, "copybara-service[bot]", "04/27/21, 03:26:23 PM", "Deflake `HashingTest`.\n\nWe have one bucket per bit in `checkAvalanche`. When the hash function produces a lot of bits, that means that the trials are spread over more of them, and the number of results per bucket is lower. That increases the chance of seeing a biased result through bad luck. So we need more trials when there are more bits.\n\nRELNOTES=n/a", "NaN"], ["5536", "Annotate `io` for nullness.", null, "copybara-service[bot]", "04/27/21, 04:39:53 PM", "Annotate `io` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5537", "Annotate `net` for nullness.", null, "copybara-service[bot]", "04/28/21, 03:04:42 PM", "Annotate `net` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5538", "Annotate `math` for nullness.", null, "copybara-service[bot]", "04/28/21, 03:38:49 PM", "Annotate `math` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5539", "Comment out @ElementTypesAreNonnullByDefault in classes that are missing `@CheckReturnValue` for at least one location.", null, "copybara-service[bot]", "04/28/21, 06:00:54 PM", "Comment out @ElementTypesAreNonnullByDefault in classes that are missing `@CheckReturnValue` for at least one location.\n\nAlso, standardize TODOs.\n\nRELNOTES=n/a", "NaN"], ["5541", "EndpointPair.java: s/adjacentNode(Object Node)/adjacentNode(N node)/", null, "copybara-service[bot]", "04/30/21, 07:21:56 PM", "EndpointPair.java: s/adjacentNode(Object Node)/adjacentNode(N node)/\n\nRELNOTES=`graph`: Make `EndpointPair.adjacentNode` require an `N` instead of accept any `Object`.", "NaN"], ["5542", "Split afterRanInterruptibly into afterRanInterruptiblySuccess and afterRanInterruptiblyFailure.", null, "copybara-service[bot]", "04/30/21, 07:31:05 PM", "Split afterRanInterruptibly into afterRanInterruptiblySuccess and afterRanInterruptiblyFailure.\n\nThis makes the code easier to understand for nullness checkers -- and probably easier to understand, full stop.\n\n(Also, rename the GWT emulation's InterruptibleTask's type parameter from V to T. This makes it match the normal version. And that in turn matches other classes like AbstractTransformFuture, which differentiates between V (the value type of the Future) and T (the type returned by the task, which may be either a V or a ListenableFuture<V>). While InterruptibleTask itself is not a Future, its subclasses are nested inside Future subclasses, so V may still be confusing. Plus, \"T\" is pretty much the \"default\" name for type parameters :))\n\nRELNOTES=n/a", "NaN"], ["5543", "Minor tweaks to CacheBuilder docs.", null, "copybara-service[bot]", "05/03/21, 05:18:26 PM", "Minor tweaks to CacheBuilder docs.\n\nRELNOTES=n/a", "NaN"], ["5544", "Instead of partially implementing `Future`, fully implement a custom `Cancellable` interface, and ensure that `cancel` and `isCancelled` always work.", null, "copybara-service[bot]", "05/05/21, 01:01:27 AM", "Instead of partially implementing `Future`, fully implement a custom `Cancellable` interface, and ensure that `cancel` and `isCancelled` always work.\n\nThis does require some extra allocations -- and some gymnastics to avoid circular references (which might have already existed but gone undetected until now??) -- but it seems much more honest, even if the bug we're guarding against was unlikely in practice.\n\nRELNOTES=n/a", "NaN"], ["5545", "Add explicit null checks.", null, "copybara-service[bot]", "05/05/21, 05:03:17 PM", "Add explicit null checks.\n\nThese will be required as soon as our checker understands that `Path.getFileName()` sometimes returns `null`.\n\nRELNOTES=n/a", "NaN"], ["5546", "Document when `EndpointPair.adjacentNode` changed signature.", null, "copybara-service[bot]", "05/05/21, 07:55:39 PM", "Document when `EndpointPair.adjacentNode` changed signature.\n\n(Followup to CL 371380054.)\n\nAs usual, the scheme is:\n\n```\n@since version-binary-compatible-since (other-clarifications)\n```\n\nAnd in fact this change is binary-compatible, since the erasure of `N` is `Object`, the old parameter type. And while this change was potentially source-incompatible, we knew that and tested for problems internally, and we saw no breakages.\n\nCompare to [the `@since` tag for `Queues.newPriorityBlockingQueue`](https://github.com/google/guava/blob/1799bc3e48db5ea61ba66191096727d17d1e811c/guava/src/com/google/common/collect/Queues.java#L191).\n\nRELNOTES=n/a", "NaN"], ["5547", "Annotate much of `util.concurrent` for nullness.", null, "copybara-service[bot]", "05/05/21, 10:27:42 PM", "Annotate much of `util.concurrent` for nullness.\n\nRELNOTES=n/a", "NaN"], ["5548", "Update Public Suffix data.", null, "copybara-service[bot]", "05/06/21, 08:29:12 PM", "Update Public Suffix data.\n\nRELNOTES=n/a", "NaN"], ["5549", "feature: add Optional ifPresent.", "Li Yanxu", "WallanceLee", "05/10/21, 02:19:38 PM", "Hello. When I use Optional, I find that it needs to check isPresent before consuming value wrapped in Optional objects.\r\nSo I create a new method ifPresent with a parameter Consumer to wrap isPresent and do something.\r\nThis is my first commit in guava project and I have signed CLA. \r\nThanks for your review for my PR.", "NaN"], ["5550", "Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Collection`, `Iterable`, and `Iterator` APIs _must_ be either used or assigned to a variable.", null, "copybara-service[bot]", "05/11/21, 02:56:20 PM", "Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Collection`, `Iterable`, and `Iterator` APIs _must_ be either used or assigned to a variable.\n\nRELNOTES=n/a", "NaN"], ["5551", "Bump actions/checkout from 2 to 2.3.4", null, "dependabot[bot]", "05/12/21, 04:24:52 PM", "Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 2.3.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v2.3.4</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/379\">Add missing <code>await</code>s</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/360\">Swap to Environment Files</a></li>\n</ul>\n<h2>v2.3.3</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/345\">Remove Unneeded commit information from build logs</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/326\">Add Licensed to verify third party dependencies</a></li>\n</ul>\n<h2>v2.3.2</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/320\">Add Third Party License Information to Dist Files</a></p>\n<h2>v2.3.1</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></p>\n<h2>v2.3.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></p>\n<h2>v2.2.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></p>\n<h2>v2.1.1</h2>\n<p>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</p>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2...v2.3.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=2.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["5552", "Bump actions/checkout from 2 to 2.3.4.", null, "copybara-service[bot]", "05/12/21, 04:24:52 PM", "Bump actions/checkout from 2 to 2.3.4.\n\nFixes #5551\n\nRELNOTES=n/a", "NaN"], ["5553", "Internal change.", null, "copybara-service[bot]", "05/14/21, 10:05:18 PM", "Internal change.\n\nRELNOTES=n/a", "NaN"], ["5554", "Make generator methods visible within the package.", null, "copybara-service[bot]", "05/13/21, 09:14:25 PM", "Make generator methods visible within the package.\n\nThis prevents an issue under Desugar and Java 11: The two combine to synthesize a `-$$Nest$m` wrapper method around `generateInt`: Java 11 makes `generateInt` \"truly `private`\" (using \"nestmates\"), so Desugar needs to synthesize a package-visible wrapper so that `FreshInvocationHandler` can still call the method. The result is 2 generator methods for the type `int`, which `FreshValueGenerator` doesn't like. (\"Which one should it use?\")\n\nI probably didn't need to make *all* methods visible within the package, just `generateInt` and any others that might happen to be called outside `FreshValueGenerator.class` (possibly none, currently). But I figured I might as well future-proof everything.\n\nNote that making the methods package-visible then required me to add nullness annotations to satisfy `NullPointerTester`.\n\n...and now that I'm writing this, it occurs to me that the better solution might have been to have `FreshValueGenerator` skip synthetic methods. Oh, well. This works. And it has the bonus of decreasing the chances that IDEs or other tools will report these methods as unused.\n\nRELNOTES=n/a", "NaN"], ["5556", "Generalize `Function` and `Predicate` factories to let callers specify the desired input type.", null, "copybara-service[bot]", "05/14/21, 10:50:57 AM", "Generalize `Function` and `Predicate` factories to let callers specify the desired input type.\n\nRELNOTES=`base`: Changed `Functions.forSupplier` and `Predicates.instanceOf` to accept an additional type argument to specify the input type for the returned `Function`/`Predicate`. The flexibility we're adding should typically not be necessary if users follow the [PECS](https://stackoverflow.com/a/2723538/28465) principle, but it can be useful in some cases, particularly around nullness analysis. Note that this change may require updates to callers' source code (to specify an additional type argument). Still, it maintains _binary_ compatibility.", "NaN"], ["5559", "Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Map` APIs _must_ be either used or assigned to a variable.", null, "copybara-service[bot]", "05/17/21, 02:00:12 PM", "Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Map` APIs _must_ be either used or assigned to a variable.", "NaN"], ["5560", "Nearly finish annotating `base` for nullness.", null, "copybara-service[bot]", "05/17/21, 02:07:55 PM", "Nearly finish annotating `base` for nullness.\n\nI have given up hope on `Preconditions.checkNotNull` \"correctly.\" For details, see the comment in the source code.\n\nFixes https://github.com/google/guava/pull/5526\n\nRELNOTES=n/a", "NaN"], ["5561", "add `@InlineMe` to deprecated, inlineable APIs in Guava.", null, "copybara-service[bot]", "05/17/21, 03:07:22 PM", "add `@InlineMe` to deprecated, inlineable APIs in Guava.\n\nRELNOTES=n/a", "NaN"], ["5562", "Document the safe cycle in AbstractScheduledService.", null, "copybara-service[bot]", "05/17/21, 05:03:07 PM", "Document the safe cycle in AbstractScheduledService.\n\nRELNOTES=n/a", "NaN"], ["5563", "FEATURE: Add BloomFilter support for conversion between BloomFilter.bits and Redis bitmap", "Yanam", "Yanam", "05/21/21, 07:25:13 AM", "This PR adds the method to convert guava bitmap and redis bitmap to each other.\r\n\r\n```java\r\nBloomFilter<Person> bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charset.forName(\"utf-8\")), 1000000, 0.01);\r\n\r\nbloomFilter.put(\"foo\");\r\nbloomFilter.put(\"bar\");\r\n\r\n//Convert to  a byte array in Redis bitmap format\r\nbyte[] data = bf.serialToRedisBitmapBytes();\r\n\r\n//Store in redis\r\nredis.set(key.getBytes(), data)\r\n```\r\n\r\nReal life use-case:\r\nIn my project, I need to provide BloomFilter filtering service based on the distributed cache such as Redis. My implementation method is to base the basic logic on the existing code of BloomFilter of Guava, such as the hash method, but the bitmap is based on the bitmap of Redis. This works well so far, but there are situations where when building BloomFilter with a lot of data, such as building BloomFilter with a million data, the number of Redis operations becomes a performance bottleneck. My approach is to build BloomFilter in the local cache. Then convert Guava's bitmap to Redis's bitmap format and write it to Redis once.", "NaN"], ["5564", "Update pom.xml CI info.", null, "copybara-service[bot]", "05/18/21, 05:26:27 PM", "Update pom.xml CI info.\n\nFixes https://github.com/google/guava/issues/5558\n\nRELNOTES=n/a", "NaN"], ["5565", "See what happens if I use \u03c0 as a variable name.", null, "copybara-service[bot]", "05/20/21, 11:47:49 PM", "See what happens if I use \u03c0 as a variable name.\n\nRELNOTES=n/a", "NaN"], ["5566", "Test PR for new GitHub authentication token.", "Chris Povirk", "cpovirk", "05/21/21, 01:33:57 PM", "NaN", "NaN"], ["5567", "Use `Class.isPrimitive()` to avoid doing any work in `Defaults` for reference types.", null, "copybara-service[bot]", "05/21/21, 03:48:57 PM", "Use `Class.isPrimitive()` to avoid doing any work in `Defaults` for reference types.\n\nRELNOTES=n/a", "NaN"], ["5569", "`Invokable` no longer inherits from `java.lang.reflect.AccessibleObject`.", null, "copybara-service[bot]", "05/24/21, 10:08:32 PM", "`Invokable` no longer inherits from `java.lang.reflect.AccessibleObject`.\n\nThere was no strong reason for this inheritance. Additionally, it is an accident that `AccessibleObject` is subclassable at all outside its class; its constructor is `protected` but should really have been package-private. That's an API mistake that was made in Java 1.2 and is hard to correct now, but the protected constructor is [being deprecated](https://github.com/openjdk/jdk/pull/4133). (My related rant from 15 years ago is [here](https://www.artima.com/weblogs/viewpost.jsp?thread=164042).)\n\n`Invokable` also no longer implements `GenericDeclaration`.\n\n`Invokable` does continue to provide instance methods with the same signatures as the ones inherited from `AccessibleObject` and `GenericDeclaration`, as they stood in Java 8.\n\nThis change is technically a breaking API change. In principle users could have assigned an instance of `Invokable` to a variable of type `AccessibleObject`. No code does that in Google's giant code base so it seems unlikely in practice. (In fact we only have a couple of dozen uses of `Invokable` overall.) Also, this API is `@Beta` so a hypothetical-but-very-unlikely breakage is acceptable.\n\nRELNOTES=`Invokable` no longer inherits from `AccessibleObject` or `GenericDeclaration`, though it continues to define instance methods with the same signatures as the formerly-inherited ones. This is technically a breaking API change to this `@Beta` API. We think it very unlikely that anyone is affected in practice.", "NaN"], ["5571", "Expand docs about Caffeine.", null, "copybara-service[bot]", "05/25/21, 02:47:11 PM", "Expand docs about Caffeine.\n\nRELNOTES=n/a", "NaN"], ["5572", "Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.", null, "copybara-service[bot]", "05/25/21, 04:09:55 PM", "Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.\n\nRELNOTES=n/a", "NaN"], ["5573", "Remove @Beta from HashFunction.", null, "copybara-service[bot]", "05/25/21, 06:23:07 PM", "Remove @Beta from HashFunction.\nhttps://github.com/google/guava/issues/3284 \n\nRELNOTES=Remove @Beta from HashFunction.", "NaN"], ["5574", "Remove suppressions for `ShouldNotSubclass`.", null, "copybara-service[bot]", "05/26/21, 06:10:10 PM", "Remove suppressions for `ShouldNotSubclass`.\n\nWe have disabled the check for our packages internally:\n\n- Often it fires because we're implementing `Future`. It's very true that \"normal\" code shouldn't implement `Future`, but _someone_ needs to, and that someone is us.\n- Sometimes it fires because we're extending a type like `AtomicReference` to shave off an object and some indirection. I won't claim to have data that shows that this is actually justified, but for better or for worse, it's a conscious decision that we're making.\n- I also see at least two suppressions for extending `Throwable`. There's probably no compelling reason for this, but we don't actually throw them, and changing them now would carry at least some risk.\n\nOf course, it's possible that `ShouldNotSubclass` would eventually have caught new occurrences that we _would_ have cared about. But historically that doesn't seem to have been the case.\n\nRELNOTES=n/a", "NaN"], ["5576", "Add Sec-CH-UA-Bitness to `HttpHeaders`.", null, "copybara-service[bot]", "05/26/21, 09:04:35 PM", "Add Sec-CH-UA-Bitness to `HttpHeaders`.\n\nThe header is added in wicg.github.io/ua-client-hints/#sec-ch-ua-bitness\n\nRELNOTES=`net`: Added `HttpHeaders` constant for Sec-CH-UA-Bitness.", "NaN"], ["5578", "Annotate `ImmutableCollection`, `ImmutableList`, `ImmutableSet`, and supporting classes for nullness.", null, "copybara-service[bot]", "05/27/21, 11:06:33 AM", "Annotate `ImmutableCollection`, `ImmutableList`, `ImmutableSet`, and supporting classes for nullness.\n\nRELNOTES=n/a", "NaN"], ["5579", "Bump actions/cache from 2.1.5 to 2.1.6", null, "dependabot[bot]", "06/01/21, 03:58:00 PM", "Bumps [actions/cache](https://github.com/actions/cache) from 2.1.5 to 2.1.6.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.6</h2>\n<ul>\n<li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href=\"https://github-redirect.dependabot.com/actions/cache/pull/596\">actions/cache#596</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/c64c572235d810460d0d6876e9c705ad5002b353\"><code>c64c572</code></a> Catch and log unhandled exceptions stemming from closed file descriptor (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/596\">#596</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/cc2d767a726ddd654506e76169ec14b20dc75915\"><code>cc2d767</code></a> Update Rust directories recommended for caching (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/433\">#433</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/2fa955d825a29821e73ec064792122ea9f70e573\"><code>2fa955d</code></a> Update examples.md (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/588\">#588</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/3a696372f2ec10535e4c026a4fdae5fcca629e4a\"><code>3a69637</code></a> elixir typo - stray parenthesis (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/569\">#569</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/366e5ba0224e0ebd6fba2a453d108cb20e734946\"><code>366e5ba</code></a> Update cache key for Elixir (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/568\">#568</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/8d3f2fc3ce25d6c95a1297ce8d93f9c3c3ac8f00\"><code>8d3f2fc</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/565\">#565</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/cache/compare/v2.1.5...v2.1.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2.1.5&new-version=2.1.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["5581", "Bump actions/cache from 2.1.5 to 2.1.6. Closes #5579.", null, "copybara-service[bot]", "06/01/21, 03:58:01 PM", "Bump actions/cache from 2.1.5 to 2.1.6. Closes #5579.\n\nRELNOTES=n/a", "NaN"], ["5582", "Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.", null, "copybara-service[bot]", "06/02/21, 08:57:00 PM", "Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.\n\nRELNOTES=n/a", "NaN"], ["5583", "Split `java.time` tests out of `StopwatchTest`.", null, "copybara-service[bot]", "06/01/21, 07:18:18 PM", "Split `java.time` tests out of `StopwatchTest`.\n\nRELNOTES=n/a", "NaN"], ["5584", "Remove `Service.State.isTerminal()`.", null, "copybara-service[bot]", "06/01/21, 07:30:56 PM", "Remove `Service.State.isTerminal()`.\n\nIt was only referenced in one place. Since we guarantee that transitions between the states in the `Service.State` enum are always from an earlier to a later value, we know that the terminal states must be last. So it's enough to compare with the first terminal state, `TERMINATED`. The code in question already does something very similar with the `RUNNING` state a few lines earlier.\n\nRELNOTES=n/a", "NaN"], ["5585", "Annotate `Multiset` classes for nullness.", null, "copybara-service[bot]", "06/01/21, 10:07:20 PM", "Annotate `Multiset` classes for nullness.\n\nFor now, I've omitted a few annotations on `SortedMultiset` that require cleanup to callers.\n\nAlso, add `@DoNotCall` to some `ImmutableSortedMultiset` methods that always throw `UnsupportedOperationException`.\n\nRELNOTES=n/a", "NaN"], ["5586", "Include toString() of delegate executor with listening decorator", null, "copybara-service[bot]", "06/01/21, 11:41:34 PM", "Include toString() of delegate executor with listening decorator\n\nRELNOTES=n/a", "NaN"], ["5587", "Use `<? extends @Nullable Object>` instead of `<?>`.", null, "copybara-service[bot]", "06/02/21, 05:01:19 PM", "Use `<? extends @Nullable Object>` instead of `<?>`.\n\nThe two should be equivalent, but Kotlin 1.5.10 appears to be interpreting `@ElementTypesAreNonnullByDefault` to mean that `<?>` excludes nulls, thanks to `@TypeQualifierDefault({PARAMETER, ...}) @Nonnull`. (We suspect that this is a bug, so we're looking into that, but we haven't come up with a minimal repo yet.)\n\nIt's possible that we'll want to make similar changes to other APIs. My initial stab at a list is:\n\n- `AbstractMultiset.removeAll` and `retainAll`\n- `FowardingCollection.containsAll`, `removeAll`, and `retainAll`\n- `ImmutableCollection.removeAll` and `retainAll`\n- `Iterables.size`, `toString`, and `isEmpty`\n- `Iterators.size`, `toString`, and `advance`\n\nFor now, though, I'm sticking to modifying only `Joiner`.\n\n...and that's probably just as well: There are side effects:\n\nPrior to this CL, the following is accepted by javac without warning:\n\n```\njoiner.join((List) foo);\n```\n\nAfter this CL, that same code produces an `unchecked` warning. That's because of the raw type `List`, which javac presumably cares about _now_ because it runs some extra checks on account of the explicit bound, even though that bound is `Object`.\n\nRELNOTES=n/a", "NaN"]]
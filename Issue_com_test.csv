PR_NumberIssue_Closed_DateIssue_AuthorIssue_TitleIssue_BodyPR_Closed_DatePR_AuthorPR_TitlePR_BodyPR_CommentsIssue_CommentsPR_AuthorCommit_AuthorCommit_DateCommit_MessageisPR
2710/15/16 10:58:59 PMJoe WilmColors configurable from file"I've already added the default color scheme to the default config file. It's reproduced below. Colors specified in the config file should actually be loaded and used. That is, this configuration should have an effect.

``` yml
# Colors
colors:
  # Default colors
  default:
    background: 0x000000
    foreground: 0xeaeaea

  # Normal colors
  normal:
    black: 0x000000
    red: 0xd54e53
    green: 0xb9ca4a
    yellow: 0xe6c547
    blue: 0x7aa6da
    magenta: 0xc397d8
    cyan: 0x70c0ba
    white: 0x424242

  # Bright colors
  bright:
    black: 0x666666
    red: 0xff3334
    green: 0x9ec400
    yellow: 0xe7c547
    blue: 0x7aa6da
    magenta: 0xb77ee0
    cyan: 0x54ced6
    white: 0x2a2a2a
```"12/16/16 09:25:01 PMadd fish_cc ref"and update Cargo.lock

:D"1I think it should work now.quininerquininer kel12/16/16 08:04:48 AM"add fish_cc ref

and update Cargo.lock"0
4911/18/16 01:18:32 AMJoe WilmKeybindings Configurable from File"Keybindings are currently hardcoded in `src/input.rs`. Instead, they should all be specified in the `alacritty.yml` file. Currently hardcoded keybindings should be added to the default `alacritty.yml` config.

There's a couple of binding types we need to support
1. Given a key combination and terminal state, send an escape sequence.
2. Given a key combination and terminal state, perform a predefined action
   - Actions: `copy-selection`, `paste`, `toggle-fullscreen`

I imagine the config might look something like this

``` yml
bindings:
  - key: f11
    escape: [23~
  - key: enter
    mods: super # super and cmd are interchangeable modifiers
    action: full-screen
  - mouse: 5
    action: paste
  - key: left arrow
    mode: app-cursor
    escape: OD
```

Notes on the above config:
- `mods` defaults to no mods
- `mode` defaults to any mode
- keys like `left arrow` would be easy to screw up the identifier for. Better option there?
- full-screen isn't current supported
- clipboard stuff isn't currently supported

One thing that's nice about the current approach is bindings for each key are available in a static location. It would be nice to still be able to jump to the binding list for a given key using an array or Vec or `match` instead of going through a HashMap.

I think the initial implementation of this will be supporting the current keybindings but defined from the config file instead of hard-coded."01/04/17 08:41:35 PMFix typo in README1I think it should work now.FliegendeWurstFliegendeWurst01/04/17 08:14:32 PMFix typo in README0
5601/02/17 02:31:56 AMJoe WilmMouse Integration"Mouse events should be forwarded to the terminal for programs that have mouse integration like `htop` and `vim`.

- [x] trackpad scrolling
- [x] mousewheel scrolling
- [x] basic mouse reporting
- [x] SGR reporting"01/05/17 06:55:26 AMmacOS: cmake is not required"The build Works On My Machine (tm) without cmake. OSX 10.9.5

```
Alexs-MacBook-Air-3:alacritty alex$ brew unlink cmake
Unlinking /usr/local/Cellar/cmake/3.7.1... 426 symlinks removed
Alexs-MacBook-Air-3:alacritty alex$ which cmake
Alexs-MacBook-Air-3:alacritty alex$ cargo build --release
    [...]
    Finished release [optimized + debuginfo] target(s) in 209.75 secs
```"1Added SGR reporting in 82bfc41af7d6eff384bdf95cedaf0d62b5450979durkaAlex Burka01/05/17 06:40:38 AM"macOS: cmake is not required

The build Works On My Machine (tm) without cmake. OSX 10.9.5"0
5904/28/19 08:21:40 PMJoe WilmNative clipboard support on X11 and WaylandThe biggest issue I've been having with alacritty recently is pasting from the clipboard. Copying would be nice to, but apparently pasting comes up _a lot_.01/05/17 03:15:13 PMAllow key_binding mods have spaceThis will allow  `mods: Control | Shift, action: Copy`.1Oh, sorry, I missed that part.quininerquininer kel01/05/17 01:33:45 PMAllow key_binding have space0
6012/31/16 04:54:46 AMJoe WilmRegion Selection + Clipboard CopyUsing the mouse, it should be possible to select a region of characters and copy them onto the clipboard.01/06/17 04:31:30 PMFix compilation on ARM/AARCH64"```rust
error[E0308]: mismatched types
    --> src/renderer/mod.rs:1042:41
     |
1042 |             gl::ShaderSource(shader, 1, &(source.as_ptr() as *const i8), len.as_ptr());
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u8, found i8
     |
     = help: here are some functions which might fulfill your needs:
 - .offset(...)
 - .wrapping_offset(...)

error[E0308]: mismatched types
   --> src/tty.rs:174:43
    |
174 |         libc::getpwuid_r(uid, &mut entry, buf.as_mut_ptr(), buf.len(), &mut res)
    |                                           ^^^^^^^^^^^^^^^^ expected u8, found i8
    |
    = help: here are some functions which might fulfill your needs:
 - .offset(...)
 - .wrapping_offset(...)
````

Not exactly cross-platform, eh?

https://github.com/rust-lang/rust/issues/29867"6@mdiehm https://github.com/jwilm/alacritty/blob/3e6e8a03eeea780e28b6fc217ee495dee3342c48/alacritty.yml#L299MagaTailorTaylor Trump01/05/17 02:22:51 PMFix ARM0
6610/09/16 04:30:53 AMJoe WilmAdd a script for generating flame graphs on a release build of alacrittyThese are super helpful for diagnosing performance issues. Having a script to help generate them would make it more likely for users to submit perf issues with a graph.01/06/17 04:31:59 PMAdd prerequisites for Arch Linux1@mdiehm https://github.com/jwilm/alacritty/blob/3e6e8a03eeea780e28b6fc217ee495dee3342c48/alacritty.yml#L299pengowen123pengowen12301/05/17 08:52:11 PMAdd prerequisites for Arch Linux0
6709/26/16 03:32:00 PMJoe WilmScrolling vim in tmux while a separate pane is printing causes corruption"Given this setup

![image](https://cloud.githubusercontent.com/assets/4285147/18794329/df0f1182-8173-11e6-9908-0847d7ae9a6d.png)

Scrolling a vim split **while the middle left pane is printing** will cause vim to become corrupt as shown in this screenshot:

![image](https://cloud.githubusercontent.com/assets/4285147/18794367/117e31c0-8174-11e6-83a7-4051d52dd870.png)

I have a theory that this is because writing to the _pty_ is not synchronized at all. The input thread simply writes to the file descriptor when it has data to write. The only way to test if this is true would be implementing an actual event loop for I/O. The easiest way to do that is dropping mio into the pty thread and sending all writes from the input handling over the mio channel."01/06/17 04:13:28 PMAdded --title argument to set window titleFirst stab at doing anything in Rust, so I may have butchered the `String` vs `&str` stuff, but this seems to work. Should close #65.3"I actually managed to reproduce it with a slightly simpler tmux arrangement. It did not seem to be an issue when there was not a vertical split on the bottom. This may suggest that it's not concurrent read + write that's an issue but instead something to do with printing data while not in a scrolling region.

![image](https://cloud.githubusercontent.com/assets/4285147/18794470/841b0fc8-8174-11e6-9fc3-6b46ec86b45b.png)
"rudismRudis Muiznieks01/05/17 09:04:23 PMAdded --title argument to set window title0
7410/14/16 07:19:51 PMJoe WilmOccasionally jumps to 100% CPU and stays there on Linux"All of the time is spent in glutin::PollEventsIter. No ""extra"" events are delivered when this is happening, the internal glutin loop just spins.

https://pushdev.jwilm.io/glutin_PollEventsIter_100.svg"01/06/17 07:20:15 PMWrite default config when not found:)1"I actually managed to reproduce it with a slightly simpler tmux arrangement. It did not seem to be an issue when there was not a vertical split on the bottom. This may suggest that it's not concurrent read + write that's an issue but instead something to do with printing data while not in a scrolling region.

![image](https://cloud.githubusercontent.com/assets/4285147/18794470/841b0fc8-8174-11e6-9fc3-6b46ec86b45b.png)
"quininerquininer kel01/06/17 04:56:05 AMWrite default config when not found0
8412/31/16 04:56:47 AMJoe WilmUnderline font decoration isn't renderedThings that are supposed to be underlined are not. This includes things like vim spell check default styling and zsh command names.01/07/17 05:55:39 PMAdd instructions for VoidLinux in README.md2Marking this as resolved for the purpose of shipping 0.1.nkoehringNorman01/06/17 07:32:01 PMAdd instructions for VoidLInux in README.md0
8606/20/17 04:15:33 PMJoe WilmCrash when resizing to smaller size"```
num_cols, num_lines = Column(213), Line(59)
width: 2560, height: 1600
thread 'pty reader' panicked at 'index out of bounds: the len is 59 but the index is 73', ../src/libcollections/vec.rs:1316
note: Run with `RUST_BACKTRACE=1` for a backtrace.
child finished with error '256'
```

Unfortunately I didn't run with `RUST_BACKTRACE`. Judging by the indices, the cursor line was beyond the bottom of the screen after resizing."01/06/17 08:42:35 PMAdd README instruction for Fedora2Should be fixedbenmylesBen Myles01/06/17 07:34:24 PMAdd README instruction for Fedora0
9111/12/16 02:48:12 AMJoe WilmDelete key inserts a spaceDeleting in the middle of a shell command reproduces this behavior01/06/17 09:02:11 PMFix crash when exiting `top`"This is a small change that fixes a highly-reproducible (at least on my end) crash that would occur when exiting `top`. The cursor would be set one line after the end of the screen, and then `clear_line` would be called. This would result in a panic on the self.grid `IndexMut` call.

Now, the visual behavior is identical to what I experience in other terminal emulators. When exiting `top`, the contents should remain behind, but a new line pops up at the bottom to allow you to continue interacting with the terminal.

This probably fixes other situations as well. It might be good to add some similar limiting to `goto_line` and similar functions."1"Resolved in 6925daa823a86aa8d3fafe21591bb883cb053ef3
"coder543Josh Leverette01/06/17 08:02:13 PMMerge branch 'master' of github.com:coder543/alacritty0
9211/12/16 02:02:57 AMJoe WilmDoesn't shutdown properly from EOF on macOSJust open Alacritty and hit `<c-d>` to repro01/06/17 08:59:27 PMAdded a freedesktop.org desktop entry and instructions for using it to README.md4"Resolved in 6925daa823a86aa8d3fafe21591bb883cb053ef3
"amikhalevAlex Mikhalev01/06/17 08:07:15 PMReduced Desktop Entries heading size0
9611/12/16 02:47:58 AMJoe WilmPgUp and PgDown don't work01/06/17 11:45:36 PMUpdate README.md1"Resolved in 6925daa823a86aa8d3fafe21591bb883cb053ef3
"coder543Josh Leverette01/06/17 08:35:17 PMUpdate README.md0
11511/12/16 01:41:45 AMJoe WilmResizing doesn't work properly on macOSThe out-of-band resize events on macOS don't trigger a refresh. Need to make it possible to kick the event loop from that resize handler.01/06/17 11:34:36 PMAdd installation instructions for openSUSE1"Resolved in 6925daa823a86aa8d3fafe21591bb883cb053ef3
"krigKristoffer Grönlund01/06/17 11:32:54 PMAdd installation instructions for openSUSE0
13111/20/16 07:29:35 AMJoe WilmRendering bug with htopStill have an issue with scroll regions I think. It would be good to add some ref tests that look at grid content so that we can regression test these things.01/07/17 05:51:25 AMMake it compile on stable Rust (almost)"I replaced all the usages of unstable features with in-house stuff. Now the only unstable bit is `proc_macro`, which is stabilizing in 1.15, and I didn't want to go through the effort of separating out serde types into a standalone file if it was going to be temporary.

Most of these features have no roadmap for stabilization. `contains()` might, but the inclusive ranges story is probably going to be redone. The `step` stuff is dependent on the design space being explored first, so unless someone spearheads that that will probably stay stagnant. `drop_types_in_const` and `core_intrinsics` won't stabilize, but you can push for `unlikely` in particular to be stabilized. If any of these features stabilize it should be relatively easy to undo these changes."8"hmm, looked into this and there doesn't seem to be a problem.
"ManishearthManish Goregaokar01/07/17 04:44:51 AMClippy fixes!0
13212/17/16 07:14:18 AMJoe WilmReloading config file should trigger a redrawFiling as a bug since it appears broken when colors don't refresh immediately.01/07/17 01:18:22 AMAdd tip for running in XWaylandFixes #112 1"There are certain parts of the config file which do not support live reload. For example the font family.

For most other settings automatic font reload is supported and should take effect, if you want to 'manually' reload a certain setting, you need to restart Alacritty. Since the settings that don't automatically reload often aren't enabled to do so because there's too much complexity involved."tomwadleyTom Wadley01/07/17 12:48:31 AMAdd tip for running in XWayland0
13811/20/16 06:14:02 AMJoe WilmAdd ref test systemThere's been a number of bugs related to scrolling region. It seems like fixing one seems to cause another. Ref tests would allow recording some terminal protocol and then making assertions about the screen state at the end.01/07/17 05:46:29 PM"Add ""shell"" option to config""This allows you to configure the shell to use when alacritty starts.

cc: #122"3"Resolved in 66dbd29cd194a4c84f796f32827429895c2a3bba
"honzaHonza Pokorny01/07/17 05:07:06 PMTypo0
14311/24/16 01:24:10 AMSolomon Choinabuild is failing "Compiling alacritty v0.1.0 (file:///home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git)
error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Cursor` has already been defined in this module
  --> src/index.rs:24:59
   |
24 | #[derive(Debug, Clone, Default, Eq, PartialEq, Serialize, Deserialize)]
   |                                                ---------  ^^^^^^^^^^^ already defined
   |                                                |
   |                                                previous definition of `_IMPL_DESERIALIZE_FOR_Cursor` here

error[E0428]: a type named `Cursor` has already been defined in this module
  --> src/index.rs:25:1
   |
24 | #[derive(Debug, Clone, Default, Eq, PartialEq, Serialize, Deserialize)]
   |                                                           ----------- previous definition of `Cursor` here
25 | pub struct Cursor {
   | ^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Line` has already been defined in this module
  --> src/index.rs:33:82
   |
33 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                       ---------  ^^^^^^^^^^^ already defined
   |                                                                       |
   |                                                                       previous definition of `_IMPL_DESERIALIZE_FOR_Line` here

error[E0428]: a type named `Line` has already been defined in this module
  --> src/index.rs:34:1
   |
33 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ----------- previous definition of `Line` here
34 | pub struct Line(pub usize);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Column` has already been defined in this module
  --> src/index.rs:45:82
   |
45 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                       ---------  ^^^^^^^^^^^ already defined
   |                                                                       |
   |                                                                       previous definition of `_IMPL_DESERIALIZE_FOR_Column` here

error[E0428]: a type named `Column` has already been defined in this module
  --> src/index.rs:46:1
   |
45 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ----------- previous definition of `Column` here
46 | pub struct Column(pub usize);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Flags` has already been defined in this module
  --> src/term.rs:82:29
   |
82 |         #[derive(Serialize, Deserialize)]
   |                  ---------  ^^^^^^^^^^^ already defined
   |                  |
   |                  previous definition of `_IMPL_DESERIALIZE_FOR_Flags` here

error[E0428]: a type named `Flags` has already been defined in this module
  --> src/term.rs:81:5
   |
81 |     bitflags! {
   |     ^ already defined
82 |         #[derive(Serialize, Deserialize)]
   |                             ----------- previous definition of `Flags` here
   |
   = note: this error originates in a macro outside of the current crate

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Color` has already been defined in this module
  --> src/term.rs:91:54
   |
91 |     #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
   |                                           ---------  ^^^^^^^^^^^ already defined
   |                                           |
   |                                           previous definition of `_IMPL_DESERIALIZE_FOR_Color` here

error[E0428]: a type named `Color` has already been defined in this module
  --> src/term.rs:92:5
   |
91 |     #[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
   |                                                      ----------- previous definition of `Color` here
92 |     pub enum Color {
   |     ^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Cell` has already been defined in this module
  --> src/term.rs:97:39
   |
97 |     #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
   |                            ---------  ^^^^^^^^^^^ already defined
   |                            |
   |                            previous definition of `_IMPL_DESERIALIZE_FOR_Cell` here

error[E0428]: a type named `Cell` has already been defined in this module
   --> src/term.rs:98:5
    |
97  |     #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
    |                                       ----------- previous definition of `Cell` here
98  |     pub struct Cell {
    |     ^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_SizeInfo` has already been defined in this module
   --> src/term.rs:222:41
    |
222 | #[derive(Debug, Copy, Clone, Serialize, Deserialize)]
    |                              ---------  ^^^^^^^^^^^ already defined
    |                              |
    |                              previous definition of `_IMPL_DESERIALIZE_FOR_SizeInfo` here

error[E0428]: a type named `SizeInfo` has already been defined in this module
   --> src/term.rs:223:1
    |
222 | #[derive(Debug, Copy, Clone, Serialize, Deserialize)]
    |                                         ----------- previous definition of `SizeInfo` here
223 | pub struct SizeInfo {
    | ^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Color` has already been defined in this module
   --> src/ansi.rs:306:73
    |
306 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                              ---------  ^^^^^^^^^^^ already defined
    |                                                              |
    |                                                              previous definition of `_IMPL_DESERIALIZE_FOR_Color` here

error[E0428]: a type named `Color` has already been defined in this module
   --> src/ansi.rs:307:1
    |
306 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                                         ----------- previous definition of `Color` here
307 | pub enum Color {
    | ^ already defined

error[E0428]: a type named `Config` has already been defined in this module
  --> src/config.rs:29:1
   |
28 | #[derive(Debug, Deserialize)]
   |                 ----------- previous definition of `Config` here
29 | pub struct Config {
   | ^ already defined

error[E0428]: a type named `Colors` has already been defined in this module
   --> src/config.rs:455:1
    |
454 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `Colors` here
455 | pub struct Colors {
    | ^ already defined

error[E0428]: a type named `PrimaryColors` has already been defined in this module
   --> src/config.rs:462:1
    |
461 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `PrimaryColors` here
462 | pub struct PrimaryColors {
    | ^ already defined

error[E0428]: a type named `AnsiColors` has already been defined in this module
   --> src/config.rs:502:1
    |
501 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `AnsiColors` here
502 | pub struct AnsiColors {
    | ^ already defined

error[E0428]: a type named `Dpi` has already been defined in this module
   --> src/config.rs:756:1
    |
755 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `Dpi` here
756 | pub struct Dpi {
    | ^ already defined

error[E0428]: a type named `FontOffset` has already been defined in this module
   --> src/config.rs:789:1
    |
788 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `FontOffset` here
789 | pub struct FontOffset {
    | ^ already defined

error[E0428]: a type named `Font` has already been defined in this module
   --> src/config.rs:850:1
    |
849 | #[derive(Debug, Deserialize)]
    |                 ----------- previous definition of `Font` here
850 | pub struct Font {
    | ^ already defined

error[E0428]: a type named `Key` has already been defined in this module
    --> src/config.rs:1021:1
     |
1020 | #[derive(Deserialize, Copy, Clone)]
     |          ----------- previous definition of `Key` here
1021 | enum Key {
     | ^ already defined

error[E0428]: a value named `_IMPL_SERIALIZE_FOR_Grid` has already been defined in this module
  --> src/grid.rs:32:37
   |
32 | #[derive(Clone, Debug, Deserialize, Serialize, Eq, PartialEq)]
   |                        -----------  ^^^^^^^^^ already defined
   |                        |
   |                        previous definition of `_IMPL_SERIALIZE_FOR_Grid` here

error[E0428]: a type named `Grid` has already been defined in this module
  --> src/grid.rs:33:1
   |
32 | #[derive(Clone, Debug, Deserialize, Serialize, Eq, PartialEq)]
   |                                     --------- previous definition of `Grid` here
33 | pub struct Grid<T> {
   | ^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Row` has already been defined in this module
   --> src/grid.rs:224:35
    |
224 | #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
    |                        ---------  ^^^^^^^^^^^ already defined
    |                        |
    |                        previous definition of `_IMPL_DESERIALIZE_FOR_Row` here

error[E0428]: a type named `Row` has already been defined in this module
   --> src/grid.rs:225:1
    |
224 | #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
    |                                   ----------- previous definition of `Row` here
225 | pub struct Row<T>(Vec<T>);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ already defined

error[E0428]: a value named `_IMPL_DESERIALIZE_FOR_Rgb` has already been defined in this module
  --> src/lib.rs:70:65
   |
70 | #[derive(Debug, Eq, PartialEq, Copy, Clone, Default, Serialize, Deserialize)]
   |                                                      ---------  ^^^^^^^^^^^ already defined
   |                                                      |
   |                                                      previous definition of `_IMPL_DESERIALIZE_FOR_Rgb` here

error[E0428]: a type named `Rgb` has already been defined in this module
  --> src/lib.rs:71:1
   |
70 | #[derive(Debug, Eq, PartialEq, Copy, Clone, Default, Serialize, Deserialize)]
   |                                                                 ----------- previous definition of `Rgb` here
71 | pub struct Rgb {
   | ^ already defined

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:31:5
   |
31 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:35:5
   |
35 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:39:5
   |
39 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:43:5
   |
43 |     #[serde(default=""true_bool"")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:47:5
   |
47 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:51:5
   |
51 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
  --> src/config.rs:55:5
   |
55 |     #[serde(default)]
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:463:5
    |
463 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:465:5
    |
465 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:503:5
    |
503 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:505:5
    |
505 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:507:5
    |
507 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:509:5
    |
509 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:511:5
    |
511 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:513:5
    |
513 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:515:5
    |
515 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:517:5
    |
517 |     #[serde(deserialize_with = ""rgb_from_hex"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: The attribute `serde` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)
   --> src/config.rs:864:5
    |
864 |     #[serde(deserialize_with=""DeserializeFromF32::deserialize_from_f32"")]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: add #![feature(custom_attribute)] to the crate attributes to enable

error: aborting due to 18 previous errors

error: Could not compile `alacritty`."01/07/17 03:01:48 AMMacOS Terminal.app colors notedfixes issue #120 1Should now build on latest nightlydannydulaiDanny Dulai01/07/17 02:47:00 AMMacOS Terminal.app colors noted0
14501/03/17 03:54:27 AMSolomon Choinalaunch failed"RUST_BACKTRACE=1 alacritty                            101 ↵  1471  20:36:18 
device_pixel_ratio: 1
thread 'main' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `0`)', font/src/ft/list_fonts.rs:161
stack backtrace:
   1:     0x556182a565f3 - <unknown>
   2:     0x556182a5bbed - <unknown>
   3:     0x556182a5b7eb - <unknown>
   4:     0x556182a5c078 - <unknown>
   5:     0x556182a5bf12 - <unknown>
   6:     0x556182a5be50 - <unknown>
   7:     0x556182a2697f - <unknown>
   8:     0x55618297e03c - <unknown>
   9:     0x556182a64996 - <unknown>
  10:     0x556182a5c8f8 - <unknown>
  11:     0x7f15fe914290 - __libc_start_main
  12:     0x55618293ac39 - <unknown>
  13:                0x0 - <unknown>"01/07/17 07:43:10 PMStop cursor from moving past right screen edge"This fixes #133.

See discussion on #133 about whether or not this is the right way to fix #133. Naturally, if it isn't feel free to close this pull request."1Awesome. So others don't run into the same issue you did, I've updated the font loading code default to find whatever monospace font is default on the system and use that.gmorenzmorenzg01/07/17 02:27:54 AMStop cursor from moving past right screen edge0
14901/01/17 04:47:58 AMJoe WilmImprove error handling for font loadingCurrently there's a failing assertion that the user sees as a backtrace. cc #21 01/07/17 03:25:08 AMadd shift-tab keybindingfixes part of #140 1Refactored fontconfig usage to not panic. Still need to have some better error handling when fonts are not found.dannydulaiDanny Dulai01/07/17 03:04:30 AMshift-tab key binding0
15101/11/17 05:07:32 PMJoe WilmHandle OSC command for setting titlePretty simple to implement and a pretty standard feature01/07/17 04:06:36 AMshift-tab key bindingfixes part of #140 1Refactored fontconfig usage to not panic. Still need to have some better error handling when fonts are not found.dannydulaiDanny Dulai01/07/17 03:27:24 AMshift-tab key binding0
15212/12/16 04:28:02 AMJoe Wilm256 color mode should work"- [x] Add support for 256 color mode
- [x] Ref test for the below script

perl script for displaying 256 color squares is here: http://www.robmeerman.co.uk/unix/256colours

inlined here so it's not lost

```pl
#!/usr/bin/perl
# Author: Todd Larason <jtl@molehill.org>
# $XFree86: xc/programs/xterm/vttests/256colors2.pl,v 1.2 2002/03/26 01:46:43 dickey Exp $

# use the resources for colors 0-15 - usually more-or-less a
# reproduction of the standard ANSI colors, but possibly more
# pleasing shades

# colors 16-231 are a 6x6x6 color cube
for ($red = 0; $red < 6; $red++) {
    for ($green = 0; $green < 6; $green++) {
	for ($blue = 0; $blue < 6; $blue++) {
	    printf(""\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\"",
		   16 + ($red * 36) + ($green * 6) + $blue,
		   ($red ? ($red * 40 + 55) : 0),
		   ($green ? ($green * 40 + 55) : 0),
		   ($blue ? ($blue * 40 + 55) : 0));
	}
    }
}

# colors 232-255 are a grayscale ramp, intentionally leaving out
# black and white
for ($gray = 0; $gray < 24; $gray++) {
    $level = ($gray * 10) + 8;
    printf(""\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\"",
	   232 + $gray, $level, $level, $level);
}


# display the colors

# first the system ones:
print ""System colors:\n"";
for ($color = 0; $color < 8; $color++) {
    print ""\x1b[48;5;${color}m  "";
}
print ""\x1b[0m\n"";
for ($color = 8; $color < 16; $color++) {
    print ""\x1b[48;5;${color}m  "";
}
print ""\x1b[0m\n\n"";

# now the color cube
print ""Color cube, 6x6x6:\n"";
for ($green = 0; $green < 6; $green++) {
    for ($red = 0; $red < 6; $red++) {
	for ($blue = 0; $blue < 6; $blue++) {
	    $color = 16 + ($red * 36) + ($green * 6) + $blue;
	    print ""\x1b[48;5;${color}m  "";
	}
	print ""\x1b[0m "";
    }
    print ""\n"";
}


# now the grayscale ramp
print ""Grayscale ramp:\n"";
for ($color = 232; $color < 256; $color++) {
    print ""\x1b[48;5;${color}m  "";
}
print ""\x1b[0m\n"";
```"01/08/17 12:01:39 AMClear only new lines on resize."I found that resize was clearing lines from current line to end on resize. In my setup with a 2 line prompt the second line would be cleared if the window resize happened after printing the second line of the prompt. This mostly happened on startup. 

* This also fixes a crash/panic when you resize the window to zero lines. (half of a fix for #12, the other half is fixed in #154)."1We still don't support setting the 256 colors, but a default set is provided.mbrumlowMichael Brumlow01/07/17 04:00:29 AMClear only new lines on resize.0
15412/15/16 05:18:45 PMquininer`C-c` panic in fish shell"Reproducing step:

0. open `alacritty` and `fish`
1. `a`
2. `C-c`

log:

```[I] ➜  alacritty git:(master) ✗ cargo run
    Finished debug [unoptimized + debuginfo] target(s) in 0.1 secs
     Running `target/debug/alacritty`
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.124546754
set_inner_size: 804 x 604
set_inner_size: 804 x 604; pts: 804 x 604
width: 804, height: 604
Cell Size: (10 x 25)
num_cols, num_lines = Column(80), Line(24)
num_cols, num_lines = Column(102), Line(30)
width: 1024, height: 768
num_cols, num_lines = Column(80), Line(24)
width: 804, height: 604
[unhandled osc_start]
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='C'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='S'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='='
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='q'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
Set Attribute: Foreground(Black)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
carriage_return
linefeed
Set Attribute: Foreground(Green)
Set Attribute: Foreground(Black)
Set Attribute: Reset
[Unhandled CSI] action='m', args=[0, 10], intermediates=[]
carriage_return
linefeed
[unhandled osc_start]
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='C'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='S'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='='
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='C'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='S'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='='
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='q'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
Set Attribute: Foreground(Black)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
Set Attribute: Dim
Term got unhandled attr: Dim
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
carriage_return
carriage_return
clear_line: All
Set Attribute: Bold
Set Attribute: Foreground(White)
Set Attribute: Background(Green)
Set Attribute: Foreground(Black)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
Set Attribute: Bold
Set Attribute: Foreground(Green)
Set Attribute: Bold
Set Attribute: Foreground(Cyan)
Set Attribute: Bold
Set Attribute: Foreground(Blue)
Set Attribute: Bold
Set Attribute: Foreground(Red)
Set Attribute: Bold
Set Attribute: Foreground(Blue)
Set Attribute: Bold
Set Attribute: Foreground(Yellow)
Set Attribute: Foreground(Black)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
clear_line: Right
backspace
Set Attribute: Foreground(Red)
Set Attribute: Bold
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
Set Attribute: ForegroundSpec(Rgb { r: 85, g: 85, b: 85 })
move_backward: Column(9)
Set Attribute: Foreground(Black)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Set Attribute: Reset
Set Attribute: Reverse
Set Attribute: CancelReverse
clear_line: Right
carriage_return
linefeed
backspace
thread 'pty reader' panicked at 'attempt to subtract with overflow', src/index.rs:251
stack backtrace:
   1:     0x563ad40383aa - std::sys::imp::backtrace::tracing::imp::write::hbea47d9dd19b523c
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x563ad403d9af - std::panicking::default_hook::{{closure}}::h6875a2976258b020
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:247
   3:     0x563ad403d5ae - std::panicking::default_hook::h88ffbc5922643264
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:263
   4:     0x563ad403de57 - std::panicking::rust_panic_with_hook::hc790e47d4ecc86cd
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:451
   5:     0x563ad403dce4 - std::panicking::begin_panic::hc066339e2fdc17d1
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:413
   6:     0x563ad403dc09 - std::panicking::begin_panic_fmt::h5912b2d2df332044
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:397
   7:     0x563ad403db97 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:373
   8:     0x563ad407a53d - core::panicking::panic_fmt::h561c5ee168a3d2cb
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libcore/panicking.rs:69
   9:     0x563ad407a474 - core::panicking::panic::h194ce5d68a8f28a1
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libcore/panicking.rs:49
  10:     0x563ad3cd1c36 - <alacritty::index::Column as core::ops::SubAssign<usize>>::sub_assign::h0d91353cd4e41af1
                        at /home/quininer/tests/ui/alacritty/src/index.rs:251
  11:     0x563ad3cbee0a - <alacritty::term::Term as alacritty::ansi::Handler>::backspace::h0f69366576cc537e
                        at /home/quininer/tests/ui/alacritty/src/term.rs:573
  12:     0x563ad3cd7322 - <alacritty::ansi::Performer<'a, H> as vte::Perform>::execute::h13c990c23c2f5e84
                        at /home/quininer/tests/ui/alacritty/src/ansi.rs:403
  13:     0x563ad3c5d2d8 - vte::Parser::perform_action::h8e9207d2609e34af
                        at /home/quininer/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:190
  14:     0x563ad3c5d8fe - vte::Parser::perform_state_change::h9a56f079e43e56e3
                        at /home/quininer/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:167
  15:     0x563ad3c5dc74 - vte::Parser::advance::he199b620df8be155
                        at /home/quininer/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
  16:     0x563ad3d14bcc - alacritty::ansi::Processor::advance::hef377be56860e454
                        at /home/quininer/tests/ui/alacritty/src/ansi.rs:81
  17:     0x563ad3cac8fe - <alacritty::event_loop::EventLoop<Io>>::pty_read::h1fd65b9f29f2a13b
                        at /home/quininer/tests/ui/alacritty/src/event_loop.rs:192
  18:     0x563ad3cac098 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h0bb425cd2fe8582f
                        at /home/quininer/tests/ui/alacritty/src/event_loop.rs:281
  19:     0x563ad3cdf804 - <std::panic::AssertUnwindSafe<F> as core::ops::FnOnce<()>>::call_once::heccf5411cd66eb39
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panic.rs:295
  20:     0x563ad3c5cf7f - std::panicking::try::do_call::h546e5663bd72af75
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:356
  21:     0x563ad40468ba - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libpanic_unwind/lib.rs:97
  22:     0x563ad3c5c7db - std::panicking::try::h2364aec27ae8e5f6
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:332
  23:     0x563ad3c5a9e4 - std::panic::catch_unwind::ha436adb5d97f012c
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/panic.rs:351
  24:     0x563ad3c5c34c - std::thread::Builder::spawn::{{closure}}::h9d2c7b9b28783ee1
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/thread/mod.rs:287
  25:     0x563ad3ca46e9 - <F as alloc::boxed::FnBox<A>>::call_box::hbd32ccd14fb32e99
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/liballoc/boxed.rs:595
  26:     0x563ad403cca4 - std::sys::imp::thread::Thread::new::thread_start::h8084b1107992ae5b
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/liballoc/boxed.rs:605
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/obj/../src/libstd/sys/unix/thread.rs:84
  27:     0x7fc80624e453 - start_thread
  28:     0x7fc805d7a7de - __GI___clone
  29:                0x0 - <unknown>
Goodbye
```"01/08/17 12:01:51 AMMake sure we have at least one column."Prevents a panic when the window is resized to 0 columns width. 

* Final fix for #12 "4"I think the patch on master should fix this.

Would you mind contributing a ref test for this behavior? The ref tests help prevent regressions. No worries if not, but they're really easy to record if you can spare a few minutes. Instructions:

Start alacritty with

```sh
target/release/alacritty --ref-test
```

and do something in the terminal (just don't resize it). In this case, it's the two sequences that you experienced a crash with. After performing those actions, close alacritty by hitting the window close X button. There should be some files in your alacritty folder now: `alacritty.recording`, `grid.json`, and `size.json`. Upload those here or commit them to a folder in `tests/ref` and add the folder name to the list at the end of `tests/ref.rs`."mbrumlowMichael Brumlow01/07/17 04:25:45 AMMake sure we have at least one column.0
15602/11/17 10:18:08 PMJoe WilmHandle OSC for setting 256-color values#24 added support for parsing and displaying them, now the OSC commands for setting the colors should be handled as well.01/07/17 06:06:29 AMFixes a slew of bounds issues."Fixed a few bounds issues. 

#133  - Fixed" =||= @gmile all I needed to do is source the base16 shell file in my shell config: https://github.com/jonhoo/configs/blob/master/fish/config.fish#L169mbrumlowMichael Brumlow01/07/17 05:08:52 AMFixes a slew of bounds issues.0
15912/16/16 09:25:01 PMquinineradd fish_cc ref"and update Cargo.lock

:D"01/07/17 05:43:41 PMFix issue with some international inputscc #87, #553This is great; thanks!jwilmJoe Wilm01/07/17 06:04:51 AM"Fix issue with some international inputs

cc #87, #55"1
16410/16/18 05:02:59 PMJoe WilmWindows SupportSupport Windows via the Linux subsystem01/07/17 06:20:02 PMFixes a slew of bounds issues."Fixed a bunch of bounds issues. Most of them were caused by input in src/term/mod.rs leaving self.cursor.col dirty after printing the last char on a line before a wrap was forced. 

These changes ensure when using self.cursor.col and self.cursor.line are within sane values before using them when using them when handling other escape sequences. Care is also taken to ensure the resulting updates to self.cursor.col and self.cursorline are within proper bounds. 

#63 - Fixed
#104 - Fixed 
#108 - Fixed 
#116 - Fixed
#133 - Fixed "9I would like a replacement for putty. It's being maintained the old school way. The authors don't like common features of modern terminal emulators. But, plink + alacritty should be a great match! We don't even have to implement terminal protocols for cmd.exe or powershell. The only thing needed is a gui.mbrumlowMichael Brumlow01/07/17 05:08:52 AMFixes a slew of bounds issues.1
18812/31/16 04:54:01 AMJoe WilmSometimes reading from pty doesn't trigger a drawSeems to have happened since the last major refactor.01/07/17 05:43:18 PMChange README.md to reflect the current compiler situationSuggesting that `alacritty` only works on one version of the compiler is not something new users will want to hear, and it doesn't seem to be true. It compiles and runs just fine on the nightly from last night, and the nightly before that.1Resolved in a91a3f2coder543Josh Leverette01/07/17 03:41:21 PMChange README.md to reflect the current compiler situation1
19102/17/17 10:17:03 PMJoe WilmSelection snapping with clicksDouble clicking should highlight a word, triple clicking should highlight a line.01/09/17 05:33:56 PMCorrected default alacritty.yml path in READMEI can confirm that `$HOME/.alacritty.yml` is not found, while `$HOME/.config/alacritty.yml` is found per https://github.com/jwilm/alacritty/issues/1725Ah, yeah. Thanks @lord-re erithmeticDerek Kastner01/07/17 04:34:44 PM"Corrected default alacritty.yml path in README

I can confirm that `$HOME/.alacritty.yml` is not found, while `$HOME/.config/alacritty.yml` is found per https://github.com/jwilm/alacritty/issues/172"1
19812/22/18 05:16:55 PMJoe WilmReal text underline supportAs part of shipping 0.1, underline support was hacked in by rendering an underscore in the same cell as the character.01/07/17 07:38:41 PMUpdate README.mdUseless use of cat1The PR is still open. It will take a bit until it can be merged though since other PRs take priority.lukaslueglukaslueg01/07/17 06:04:22 PM"Update README.md

Useless use of cat"1
20801/02/17 03:20:11 AMJoe WilmImprove error handling"Review code for error handling prior to 0.1 release. Refactor any uses of unwrap/expect that could reasonably fail in the wild. Related to #22, but this is more general.

- [x] Shader loading
- [x] Input handling WRT clipboard"01/07/17 08:49:15 PMUpdate README.md1Resolved in d4e20a4 and 7c794ad.nottombrownTom Brown01/07/17 08:27:45 PMUpdate README.md1
21401/03/17 04:17:35 AMJoe WilmAdd READMEAdd a README explaining what the project is, why people should care, and instructions for getting started on supported platforms.01/07/17 09:26:46 PMUpdate README.mdSmall fix for markdown parsing, github fudges this1Resolved in d4e20a4 and 7c794ad.lukaslueglukaslueg01/07/17 09:25:53 PM"Update README.md

Small fix for markdown parsing, github fudges this"1
21504/23/19 07:05:48 PMJoe WilmProper full screen supportCurrently there's no full screen support in Alacritty. Doing to with `glutin` requires recreation of the window and thus recreation of the OpenGL context.01/09/17 05:23:33 PMConform to XDG spec for configuration"Use `$XDG_CONFIG_HOME/alacritty/alacritty.yml` for loading the configuration file falling back to first `$XDG_CONFIG_HOME/alacritty.yml` then finally `$HOME/.config/alacritty/alacritty.yml`

Closes #203"5"> ```
> # this does not work
> key_bindings:
>   - { key: F11, command: { program: ""wmctrl"", args: [""-ir"", ""`xdotool getwindowfocus`"", ""-b"", ""toggle,fullscreen"" ] } }
> ```
This worked for me in linux:
```
  - { key: F11, command: { program: ""/bin/sh"", args: [""-c"", ""wmctrl -ir $(xdotool getwindowfocus) -b toggle,fullscreen"" ] } }
```"0X1AAlberto Corona01/09/17 06:40:47 AM"Add another optional config path `$HOME/.alacritty.yml`

	- Added note about the default file created if no path is found"1
21601/03/17 04:05:52 AMJoe WilmUse XDG_CONFIG_PATH valueCurrently hardcoded to `$HOME/.config`, but that's not necessarily correct. https://whitequark.github.io/rust-xdg/xdg/struct.BaseDirectories.html#method.find_config_file01/08/17 05:24:55 AMBetter bounds checking."- Remove the use of limit.
- Reduce the number of comparisons.

When using numbers provided by the PTY for subtractions there is a extra
step of ensuring that we won't trigger failure on testing when trying to
subtract form zero."26"> ```
> # this does not work
> key_bindings:
>   - { key: F11, command: { program: ""wmctrl"", args: [""-ir"", ""`xdotool getwindowfocus`"", ""-b"", ""toggle,fullscreen"" ] } }
> ```
This worked for me in linux:
```
  - { key: F11, command: { program: ""/bin/sh"", args: [""-c"", ""wmctrl -ir $(xdotool getwindowfocus) -b toggle,fullscreen"" ] } }
```"mbrumlowMichael Brumlow01/08/17 03:46:02 AM"Changes requested.

- Rename wrap to input_needs_wrap and providing documentation.
- Standardize on min.
- Optimization on subtracting col."1
21703/24/19 07:47:15 PMJoe Wilmxclip hack should specify locale and encodingOtherwise clipboard contents may be corrupted10/21/17 11:32:38 PMAdd non-ASCII fontAdd a configurable non-ASCII font so that non-ASCII characters can be displayed when the normal font does not include non-ASCII glyphs.11Wow, that issue number..benburkertBen Burkert01/08/17 11:20:46 PM"Check for non-ASCII chars before bold/italic flag

Some screen managers like tmux set the bold/italic flag on non-ASCII
characters."1
22001/03/17 04:15:51 AMJoe Wilmxclip hack should have clear error messages when xclip is not available01/08/17 01:16:50 AMFixing resize crashes."Most of the crashes on resize were due to columns and lines being set to
zero. This causes all sorts of other checks within the code to ensure
these values are greater than zero before running calculations. To avoid
this we just need to ensure that lines and columns are some non zero
value. This is seems to be what gnome terminal does. I have selected
2 lines and two columns for min terminal size for now.

#12 - Fixed"3Wow, that issue number..mbrumlowMichael Brumlow01/08/17 12:07:03 AM"Fixing resize crashes.

Most of the crashes on resize were due to columns and lines being set to
zero. This causes all sorts of other checks within the code to ensure
these values are greater than zero before running calculations. To avoid
this we just need to ensure that lines and columns are some non zero
value. This is seems to be what gnome terminal does. I have selected
2 lines and two columns for min terminal size for now."1
22411/19/18 09:23:48 PMVal MarkovicSupport for auto fullscreen at startupConfig should support something like `fullscreen: true` so that alacritty starts fullscreen/maximized.01/08/17 05:08:51 AMEnabled Rustc's Link Time Optimization"Changed:

Turned on LTO

Why:

Rust's Link Time Optimization forces all compiled code + dependencies to share the same LLVM codegen module which greatly increases the scope of optimization the LLVM can perform. As its no longer linking together separate libraries as `.o` files but as native llvm-ir. 

This normally shows a ~20% performance gain. Alacritty does aim for performance. 

Issues:

I've been running a build with this flag compiled for most of today with no issues."1I have some minimum viable version of this working right now (it in macOS it works only with native fullscreen). I tested it in linux as well and it seems to work fine.  It supports both the keybinding and config.  If anyone wants to review it, here it is: #1651 valaraucacody01/08/17 04:56:29 AMEnabled Rustc' Link Time Optimization1
22707/02/17 03:29:47 AMJoe WilmAdd call to action on unrecoverable errors."Eg. ""Couldn't find a font with name x and style y"" should say something about updating alacritty.yml."01/10/17 03:33:42 PM[WIP] copypasta x11 support use xcb"1. Should add an `x11` feature to support non-Linux OS(like freebsd) ?
2. Should support Windows?

~~3. Should add `Clear` trait?~~"4see https://github.com/jwilm/alacritty/pull/238quininerquininer kel01/08/17 10:05:28 AMcopypasta x11 support use xcb1
23601/17/19 09:17:32 AMJoe WilmDefault config file should work for macOS and Linux01/09/17 05:43:28 AMprint glutin events if --print-events is passed"When debugging many issues, it's often very helpful to have the raw
glutin events printed out to stderr as they come in. This does that.

Note that since `glutin::Event` doesn't implement `Display`, we just use
rust's debugging output for now via `{:?}`."1Not sure, but I think https://github.com/jwilm/alacritty/issues/957 would address this, since we could just list `Menlo` as the first fallback font?tcrayfordTom Crayford01/08/17 09:09:02 PM"print glutin events if --print-events is passed

When debugging many issues, it's often very helpful to have the raw
glutin events printed out to stderr as they come in. This does that.

Note that since `glutin::Event` doesn't implement `Display`, we just use
rust's debugging output for now via `{:?}`."1
23703/11/19 12:35:50 PMVal MarkovicAdd config for window starting position"Gnome terminal and others support specifying a starting geometry for the screen, usually in terms of chars. So ""200x50"" is 200 vertical chars and 50 horizontal ones. That plus a pixel offset from top-left of screen lets the user decide how big should the alacritty window be and where should it be placed. With this in config, the window is always where I want it.

Something like this:

```yaml
window:
  vertical_chars: 50
  horizontal_chars: 100
  starting_x_offset: 100
  starting_y_offset: 100
```

You could put the `fullscreen` property (from #38) on the same `window` block too."01/09/17 05:40:39 AMlink to dpi.lvWhen trying to figure out what my dpi was, I came across this site. Ideally alacritty would figure out your dpi automatically at bootup somehow, but for now, linking to the site saves a user a google search.1"This is the relevant API call of winit:
https://docs.rs/winit/0.19.0/winit/struct.Window.html#method.set_position"tcrayfordTom Crayford01/08/17 09:20:54 PMlink to dpi.lv1
23801/03/17 04:43:30 AMJoe WilmHave a default config for key bindings so things work without installing config fileCurrently, not installing the config file will mean stuff like arrow keys will not work at all.01/13/17 05:21:15 AMadd suggestive fallback messages on unavailable fontsas per https://github.com/jwilm/alacritty/issues/394"This is the relevant API call of winit:
https://docs.rs/winit/0.19.0/winit/struct.Window.html#method.set_position"tcrayfordTom Crayford01/08/17 09:31:57 PM"add suggestive fallback messages on unavailable fonts

as per https://github.com/jwilm/alacritty/issues/39"1
23901/03/17 04:26:07 AMJoe WilmScrolling breaks in vim with ttymouse=sgr on LinuxScrolling always goes down regardless of which way the mouse wheel moves.01/09/17 10:40:03 AMadd a suggestion to report a bugWhen we see a crash, suggest reporting a bug to the github issue tracker.3"This is the relevant API call of winit:
https://docs.rs/winit/0.19.0/winit/struct.Window.html#method.set_position"tcrayfordTom Crayford01/08/17 09:34:40 PMadd a suggestion to report a bug1
24307/25/17 01:55:43 AMquininerLinux input method supportAsian users often need to use [input method](https://en.wikipedia.org/wiki/Input_method) (like fcitx, ibus). :D01/19/17 05:13:59 AMUpdate dependencies1@Rouji your issue is tracked here #2734korczisTomas Korcak01/09/17 12:41:10 AMMerge branch 'master' of github.com:korczis/alacritty1
24502/08/18 05:27:40 PMquininershould support font fallback"
<img width=""763"" alt=""screenshot_20170103_142910"" src=""https://cloud.githubusercontent.com/assets/6286761/21601164/c07121e0-d1c1-11e6-8079-1a33321cb4d8.png"">

* both konsole and alacritty use Noto Mono."01/09/17 05:22:09 AMFix yml errors from uncommenting solarized block in configVery small and simple change. The solarized dark example block has one additional space, which causes yml related errors when you uncomment the block without removing the extra space. This can be confusing to new users and doesn't really add to the overall readability.5for me too! thxrocodeElias Roa01/09/17 02:13:52 AMFix yml errors from uncommenting solarized block in config1
24701/03/17 07:48:22 AMquininer`alt` key don't work"example:

```python
import curses

def Main(screen):
   while True:
      ch = screen.getch()
      if ch == ord('q'):
         break
      elif ch == 27: # ALT was pressed
         screen.nodelay(True)
         ch2 = screen.getch() # get the key pressed after ALT
         if ch2 == -1:
            break
         else:
            screen.addstr(5, 5, 'ALT+'+str(ch2))
            screen.refresh()
         screen.nodelay(False)

curses.wrapper(Main)
```

<img width=""556"" alt=""screenshot_20170103_151940"" src=""https://cloud.githubusercontent.com/assets/6286761/21601725/2c649b88-d1c8-11e6-8937-47b916038360.png"">"01/11/17 03:43:33 PMsupport to change cursor color or invert itsolves #155, while preserving the invert behavior by default2Also, thanks a lot for the curses script; it was very helpful!dannydulaiDanny Dulai01/09/17 03:18:39 AMsupport for inverting the cursor or using colors1
25406/18/18 05:28:02 PMJoe WilmResizing window on macOS begins selection01/09/17 05:32:54 PMMasterNone1I really need to build myself a nice little alacritty testing rig, with like 7283162 WMs on it. One day...jamiepgjamie peter goodwin01/09/17 06:56:43 AM"Merge remote-tracking branch 'refs/remotes/origin/pc-buffer'

# Conflicts:
#	Cargo.lock
#	Cargo.toml
#	src/main.rs"1
25502/06/17 07:43:59 PMJoe WilmScrolling should not write to the pty when one of the mouse modes isn't active01/09/17 05:34:21 PMUpdate README.mdTiny grammar fix.1I really need to build myself a nice little alacritty testing rig, with like 7283162 WMs on it. One day...igraviousigravious01/09/17 09:40:15 AM"Update README.md

Tiny grammar fix."1
26601/04/17 08:41:35 PMNoneFix typo in README01/09/17 10:26:10 PMMasterNone1Hah, thanks :)jamiepgjamie peter goodwin01/09/17 09:30:27 AMMerge remote-tracking branch 'refs/remotes/jwilm/master'1
26801/05/17 02:33:30 AMDavid NuonArrow keys not working in Ubuntu 16.04 Alacritty doesn't seem to accept arrow keys as input. 01/10/17 07:19:08 AMFixing panic on cat /dev/urandom"- Checks to make sure lines count coming from the pty are within a proper
range before doing scrolling.

- Sanitizes scroll region when being set.

- Changes panic for unimplemented screen clear to a print statement.

The first two changes ensure scrolling won't crash us. By sanitizing the
region on set we don't have to complicate the scroll code with limits,
mins, or maxes to ensure the scroll operation is within the range.
Checking if the lines is greater than the total region allows us to
simply clear the region and avoid subtracting large numbers from small
ones.

Fixes #63
"3"Silly me, I forgot the dot at the beginning when I moved it to `$HOME`. It works now.

"mbrumlowJoe Wilm01/10/17 07:09:11 AMFix last panic with `cat /dev/urandom`1
27301/05/17 04:07:07 AMBasile HenryIn i3 alacritty doesn't redraw when changing workspace"In i3 when switching workspace to the one with the alacritty window the window doesn't draw until it gets refreshed (by being selected by example)

Here it is working (alacritty on the left):
![working](https://cloud.githubusercontent.com/assets/3369034/21667917/d7894fa4-d2f4-11e6-834a-42d122586b51.png)

And not working (after a switch from an empty workspace to the current one):
![not-working](https://cloud.githubusercontent.com/assets/3369034/21667919/dc926148-d2f4-11e6-8800-83636e712240.png)
"01/10/17 04:58:52 PMMaster1None1I'd appreciate you opening a new issue for that, but feel free to leave the P.S. so my comment makes sense :grin:.jamiepgjamie peter goodwin01/09/17 09:30:27 AMMerge remote-tracking branch 'refs/remotes/jwilm/master'1
27401/10/17 08:17:53 PMJoe WilmAdd a way to ask Alacritty to print glutin events using environment or a command-line flag.Would have been nice for #53.01/24/17 06:46:00 AMAllow arguments in shell option"I added support for arguments to the shell option. This is convenient when debugging, e.g. `shell: /bin/bash --norc --noprofile` can be used to avoid loading everything when running bash.

I'm a bit of a rookie when it comes to rust so please review.

Cheers

EDIT: I've also added the -e command line argument so that you temporarily can launch alacritty with another shell."9yep, thanksNickeZNiklas Claesson01/14/17 11:42:32 AM"Add command line argument `-e` to specify shell

All arguments after `-e` are interpreted as the shell and its arguments,
i.e., `alacritty -e bash --login` or `alacritty -e bash --norc
--noprofile`."1
27601/05/17 06:55:26 AMAlex BurkamacOS: cmake is not required"The build Works On My Machine (tm) without cmake. OSX 10.9.5

```
Alexs-MacBook-Air-3:alacritty alex$ brew unlink cmake
Unlinking /usr/local/Cellar/cmake/3.7.1... 426 symlinks removed
Alexs-MacBook-Air-3:alacritty alex$ which cmake
Alexs-MacBook-Air-3:alacritty alex$ cargo build --release
    [...]
    Finished release [optimized + debuginfo] target(s) in 209.75 secs
```"01/10/17 05:33:58 PMUpdate README.md`cmake` is required everywhere in order to build `expat-sys`1This is great; thank you for looking into it.lukaslueglukaslueg01/10/17 01:18:02 PM"Update README.md

`cmake` is required everywhere in order to build `expat-sys`"1
27701/05/17 07:14:22 AMAlex Burkaunrecoverable error on startup: couldn't find monospace font"Here is the output when starting the editor:

```
Alexs-MacBook-Air-3:alacritty alex$ target/release/alacritty
device_pixel_ratio: 1
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Alacritty encountered an unrecoverable error:

	Couldn't find a font with name 'monospace' and style 'slant=Normal, weight=Normal'
```

A blank window briefly flashes on the screen but disappears.

OSX 10.9.5"01/13/17 05:19:42 AMmake thin stroke rendering configurable"Makes thin stroke rendering for darwin configurable by a new toplevel
key under `font:` in the config file. Defaults to false, has no impact
on non macos."6Glad that fixed it! Closing in favor of #40.tcrayfordTom Crayford01/10/17 01:58:54 PM"make thin stroke rendering configurable

Makes thin stroke rendering for darwin configurable by a new toplevel
key under `font:` in the config file. Defaults to false, has no impact
on non macos."1
27801/05/17 01:53:40 PMquininer`Ctrl + Shift + C` conflict with `C-c`"~~1. execute `cat`
2. select any text and copy it~~

~~This is two issues,
first, the Copy key binding should be `Ctrl + Shift + C`.
then, `Ctrl + Shift + C` should not trigger `C-c`~~"01/26/17 03:40:33 PMUpdate README.mdadded Slackware15@basile-henry Sorry, I am using the wrong `config.yml` and in another alacritty...DerNorbertTom Crayford01/10/17 01:58:54 PM"make thin stroke rendering configurable

Makes thin stroke rendering for darwin configurable by a new toplevel
key under `font:` in the config file. Defaults to false, has no impact
on non macos."1
28401/05/17 03:15:13 PMquininerAllow key_binding mods have spaceThis will allow  `mods: Control | Shift, action: Copy`.01/11/17 05:07:32 PMAdd support for setting title from OSC"Resolves #23
Resolves #144" =||= Makes sense. Thanks!jwilmJoe Wilm01/11/17 05:21:19 AM"Add support for setting title from OSC

Resolves #23
Resolves #144"1
28801/06/17 04:31:30 PMTaylor TrumpFix compilation on ARM/AARCH64"```rust
error[E0308]: mismatched types
    --> src/renderer/mod.rs:1042:41
     |
1042 |             gl::ShaderSource(shader, 1, &(source.as_ptr() as *const i8), len.as_ptr());
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u8, found i8
     |
     = help: here are some functions which might fulfill your needs:
 - .offset(...)
 - .wrapping_offset(...)

error[E0308]: mismatched types
   --> src/tty.rs:174:43
    |
174 |         libc::getpwuid_r(uid, &mut entry, buf.as_mut_ptr(), buf.len(), &mut res)
    |                                           ^^^^^^^^^^^^^^^^ expected u8, found i8
    |
    = help: here are some functions which might fulfill your needs:
 - .offset(...)
 - .wrapping_offset(...)
````

Not exactly cross-platform, eh?

https://github.com/rust-lang/rust/issues/29867"01/11/17 11:31:57 PMsupport for inverting the cursor or using colorssolves #155, while preserving the invert behavior by default =||= Great, please consider adding `GLES` (or at least OpenGL 2.0) support to make `alacritty` runnable on a typical ARM system. Thanks!dannydulaiDanny Dulai01/09/17 03:18:39 AMsupport for inverting the cursor or using colors1
29101/10/17 07:19:08 AMAwal Gargrunning `cat /dev/urandom` crashes alacritty"As the title says, running `cat /dev/urandom` consistently crashes alacritty. Apparently some random escape codes send it into a state where this condition is triggered: https://github.com/jwilm/alacritty/blob/master/src/term/mod.rs#L634. Here is a log with backtrace: https://linx.li/aomx2zxa.ext

Great project btw, good luck! :)"01/11/17 06:33:57 PMFix bug where event loop could get stuck reading"One symptom of this bug was being unable to send C-c during `cat
/dev/urandom`.

cc #271" =||= "One more to add.  I couldn't find an open issue for this one:

Commit: 2fa271419c4765f7758dcf336fe0b913c12c18a6

```
thread 'pty reader' panicked at 'attempt to subtract with overflow', src/index.rs:168
stack backtrace:
   1:        0x102beae9a - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x102bed23f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x102becee7 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x102bed706 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x102bed554 - std::panicking::begin_panic::h091a980eb2ddd29a
   6:        0x102bed4c2 - std::panicking::begin_panic_fmt::h063a49cc71e3d103
   7:        0x102bed427 - rust_begin_unwind
   8:        0x102c155e0 - core::panicking::panic_fmt::h59374b8a88ef3536
   9:        0x102c154e4 - core::panicking::panic::he4f8d5c0f01c5414
  10:        0x10292a301 - <alacritty::index::Line as core::ops::Sub>::sub::hf56240524a3b3d20
  11:        0x102958974 - alacritty::term::Term::scroll_down_relative::h17832db7c7cd0212
  12:        0x102934b06 - <alacritty::term::Term as alacritty::ansi::Handler>::insert_blank_lines::hf4bfabc4710cd1ad
  13:        0x10294e116 - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::csi_dispatch::h4ad960a650a87e60
  14:        0x1028e6990 - vte::Parser::perform_action::hae92f4f3be45f35d
  15:        0x1028e6e96 - vte::Parser::perform_state_change::hcd974f7189d6307e
  16:        0x1028e7154 - vte::Parser::advance::hfbcbd9a431c54361
  17:        0x1029566dc - alacritty::ansi::Processor::advance::h8aa55517e89b95a8
  18:        0x102922fa1 - <alacritty::event_loop::EventLoop<Io>>::pty_read::he09815a6e7f0c6c5
  19:        0x1029226df - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::hc8cce598d7c221bf
  20:        0x102952784 - <std::panic::AssertUnwindSafe<F> as core::ops::FnOnce<()>>::call_once::he8d9ee1af400fb51
  21:        0x1028e65df - std::panicking::try::do_call::ha1ffc19119230164
  22:        0x102bee5da - __rust_maybe_catch_panic
  23:        0x1028e5beb - std::panicking::try::h1d88e2383fd5222f
  24:        0x1028e3c54 - std::panic::catch_unwind::hb5a6f0073814bc71
  25:        0x1028e53ac - std::thread::Builder::spawn::{{closure}}::h0de6bfd35f37e74c
  26:        0x10291c869 - <F as alloc::boxed::FnBox<A>>::call_box::h7878f3467aa35fcc
  27:        0x102bec914 - std::sys::imp::thread::Thread::new::thread_start::haeb202749da670ee
  28:     0x7fff9f33caaa - _pthread_body
  29:     0x7fff9f33c9f6 - _pthread_start
```"jwilmJoe Wilm01/10/17 06:27:25 PM"Fix bug where event loop could get stuck reading

One symptom of this bug was being unable to send C-c during `cat
/dev/urandom`.

cc #271"1
29202/17/17 10:39:00 PMDeleted userAlacritty fails to start with a shader error."I tried running alacritty inside a VMWare Workstation VM and received and immediately received an error.
```

device_pixel_ratio: 1
Alacritty encountered an unrecoverable error:

	There was an error initializing the shaders: failed compiling shader: 0:14(10): error: GLSL 3.30 is not supported. Supported versions are: 1.10, 1.20, 1.30, 1.00 ES, and 3.00 ES
```
Below is information about the VM.

```
Linux debian 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux

PRETTY_NAME=""Debian GNU/Linux 8 (jessie)""
NAME=""Debian GNU/Linux""
VERSION_ID=""8""
VERSION=""8 (jessie)""
ID=debian
```"01/21/17 08:09:22 PMansi: Designate G0 graphic character set"Hi, I am new to Rust so this may not be the best way to go about doing this, but I am trying to implement the line drawing characters for applications like YasT and GNU/Linux's `make menuconfig`. So far I have spent a lot of time reading specifications (only then to realise you have a nice neat summary in this repo) and have made some stubs. I haven't looked at remapping the glyphs yet. Also, great job!

Related issue: https://github.com/jwilm/alacritty/issues/226
Commit message:
Parse `ESC ( B` as designate the G0 graphic character set as ASCII and parse
`ESC ( 0` as designate the G0 graphic character set as line drawing
glyphs. This does not implement actually using the line drawing glyphs,
but prints out a debug message when the control sequence is parsed."9Closing in favor of #128richiejpRichard Palethorpe01/09/17 08:07:23 PM"ansi: Designate and invoke graphic character sets

Implement the designation of graphic character sets G0-G3 to ASCII or the
Special character and line drawing glyphs. As well as the invokation/selection
of the character sets (shift in, shift out and lock shifting)."1
29301/06/17 04:13:28 PMRudis MuiznieksOption to set window namexterm, for example, supports launching with `-name SomeWindowName` to set the window title to a custom string. Some window managers allow for custom rules to be applied to different windows depending on their title, so being able to set the window title differently depending on how the terminal was launched can be very useful.01/30/17 12:06:30 AMsupport for inverting the cursor or using colorssolves #155 14Ah, I see that the functionality I'm requesting has already been implemented in the form of a `--class` argument. Nevermind me!dannydulaiDanny Dulai01/09/17 03:18:39 AMsupport for inverting the cursor or using colors1
29501/06/17 04:31:59 PMNoneAdd prerequisites for Arch Linux01/12/17 06:10:50 AMProposal for line wrap - ^[[7h and ^[[7l (private)"These changes provide support for disabling auto line wrap which is
currently default to on.

'tput rman' will now disable auto line wrap and alacritty will now not
automatically wrap lines.

'tput sman' will now (re)enable auto line wrap and alacritty will now
automatically wrap lines once it reaches the end of the line.

My testing showed this to work the same as gnome-terminal.

I should note that simply having ^[[7h or ^[[7l in a recording does not
enable and disable line wrapping. This is the same behavior as
gnome-terminal and xterm. Those cape codes come through as private
which are not handled yet. I behave this is the correct behavior.

** I fixed vim to trim trailing whitespace on save, just about every line I committed in the past had trailing white space. This is also corrected here. ** 

Fixes #282"1Thanks for the help with docs!mbrumlowMichael Brumlow01/12/17 03:00:29 AM"Proposal for line wrap - ^[[7h and ^[[7l (private)

These changes provide support for disabling auto line wrap which is
currently default to on.

'tput rman' will now disable auto line wrap and alacritty will now not
automatically wrap lines.

'tput sman' will now (re)enable auto line wrap and alacritty will now
automatically wrap lines once it reaches the end of the line.

My testing showed this to work the same as gnome-terminal.

I should note that simply having ^[[7h or ^[[7l in a recording does not
enable and disable line wrapping. This is the same behavior as
gnome-terminal and xterm. Those cape codes come through as private
which are not handled yet. I behave this is the correct behavior."1
29801/06/17 04:13:28 PMRudis MuiznieksAdded --title argument to set window titleFirst stab at doing anything in Rust, so I may have butchered the `String` vs `&str` stuff, but this seems to work. Should close #65.01/12/17 06:49:31 AMAdding test for line wrap.This test ensures we can enable and disable line wrap.1This looks good; thanks!mbrumlowMichael Brumlow01/12/17 06:29:10 AM"Adding test for line wrap.

This test ensures we can enable and disable line wrap."1
29906/20/17 03:07:24 PMJonathan WrightThread 'pty reader' panicked due to index out of bounds"Just trying out alacritty (thanks) and if I use a full-window application such as `top` or `htop` it crashes on exit (however periodic screen updates are fine):

```
thread 'pty reader' panicked at 'index out of bounds: the len is 133 but the index is 134',
/buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
stack backtrace:
   1:     0x5622aa5cf28a - <unknown>
   2:     0x5622aa5d452f - <unknown>
   3:     0x5622aa5d412e - <unknown>
   4:     0x5622aa5d49d7 - <unknown>
   5:     0x5622aa5d4864 - <unknown>
   6:     0x5622aa5d4789 - <unknown>
   7:     0x5622aa5d4717 - <unknown>
   8:     0x5622aa60075d - <unknown>
   9:     0x5622aa600708 - <unknown>
  10:     0x5622aa4b40df - <unknown>
  11:     0x5622aa4c4cca - <unknown>
  12:     0x5622aa4b04fb - <unknown>
  13:     0x5622aa5db89a - <unknown>
  14:     0x5622aa4c2bea - <unknown>
  15:     0x5622aa5d3824 - <unknown>
  16:     0x7f326f881453 - start_thread
  17:     0x7f326f3ad7de - __GI___clone
  18:                0x0 - <unknown>
child finished with error '256'
```

Using tools such as `less`, `watch`, or `vim`, don't have the same effect, just `top` and `htop` so far."01/13/17 05:09:45 AMMake it run on FreeBSD"Hey! This is really cool. Works great after a couple of modifications.

Changes to code:
- Added FreeBSD paragraph in README.md
- Added ""freebsd"" to target_os cfg's in macOS's openpty() function
- Added ""freebsd"" to target_os cfg's in copypasta
- Had to add derive Default to some Font related structs to get it to build. Did this really build on Linux?
- Apparently TIOCSCTTY is missing from FreeBSD's libc. Added a separate function for that ioctl until libc crate can be fixed.

- Rustfmt (and remove trailing whitespace) runs automatically on save for me and have restructured a lot of the code in the files I edited. I hope this is OK? I highly recommend using rustfmt. 

Hope we can get it running on Wayland soon :) "3Thanks for the reminder @Aaron1011. I published the latest fixes for `vte` and updated Alacritty. Agree that this should be fixed.johalunjohalun01/11/17 11:04:16 PMMake it run on FreeBSD1
30102/21/17 11:17:40 PMRobert YingAlacritty doesn't recognize input when in the process of printing lots of stuff"repro:

open alacritty and type the command `yes`

then, attempt to Ctrl-C or type other characters in.

Expected behavior:
Ctrl-C immediately ends the stream of `y`s being printed out.
Other characters are echoed to screen

(aka input thread should always interrupt drawing thread)

Observed behavior:
holding Ctrl-C for a long time eventually kills `yes`. "03/08/17 03:47:48 PMOSX: Add app packing tooling"Having **Alacritty.desktop** for Linux users, I thought it would be useful to have some tooling for creating MacOS **Alacritty.app** with release binary.

This _Makefile_ includes targets for creating **Alacritty.app** and **Alacritty.dmg**.

_Info.plist_, simple terminal iconset and launcher script are located in _assets/osx_.

**!** Please note that **Alacritty.app** should be moved to MacOS _Applications_ to start and work correctly."28"@marceloandrader Great!

Closing this issue since it's been resolved."cema-spSemyon Pisarev02/07/17 12:50:38 PMFix launcher script1
30301/06/17 11:18:18 PMBill FraserFullscreen on MacOS does nothing when launched from within tmux"Hitting the green '+' in the titlebar results in no change to the window size at all.

The output says this:
```
wfraser@wfraser-mbp> alacritty
device_pixel_ratio: 1
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.022991449
set_inner_size: 564px × 340px
width: 564, height: 340
Cell Size: (7 x 14)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 365, 102
width: 2560, height: 1440
num_cols, num_lines = 80, 24
width: 564, height: 340
```

I hit the fullscreen button after the ""PTY Dimensions"" line. Looks like it tried to resize but went back to my original size immediately."01/12/17 08:07:39 PMAdd desktop install instructions for macOSInstructions for adding an extremely simple application wrapper for macOS1Glad to hear it! This issue should disappear entirely once we provide an _Alacritty.app_ package.zaiusDavid Kelso01/12/17 08:04:03 PM"Add desktop install instructions for macOS

Instructions for adding an extremely simple application wrapper for macOS"1
30411/10/18 04:08:49 PMBill FraserUpdate DPI/DPR when switching monitors"The window size stays the same (post scaling), but the rendered contents stay at the same DPI. When going from low-DPI monitor to a higher-DPI one, this results in the contents not filling the window, and rendering artifacts in the remaining space. Upon resize it adjusts itself to fill correctly. Doing the reverse (high-DPI to lower) results in the contents getting cut off.

Also, because the DPI stays exactly the same, dragging the window from a non-retina monitor to a retina one, the text becomes unreadably tiny instead of scaling up like other windows do."01/19/17 06:28:17 AMMake it run on FreeBSD"Changes to code:

- Added FreeBSD paragraph in README.md
- Added ""freebsd"" to target_os cfg's in macOS's openpty() function
- Added ""freebsd"" to target_os cfg's in Linux's copypasta
- Added ""freebsd"" to target_os cfg's in Linux's default font
- Apparently TIOCSCTTY is missing from FreeBSD's libc. Added a separate function for that ioctl until libc crate can be fixed."11Works great! Many thanks!johalunjohalun01/12/17 09:16:09 PMMake it run on FreeBSD1
30805/07/17 10:14:23 PMRobert YingIPython appends extra characters on newline"Reproduction:

run IPython and hit Enter.

Expected behavior: IPython prints an empty prompt (e.g. `In [1]:`)
Observed behavior: IPython prints a prompt starting with `[?6c`:

[screenshot](https://www.dropbox.com/s/3pptbsg07y104md/Screenshot%202017-01-05%2017.18.18.png?dl=0)

Behavior cannot be reproduced from inside of `tmux` (maybe `tmux` handles the characters?)"01/14/17 08:56:55 PMset option as meta"@jwilm I picked this up from https://github.com/jwilm/alacritty/issues/62. I got (I think) most of the way there, but would love to hear feedback about the approach I used. The rough pattern is that there's an `event_translator` that can be passed this config, and it is called in the `events::Processor`.

I'm struggling a bit with why the build fails with this error:

```

error[E0282]: unable to infer enough type information about `E`
   --> src/event.rs:197:21
    |
197 |                     Processor::handle_event(
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `E`
...
224 |                     process!(translated);
    |                     --------------------- in this macro invocation
    |
    = note: type annotations or generic parameter binding required

error: aborting due to previous error

error: Could not compile `alacritty`.

To learn more, run the command again with --verbose.
```

I'd be happy to take a different approach than this - you could hardcode everything into the processor, but it seemed like a reasonable place to put a new thing in."1"@jwilm What is the 'identify terminal' response used for?

The only way I'm able to use alacritty with xonsh (and I assume it would work with IPython too therefore) is with this patch:

```patch
diff --git a/src/term/mod.rs b/src/term/mod.rs
index 0829998..7921d61 100644
--- a/src/term/mod.rs
+++ b/src/term/mod.rs
@@ -1178,7 +1178,7 @@ impl ansi::Handler for Term {
     #[inline]
     fn identify_terminal<W: io::Write>(&mut self, writer: &mut W) {
-        let _ = writer.write_all(b""\x1b[?6c"");
+        let _ = writer.write_all(b"""");
     }
     #[inline]
```

Actually, I haven't tried with merely an empty function, I suppose that would be equivalent since I don't believe `write_all` appends a new line? Regardless, I didn't want to open a PR with this since it only removes something which was obviously added for a reason.

I'd be happy to help with fixing this properly, (mainly out of a selfish interest to not need to keep re-applying this patch on every update :slightly_smiling_face:) but I would need a pointer or two on what the purpose of `identify_terminal` is supposed to be; what breaks without it.

Many thanks."tcrayfordTom Crayford01/10/17 12:57:47 PMset option as meta1
31101/06/17 04:28:18 AMColin DeanNot starting on macOS 10.11 with default config"This is the error I receive:

> Config file not found; using defaults
> Alacritty encountered an unrecoverable error:
>
>Error creating glutin::Window; Couldn't create OpenGL context: Some of the requested attributes are not supported

I'm on a 2015 MBP 13"". It started once. I used `ctrl+D` to exit, created a `~/.alacritty.yml` and changed some options, tried to start it, which failed, then removed `~/.alacritty.yml`. It's still failing with the same error message, and I'm 100% certain that my custom options aren't being used because of the first line of the output!"01/23/17 05:14:02 PMStart using the log-crate instead of printing to stdoutI'm not done changing all occurrences, requesting for comments4"And for reasons I completely do not understand, after I quit Atom accidentally, Alacritty started right up, _much_ faster than it had the previous few times.

I cannot explain this, other than perhaps Atom was somehow occupying some level of system resources that Alacritty needed."lukasluegJoe Wilm01/23/17 04:50:24 PM"Remove debug_print! macros

The logging macros should be used instead."1
31401/06/17 07:20:15 PMquininerWrite default config when not found:)01/30/17 04:29:23 AMAdd Arch Linux package install instructions"Includes (relatively) minor touch ups.

Fixes #294."9"Landed in 2befe36

Thanks!"polyzenDaniel M. Capella01/14/17 08:43:29 PM"Add Arch Linux package install instructions

Includes minor touch ups."1
31702/02/17 06:53:22 PMKalle CarlbarkCompile error on FreeBSD 12.0-CURRENT"
$ rustup override set $(cat rustc-version)
info: using existing install for 'nightly-2016-12-16-x86_64-unknown-freebsd'
info: override toolchain for '/usr/home/kc/tmp/alacritty' set to 'nightly-2016-12-16-x86_64-unknown-freebsd'

  nightly-2016-12-16-x86_64-unknown-freebsd unchanged - rustc 1.15.0-nightly (8f02c429a 2016-12-15)
$

$ cargo build --release --verbose
       Fresh log v0.3.6
       Fresh rustc-serialize v0.3.22
       Fresh lazy_static v0.1.16
       Fresh slab v0.3.0
       Fresh semver v0.1.20
       Fresh winapi v0.2.8
       Fresh phf_shared v0.7.20
       Fresh rustc_version v0.1.7
       Fresh cfg-if v0.1.0
       Fresh quote v0.3.10
       Fresh phf v0.7.20
       Fresh byteorder v0.5.3
       Fresh copypasta v0.0.1 (file:///usr/home/kc/tmp/alacritty/copypasta)
       Fresh lazy_static v0.2.2
       Fresh bitflags v0.7.0
       Fresh owning_ref v0.2.2
       Fresh crossbeam v0.2.10
       Fresh winapi-build v0.1.1
       Fresh xml-rs v0.3.5
       Fresh num-traits v0.1.36
       Fresh gcc v0.3.40
       Fresh khronos_api v1.0.0
       Fresh wayland-scanner v0.5.11
       Fresh num-integer v0.1.32
       Fresh xdg v2.0.0
       Fresh gl_generator v0.5.2
       Fresh libc v0.2.18
       Fresh num-iter v0.1.32
       Fresh bitflags v0.6.0
       Fresh bitflags v0.4.0
       Fresh unicode-xid v0.0.3
       Fresh ffi-util v0.1.0 (file:///usr/home/kc/tmp/alacritty/ffi-util)
       Fresh lazycell v0.4.0
       Fresh shared_library v0.1.5
       Fresh pkg-config v0.3.8
       Fresh rand v0.3.15
       Fresh phf_generator v0.7.20
       Fresh filetime v0.1.10
       Fresh net2 v0.2.26
       Fresh phf_codegen v0.7.20
       Fresh num-complex v0.1.35
       Fresh libz-sys v1.0.10
       Fresh void v1.0.2
       Fresh serde v0.8.19
       Fresh freetype-sys v0.4.0
       Fresh itoa v0.1.1
       Fresh serde_test v0.8.19
       Fresh freetype-rs v0.9.0
       Fresh cmake v0.1.19
       Fresh linked-hash-map v0.3.0
       Fresh serde v0.7.15
       Fresh osmesa-sys v0.1.2
       Fresh dtoa v0.2.2
       Fresh smallvec v0.1.8
       Fresh x11-dl v2.11.0
       Fresh serde_json v0.8.4
       Fresh num-bigint v0.1.35
       Fresh parking_lot_core v0.2.0
       Fresh target_build_utils v0.1.2
       Fresh num-rational v0.1.35
       Fresh parking_lot v0.3.6
       Fresh num v0.1.36
       Fresh yaml-rust v0.3.5
       Fresh serde_yaml v0.5.0
       Fresh libloading v0.3.1
       Fresh cgmath v0.7.0
       Fresh errno v0.1.8
       Fresh dlib v0.3.1
       Fresh nix v0.7.0
       Fresh mio v0.6.1
       Fresh wayland-sys v0.5.11
       Fresh expat-sys v2.1.4
       Fresh utf8parse v0.1.0
       Fresh wayland-client v0.5.12
       Fresh vte v0.1.2
       Fresh syn v0.10.3
       Fresh serde_codegen_internals v0.11.1
       Fresh serde_codegen v0.8.19
       Fresh kernel32-sys v0.2.2
       Fresh servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)
       Fresh serde_derive v0.8.19
       Fresh time v0.1.35
       Fresh heapsize v0.3.7
       Fresh servo-fontconfig v0.2.0 (https://github.com/jwilm/rust-fontconfig#419135e5)
       Fresh walkdir v0.1.8
       Fresh tempfile v2.1.4
       Fresh euclid v0.6.8
       Fresh fs2 v0.2.5
       Fresh notify v2.6.3
       Fresh wayland-window v0.2.3
       Fresh font v0.1.0 (file:///usr/home/kc/tmp/alacritty/font)
       Fresh memmap v0.2.3
       Fresh wayland-kbd v0.3.6
       Fresh glutin v0.6.1 (https://github.com/jwilm/glutin?rev=af7fe340bd4a2af53ea521defcb4f377cdc588cf#af7fe340)
   Compiling alacritty v0.1.0 (file:///usr/home/kc/tmp/alacritty)
     Running `rustc --crate-name alacritty src/lib.rs --crate-type lib -C opt-level=3 -g --cfg feature=\""default\"" --cfg feature=\""err-println\"" -C metadata=865a76227b2878af -C extra-filename=-865a76227b2878af --out-dir /usr/home/kc/tmp/alacritty/target/release/deps --emit=dep-info,link -L dependency=/usr/home/kc/tmp/alacritty/target/release/deps --extern notify=/usr/home/kc/tmp/alacritty/target/release/deps/libnotify-c0fc6fc3ea87cb99.rlib --extern libc=/usr/home/kc/tmp/alacritty/target/release/deps/liblibc-e40fb62df1476ed4.rlib --extern serde_derive=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_derive-1a7c73a6a1f28d8e.so --extern parking_lot=/usr/home/kc/tmp/alacritty/target/release/deps/libparking_lot-67b030b321542d1e.rlib --extern cgmath=/usr/home/kc/tmp/alacritty/target/release/deps/libcgmath-696974480f434850.rlib --extern vte=/usr/home/kc/tmp/alacritty/target/release/deps/libvte-f6b7b12e8ea5b53e.rlib --extern serde=/usr/home/kc/tmp/alacritty/target/release/deps/libserde-b9afc739dea07900.rlib --extern serde_json=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_json-435d32eb9dedffbe.rlib --extern xdg=/usr/home/kc/tmp/alacritty/target/release/deps/libxdg-7bfd803f253b707f.rlib --extern serde_yaml=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_yaml-4f089883a7cc1bef.rlib --extern errno=/usr/home/kc/tmp/alacritty/target/release/deps/liberrno-a042128eddea98d4.rlib --extern glutin=/usr/home/kc/tmp/alacritty/target/release/deps/libglutin-99a8d71925d77a45.rlib --extern mio=/usr/home/kc/tmp/alacritty/target/release/deps/libmio-3c214b3211fe56c2.rlib --extern copypasta=/usr/home/kc/tmp/alacritty/target/release/deps/libcopypasta-d5bce7618a7b2040.rlib --extern bitflags=/usr/home/kc/tmp/alacritty/target/release/deps/libbitflags-8a29c74baf48b095.rlib --extern font=/usr/home/kc/tmp/alacritty/target/release/deps/libfont-5741ff76bc0c3142.rlib -L native=/usr/local/lib -L native=/usr/local/lib -L native=/usr/lib -L native=/usr/local/lib`
error[E0432]: unresolved import `copypasta::Clipboard`
  --> src/input.rs:23:17
   |
23 | use copypasta::{Clipboard, Load, Store};
   |                 ^^^^^^^^^ no `Clipboard` in the root

error[E0425]: unresolved name `libc::TIOCSCTTY`
   --> src/tty.rs:141:25
    |
141 |         libc::ioctl(fd, libc::TIOCSCTTY as _, 0)
    |                         ^^^^^^^^^^^^^^^ unresolved name

error[E0425]: unresolved name `openpty`
   --> src/tty.rs:245:27
    |
245 |     let (master, slave) = openpty(win.ws_row as _, win.ws_col as _);
    |                           ^^^^^^^ unresolved name

error[E0277]: the trait bound `config::Font: std::default::Default` is not satisfied
   --> src/config.rs:222:19
    |
222 |             font: Default::default(),
    |                   ^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `config::Font`
    |
    = note: required by `std::default::Default::default`

error: no associated item named `default` found for type `config::Font` in the current scope
    --> src/config.rs:1004:5
     |
1004 |     Font::default().bold
     |     ^^^^^^^^^^^^^
     |
     = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `default`, perhaps you need to implement it:
     = help: candidate #1: `std::default::Default`

error: no associated item named `default` found for type `config::Font` in the current scope
    --> src/config.rs:1008:5
     |
1008 |     Font::default().italic
     |     ^^^^^^^^^^^^^
     |
     = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `default`, perhaps you need to implement it:
     = help: candidate #1: `std::default::Default`

error[E0277]: the trait bound `config::Font: std::default::Default` is not satisfied
   --> src/config.rs:169:17
    |
169 | #[derive(Debug, Deserialize)]
    |                 ^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `config::Font`
    |
    = note: required by `std::default::Default::default`

error: aborting due to 4 previous errors

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib -C opt-level=3 -g --cfg feature=""default"" --cfg feature=""err-println"" -C metadata=865a76227b2878af -C extra-filename=-865a76227b2878af --out-dir /usr/home/kc/tmp/alacritty/target/release/deps --emit=dep-info,link -L dependency=/usr/home/kc/tmp/alacritty/target/release/deps --extern notify=/usr/home/kc/tmp/alacritty/target/release/deps/libnotify-c0fc6fc3ea87cb99.rlib --extern libc=/usr/home/kc/tmp/alacritty/target/release/deps/liblibc-e40fb62df1476ed4.rlib --extern serde_derive=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_derive-1a7c73a6a1f28d8e.so --extern parking_lot=/usr/home/kc/tmp/alacritty/target/release/deps/libparking_lot-67b030b321542d1e.rlib --extern cgmath=/usr/home/kc/tmp/alacritty/target/release/deps/libcgmath-696974480f434850.rlib --extern vte=/usr/home/kc/tmp/alacritty/target/release/deps/libvte-f6b7b12e8ea5b53e.rlib --extern serde=/usr/home/kc/tmp/alacritty/target/release/deps/libserde-b9afc739dea07900.rlib --extern serde_json=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_json-435d32eb9dedffbe.rlib --extern xdg=/usr/home/kc/tmp/alacritty/target/release/deps/libxdg-7bfd803f253b707f.rlib --extern serde_yaml=/usr/home/kc/tmp/alacritty/target/release/deps/libserde_yaml-4f089883a7cc1bef.rlib --extern errno=/usr/home/kc/tmp/alacritty/target/release/deps/liberrno-a042128eddea98d4.rlib --extern glutin=/usr/home/kc/tmp/alacritty/target/release/deps/libglutin-99a8d71925d77a45.rlib --extern mio=/usr/home/kc/tmp/alacritty/target/release/deps/libmio-3c214b3211fe56c2.rlib --extern copypasta=/usr/home/kc/tmp/alacritty/target/release/deps/libcopypasta-d5bce7618a7b2040.rlib --extern bitflags=/usr/home/kc/tmp/alacritty/target/release/deps/libbitflags-8a29c74baf48b095.rlib --extern font=/usr/home/kc/tmp/alacritty/target/release/deps/libfont-5741ff76bc0c3142.rlib -L native=/usr/local/lib -L native=/usr/local/lib -L native=/usr/lib -L native=/usr/local/lib` (exit code: 101)
$
 
I know FreeBSD isn't officially supported but perhaps there's an easy way to fix this? :)"05/01/17 03:52:23 PMAdd Glyph Offset Option to User Configuration"Love the idea of this terminal, great work so far! I really wanted this so I went ahead and added it myself :smile:

Let me know if there's anything I missed for this change, or tests you would like to accompany these changes."27Oh, weird. It looks like our `libc` dependency was either never updated to 0.2.19 or later, or it was reverted at some point. In any case, we should just `cargo update -p libc` and commit that.aarowillAaron Williamson04/27/17 02:28:18 AM"Combine FontOffset and GlyphOffset structs into Delta struct

The two structs are very similar, so there is no reason for them to be
separate. Instead combine them into a single Delta struct, which can be
used to shift a point in a two dimensional plane."1
31901/06/17 04:26:00 PMGrzegorz Antoniak'pty reader' panic: Interrupted System Call when using ^Z and fg/bg"Hello,

I'm using Linux (ArchLinux 64-bit).

When I'm running `alacritty` from other terminal, i.e. gnome-terminal, it runs fine. But when I use `^Z` to suspend `alacritty`'s process and try to put it to background with `^Z` + `bg`, it panics:

```
$ bg
[1]  + 25442 continued  RUST_BACKTRACE=1 ./alacritty
thread 'pty reader' panicked at 'poll ok: Error { repr: Os { code: 4, message: ""Interrupted system call"" } }', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/result.rs:845
stack backtrace:
   1:     0x5632fcd6216c - std::sys::imp::backtrace::tracing::imp::write::h9c41d2f69e5caabf
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x5632fcd6740e - std::panicking::default_hook::{{closure}}::h1f61f3c769fffe7a
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:351
   3:     0x5632fcd67014 - std::panicking::default_hook::hd5bda4e453dfb4be
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:367
   4:     0x5632fcd678b7 - std::panicking::rust_panic_with_hook::hffbc74969c7b5d87
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:555
   5:     0x5632fcd67744 - std::panicking::begin_panic::h3bbdbb2a23440035
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:517
   6:     0x5632fcd67669 - std::panicking::begin_panic_fmt::h34f5b320b0f94559
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:501
   7:     0x5632fcd675f7 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:477
   8:     0x5632fcd9370d - core::panicking::panic_fmt::h1016b85b51d1931f
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x5632fcc526bf - core::result::unwrap_failed::hc1006aeafe0fe326
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/macros.rs:29
  10:     0x5632fcc5aee6 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::he56070339a51619b
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/result.rs:769
                        at /home/antek/dev/source/alacritty/src/event_loop.rs:292
  11:     0x5632fcc4618b - std::panicking::try::do_call::ha092a96b23936108
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
  12:     0x5632fcd6e7aa - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  13:     0x5632fcc580fa - <F as alloc::boxed::FnBox<A>>::call_box::ha8fd9a2a9bb1f7ba
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:357
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  14:     0x5632fcd66704 - std::sys::imp::thread::Thread::new::thread_start::h76badbf9b0ecaf58
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  15:     0x7f03ab61b453 - start_thread
  16:     0x7f03ab1477de - __GI___clone
  17:                0x0 - <unknown>
child finished with error '256'
```

Same thing when I use `fg`.

Exactly the same panic is triggered when suspending the system (`systemctl suspend`) and resuming it. All `alacritty` windows are gone after resuming, terminated with the same panic as above (seems it's triggered by `result.rs:292`'s `expect()` call)."02/01/17 06:02:59 PMImplement save/restore cursor positionThis relatively trivial feature is required by [Heatseeker](https://github.com/rschmitt/heatseeker), which seems to work perfectly on alacritty once this patch is applied.3Thanks for the report. The issue should be resolved on master.rschmittRyan Schmitt01/16/17 08:55:20 AMImplement save/restore cursor position1
32101/06/17 07:26:32 PMMichael MurphyDirectional Keys Don't FunctionBasically, attempting to scroll up and down through history with the up/down keys or completing an auto-completion suggestion with the right direction key does nothing.10/09/17 05:21:00 AMadd toggle for subpixel renderingAs we talked about in issue #101 just removing the lcd filter flag on linux is sufficient to turn subpixel rendering off. I am unable to test the mac changes at the moment.6Default config is now written out. macOS has a default config which should have valid fonts. It's a bit hacky, but it should improve first impressions.leshowEvan Cameron01/15/17 11:52:30 PMadd toggle for subpixel rendering1
32302/03/18 02:58:44 PMj gillesCouldn't find a font with name 'monospace' and style 'slant=Normal, weight=Normal'"```
> target/release/alacritty 
device_pixel_ratio: 2
device_pixel_ratio: 2
width: 2048, height: 1502
Initializing glyph cache
Alacritty encountered an unrecoverable error:

	Couldn't find a font with name 'monospace' and style 'slant=Normal, weight=Normal'
```

OS X El Capitan

This seems fairly odd, because I definitely have monospace fonts on my system. I do have extra fonts installed... somehow, that might have something to do with it?"01/18/17 09:45:34 AMRemove unnecessry feature definitionProc_macro has been stable since 1.15.0, so compiling on 1.16.0-nightly gives warning about unnecessary feature definition. Removed the definition and updated rustc-version to match 1.16.0.-nightly. Fixes #305.1It would be nice if the config file supported a comma-separated list of font names, like CSS.okuuvaOula Kuuva01/17/17 03:06:34 PM"Remove unnecessary feature

Proc_macro has been stable since 1.15.0, attribute no longer needed."1
32601/06/17 07:03:44 PMSiniša BiđinAlacritty fails to start: GL context creation failed"Alacritty crashes immediately upon startup:

```
$ target/release/alacritty       
Alacritty encountered an unrecoverable error:

	Error creating glutin::Window; GL context creation failed
```

I'm on Arch Linux, compiled manually via `cargo`, no compilation issues."02/16/17 05:44:53 PMAdd build_info mod"This outputs version, git version, profile, features and dependencies and their versions. Without the logging-module, the output is too verbose.

> Welcome to alacritty 0.1.0a2cd4b6 debug.
> I was compiled for x86_64-apple-darwin using bitflags 0.7.0, cgmath 0.7.0, clippy 0.0.104, copypasta 0.0.1, errno 0.1.8, font 0.1.0, git2 0.6.3, gl_generator 0.5.2, glutin 0.6.1, lazy_static 0.2.2, libc 0.2.18, mio 0.6.1, notify 2.6.3, parking_lot 0.3.6, serde 0.8.19, serde_derive 0.8.19, serde_json 0.8.4, serde_yaml 0.5.0, toml 0.2.1, vte 0.2.1, xdg 2.0.0
> Enabled features are DEFAULT, ERR_PRINTLN
> device_pixel_ratio: 2
> device_pixel_ratio: 2
> width: 2048, height: 1536
> 

Requesting for comments. The branch also caches the gl_bindings; I'm unsure about this."4No problem :). I appreciate that `glxgears` is available for such tests.lukasluegLukas Lueg01/17/17 07:23:17 PMAdd build_info mod1
32811/03/18 05:31:41 PMLeonid BugaevInclude binaries into releases"Hello!

Nice stuff, but I'm too lame to install Rust. Do not blame me to fast :)

Getting all the development environment to work is damn hard, and you are missing a lot of potential users. Since you are using Rust, it should be straightforward to provide precompiled binaries.

Best wishes, thank you!"01/19/17 06:28:48 AMRemove unnecessary feature definitionProc_macro has been stable since 1.15.0, so compiling on 1.16.0-nightly gives warning about unnecessary feature definition. Removed the definition and updated rustc-version to match 1.16.0.-nightly. Fixes #305. =||= Tagged releases will now automatically produce binaries through travis.okuuvaJoe Wilm01/19/17 05:15:19 AM"Use latest nightly on travis

Pinning should no longer be necessary."1
32901/06/17 07:23:11 PMMichael MiorPanic on exit"I get the following panic when exiting alacritty. Just started, did nothing, then closed.

```
thread 'main' panicked at 'window closed', src/event.rs:133
stack backtrace:
   1:     0x563b804b1cda - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x563b804b70ff - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x563b804b6cfe - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x563b804b75a7 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x563b800add63 - std::panicking::begin_panic::h1dc990fced681ffe
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x563b800b8e8b - <alacritty::event::Processor<N>>::handle_event::hcbab74fd6e05e51a
                        at /home/mmior/apps/alacritty/<panic macros>:3
   7:     0x563b800b95c3 - <alacritty::event::Processor<N>>::process_events::h09b1b556b138156a
                        at /home/mmior/apps/alacritty/src/event.rs:189
   8:     0x563b801310d8 - alacritty::run::h73c8277231d577c8
                        at /home/mmior/apps/alacritty/src/main.rs:135
   9:     0x563b80130135 - alacritty::main::h41659946f30639e3
                        at /home/mmior/apps/alacritty/src/main.rs:55
  10:     0x563b804be46a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  11:     0x563b804b7ce6 - std::rt::lang_start::h832f9067ed8c4dd4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/rt.rs:57
  12:     0x563b80131a52 - main
  13:     0x7f3a0f72c82f - __libc_start_main
  14:     0x563b8008dc28 - _start
  15:                0x0 - <unknown>
```

Full output prior to the crash in case it's relevant

```
Config file not found; using defaults
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
num fonts = 2661
num fonts = 2661
num fonts = 2661
Finished initializing glyph cache in 0.097084392
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 128, 42
width: 1024, height: 768
num_cols, num_lines = 80, 24
width: 644, height: 436
Set Attribute: Bold
Set Attribute: Reverse
Set Attribute: CancelReverse
Set Attribute: Bold
Set Attribute: Reset
carriage_return
carriage_return
[unhandled osc_start]
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='@'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='~'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='.'
[unhandled osc_put] byte='.'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
carriage_return
Set Attribute: Reset
Set Attribute: CancelReverse
Set Attribute: CancelUnderline
clear_screen: Below
Set Attribute: Foreground(Named(Cyan))
Set Attribute: Reset
Set Attribute: Foreground(Indexed(117))
Set Attribute: Reset
Set Attribute: Foreground(Indexed(12))
Set Attribute: Foreground(Indexed(118))
Set Attribute: Foreground(Indexed(12))
Set Attribute: Foreground(Indexed(133))
Set Attribute: Reset
Set Attribute: Foreground(Indexed(77))
Set Attribute: Reset
clear_line: Right
set_mode: CursorKeys
set mode::APP_KEYPAD
set_mode: BracketedPaste
```"01/20/17 07:21:32 AMTest using trust to cross build.1@jwilm Thanks for the quick fix! Confirmed that this is indeed solved :)TrevorSTrevor Strieber01/20/17 07:09:45 AMTest using trust to cross build.1
33107/02/17 03:23:10 AMNoneFreezing after <Alt-N> keys combination on Mac Os"Hi!
Alacritty window is freeezing after I do keys combinations like `<Alt-N>`, `<Alt-H>` and `<Ctrl-Space>`. OS is `Mac OS Sierra10.12.1 (16B2657)`. In source terminal output I see following:
```bash
alacritty/target/release ಠ_ಠ (master) # export RUST_BACKTRACE=1
alacritty/target/release ಠ_ಠ (master) # ./alacritty
Config file not found; using defaults
device_pixel_ratio: 1
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.044627559
set_inner_size: 484px × 316px
width: 484, height: 316
Cell Size: (6 x 13)
PTY Dimensions: Line(24) x Column(80)
thread 'main' panicked at 'window closed', src/event.rs:133
stack backtrace:
   1:        0x101d3993a - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x101d3ba4f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x101d3b6f7 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x101d3bf16 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x101c7eb24 - std::panicking::begin_panic::hac4cfc1999155f3b
   6:        0x101c85ef8 - <alacritty::event::Processor<N>>::handle_event::ha2aefe0613e20e4e
   7:        0x101c9f2e3 - alacritty::run::hb24e186a0c9a26a5
   8:        0x101c9d375 - alacritty::main::h6cfa89d1e4d178de
   9:        0x101d3cd6a - __rust_maybe_catch_panic
  10:        0x101d3c2b6 - std::rt::lang_start::ha9be7b379cf1665e
alacritty/target/release ಠ_ಠ (master) #
```

Also, If I do `<Alt-N>` and switching window focus back and forth- the output message a lil bit differs:
```bash
alacritty/target/release ಠ_ಠ (master) # ./alacritty
Config file not found; using defaults
device_pixel_ratio: 1
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.048570795
set_inner_size: 484px × 316px
width: 484, height: 316
Cell Size: (6 x 13)
PTY Dimensions: Line(24) x Column(80)
2017-01-06 22:21:39.000 alacritty[87263:31585840] IMKInputSession presentFunctionRowItemTextInputViewWithEndpoint:completionHandler: : *NO* NSRemoteViewController to client, NSError=Error Domain=NSCocoaErrorDomain Code=4097 ""connection from pid 0"" UserInfo={NSDebugDescription=connection from pid 0}, com.apple.inputmethod.EmojiFunctionRowItem
thread 'main' panicked at 'window closed', src/event.rs:133
stack backtrace:
   1:        0x1085e893a - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x1085eaa4f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x1085ea6f7 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x1085eaf16 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x10852db24 - std::panicking::begin_panic::hac4cfc1999155f3b
   6:        0x108534ef8 - <alacritty::event::Processor<N>>::handle_event::ha2aefe0613e20e4e
   7:        0x10854e2e3 - alacritty::run::hb24e186a0c9a26a5
   8:        0x10854c375 - alacritty::main::h6cfa89d1e4d178de
   9:        0x1085ebd6a - __rust_maybe_catch_panic
  10:        0x1085eb2b6 - std::rt::lang_start::ha9be7b379cf1665e
alacritty/target/release ಠ_ಠ (master) #
``` 

*PS*: Great job, looks like Alacritty indeed smoother than iTerm!

With best regards,
Yan"08/20/17 04:55:46 PMAdd alpha option to set background transparency"Works on OS X, but not on Linux due to a glutin bug: https://github.com/tomaka/glutin/issues/639.

There are a few things I'd like to clean up/look into, but I figure I can put it out to start review. Things I'd like to do:
* Add a validation check to the alpha read from the config file to make sure it's within 0.0 and 1.0, inclusive.
* Not sure if `alpha` is the best config option name for this, so decide on the best name.
* Not sure if `alpha` values should be a float from 0.0 to 1.0, or integers or whatever.

Addresses issue #232."33Closing in favor of #93.mystalGabriel Martinez01/20/17 04:30:54 PM"Add background_opacity option to set terminal transparency

The option is an Alpha struct that ensures that the contained float is
between 0.0 and 1.0. Background colors are multiplied by the opacity
to properly alpha blend them."1
33502/03/18 03:00:54 PMMichael MiorImprove usage of font metrics"I get the output below when using [Roboto Mono](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/RobotoMono/complete/Roboto%20Mono%20Nerd%20Font%20Complete.ttf).

![image](https://cloud.githubusercontent.com/assets/82501/21730051/e654cdc4-d41b-11e6-954e-431928c142ea.png)

Compare this to the output I get from the same under `mate-terminal`. Also of note is that colours are missing in the alacritty output.

![image](https://cloud.githubusercontent.com/assets/82501/21730092/18a9d88c-d41c-11e6-8252-e034fcdaa965.png)"01/23/17 04:59:55 PMDynamically generate ref tests"This uses the rustc-test crate, a copy of the standard test crate, to
dynamically create tests for each reference test. No need to remember to
update the macro, just add the directory to ref!

It also removes the line_wrap test, as it was never actually enabled and doesn't pass :( cc @mbrumlow"3This should be fixed with 59b561b440060e7b0d13160fb69519d127e6c687.sfacklerJoe Wilm01/23/17 04:06:09 PM"Capture test output by default

The `rustc-test` crate has this feature disabled by default causing all
of the test `println!` output to be displayed."1
33601/07/17 05:55:39 PMNormanAdd instructions for VoidLinux in README.md01/21/17 08:04:56 PMMention talk at Rust Meetup in README.md1Merged in b8ab5be917b48898f4a25a553dc529b1a176c5b7lukaslueglukaslueg01/21/17 06:00:07 PMMention talk at Rust Meetup in README.md1
34004/04/17 03:44:24 AMinsunaalacritty does not draw background color for (some) invisible characters"For example in htop.
![alacritty_bg_example](https://cloud.githubusercontent.com/assets/3718129/21730333/8a3f97ce-d44f-11e6-98e5-e4ac73e3a115.png)
Easily visible in this command:
```zsh
yes ""$(seq 16 231)"" | while read i; do printf ""\x1b[48;5;${i}m\n""; sleep .02; done
```
because it is entirely invisible in alacritty, but visible in other terminal emulators"01/24/17 04:38:40 PMUse clap as cli parser."Relates to https://github.com/jwilm/alacritty/issues/287

Help output:
```
alacritty 0.1.0
GPU-accelerated terminal emulator

USAGE:
    alacritty [FLAGS] [OPTIONS]

FLAGS:
    -h, --help            Prints help information
        --print-events
        --ref-test        Generates ref test
    -V, --version         Prints version information

OPTIONS:
    -d, --dimensions <columns> <lines>    Defines the window dimensions
    -t, --title <title>                   Defines the window title [default: Alacritty]
```"5@peyloride you'll want to follow #123kurnevskyKurnevsky Evgeny01/22/17 09:08:53 AMUse clap as cli parser.1
34701/06/17 08:42:35 PMBen MylesAdd README instruction for Fedora01/24/17 05:08:01 AMstd process command"This changes to use std::process::Command instead of libc::execpv. Should compile with 1.15 and newer.

* I need some help to figure out how to use slave/master fds in both child and parent.
* set_controlling_terminal is needed on ubuntu.. Should I change the comment about it only beeing needed on bsd?
* Should I store `child` globally instead of `PID`?"6Here's a working [RPM spec](https://gist.github.com/poppyschmo/9acc8f15d0efe89cc9831e0cd2f62968) for Fedora.NickeZNiklas Claesson01/23/17 08:00:52 AMChange to process::Command1
34901/09/17 12:20:13 AMAndreas TolfsenUnable to type Unicode characters on 105-key Norwegian (bokmål) keyboard"alacritty is apparently unable to type Unicode characters, such as æøå. On the empty lines in the attached screenshot, I’ve tried typing “æøå“.

Interestingly, it _is_ possible to paste Unicode characters into the terminal.

![screenshot-2017-01-06-194218](https://cloud.githubusercontent.com/assets/399120/21730571/3ece0778-d448-11e6-939c-d6c87e536903.png)"06/11/17 08:08:24 PMAdd cursor type"This PR basically will solve #171 in future because right now it's still kinda bad looking patch and I hope I'll implement everything in a right way in couple days.

What works right now:

- [x] Specifying from config file
- [x] Steady block
- [x] Steady beam
- [x] Steady underline
- [x] Fix rendering

The way it works right now is pretty hacky and I hope we will manage it with @jwilm because I don't really like how it works right now and I still have a couple of bugs so...yeah."41@theduke thximpowskiArtem Biryukov02/13/17 04:20:33 PMBranch update and related fixes1
35101/07/17 05:50:13 AMDario NieuwenhuisCrash on exiting top"How to reproduce:
- Launch alacritty
- run `top`
- Press q, or Control+C

Full log + stacktrace: http://pastebin.com/raw/pHszgNbd

I'm running Arch Linux. `top` comes from the package `procps-ng-3.3.12-1`. 

It also happens if I SSH to an Ubuntu server and exit top."01/25/17 04:50:30 PMadd args to alacritty config"This pull request builds on my previous pull request #347 

It implements args in the config file like this:

```yaml
shell:
  program: /bin/bash
  args:
    - --login
```"2Going to close this until someone says otherwise.NickeZNiklas Claesson01/23/17 07:10:26 PM"Implement argument passing in config

This commit implements the following syntax in the config file:

```yaml
shell:
  program: /bin/bash
  args:
    - --login
    - --norc
```"1
35201/07/17 05:56:51 AMWilliam SwansonCannot copy text on OS X"When highlighting text and pressing the Command-C keyboard shortcut, I get:

    Error storing selection to clipboard. Failed to create pasteboard: [NSPasteboard generalPasteboard] failed

This is on OS X 10.12.2 with the latest Alacritty master (commit 7d07b5a1655dc9d1cda62f1dd3005b966c0fa76a)."01/30/17 03:30:47 PMPaste uses primary copy bufferI'm open to feedback; this is my first PR for a Rust project. Thanks to @jimmycuadra for help.3cool.. can you please close the issue?jc00kejc00ke01/20/17 05:55:38 AM"Load the primary clipboard when pasting

Paste & PasteSelection are not quite the same. The former should be
pulling from the main clipboard where the latter does not."1
35509/28/18 08:18:31 PMSteve TerpeScrolling broken in `ed` (OS X 10.11.6)"Steps to reproduce:

- `ed [FILE]`
- `,n`
- Scroll either up or down with the trackpad

Result: See photo attached
Expected: The terminal scrolls up and down correctly


<img width=""606"" alt=""screen shot 2017-01-06 at 11 59 30 am"" src=""https://cloud.githubusercontent.com/assets/678398/21731212/247407fa-d408-11e6-949e-ae34bc72606a.png"">

Related bug: scrolling in general

Steps to reproduce:

- `cat [LONGFILE]`
- Scroll up with trackpad

<img width=""610"" alt=""screen shot 2017-01-06 at 12 04 01 pm"" src=""https://cloud.githubusercontent.com/assets/678398/21731231/3b9770de-d408-11e6-826a-128790cab298.png"">

"01/28/17 08:25:58 PMAdd cli -e optionI've added support for -e option and done some minor fixes to the config file I forgot in the last PR.7This issue has been resolved for a while now. Scrolling should work in `ed` and other terminal applications.NickeZNiklas Claesson01/24/17 11:19:45 PMAdd support for -e argument1
35601/06/17 09:02:11 PMJosh LeveretteFix crash when exiting `top`"This is a small change that fixes a highly-reproducible (at least on my end) crash that would occur when exiting `top`. The cursor would be set one line after the end of the screen, and then `clear_line` would be called. This would result in a panic on the self.grid `IndexMut` call.

Now, the visual behavior is identical to what I experience in other terminal emulators. When exiting `top`, the contents should remain behind, but a new line pops up at the bottom to allow you to continue interacting with the terminal.

This probably fixes other situations as well. It might be good to add some similar limiting to `goto_line` and similar functions."01/26/17 04:43:55 PMOptimize glyph cache access"Loading a glyph from the cache is a very hot operation in the renderer.
The original implementation would first check if a glyph was loaded and
then call `get()` which would have to search a second time. This showed
up as a very slow point in profiles.

This patch addresses glyph cache access in two ways: by using a faster
hasher optimized for small keys (fnv), and by using the entry API for
fetching a cached glyph. The `fnv` hasher is faster than the default and
is very efficient for small keys. Using the entry API on the HashMap
means only 1 lookup instead of two. The entry API has a downside where
the key needs to get cloned on fetches.

Reducing the GlyphKey width to 64-bits helps in both areas. Copying an
8-byte wide type is very cheap and thus limits downside of the entry
API. The small width also helps with the hasher performance.

Over all, this patch reduced typical render times by several hundred
microseconds on a 2013 MacBook Pro with a full screen terminal full of
text." =||= "This is great; thanks!

> It might be good to add some similar limiting to goto_line and similar functions.

Totally right. I'll open another issue."jwilmJoe Wilm01/13/17 06:03:51 PM"Optimize glyph cache access

Loading a glyph from the cache is a very hot operation in the renderer.
The original implementation would first check if a glyph was loaded and
then call `get()` which would have to search a second time. This showed
up as a very slow point in profiles.

This patch addresses glyph cache access in two ways: by using a faster
hasher optimized for small keys (fnv), and by using the entry API for
fetching a cached glyph. The `fnv` hasher is faster than the default and
is very efficient for small keys. Using the entry API on the HashMap
means only 1 lookup instead of two. The entry API has a downside where
the key needs to get cloned on fetches.

Reducing the GlyphKey width to 64-bits helps in both areas. Copying an
8-byte wide type is very cheap and thus limits downside of the entry
API. The small width also helps with the hasher performance.

Over all, this patch reduced typical render times by several hundred
microseconds on a 2013 MacBook Pro with a full screen terminal full of
text."1
36401/06/17 08:59:27 PMAlex MikhalevAdded a freedesktop.org desktop entry and instructions for using it to README.md01/26/17 03:32:54 PMfix config file1"@amikhalev I guess you mean the latest Wayland issue. I would say that before wayland `.profile` or `.bash_profile` or equivalent was always sourced when logging in. https://lwn.net/Articles/709769/

I installed alacritty with cargo install and it works as expected."NickeZNiklas Claesson01/25/17 11:18:22 PMfix config file1
36809/28/18 08:51:22 AMKon RybnikovSupport for Alt+key (option as meta)"I'm actually on macOS and not sure how to correctly describe the issue from technical side.

When in terminal, you can go forward/backward by pressing ctrl+f/ctrl+b and it works in Alacritty, and usually you can jump between words by pressing alt(option)+f/alt(option)+b, but it doesn't work right now."02/08/17 05:04:19 AM[#30] Semantic / Smart Selection"I'm very new to Rust, so if there is a better way to do this, let me know!

This PR is to implement semantic (or smart) selection through double, or triple click events (#30).

TODOs:
 - [x] Implement Double Click handler
 - [x] Implement Triple Click handler
 - [x] Implement Semantic selection
 - [x] Implement `BidrectionalIterator`
 - [x] Add configurable definitions for selection stopping characters
 - [x] Add configurable double (and triple) click threshold
 - [x] Add unit tests for semantic selection
 - [x] Add unit tests for double / triple click
 - [x] Add unit tests for `BidirectionalIterator` / `GridIterator`"20I have the same issue as @manu0600 .xyin96Xiaoyu Yin01/15/17 01:53:48 AM"Semantic Selection

Fix tests and add line select

Refactor BidirectionalIter to remove if blocks

Allow for cells tagged with WRAPLINE to continue expanding the selection

Reorganize config into structs

Add test coverage that callbacks are called

Cleanup mouse config

- Uses Duration type for ClickHandler::threshold
- Removes `action` property from ClickHandler--this can be added in a
  backwards compatible way later on
- Renames ClickState::DblClick to DoubleClick

fixup! Cleanup mouse config"1
37101/08/17 03:12:23 AMMartin HammerchmidtCrash on running apt install"Hello :) I ran the command ```sudo apt install tmux``` and alacritty crashed.
Here are the last 5 lines of the output I got, I have nothing more.

    [unimplemented] save_cursor_position
    [unimplemented] restore_cursor_position
    thread 'pty reader' panicked at 'index out of bounds: the len is 86 but the index is 18446744073709551615', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
    note: Run with `RUST_BACKTRACE=1` for a backtrace.
    child finished with error '256'"01/30/17 01:29:57 AMUpdate to serde 0.9 and serde-yaml 0.6.1Thanks for the updates; closingjwilmJoe Wilm01/30/17 01:05:46 AMUpdate to serde 0.9 and serde-yaml 0.6.1
37307/02/17 03:44:33 PMRett Bergalacritty freezes i3wm when alacritty is killed"Love the app.

I am having an issue where alacritty sometimes freezes the i3 window manager (can still move the mouse, but can't type or change workspaces) when I ""kill"" alacritty via i3.

I was wondering if there was somewhere where I could find logs to see what might be going on?"01/30/17 06:57:37 PMAdd colors for Solarized Light3Thanks for the feedback!jc00kejc00ke01/30/17 06:30:37 PMAdd colors for Solarized Light1
37401/06/17 11:45:36 PMJosh LeveretteUpdate README.md02/06/17 07:44:04 PMSend mouse wheel commands only if they're supported"This seems to work for me. However should other mouse modes also be checked?

Fixes #48"4Oh, shoot. I missed this PR completely and ended up adding this myself. Sorry about that... there's been a ton of activity on the issue tracker today.siiptuoTuomas Siipola01/31/17 09:45:36 PM"Send mouse wheel commands only if they're supported

Fixes #48"1
37503/08/19 12:16:09 AMEspen HenriksenWayland support"As you say in the [README][1], wayland is not supported as of now. However, I would still like to file a tracking issue for this so that people interested (like me) can be notified when this is built. Right now alacritty panics because I am using a wayland wm.

> Alacritty is currently on a fork of glutin that needs some updates to work with Wayland

Care to comment on what remains to be done? Maybe someone can pitch in

EDIT:
It is possible to run alacritty on a Wayland desktop today if you have XWayland and run alacritty like this:
`env WAYLAND_DISPLAY= alacritty`

[1]: https://github.com/jwilm/alacritty#faq"02/02/17 05:07:02 PMImplement save/restore cursor position"This passes the vttest for save and restore cursor position. The
implementation was done according to:

    http://www.vt100.net/docs/vt510-rm/DECSC.html

As of yet, there are a few things not supported by the terminal which
should otherwise be saved/restored.

![image](https://cloud.githubusercontent.com/assets/4285147/22519473/3999ce1e-e865-11e6-8e3e-e429feff6b4d.png)

Supercedes #319 "4Since Alacritty's Wayland support is now quite usable thanks to the work done by winit, this issue does not appear to be relevant anymore. Specific problems should be handled in separate issues.jwilmJoe Wilm02/01/17 05:55:23 PM"Implement save/restore cursor position

This passes the vttest for save and restore cursor position. The
implementation was done according to:

    http://www.vt100.net/docs/vt510-rm/DECSC.html

As of yet, there are a few things not supported by the terminal which
should otherwise be saved/restored.

vte was updated for a fix with CSI param parsing"1
37601/06/17 09:18:21 PMDavid SandersFont rendering overlap on OS X 10.11.6"![screen shot 2017-01-06 at 1 38 15 pm 2](https://cloud.githubusercontent.com/assets/791437/21732191/8c5b4e7a-d415-11e6-8b18-1a04f5d9bdfd.png)

Visible in screenshot."02/06/17 07:47:03 PMFix rendering of underline spanning multiple words"Before this change there were gaps between words. To fix this underline is
rendering also on those empty cells."1Nice, sounds like a great solution.  I love this project, by the way.  I've often been frustrated by the overhead of using iTerm2 to run tmux.  This may very well become my new go-to terminal on OS X.siiptuoTuomas Siipola02/02/17 02:08:11 PMCheck cell's underline flag in is_empty method1
37704/19/18 11:39:16 PMDavid SandersTmux prefix command (ctrl+space) unrecognized on OS X 10.11.6I have my tmux prefix command bound to `ctrl+space`.  Alacritty doesn't seem to recognize this command or pass it through to tmux when I issue it on my keyboard.  Additionally, issuing `ctrl+space` appears to freeze alacritty and it won't accept any further input.05/06/17 03:53:14 PMAdd terminal window padding support"- [x] Basic support
- [x] Add configuration
- [x] Fix underflow error

Fixes #343"7In a similar vein (I think), Ctrl + Cmd + Space opens the Emoji keyboard on my Mac. Works in iTerm, but not Alacritty. I use emojis with every git commit, so a pretty big deal for me 😬siiptuoTuomas Siipola02/01/17 09:13:06 PMAdd window padding support1
37810/09/17 05:21:00 AMEvan CameronFont not rendering smoothly like screenshot"Thanks for your work on this, it's great to have something promising for a new term.

Unfortunately the output of alacritty appears really 'chunky', for lack of a better word, when compared to my regular terminal. I'm not quite sure why.

alacritty:
![alacritty](https://cloud.githubusercontent.com/assets/1128302/21732708/cf24598c-d428-11e6-9f29-3de85949c648.png)

urxvt:
![urxvt](https://cloud.githubusercontent.com/assets/1128302/21732707/cf21d40a-d428-11e6-967c-9385ea26ae06.png)

I thought maybe it just wasn't working yet, until I saw your screenshot and the fonts looked really smooth. If I can give you any more information to debug please ask."02/02/17 05:25:10 PMDecouple input processing from Term"Should make input processing much more easily tested. Going to clean this up a bit in the morning before merging.

cc @xyin96
"6Haha! Yes I did mention it, it's all good. I'll revert those changes and submit the PRjwilmJoe Wilm02/02/17 06:13:08 AM"Decouple input processing from Term

Should make input processing much more easily tested."1
38101/08/17 04:50:51 AMBrian MuhiaThread 'pty reader' panicked at 'not yet implemented'"I just built alacritty (on Arch Linux, with a fresh `nightly rust`), and an attempt at running it with `~/alacritty/target/release/alacritty`   failed with  

```bash
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
num fonts = 144
num fonts = 144
num fonts = 144
Finished initializing glyph cache in 0.010874721
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='@'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='~'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
thread 'pty reader' panicked at 'not yet implemented', /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/api/wayland/window.rs:26
note: Run with `RUST_BACKTRACE=1` for a backtrace.

thread 'pty reader' panicked at 'not yet implemented', /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/api/wayland/window.rs:26
stack backtrace:
xkbcommon: ERROR: Key ""<LFSH>"" added to modifier map for multiple modifiers; Using Lock, ignoring Shift
thread 'main' panicked at 'not yet implemented', /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/api/wayland/window.rs:26
   1:     0x55c2b68582ca - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55c2b685d63f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x55c2b685d23e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x55c2b685dae7 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x55c2b67615d4 - std::panicking::begin_panic::h1dc990fced681ffe
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x55c2b677acd6 - alacritty::display::Notifier::notify::h3a4ca8681676ba22
                        at /home/brian/alacritty/<panic macros>:3
                        at /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/platform/linux/api_dispatch.rs:68
                        at /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/window.rs:556
                        at /home/brian/alacritty/src/window.rs:293
                        at /home/brian/alacritty/src/display.rs:113
   7:     0x55c2b674c049 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h363f1a7097a6e863
                        at /home/brian/alacritty/src/event_loop.rs:219
                        at /home/brian/alacritty/src/event_loop.rs:308
   8:     0x55c2b673762b - std::panicking::try::do_call::h389b90bf0f081aa8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:295
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:458
   9:     0x55c2b6864a2a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  10:     0x55c2b6749bba - <F as alloc::boxed::FnBox<A>>::call_box::h4877e9fed6201b2d
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:287
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  11:     0x55c2b685c934 - std::sys::imp::thread::Thread::new::thread_start::h460a0adc61139b06
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  12:     0x7fcc51b5a453 - start_thread
  13:     0x7fcc516867de - __GI___clone
  14:                0x0 - <unknown>
stack backtrace:
   1:     0x55c2b68582ca - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55c2b685d63f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x55c2b685d23e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x55c2b685dae7 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x55c2b67615d4 - std::panicking::begin_panic::h1dc990fced681ffe
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x55c2b677dfd4 - alacritty::display::Display::new::{{closure}}::habc75f3d435ea1d8
                        at /home/brian/alacritty/<panic macros>:3
                        at /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/platform/linux/api_dispatch.rs:68
                        at /home/brian/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/window.rs:556
                        at /home/brian/alacritty/src/window.rs:293
                        at /home/brian/alacritty/src/display.rs:220
   7:     0x55c2b67fecb7 - glutin::api::wayland::window::Window::next_event::h27aa352e5ab71059
child finished with error '1'

```"02/03/17 05:40:40 AMFix bug introduced with save/restore patch"Switching between main and alt grids should no longer clear the main
grid." =||= The comment linked by @polyzen gives a workaround. As we already [have a tracking issue](https://github.com/jwilm/alacritty/issues/97) for Wayland support, I'm going to close this as a duplicate.jwilmJoe Wilm02/03/17 04:51:14 AM"Fix bug introduced with save/restore patch

Switching between main and alt grids should no longer clear the main
grid."1
38201/04/19 05:11:29 PMDavid RomanConfig file not readed if XDG_RUNTIME_DIR is not present"Hi.
I copied the yml file to my home, executed alacritty and the config file was not read (as it should) but showed an error **_error: XDG_RUNTIME_DIR not set in the environment._**  Then, after running _export XDG_RUNTIME_DIR=""/tmp""_ it will read my ~/.alacritty.yml . 

I don't know what was the problem, but It don't feels like it was the right behavior.

Thank you.

PD: Nice work :) "02/03/17 04:11:20 PMAlacritty now compiles on stable Rustbenchmarks still need nightly, but that's just for development. =||= I'm uncertain when this was resolved, but unsetting `XDG_RUNTIME_DIR` and starting Alacritty seems to work now. If that's not the case for anyone else, please let me know and I'll re-open.jwilmJoe Wilm02/03/17 04:50:48 AMAlacritty now compiles on stable Rust :tada:1
38401/09/17 12:49:35 AMNonePanick when cat-ing a torrent file"With the following torrent http://releases.ubuntu.com/16.04/ubuntu-16.04.1-desktop-amd64.iso.torrent when I do
```
cat ubuntu-16.04.1-desktop-amd64.iso.torrent
```
I get
```
[unhandled] execute byte=89
[unhandled] execute byte=04
[unhandled] execute byte=03
[unhandled] execute byte=12
[unimplemented] move_down_and_cr: 1
[unhandled] execute byte=11
[unhandled] execute byte=8c
thread 'pty reader' panicked at 'index out of bounds: the len is 24 but the index is 28', /Users/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-mac/build/src/libcollections/vec.rs:1371
stack backtrace:
   1:        0x10eafdfaa - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x10eb0018f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x10eaffe37 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x10eb00656 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x10eb004a4 - std::panicking::begin_panic::h091a980eb2ddd29a
   6:        0x10eb00412 - std::panicking::begin_panic_fmt::h063a49cc71e3d103
   7:        0x10eb00377 - rust_begin_unwind
   8:        0x10eb28530 - core::panicking::panic_fmt::h59374b8a88ef3536
   9:        0x10eb284a8 - core::panicking::panic_bounds_check::h78cc4243bb390438
  10:        0x10ea5b7da - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::he49de47c781c0e03
  11:        0x10ea53808 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::hac156881432fe821
  12:        0x10ea4162b - std::panicking::try::do_call::h2c88261f55e7a440
  13:        0x10eb0152a - __rust_maybe_catch_panic
  14:        0x10ea516ba - <F as alloc::boxed::FnBox<A>>::call_box::he707c721e5ef5370
  15:        0x10eaff864 - std::sys::imp::thread::Thread::new::thread_start::haeb202749da670ee
  16:     0x7fff8a8dd99c - _pthread_body
  17:     0x7fff8a8dd919 - _pthread_start
child finished with error '256'
```

It maybe because it's not valid UTF8?

At 8d3f5f4e179b6fe55617dc72fe60fa1bdfd9b014

Thank you!"02/03/17 08:59:19 PMreadme: Remove stray lineNo longer needed thanks to #382.5Closing as dupe of #63 polyzenDaniel M. Capella02/03/17 08:10:39 PM"readme: Remove stray line

No longer needed thanks to #382."1
38507/02/17 01:14:24 AMNetVertically center text in line"There's not enough padding between the baseline and the bottom of the line. Here's how it looks right now:

<img width=""311"" alt=""screen_shot_2017-01-06_at_4_31_40_pm"" src=""https://cloud.githubusercontent.com/assets/6983821/21733687/d1a585aa-d42d-11e6-8a25-310cc24beb44.png"">

Here's how it should look:

<img width=""123"" alt=""screen shot 2017-01-06 at 4 33 57 pm"" src=""https://cloud.githubusercontent.com/assets/6983821/21733731/023c12c4-d42e-11e6-94c0-5539fba46197.png"">

Ideally this would be customizable."02/08/17 05:15:36 AMAdd visual bell support"Hi @jwilm,

This project is awesome 👍. I haven't written Rust before, but I wanted to try my hand at a small feature. I think this change is not quite ready, since `draw` is called lazily (so the bell will not be smooth). If you are interested in accepting this feature, perhaps you could share some tips on how to make the right changes? Commit message below.

Thanks,
Mark

***

This commit adds support for a visual bell. Although the Handler in src/ansi.rs warns ""Hopefully this is never implemented"", I wanted to give it a try. Two new config options are added, with sensible defaults:

* `visual_bell`, which defaults to `true`, and
* `visual_bell_duration`, which defaults to 150 ms.

The visual bell is modeled by VisualBell in src/display.rs. It has a method to ring the bell, `ring`, and another method, `value`. Both return the ""value"" of the bell, which ramps down from 1.0 to 0.0 at a rate set by `duration`."9We've reworked how we consume font metrics, and text now appears at a sensible location within the line.markandrusMark Andrus Roberts02/03/17 11:34:52 PM"Add visual bell support

This commit adds support for a visual bell. Although the Handler in src/ansi.rs
warns ""Hopefully this is never implemented"", I wanted to give it a try. A new
config option is added, `visual_bell`, which sets the `duration` and `animation`
function of the visual bell. The default `duration` is 150 ms, and the default
`animation` is `EaseOutExpo`. To disable the visual bell, set its duration to 0.

The visual bell is modeled by VisualBell in src/term/mod.rs. It has a method to
ring the bell, `ring`, and another method, `intensity`. Both return the
""intensity"" of the bell, which ramps down from 1.0 to 0.0 at a rate set by
`duration` and `animation`.

Whether or not the Processor waits for events is now configurable in order to
allow for smooth drawing of the visual bell."1
38707/02/17 01:13:49 AMSam PhillipsMacOS ls columns not aligned"When running `ls` in an alacritty window on MacOS the columns are not aligned.  If I use the same window and ssh to a Linux system the columns are aligned.

Alacritty vs. iTerm2 (same directory)
![Alacritty vs. iTerm2](https://cloud.githubusercontent.com/assets/433662/21733750/f7482a2e-d414-11e6-8005-9989d0d6fb24.png)

Remote Linux system in Alacritty
![Linux system in Alacritty](https://cloud.githubusercontent.com/assets/433662/21733754/fbfbc0a8-d414-11e6-9a66-cbc7e56c6d11.png)
"02/04/17 04:01:14 AMFix bug with restore cursor"The saved cursor position could previously end up outside of the grid if
the terminal was resized to be smaller and then calling a restore.
Restore now ensures the cursor line and column are within grid bounds."3This has been resolved for some time.jwilmJoe Wilm02/04/17 03:42:25 AM"Fix bug with restore cursor

The saved cursor position could previously end up outside of the grid if
the terminal was resized to be smaller and then calling a restore.
Restore now ensures the cursor line and column are within grid bounds."1
39107/02/17 01:13:14 AMŁukasz Jan NiemierSupport for image viewing in shellLike iTerm2. This would be really handy.02/07/17 04:45:18 AMConfigurable window dimensions"I saw #370 and decided to have a go at implementing this.

Will use a default of 80x24 cols x lines if neither config file or argument options are specified.
Argument options will override config options if specified."6"> @maximbaz hello, could you please provide a bit more details about how did you configured your ranger config for that?

`sudo pip3 install ueberzug`
rc.conf:
`set preview_images_method ueberzug`"DivineGodAnders Rasmussen02/05/17 10:01:26 AM"Configurable window dimensions

Adds a configuration option `dimensions` which will set initial
window size by columns and lines. Changes to the config file will
require restart.

resolves #370"1
39301/10/17 10:45:08 PMRobyn SpeerThai text displayed incorrectly"I work with multilingual data. I was excited to have a terminal that would not slow to a pathetic crawl just because it was asked to show some words in Thai, and saw that Alacritty was doing pretty well at keeping up the frame rate in uncooperative languages.

Two problems, though, which might be related:

* The text rendering in Thai doesn't look right. I think the characters are taking up more character cells than they're supposed to, wrapping in unexpected places, and generally getting smeared all over the screen.
* After a few seconds of displaying Thai text, it crashes.

I'm running on Ubuntu 16.04, and my font is Unifont.

Here's the backtrace:

```
thread 'pty reader' panicked at 'index out of bounds: the len is 231 but the index is 234', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
stack backtrace:
   1:     0x55e76d0b8fca - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55e76d0be33f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x55e76d0bdf3e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x55e76d0be7e7 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x55e76d0be674 - std::panicking::begin_panic::h814f60faa3ce8314
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x55e76d0be599 - std::panicking::begin_panic_fmt::hf4f7d700fa077693
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:499
   7:     0x55e76d0be527 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:475
   8:     0x55e76d0ea5ed - core::panicking::panic_fmt::hee207ff21fb62166
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x55e76d0ea598 - core::panicking::panic_bounds_check::hca28eae069525a56
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x55e76cfb4572 - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::hc3f37ea7fe292a15
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
                        at /home/rspeer/src/alacritty/src/grid.rs:311
                        at /home/rspeer/src/alacritty/src/grid.rs:225
                        at /home/rspeer/src/alacritty/src/term/mod.rs:638
                        at /home/rspeer/src/alacritty/src/ansi.rs:438
  11:     0x55e76cfad00d - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h48d857cbcad6c3a4
                        at /home/rspeer/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:167
                        at /home/rspeer/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /home/rspeer/src/alacritty/src/ansi.rs:85
                        at /home/rspeer/src/alacritty/src/event_loop.rs:211
                        at /home/rspeer/src/alacritty/src/event_loop.rs:308
  12:     0x55e76cf9868b - std::panicking::try::do_call::h0f1252efbc6ce7c2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:295
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:458
  13:     0x55e76d0c572a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  14:     0x55e76cfaac3a - <F as alloc::boxed::FnBox<A>>::call_box::h356923938038b1e5
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:287
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  15:     0x55e76d0bd634 - std::sys::imp::thread::Thread::new::thread_start::h460a0adc61139b06
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  16:     0x7f50f3fc36b9 - start_thread
  17:     0x7f50f3ae382c - clone
  18:                0x0 - <unknown>
child finished with error '1'
```

The Thai text I've got is just sampled from the Common Crawl, so I can point you to the exact file I'm trying to display:

https://s3.amazonaws.com/uploads.hipchat.com/11494/33245/TSThk9XemC0LX6B/thai-example.txt"02/06/17 02:53:53 AM"Add ""Quit"" action to allow exit on a Cmd-W or Cmd-Q""Adds a new ""Quit"" action and binds it to Cmd-W and Cmd-Q on Mac OS in an
attempt to make Alacritty feel more like a ""normal"" citizen of the
operating system. Alternatives like Ctrl-D are okay, but I usually want
to leave my shells nested within Tmux open even if I exit my terminal.
It's also largely selfish: I've built up muscle memory over the years
that takes my fingers to Cmd-Q first (and I suspect I'm not the only
one).

The implementation for an exit is copied from `event.rs` which notably
is already tagged with a FIXME. It seems that `tty.rs` contains a
`process_should_exit` system to help handle a `SIGCHLD`, and it's
possible that these two exit implementations should be merged together.
I could probably tackle that as my next project.

As mentioned in #218, Alacritty can't really spawn other windows right
now, so I've tied in Cmd-W as simply another synonym for quitting until
that's implemented.

One other thought: I'm not super convinced on the approach of having all
key bindings configured directly from a Yaml file and without any
defaults. You can see that even here it will be a bit of a problem
because there may be hundreds of Mac users out there who won't get this
key binding until they port it in manually or bootstrap from a fresh
version of the repository's default configuration file.

Fixes #218."2Ah cool, and now the issues are linked so your test file is easy to find. Thanks!brandurBrandur02/06/17 02:32:43 AM"Add ""Quit"" action to allow exit on a Cmd-W or Cmd-Q

Adds a new ""Quit"" action and binds it to Cmd-W and Cmd-Q on Mac OS in an
attempt to make Alacritty feel more like a ""normal"" citizen of the
operating system. Alternatives like Ctrl-D are okay, but I usually want
to leave my shells nested within Tmux open even if I exit my terminal.
It's also largely selfish: I've built up muscle memory over the years
that takes my fingers to Cmd-Q first (and I suspect I'm not the only
one).

The implementation for an exit is copied from `event.rs` which notably
is already tagged with a FIXME. It seems that `tty.rs` contains a
`process_should_exit` system to help handle a `SIGCHLD`, and it's
possible that these two exit implementations should be merged together.
I could probably tackle that as my next project.

As mentioned in #218, Alacritty can't really spawn other windows right
now, so I've tied in Cmd-W as simply another synonym for quitting until
that's implemented.

Fixes #218."1
39401/06/17 09:59:15 PMAnjou Stiles"Support ""True"" (24-bit) color""Many modern terminal emulators these days do better than 16 or 256 colors. Full 24-bit color would simplify color scheme configuration when working with multiple terminal applications simultaneously (as with Tmux+Vim).

It's not clear whether this is already supported or already planned."02/07/17 04:08:10 PMFix zsh tab completeResolves #230 =||= "> > _RGB color_
> 
> What's the difference between RGB and TrueColor (Tc)? Which one should I choose?

(TrueColor === RGB)

TrueColor is 24 bit ->  ~16M colors
RGB is 24 bit too ->    ~16M colors
000000 (rgb: black) color is 24 bit:

red color:      00(hex) -> 8 bit
green color:  00(hex) -> 8 bit
blue color:    00(hex) -> 8 bit
-------------------------------------- 24 bit"jwilmJoe Wilm02/07/17 03:53:57 PMAdd zsh tab completion ref test1
40311/14/17 05:24:09 PMNone30x slower than Terminal.app"setup:
```
macOS Sierra 10.12.1
git hash 8d8fca6b039cb8b8b6481658cbb8dc978a580c2f

$ ll pgadmin3-1.22.1.dmg 
-rw-r--r-- 1 rchen staff 14M Feb 29  2016 pgadmin3-1.22.1.dmg
$ sha1sum pgadmin3-1.22.1.dmg
c297d70d88b7bcfa3b281b8ba84065a4e107792d  pgadmin3-1.22.1.dmg
```

test: `time hexdump -C pgadmin3-1.22.1.dmg`

alacritty
```
real    6m1.144s
user    0m15.767s
sys     0m4.075s
```

Terminal.app
```
real	0m12.473s
user	0m8.208s
sys	0m1.075s
```

Alacritty renders at a nice 60 fps, but Terminal.app finishes the hexdump way faster"02/11/17 02:22:46 AMReport property name of errors in the config file"> **font.use_thin_strokes**: invalid type: string ""tru"", expected a boolean at line 51 column 21"1"Can't reproduce

Timing for `time cat 100mb.file`:
* Alacritty => 2.027s
* Terminal => 2.359s
* iTerm2 => Got bored and cancelled after 38s."dtolnayDavid Tolnay02/11/17 01:09:34 AM"Update serde_yaml to 0.6.1

This release reports better errors:

> font.use_thin_strokes: invalid type: string ""tru"", expected a boolean at line 51 column 21"1
40401/06/17 10:28:10 PMslice"Cursor ""fell off grid"" when resizing window""I can reliably make Alacritty crash when resizing the window while NeoVim is open:

```
...
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
width: 1022, height: 748
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
num_cols, num_lines = 127, 33
width: 1022, height: 747
thread 'pty reader' panicked at 'cursor fell off grid', src/term/mod.rs:634
note: Run with `RUST_BACKTRACE=1` for a backtrace.
child finished with error '256'
```

I noticed that this problem does not occur with normal Vim. However, this problem does not occur when using NeoVim in `st`, so I think it's a problem with Alacritty."02/11/17 10:18:07 PMHandle OSC for setting indexed color values =||= However, I don't think #12 is fixed. I can still make it crash by opening `tmux`, resizing down to a tiny size, then exiting `tmux`, then interacting with the window. Maybe it was just a quirk.jwilmJoe Wilm02/06/17 09:28:33 PM"Handle OSC for setting indexed color values

Resolves #26."1
40701/07/17 01:18:22 AMCole MickensRun under XWaylandI understand that Wayland is not currently supported, but is it possible to execute alacritty using XWayland?04/04/17 03:44:24 AMFix issue with htop rendering incorrectly"Since we're emulating xterm, we need to support back_color_erase. If
this is found to cause any issues, please open a ticket on GitHub.

Resolves #85.
Resolves #290.

This is currently causing a couple of tests to fail. Will need to investigate, but I expect this fixes some broken behavior, and the correct action is to fix the tests."1We should add this tip to the README until true Wayland support arrives. jwilmJoe Wilm04/04/17 03:33:46 AM"Update ref tests

Implementing BCE caused a few ref tests to fail erroneously."1
40910/22/18 07:39:27 PMBill BroadleyURL recognition"Other popular linux terminals often have a feature when you mouse over a URL it highlights and you can right click to open them in a browser.  I believe this is often referred to as ""dingus click"".  I find it a very handy feature."02/14/17 04:53:19 PMAdd TERM config entry"This PR solves an issue I had with vim not displaying comments in italics due to the TERM env variable being set to a terminfo which did not support setting and resetting italics.

Vim uses the codes defined in terminfo and invokes them with `tput` ([italics in iterm2 vim tmux ](https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/) explains a bit and has a handy bit of code to test if the TERM is set correctly)

I kept the default as xterm-256color because as far as I can tell no terminfo db has a correct entry for italics.

There seem to be a few issues here that might be fixed if the TERM variable is set correctly (#85)"12"@sudo-nice There's this issue which seems to provide similar functionality: https://github.com/jwilm/alacritty/issues/1615.

However there have been several discussions about making it possible to use the keyboard more to search the buffer or select text, I believe there are already issues open for these (like #262)."DivineGodAnders Rasmussen02/14/17 02:22:59 AMAdd TERM config entry1
41004/19/19 12:07:57 PMJoe WilmInvestigate `update_lines` performance optimizations"http://github.com/libcg/vcat
https://twitter.com/libcg/status/817507201291980801"02/15/17 06:03:47 PMImplement workaround for Mesa issue"This addresses the issue where systems running Mesa drivers would be an
order of magnitude slower than other terminals. With this patch,
performance is nearly as good as with proprietary drivers. There is one
caveat where, since the cause of slowness hasn't been removed, there is
less time available for rendering on Mesa systems.

I've benchmarked this on my system (i5-3570 @ 3.4GHz, GTX 680) using
`time find /usr` with the following results:

* ~2.0 seconds average with proprietary driver
* ~2.3 seconds average with Mesa driver

cc #125"8"Something worth noting should be that `mpv` probably isn't the best thing to test this, since it needs to do a lot of work itself.

The cacafire program is something I've used before that seems to really stress Alacritty at smaller fonts and its implementation should be a little more straight-forward. So looking into that could provide some more insights."jwilmJoe Wilm02/15/17 05:33:57 AM"Implement workaround for Mesa issue

This addresses the issue where systems running Mesa drivers would be an
order of magnitude slower than other terminals. With this patch,
performance is nearly as good as with proprietary drivers. There is one
caveat where, since the cause of slowness hasn't been removed, there is
less time available for rendering on Mesa systems.

I've benchmarked this on my system (i5-3570 @ 3.4GHz, GTX 680) using
`time find /usr` with the following results:

* ~2.0 seconds average with proprietary driver
* ~2.3 seconds average with Mesa driver

cc #125"1
41401/06/17 11:34:36 PMKristoffer GrönlundAdd installation instructions for openSUSE05/29/17 08:08:38 PMAdd built crate and more verbose debug banner"I've put the old `build_info` into a crate of it's own that currently lives off github. RFCing.

When running alacritty with elevated verbosity, additional debug output is given:

>  ~/dev/alacritty   built  target/debug/alacritty -v
> Welcome to Alacritty.
> This is version 0.1.0 (git 62eb1e2), built for x86_64-apple-darwin by rustc 1.16.0-nightly (bf6d7b665 2017-01-15).
> device_pixel_ratio: 2
> ...

>  ~/dev/alacritty   built  target/debug/alacritty -vvvv
> Welcome to Alacritty.
> This is version 0.1.0 (git 62eb1e2), built for x86_64-apple-darwin by rustc 1.16.0-nightly (bf6d7b665 2017-01-15).
> Alacritty was built with profile ""debug"", features ""DEFAULT, ERR_PRINTLN"" on Thu, 16 Feb 2017 19:00:08 GMT using android_glue 0.2.1, ansi_term 0.9.0, bitflags 0.3.3, bitflags 0.4.0, bitflags 0.6.0, bitflags 0.7.0, block 0.1.6, built 0.1.0, byteorder 0.5.3, bytes 0.3.0, cfg-if 0.1.0, cgl 0.1.5, cgmath 0.7.0, clap 2.20.0, clippy 0.0.104, clippy_lints 0.0.104, cmake 0.1.20, cocoa 0.3.3, copypasta 0.0.1, core-foundation 0.2.3, core-foundation-sys 0.2.3, core-graphics 0.3.2, core-text 1.1.1, crossbeam 0.2.10, dlib 0.3.1, dtoa 0.2.2, dtoa 0.3.0, dwmapi-sys 0.1.0, errno 0.1.8, euclid 0.6.8, expat-sys 2.1.4, ffi-util 0.1.0, filetime 0.1.10, fnv 1.0.5, font 0.1.0, freetype-rs 0.9.0, freetype-sys 0.4.0, fs2 0.2.5, fsevent 0.2.15, fsevent-sys 0.1.5, gcc 0.3.41, gdi32-sys 0.1.1, git2 0.6.4,gl_generator 0.5.2, gleam 0.2.31, glutin 0.6.1, heapsize 0.3.8, idna 0.1.0, inotify 0.2.3, itoa 0.1.1, itoa 0.2.1, kernel32-sys 0.2.2, khronos_api 1.0.0, lazy_static 0.1.16, lazy_static 0.2.2, lazycell 0.4.0, libc 0.2.18, libgit2-sys 0.6.7, libloading 0.3.1, libz-sys 1.0.12, linked-hash-map 0.3.0, log 0.3.6, malloc_buf 0.0.6, matches 0.1.4, memmap 0.2.3, mio 0.5.1, mio 0.6.2, miow 0.1.5, net2 0.2.26, nix 0.5.1, nix 0.7.0, nom 1.2.4, notify 2.6.3, num 0.1.36, num-bigint0.1.35, num-complex 0.1.35, num-integer 0.1.32, num-iter 0.1.32, num-rational 0.1.35, num-traits 0.1.36, objc 0.2.2, objc-foundation 0.1.1, objc_id 0.1.0, osmesa-sys 0.1.2, owning_ref 0.2.4, parking_lot 0.3.6, parking_lot_core 0.2.0, phf 0.7.21, phf_codegen 0.7.21, phf_generator 0.7.21, phf_shared 0.7.21, pkg-config 0.3.8, quine-mc_cluskey 0.2.4, quote 0.3.12, rand 0.3.15, redox_syscall 0.1.16, regex-syntax 0.3.9, rustc-serialize 0.3.22, rustc_version 0.1.7, semver 0.1.20, semver 0.2.3, serde 0.7.15, serde 0.8.23, serde 0.9.3, serde_codegen_internals 0.12.0, serde_derive 0.9.2, serde_json 0.8.6, serde_json 0.9.2, serde_yaml0.6.1, servo-fontconfig 0.2.0, servo-fontconfig-sys 2.11.3, shared_library 0.1.5, shell32-sys 0.1.1, siphasher 0.2.0, slab 0.1.3, slab 0.3.0, smallvec 0.1.8,strsim 0.6.0, syn 0.11.4, target_build_utils 0.1.2, tempfile 2.1.5, term_size 0.2.1, time 0.1.36, toml 0.1.30, toml 0.2.1, unicode-bidi 0.2.5, unicode-normalization 0.1.3, unicode-segmentation 1.0.1, unicode-width 0.1.4, unicode-xid 0.0.4, url 1.4.0, user32-sys 0.1.2, utf8parse 0.1.0, vec_map 0.6.0, void 1.0.2, vte 0.2.2, walkdir 0.1.8, wayland-client 0.5.12, wayland-kbd 0.3.6, wayland-scanner 0.5.11, wayland-sys 0.5.11, wayland-window 0.2.3, winapi 0.2.8, winapi-build0.1.1, ws2_32-sys 0.2.1, x11-dl 2.12.0, xdg 2.0.0, xml-rs 0.3.5, yaml-rust 0.3.5
> device_pixel_ratio: 2
> width: 2048, height: 1536
> ..."2Thanks for the PR!lukasluegLukas Lueg02/20/17 10:16:22 PMUse built from crates.io1
41701/11/17 05:05:34 PMKrzysztof Jan Modras`ls` at ubuntu 16.10 crashes"`RUST_BACKTRACE=1 ./alacritty` outputs that once running `ls`:

```
thread 'pty reader' panicked at 'index out of bounds: the len is 2 but the index is 2', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:640
stack backtrace:
   1:     0x55f57d115dea - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55f57d11b15f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x55f57d11ad5e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x55f57d11b607 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x55f57d11b494 - std::panicking::begin_panic::h814f60faa3ce8314
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x55f57d11b3b9 - std::panicking::begin_panic_fmt::hf4f7d700fa077693
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:499
   7:     0x55f57d11b347 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:475
   8:     0x55f57d14740d - core::panicking::panic_fmt::hee207ff21fb62166
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x55f57d1473b8 - core::panicking::panic_bounds_check::hca28eae069525a56
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x55f57d02df5d - alacritty::ansi::parse_color::he1f954b5b4f73a83
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:640
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:542
                        at /home/chrmod/Projects/opensource/alacritty/src/ansi.rs:732
  11:     0x55f57cff689c - vte::Parser::perform_action::ha595f6d3713fa1a4
                        at /home/chrmod/Projects/opensource/alacritty/src/ansi.rs:630
                        at /home/chrmod/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:205
  12:     0x55f57d009aba - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h8a87f59e0d85f278
                        at /home/chrmod/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:158
                        at /home/chrmod/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /home/chrmod/Projects/opensource/alacritty/src/ansi.rs:85
                        at /home/chrmod/Projects/opensource/alacritty/src/event_loop.rs:211
                        at /home/chrmod/Projects/opensource/alacritty/src/event_loop.rs:308
  13:     0x55f57cff518b - std::panicking::try::do_call::h36ad92b485fdc90c
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:295
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:458
  14:     0x55f57d12254a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  15:     0x55f57d00797a - <F as alloc::boxed::FnBox<A>>::call_box::h9e0ff91ec3235773
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:287
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  16:     0x55f57d11a454 - std::sys::imp::thread::Thread::new::thread_start::h460a0adc61139b06
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  17:     0x7f896b4fe709 - start_thread
  18:     0x7f896b0210ae - __clone
  19:                0x0 - <unknown>
child finished with error '1'
```"02/17/17 04:50:36 PMuse an empty cell as template when resizing grids"This resolves #415.

Seems to be an oversight that the cell template was the cursor block. I changed it to the empty cell and this seems to have fixed the issue."1can confirm the fix. Thanks! :+1: DivineGodAnders Rasmussen02/17/17 06:17:10 AMuse an empty cell as template when resizing grids1
41901/07/17 02:56:02 AMDanny Dulaidragging from retina to non-retina, or the other way around, doenst workYou have to blow away your glyph atlas and rerender at higher dpi for this to work properly, using the scale factor on that new display.02/17/17 11:28:48 PMUpdates Glutin to proper handle dead keysResolves #211.2agreedmichelboaventuraMichel Boaventura02/17/17 08:22:39 PM"Updates Glutin to proper handle dead keys

Resolves #211."1
42307/02/17 01:09:24 AMDanny Dulaicmd-q should prompt and exit on mac os"no way for force kill the child processes right now :-(
"12/23/17 08:12:39 PMFind config file in /etc/alacritty/alacritty.yml"Adds an additional config path outside of $HOME.

This is helpful me because I use Qubes OS.  Qubes systems run many VMs each with different home folders but with most of the rest of the filesystem shared (through a template vm). Previously I had to install a config file into each VM; now I can configure it once in the template vm and have the changes picked up everywhere else.  I imagine it might be useful for systems with multiple users too.

Config path is setup as final fallback option, so it shouldn't break anyones setup (hopefully)!"7Believe this was resolved.bogwonchbogwonch02/18/17 03:48:57 PMFind config file in /etc/alacritty/alacritty.yml1
42701/07/17 03:35:56 AMDanny Dulaiadd MacOS's Terminal.app colors to default config"I'm sure others will want this, but I changed the colors to be these values (copied from Terminal.app on macos)

```
  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0x990000'
    green:   '0x00a600'
    yellow:  '0x999900'
    blue:    '0x0000b2'
    magenta: '0xb200b2'
    cyan:    '0x00a6b2'
    white:   '0xbfbfbf'
  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xe50000'
    green:   '0x00d900'
    yellow:  '0xe5e500'
    blue:    '0x0000ff'
    magenta: '0xe500e5'
    cyan:    '0x00e5e5'
    white:   '0xe5e5e5'

```"10/21/17 11:40:24 PMUse error-chain"Switches most manual error handling code to use `error-chain` to reduce boilerplate and enable better error messages.

Some of the new error handling code is not pretty, because of the use of absolute paths such as `::std::result::Result<T, E>`, and `shader_error::ResultExt::chain_err(error, || ""foo"")`. The latter could be solved by creating a top level error that has variants for all other error types. This has the advantage of making cases like this as simple as `error.chain_err(|| ""foo"")`, but the downside is functions that have a specific task return the top level, general error type rather than one specific to that task. I could make this change if requested.

An example of the new error message, if a fake error is added to `Window::new`:

before:

```
Alacritty encountered an unrecoverable error:

	Error creating glutin::Window; foo
```

after:

```
Alacritty encountered an unrecoverable error:

	error: failed to create display
	caused by: failed to create window
	caused by: foo
```

The causes of the error are also printed to make the context of the error clearer. I have added `.chain_err` calls in many places to take advantage of this feature.

Unfortunately I could not change `font` and `copypasta` to use `error-chain` because of `Sync` bounds in traits, and `error-chain` uses non-`Sync` types.

Fixes #426"4Done, I added those and this isn't needed now.pengowen123Owen Sanchez02/19/17 03:17:59 AMFix formatting of errors1
42911/29/17 01:53:32 AMDanny Dulai"config ""action"" to change font size""It'd be nice to have an option to change the font size .. like mapping cmd-+ or cmd-- or cmd-0 to reset the fontsize

this should throw away the atlas and changing the number of chars on the window, and not resizing the window."02/23/17 04:57:01 AMLazily reset `start_time` in VisualBell's `completed` method"Fixes #416. Here's what I think is happening: at short `duration`s, the VisualBell's [`completed` check](https://github.com/jwilm/alacritty/blob/3ce6e1e4b2924b0d432cbb3e62b4bbef88dd38ff/src/term/mod.rs#L377) is returning `true` before we've actually had a chance to draw the ""normal"" background color. I thought about driving this condition off of whether or not `intensity` returns 0.0, but we may still miss a draw, I think. Perhaps the best way to tackle this is to let `completed` lazily reset the VisualBell's `start_time` (something @jwilm asked about when this feature originally landed), and to only return `true` when the VisualBell's `start_time` is `None`. This should effectively delay the final draw until after the VisualBell completes.

***

@lord-re would you mind testing with these changes?

@jwilm at very short `duration`s, there now appears to be a small discrepancy between the clear color and the background color of the glyphs. Perhaps the technique you described, drawing a quad, would fix this; however, I am not entirely sure how this should work. If you can share some pointers, perhaps I could take a stab at it."2"Works for me (macOS):
```
  - { key: Key0,     mods: Command, action: ResetFontSize }
  - { key: Equals,   mods: Command, action: IncreaseFontSize }
  - { key: Minus,    mods: Command, action: DecreaseFontSize }
```"markandrusMark Andrus Roberts02/20/17 08:22:26 PM"Lazily reset `start_time` in VisualBell's `completed` method

Fixes #416. Here's what I think is happening: at short `duration`s, the
VisualBell's [`completed` check](https://github.com/jwilm/alacritty/blob/3ce6e1e4b2924b0d432cbb3e62b4bbef88dd38ff/src/term/mod.rs#L377)
is returning `true` before we've actually had a chance to draw the ""normal""
background color. I thought about driving this condition off of whether or not
`intensity` returns 0.0, but we may still miss a draw, I think. Perhaps the best
way to tackle this is to let `completed` lazily reset the VisualBell's
`start_time` (something @jwilm asked about when this feature originally landed),
and to only return `true` when the VisualBell's `start_time` is `None`. This
should effectively delay the final draw until after the VisualBell completes."1
43001/08/17 03:06:19 AMHonza Pokorny"Add ""shell"" configuration option""Add a way for users to specify which shell should be started when alacritty starts. This would override whatever is read from `/etc/passwd`.

If it's something you're interested in, I'd be happy to take a stab at it. 😄 "12/16/18 08:41:19 PMAddress VisualBell Feedback"@jonhoo raised some useful feedback in https://github.com/jwilm/alacritty/issues/406, namely

1. Behaviors like ""brighten text"", ""dim text"", etc., would be useful.
2. Colors should be customizable to accommodate different color schemes.
3. Non-flashing behaviors like ""pixelate"" would be useful.

This PR addresses 1 and 2 by converting VisualBellConfig into an enum representing one of three effects:

  * None: does nothing
  * FlashText: flashes the text a configurable color
  * FlashBackground: flashes the background a configurable color

Example video (warning: flashing lights): https://gfycat.com/IdealLazyDairycow


Other changes:

* Renamed VisualBellAnimation to ""VisualBellEasing"" and `animation` to `easing`.
* Moved the `cubic_bezier` code to src/config.rs and added an `ease` function to the VisualBellEasing implementation.

The VisualBellConfig enum could be expanded in the future to support a Pixelate option, e.g. something like

```yaml
visual_bell:
  Pixelate:
    size: 24 # px
    duration: 150
```

Or perhaps even a Blur could be supported; however, I think these would require adding a rendering pass, so I haven't implemented these yet."8This has been added :)markandrusMark Andrus Roberts02/20/17 07:55:30 PMSimplify config1
43108/11/17 03:30:00 PMCarwyn NelsonVim theme background colours not rendered properly"I have the [gruvbox](https://github.com/morhetz/gruvbox) theme setup for vim but the background colour does not seem to be rendering properly.

Alacritty on the left vs iterm2 on the right

<img width=""1276"" alt=""screen shot 2017-01-07 at 00 16 59"" src=""https://cloud.githubusercontent.com/assets/3310215/21737246/fcce86aa-d46e-11e6-8ffc-e09c6d2d3c45.png"">
"06/19/17 02:29:02 AMKeep selection mode when holding button and moving mouse"There was a bit of talk in #30 about keeping the selection mode when double or triple clicking the mouse button and dragging the selection around, so I had a bit of a try at implementing this.

This is just a rough implementation to get the ball rolling and some more input.

There's one or two more modes, that I'm thinking of implementing, which would require a major rewrite; Column mode and Multiple selections."8Thanks for all the feedback!DivineGodAnders Rasmussen02/21/17 09:41:31 AMadd tests for new selection modes1
43609/17/18 03:15:21 PMChristoph HerzogImplement scrollback"Since you got so much pushback on the scrollback support, and mentioned possibly implementing it,
I'm opening this as a tracking issue.

(ps: I also really want scrollback w/o tmux)."02/22/17 10:49:30 PMAdd hide cursor when typing option"By default the feature is disabled. Should it be? Other terminal emulators, at least on X11, hide the cursor when typing.

Fixes #246"2for context #1147 added scrollback. This was the alacritty blocker for me, I can't wait to use it! Thanks for the hard work. siiptuoTuomas Siipola02/22/17 10:27:18 PMDocument hide cursor when typing behaviour1
43702/15/17 06:04:24 PMStephanie Wilde-HobbsSlow rendering using Mesa"Using `time find /usr` benchmark:

My current terminal, Terminology: `find /usr  0.41s user 0.90s system 63% cpu 2.081 total`

Alacritty: `find /usr  0.58s user 0.89s system 5% cpu 28.101 total`

I'm using the same font, arch linux using the AMD open source drivers with a radeon HD7850 GPU. I observe Terminology using 100% cpu and Alacritty using about 7%. Neither program seems to bottleneck any part of the GPU when observed with `radeontop`. This should be a release build ([`cargo build --release`](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=alacritty-git)).

```
$ find /usr | wc -c
30957177
```"02/23/17 05:07:39 AMhide mouse cursor mac osFixes #436 for mac os users3Going to close this since feedback in #410 is very positive.DivineGodAnders Rasmussen02/23/17 02:34:52 AMhide mouse cursor mac os1
44007/02/17 01:08:17 AMNonenightly-2016-12-16 had a bug that completely broke it on i686; patched 24 days ago"Relevant notes here: https://github.com/rust-lang/rust/issues/38898#issuecomment-271043893

This means that the pinned Rust nightly does not build on i686. There's also a recent bug showing the exact same exception on ppc64, unsure if that's related.

The i686 machine I wanted to build on is unlikely to run Alacritty so FWIW I don't need this, I'm just reporting it for completeness."02/25/17 03:55:37 PMChange cursor colors config to use text and cursor"This changes the cursor color config to use the `text` and `cursor` properties instead of the current `foreground` and `background` properties. The latter names stop making sense when dealing with cursors like a vertical bar or underscore. In the new system, the block, underscore, or vertical bar would always take the color of `cursor`, and the text would take the color of `text` when using a block, or keep its normal color when using the underscore or vertical bar.

A warning is now emitted on startup when the old form of cursor color config is used. This will be a hard error in the future.

cc @impowski" =||= I think we should be able to drop the nightly pinning entirely per #196. Just haven't had time to update docs and test it.jwilmJoe Wilm02/24/17 04:23:07 PM"Change cursor colors config to use text and cursor

This changes the cursor color config to use the `text` and `cursor`
properties instead of the current `foreground` and `background`
properties. The latter names stop making sense when dealing with cursors
like a vertical bar or underscore. In the new system, the block,
underscore, or vertical bar would always take the color of `cursor`, and
the text would take the color of `text` when using a block, or keep its
normal color when using the underscore or vertical bar.

A warning is now emitted on startup when the old form of cursor color
config is used. This will be a hard error in the future."1
44101/07/17 12:52:45 AMinsunaresizing size-aware scripts causes crash"This script crashes alacritty when the window is resized, whereas it simply resizes when executed in urxvt:
```bash
#!/bin/bash
echo -e ""\033[2J\033[?25l""; R=`tput lines` C=`tput cols`;: $[R--] ; while true 
do ( e=echo\ -e s=sleep j=$[RANDOM%C] d=$[RANDOM%R];for i in `eval $e {1..$R}`;
do c=`printf '\\\\0%o' $[RANDOM%57+33]` ### http://bruxy.regnet.cz/web/linux ###
$e ""\033[$[i-1];${j}H\033[32m$c\033[$i;${j}H\033[37m""$c; $s 0.1;if [ $i -ge $d ]
then $e ""\033[$[i-d];${j}H "";fi;done;for i in `eval $e {$[i-d]..$R}`; #[mat!rix]
do echo -e ""\033[$i;${j}f "";$s 0.1;done)& sleep 0.05;done #(c) 2011 -- [ BruXy ]
```

While urxvt produces undefined behavior, it doesn't completely crash at least. Maybe build a graceful handler for this?

Possible duplicate of #88"02/26/17 04:01:39 AM[WIP] Font fallback"This is a branch containing my work on font fallback.

It is still a WIP, largely untested, and doesn't even compile.  So there." =||= "99% sure that this is a duplicate of #12 
Closed."hliebermanHarlan Lieberman-Berg02/25/17 11:36:04 PMDebugging why things aren't working... please squash me when done1
44206/20/17 04:14:25 PMAlbin EkblomCannot run threejs-term"Awesome project! Rendering is super smooth!

Crashes when i try: https://github.com/zz85/threejs-term

```
[unhandled osc_end] byte=0
[Unhandled CSI] action='t', args=[14], intermediates=[]
[unimplemented] save_cursor_position
[unhandled] esc_dispatch params=[], ints=[40], byte='0' (30)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='0' (30)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='0' (30)
thread 'pty reader' panicked at 'index out of bounds: the len is 3 but the index is 4', /Users/rustbuild/src/rust-buildbot/slave/nightly-dist-rustc-mac/build/src/libcore/slice.rs:640
note: Run with `RUST_BACKTRACE=1` for a backtrace.
Goodbye
```

It works if i run it trough tmux 🤔 "03/02/17 06:07:15 AMFont Fallback Support (Linux only)"This obsoletes and replaces #441.
"1You should be able to run this btw. It's got a few issues at the moment, but it runs.hliebermanHarlan Lieberman-Berg03/02/17 02:48:37 AMfont::fc: Remove unneeded clone1
44301/08/17 10:17:37 PMTJcompiling error on arch linux"   Compiling servo-fontconfig v0.2.0 (https://github.com/jwilm/rust-fontconfig#419135e5)
     Running `rustc /home/elio/.cargo/git/checkouts/rust-fontconfig-74c44fcd18a59a5d/419135e5e1106ec0973dd4923bd9c70d8e438cc8/src/lib.rs --crate-name fontconfig --crate-type lib -C opt-level=3 -g -C metadata=7de0c55f3beac4a1 -C extra-filename=-7de0c55f3beac4a1 --out-dir /home/elio/Downloads/alacritty-master/target/release/deps --emit=dep-info,link -L dependency=/home/elio/Downloads/alacritty-master/target/release/deps --extern fontconfig_sys=/home/elio/Downloads/alacritty-master/target/release/deps/libfontconfig_sys-5f3b046d6b3fe525.rlib --extern libc=/home/elio/Downloads/alacritty-master/target/release/deps/liblibc-6ec63c5a0e74a074.rlib --cap-lints allow -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib`
Build failed, waiting for other jobs to finish...
error: Could not compile `parking_lot_core`.

Caused by:
  process didn't exit successfully: `rustc /home/elio/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.0/src/lib.rs --crate-name parking_lot_core --crate-type lib -C opt-level=3 -g --cfg feature=""nightly"" -C metadata=b776954c2db52c62 -C extra-filename=-b776954c2db52c62 --out-dir /home/elio/Downloads/alacritty-master/target/release/deps --emit=dep-info,link -L dependency=/home/elio/Downloads/alacritty-master/target/release/deps --extern smallvec=/home/elio/Downloads/alacritty-master/target/release/deps/libsmallvec-cf4677c7857fc4a9.rlib --extern libc=/home/elio/Downloads/alacritty-master/target/release/deps/liblibc-6ec63c5a0e74a074.rlib --extern rand=/home/elio/Downloads/alacritty-master/target/release/deps/librand-8ea7d489d4a383a0.rlib --cap-lints allow` (exit code: 101)"02/27/17 04:05:12 PMUpdate cell to cursor template when adding a tab."references #85.

Will resolve one part of the rendering blank characters after setting background to something other than the default background."1I agree. Just ran it and using it for work as we speak. So far love it :+1: . Once you set the config for rustup, for some odd reason everything worked fine! Totally sarcastic since it was my bad. :) DivineGodJoe Wilm02/27/17 04:03:08 PM"Add ref test for tab background highlighting

Generated with

    echo -e ""\x1b[48;5;31m1\t2\n\n3\x1b[0;m"""1
44801/07/17 05:51:25 AMManish GoregaokarMake it compile on stable Rust (almost)"I replaced all the usages of unstable features with in-house stuff. Now the only unstable bit is `proc_macro`, which is stabilizing in 1.15, and I didn't want to go through the effort of separating out serde types into a standalone file if it was going to be temporary.

Most of these features have no roadmap for stabilization. `contains()` might, but the inclusive ranges story is probably going to be redone. The `step` stuff is dependent on the design space being explored first, so unless someone spearheads that that will probably stay stagnant. `drop_types_in_const` and `core_intrinsics` won't stabilize, but you can push for `unlikely` in particular to be stabilized. If any of these features stabilize it should be relatively easy to undo these changes."03/01/17 11:18:51 PMFix #447 - yml: mention `showkey -a` to get x sequence from keyAm not touching the -macos yaml, as I'm not sure this works under macOS.6👏 ❤️ @Manishearth ronjouchRonan Jouchet02/28/17 08:27:09 PM"Fix #447 - yml: mention `showkey -a` to get x sequence from key

Am not touching the -macos yaml, as I'm not sure this works under macOS."1
44901/07/17 01:18:22 AMTom WadleyAdd tip for running in XWaylandFixes #112 03/03/17 11:09:30 PMImplement OSC command '1' (Set Icon Name)"Per the [Xterm control sequences](http://www.xfree86.org/4.7.0/ctlseqs.html) documentation, the OSC command '1' is used to set the ['Icon name'](https://unix.stackexchange.com/questions/234136/in-xterm-what-is-icon-name). While it may change the tab name in some terminal emulators, I haven't been able to find a working example yet.

Since alacritty doesn't support tabs anyway, I've made the '1' command set the window title, just as command '2' (Set window title and icon name) does.

For an example of a program which actually uses this command, install [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh), and launch a new `zsh` shell - no further modifications are needed. The command is issued [here](https://github.com/robbyrussell/oh-my-zsh/blob/b908feebcfb0ca8a9a80360d177e716c24c317d6/lib/termsupport.zsh#L22), which is run on every command given to zsh."3Thanks!Aaron1011Aaron Hill03/03/17 11:04:09 PMHandle OSC command '1' (Set Icon Name)1
45201/08/17 11:11:19 PMAnders Kaseorg"Crash on printf '\e[81C '""When running `printf '\e[81C\eH'`:

```
thread 'pty reader' panicked at 'index out of bounds: the len is 80 but the index is 81', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
stack backtrace:
   1:     0x5588ad085d4c - std::sys::imp::backtrace::tracing::imp::write::h9c41d2f69e5caabf
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x5588ad08b23e - std::panicking::default_hook::{{closure}}::h1f61f3c769fffe7a
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:351
   3:     0x5588ad08ae44 - std::panicking::default_hook::hd5bda4e453dfb4be
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:367
   4:     0x5588ad08b6e7 - std::panicking::rust_panic_with_hook::hffbc74969c7b5d87
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:555
   5:     0x5588ad08b574 - std::panicking::begin_panic::h3bbdbb2a23440035
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:517
   6:     0x5588ad08b499 - std::panicking::begin_panic_fmt::h34f5b320b0f94559
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:501
   7:     0x5588ad08b427 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:477
   8:     0x5588ad0b75bd - core::panicking::panic_fmt::h1016b85b51d1931f
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x5588ad0b7568 - core::panicking::panic_bounds_check::h3b875b6ea9a674f6
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x5588accec545 - <collections::vec::Vec<T> as core::ops::IndexMut<usize>>::index_mut::h69b598477d3e900a
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
  11:     0x5588acc5fa44 - <alacritty::grid::Row<T> as core::ops::IndexMut<alacritty::index::Column>>::index_mut::h9adf91b5b10bafe3
                        at /home/anders/rust/alacritty/src/grid.rs:311
  12:     0x5588acc64280 - <alacritty::grid::Grid<T> as core::ops::IndexMut<&'point alacritty::index::Point>>::index_mut::h2a8363d21414e0ce
                        at /home/anders/rust/alacritty/src/grid.rs:225
  13:     0x5588accdaef7 - <alacritty::term::Term as alacritty::ansi::Handler>::input::h1bacbff20d66275a
                        at /home/anders/rust/alacritty/src/term/mod.rs:638
  14:     0x5588accf6d6c - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::h2f59924c294298c6
                        at /home/anders/rust/alacritty/src/ansi.rs:438
  15:     0x5588acc80616 - vte::Parser::perform_action::h82162452c9ac296a
                        at /home/anders/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:189
  16:     0x5588acc80c4e - vte::Parser::perform_state_change::ha318e6e99fbda378
                        at /home/anders/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:167
  17:     0x5588acc80fc4 - vte::Parser::advance::h66c6bd0670baf377
                        at /home/anders/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
  18:     0x5588accfbfac - alacritty::ansi::Processor::advance::h92e3d5ba20d53d25
                        at /home/anders/rust/alacritty/src/ansi.rs:85
  19:     0x5588accc6986 - <alacritty::event_loop::EventLoop<Io>>::pty_read::h18a7cc99c622d42f
                        at /home/anders/rust/alacritty/src/event_loop.rs:211
  20:     0x5588accc6082 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h069a2120b2d00625
                        at /home/anders/rust/alacritty/src/event_loop.rs:308
  21:     0x5588accf8024 - <std::panic::AssertUnwindSafe<F> as core::ops::FnOnce<()>>::call_once::h6032dcb0cf344702
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
  22:     0x5588acc8048f - std::panicking::try::do_call::hc745aec8a9cedc1b
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
  23:     0x5588ad09265a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  24:     0x5588acc7fb03 - std::panicking::try::h697849a0f4444602
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
  25:     0x5588acc7dbb4 - std::panic::catch_unwind::hb5b74bacab7a9eb7
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
  26:     0x5588acc7f45c - std::thread::Builder::spawn::{{closure}}::hc2b962b0b41adef6
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:357
  27:     0x5588accbf2e9 - <F as alloc::boxed::FnBox<A>>::call_box::hab7d1897638a2589
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  28:     0x5588ad08a534 - std::sys::imp::thread::Thread::new::thread_start::h76badbf9b0ecaf58
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  29:     0x7f76efc8c6c9 - start_thread
  30:     0x7f76ef7af0ae - __clone
  31:                0x0 - <unknown>
child finished with error '1'
```"03/02/17 05:19:02 PMWide char supportAdds support for wide characters. Basically, an extra cell is used as space for wide characters. Also fixes an issue with OSC string parsing that I discovered while testing this feature. =||= Seems fixed by #164.jwilmJoe Wilm03/02/17 06:28:38 AM"Fix bug parsing OSC strings

OSC strings with UTF-8 previously failed."1
45301/09/17 12:23:50 AMinsunaCrash by drawing out of bounds (List of related issues)"A list of all opened issues that have the same underlying problem: Drawing out of bounds.

- ~~#136~~
- ~~#133~~
- ~~#94~~  
- ~~#88~~ 
- ~~#12~~

Please don't open new issues for this same problem anymore and instead put a comment here (unless @jwilm says otherwise)"04/04/17 03:54:05 AMEnable Shift + Insert to paste"Shift + Insert is a default bind to paste selection.

I don't know if this is used on Mac, so I didn't change it."1I went through your list of issues here and they all seem to be fixed. Closing.michelboaventuraMichel Boaventura03/02/17 09:13:59 PM"Enable Shift + Insert to paste

Shift + Insert is a default bind to paste selection."1
45601/08/17 05:19:38 AMHendrik SollichEmpty Glyphs"Hi there, I unfortunately can't read any of this 😉 
![screenshot_20170107_021018](https://cloud.githubusercontent.com/assets/260370/21737942/bda76a40-d47e-11e6-81dc-6c893bdeb28f.png)

here is my glinfo, have a nice day

```
GL_VERSION: 3.0 Mesa 13.0.2
GL_RENDERER: Mesa DRI Intel(R) Ivybridge Mobile 
GL_VENDOR: Intel Open Source Technology Center
GL_EXTENSIONS: GL_ARB_multisample GL_EXT_abgr GL_EXT_bgra GL_EXT_blend_color GL_EXT_blend_minmax GL_EXT_blend_subtract GL_EXT_copy_texture GL_EXT_polygon_offset GL_EXT_subtexture GL_EXT_texture_object GL_EXT_vertex_array GL_EXT_compiled_vertex_array GL_EXT_texture GL_EXT_texture3D GL_IBM_rasterpos_clip GL_ARB_point_parameters GL_EXT_draw_range_elements GL_EXT_packed_pixels GL_EXT_point_parameters GL_EXT_rescale_normal GL_EXT_separate_specular_color GL_EXT_texture_edge_clamp GL_SGIS_generate_mipmap GL_SGIS_texture_border_clamp GL_SGIS_texture_edge_clamp GL_SGIS_texture_lod GL_ARB_framebuffer_sRGB GL_ARB_multitexture GL_EXT_framebuffer_sRGB GL_IBM_multimode_draw_arrays GL_IBM_texture_mirrored_repeat GL_3DFX_texture_compression_FXT1 GL_ARB_texture_cube_map GL_ARB_texture_env_add GL_ARB_transpose_matrix GL_EXT_blend_func_separate GL_EXT_fog_coord GL_EXT_multi_draw_arrays GL_EXT_secondary_color GL_EXT_texture_env_add GL_EXT_texture_filter_anisotropic GL_EXT_texture_lod_bias GL_INGR_blend_func_separate GL_NV_blend_square GL_NV_light_max_exponent GL_NV_texgen_reflection GL_NV_texture_env_combine4 GL_S3_s3tc GL_SUN_multi_draw_arrays GL_ARB_texture_border_clamp GL_ARB_texture_compression GL_EXT_framebuffer_object GL_EXT_texture_compression_s3tc GL_EXT_texture_env_combine GL_EXT_texture_env_dot3 GL_MESA_window_pos GL_NV_packed_depth_stencil GL_NV_texture_rectangle GL_ARB_depth_texture GL_ARB_occlusion_query GL_ARB_shadow GL_ARB_texture_env_combine GL_ARB_texture_env_crossbar GL_ARB_texture_env_dot3 GL_ARB_texture_mirrored_repeat GL_ARB_window_pos GL_EXT_stencil_two_side GL_EXT_texture_cube_map GL_NV_depth_clamp GL_APPLE_packed_pixels GL_APPLE_vertex_array_object GL_ARB_draw_buffers GL_ARB_fragment_program GL_ARB_fragment_shader GL_ARB_shader_objects GL_ARB_vertex_program GL_ARB_vertex_shader GL_ATI_draw_buffers GL_ATI_texture_env_combine3 GL_ATI_texture_float GL_EXT_shadow_funcs GL_EXT_stencil_wrap GL_MESA_pack_invert GL_NV_primitive_restart GL_ARB_depth_clamp GL_ARB_fragment_program_shadow GL_ARB_half_float_pixel GL_ARB_occlusion_query2 GL_ARB_point_sprite GL_ARB_shading_language_100 GL_ARB_sync GL_ARB_texture_non_power_of_two GL_ARB_vertex_buffer_object GL_ATI_blend_equation_separate GL_EXT_blend_equation_separate GL_OES_read_format GL_ARB_color_buffer_float GL_ARB_pixel_buffer_object GL_ARB_texture_compression_rgtc GL_ARB_texture_float GL_ARB_texture_rectangle GL_EXT_packed_float GL_EXT_pixel_buffer_object GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_rgtc GL_EXT_texture_rectangle GL_EXT_texture_sRGB GL_EXT_texture_shared_exponent GL_ARB_framebuffer_object GL_EXT_framebuffer_blit GL_EXT_framebuffer_multisample GL_EXT_packed_depth_stencil GL_APPLE_object_purgeable GL_ARB_vertex_array_object GL_ATI_separate_stencil GL_EXT_draw_buffers2 GL_EXT_draw_instanced GL_EXT_gpu_program_parameters GL_EXT_texture_array GL_EXT_texture_integer GL_EXT_texture_sRGB_decode GL_EXT_timer_query GL_OES_EGL_image GL_AMD_performance_monitor GL_ARB_copy_buffer GL_ARB_depth_buffer_float GL_ARB_draw_instanced GL_ARB_half_float_vertex GL_ARB_instanced_arrays GL_ARB_map_buffer_range GL_ARB_texture_rg GL_ARB_texture_swizzle GL_ARB_vertex_array_bgra GL_EXT_texture_swizzle GL_EXT_vertex_array_bgra GL_NV_conditional_render GL_AMD_conservative_depth GL_AMD_draw_buffers_blend GL_AMD_seamless_cubemap_per_texture GL_ARB_ES2_compatibility GL_ARB_blend_func_extended GL_ARB_debug_output GL_ARB_draw_buffers_blend GL_ARB_draw_elements_base_vertex GL_ARB_explicit_attrib_location GL_ARB_fragment_coord_conventions GL_ARB_provoking_vertex GL_ARB_sample_shading GL_ARB_sampler_objects GL_ARB_seamless_cube_map GL_ARB_shader_texture_lod GL_ARB_texture_cube_map_array GL_ARB_texture_gather GL_ARB_texture_multisample GL_ARB_texture_query_lod GL_ARB_texture_rgb10_a2ui GL_ARB_uniform_buffer_object GL_ARB_vertex_type_2_10_10_10_rev GL_EXT_provoking_vertex GL_EXT_texture_snorm GL_MESA_texture_signed_rgba GL_NV_texture_barrier GL_ARB_get_program_binary GL_ARB_robustness GL_ARB_separate_shader_objects GL_ARB_shader_bit_encoding GL_ARB_texture_compression_bptc GL_ARB_timer_query GL_ARB_transform_feedback2 GL_ARB_transform_feedback3 GL_ANGLE_texture_compression_dxt3 GL_ANGLE_texture_compression_dxt5 GL_ARB_compressed_texture_pixel_storage GL_ARB_conservative_depth GL_ARB_internalformat_query GL_ARB_map_buffer_alignment GL_ARB_shader_atomic_counters GL_ARB_shader_image_load_store GL_ARB_shading_language_420pack GL_ARB_shading_language_packing GL_ARB_texture_storage GL_ARB_transform_feedback_instanced GL_EXT_framebuffer_multisample_blit_scaled GL_EXT_transform_feedback GL_AMD_shader_trinary_minmax GL_ARB_ES3_compatibility GL_ARB_arrays_of_arrays GL_ARB_clear_buffer_object GL_ARB_compute_shader GL_ARB_copy_image GL_ARB_explicit_uniform_location GL_ARB_framebuffer_no_attachments GL_ARB_invalidate_subdata GL_ARB_program_interface_query GL_ARB_shader_image_size GL_ARB_shader_storage_buffer_object GL_ARB_texture_query_levels GL_ARB_texture_storage_multisample GL_ARB_texture_view GL_ARB_vertex_attrib_binding GL_KHR_debug GL_KHR_robustness GL_ARB_buffer_storage GL_ARB_clear_texture GL_ARB_internalformat_query2 GL_ARB_multi_bind GL_ARB_seamless_cubemap_per_texture GL_ARB_shader_draw_parameters GL_ARB_texture_mirror_clamp_to_edge GL_ARB_vertex_type_10f_11f_11f_rev GL_EXT_shader_integer_mix GL_INTEL_performance_query GL_ARB_clip_control GL_ARB_conditional_render_inverted GL_ARB_cull_distance GL_ARB_derivative_control GL_ARB_get_texture_sub_image GL_ARB_pipeline_statistics_query GL_ARB_shader_texture_image_samples GL_ARB_texture_barrier GL_EXT_polygon_offset_clamp GL_KHR_blend_equation_advanced GL_KHR_context_flush_control GL_ARB_shader_atomic_counter_ops GL_ARB_shader_clock GL_EXT_shader_samples_identical GL_MESA_shader_integer_functions 
GL_SHADING_LANGUAGE_VERSION = 1.30
GLU_VERSION: 1.3
GLU_EXTENSIONS: GLU_EXT_nurbs_tessellator GLU_EXT_object_space_tess 
GLUT_API_VERSION: 4
GLUT_XLIB_IMPLEMENTATION: 13
```"12/24/17 06:17:19 PMPossible more-efficient direction for font fallback"I started playing around with Alacritty a few weeks ago and decided to poke
around with font-fallback as a way to learn a little Rust.
I got things working a bit and before kicking off this pull request fetched the
latest changes from upstream.  Lo and behold, there's already work going on in
master, really cool!

Comparing the two approaches, I think there will probably be some benefit in
combining them.  This branch stores `CharSet` data from the single, original
`font_sort()` and uses it to more-rapidly search for a suitable font-face
whenever an as-of-yet unhandled character is discovered.

I believe the master's current approach (creating a `CharSet` with the new
character and conducting a new `font_match()`) may be a better way to handle the
case where the original search turned up no faces with glyphs for the character.
This branch just punts and gives the ""main"" face to FreeType to render the
dreaded ""missing-character-rectangle"" glyph.
(I haven't explicitly tested combining the two, it's possible that the searches
done by master's technique are only yielding faces that this branch is already
testing and no further searches are beneficial.)

I'm certainly enjoying Rust and this is a cool project!"1"@d3rrial appreciate all the help triaging issues :)

@hoodie sounds like you're good to go then; going to close this."cpickChris Pick03/03/17 05:36:28 AM"Fall back to other fonts if the preferred one lacks a character

Attempt to support more characters/languages by falling back through
fonts listed by FontConfig."1
45701/09/17 12:22:47 AMPepe Barbethread 'pty reader' panicked at 'index out of bounds:"Got the following error on my build,  with HEAD c73295715629f33e687741769f3079536ed5e104.

```
thread 'pty reader' panicked at 'cursor fell off grid', src/term/mod.rs:634
stack backtrace:
   1:        0x10eb0f02a - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x10eb1120f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x10eb10eb7 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x10eb116d6 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x10ea523a4 - std::panicking::begin_panic::hac4cfc1999155f3b
   6:        0x10ea6c602 - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::hd3c18ed560a5a94f
   7:        0x10ea6463e - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h0d75ac8e5518a20e
   8:        0x10ea5242b - std::panicking::try::do_call::h0cab640ecd1a1897
   9:        0x10eb125aa - __rust_maybe_catch_panic
  10:        0x10ea6228a - <F as alloc::boxed::FnBox<A>>::call_box::h7cc014cba684c746
  11:        0x10eb108e4 - std::sys::imp::thread::Thread::new::thread_start::haeb202749da670ee
  12:     0x7fffa7010aaa - _pthread_body
  13:     0x7fffa70109f6 - _pthread_start
child finished with error '256'
```

I can trigger it consistently by doing: `cat /dev/random`."03/04/17 11:49:11 PMHandle CSI command J3 (Clear saved lines)"Xterm supports an extension to the CSI command [Erase in Display (ED)](http://www.xfree86.org/4.7.0/ctlseqs.html), under the command number 3. This command is used to clear the scrollback buffer - e.g. anything not visible on the screen.

Since scrollback [may not be added](https://github.com/jwilm/alacritty/issues/124) to alacritty, I've made the handler for this command do nothing. If at some point scrollback is implemented, the corresponding `match` arm can be modified to properly handle this.

For an example of a program which uses this command, run the `clear` command (using ncurses 6.0). In a supported terminal such as `gnome-terminal`, this will clear anything off of the screen from the scrollback buffer. In the current alacritty `master`, this will generate an `Unhandled CSI` message."3Closing in favor of #63. This is a lot better already, but there's still a couple of issues.Aaron1011Aaron Hill03/04/17 04:22:54 AM"Handle CSI command J3 (Clear saved lines)

Xterm supports an extension to the CSI command `Erase in Display (ED)`,
under the command number 3. This command is used to clear the scrollback
buffer - e.g. anything not visible on the screen.

Since scrollback is not part of alacritty, the handler for this
command currently does nothing. If at some point scrollback is implemented,
the corresponding `match` arm can be modified to properly handle this.

For an example of a program which uses this command, run the `clear`
command (using ncurses 6.0). In a supported terminal such as
`gnome-terminal`, this will clear anything off of the screen from the
scrollback buffer. Before this change, `alacritty` would generate
an `Unhandled CSI` message."1
46201/09/17 12:57:01 AMKevin Kainan LiControl Space does not work and prevents further input"After pressing Control-Space, alacritty stops responding to keyboard input and has to be restarted to function correctly. (I use Control-Space as my tmux prefix.)

I suspect I need an entry in the `.alacritty.yml` but am unsure what the right `char` should be.  "03/08/17 03:47:26 PMOSX: Add app packing tooling - tweaks and polish"Continuation of work started in https://github.com/jwilm/alacritty/pull/301 by @cema-sp which seems to be stalled at the moment. I've just followed all the suggestions in that PR until the code worked for me.

Instructions for building an app bundle:

 1. `cargo build --release`
 2. `make app`
 3. `cp -r target/release/os/Alacritty.app /Applications/Alacritty.app`

For me, this allows me to run Alacritty from the Dock."20Thanks @d3rrial brycefisherBryce Fisher-Fleig03/07/17 05:09:43 PMSetup locale properly in new shell (thanks @casimir)1
46301/07/17 05:46:29 PMHonza Pokorny"Add ""shell"" option to config""This allows you to configure the shell to use when alacritty starts.

cc: #122"03/06/17 10:42:32 PM(fix) Associates .desktop file with running process in Linux desktop OSesAddresses #4551Looks good; thanks!brycefisherBryce Fisher-Fleig03/06/17 10:38:40 PM"(fix) Associates .desktop file with running process in Linux desktop OSes

Addresses #455"1
46505/18/18 11:24:46 PMNoneMouse movement support when click not held"```
[Unhandled CSI] action='h', args=[1003], intermediates=[63]
```"05/29/17 04:52:26 PMFix out of bounds access in glyph buffer.4This feature is implemented on the latest master. This issue probably just wasn't closed when that happened.Capcah-zzCapcah03/07/17 12:49:45 AMFix out of bounds access in glyph buffer.1
46601/19/20 03:47:51 PMNoneMissing keys"  - Shift + F-keys
  - Ctrl + F-keys
  - Shift + tab
  - Numpad / * - +
  - Shift + backspace sends `\8` instead of `\127`"04/04/17 04:03:34 PMFix tabulation rendering"Hey,

I've found two problems with tabulation rendering:
1. tabulation grid is filled incorrectly, it has 8 false elements on the head of the vector. https://github.com/jwilm/alacritty/commit/7906c8125a81199b097cf74b7d156673871d8149
2. there is a case when no empty columns will be rendered for `\t`. https://github.com/jwilm/alacritty/commit/37ad49476f0aeb434557f386dedc945df28e8610

Fixes: https://github.com/jwilm/alacritty/issues/142

A couple of screenshots

Before:
<img width=""290"" alt=""echo"" src=""https://cloud.githubusercontent.com/assets/1387388/23656416/703e792c-035b-11e7-8551-e772db47ce00.png"">

After:
<img width=""290"" alt=""fixed echo"" src=""https://cloud.githubusercontent.com/assets/1387388/23656423/75f536da-035b-11e7-8108-de7ade038b77.png"">

Before:
<img width=""440"" alt=""ls"" src=""https://cloud.githubusercontent.com/assets/1387388/23656494/c5962ad2-035b-11e7-990f-27f1a1d712ca.png"">

After:
<img width=""440"" alt=""fixed ls"" src=""https://cloud.githubusercontent.com/assets/1387388/23656500/c9ca7d74-035b-11e7-89ce-5aa0dc6f3619.png"">

There is a problem with `tab_bg_highlight` test, but it seems that we just should update [grid.json](https://github.com/jwilm/alacritty/blob/master/tests/ref/tab_bg_highlight/grid.json). Is there any way to do it automatically?"8Lot's of bindings were added there 9a14ca42d35e3b72ca254384ef7e4639aab0e100 . + upstream issue for numpad was is also solved, so if you have any desire to add some bindings, please open a separate issue and explain why curtain binding should be added(e.g. mentioning other terminals, functionality , wrong escapes from the current bindings), instead of just mentioning random things.shmatovJoe Wilm04/04/17 03:47:28 PMAdd ref test for tab rendering1
46901/10/18 05:33:48 PMNoneMouse input doesn't go past row 223"If you set a terminal to be *very* tall, then click + drag, after row 223 you no longer get events.

Likewise for columns for a very wide terminal"03/08/17 08:00:40 PMAdd Action to desktop file"The added Action allows the user to open new alacritty windows on
systems that support it.

https://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#extra-actions"2@jwilm Is this fixed with #1001? Sounds a bit like a duplicate of #698.NickeZNiklas Claesson03/08/17 07:50:31 PM"Add Action to desktop file

The added Action allows the user to open new alacritty windows on
systems that support it.

https://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#extra-actions"1
47004/04/17 04:03:34 PMNoneTabs not aligned correctly"printing 8 characters then \9 results in no horizontal movement.
Expected behaviour is that it would go to *next* tab.
![screenshot_2017-01-07_13-35-23](https://cloud.githubusercontent.com/assets/127971/21738693/334eff56-d4de-11e6-8314-5f252c37b6c7.png)"04/04/17 03:56:28 AMUpdate README.md"#462 add OS X desktop entry Makefile.

Thanks @brycefisher "7@jwilm Is this fixed with #1001? Sounds a bit like a duplicate of #698.h-michaelHirokazu Hata03/11/17 08:35:16 AMFix instruction1
47601/07/17 03:01:48 AMDanny DulaiMacOS Terminal.app colors notedfixes issue #120 04/04/17 04:39:59 AMUse just instead of make"This PR:

- Changes the makefile which builds the MacOS app package into a justfile
- Changes instances of `osx` into `macos`, since that seems to be the new name
- Adds a `macos-` prefix to the recipe names so that other recipes can be added without conflicting

Just is a command runner which avoids the complexity and idiosyncrasies of make while retaining the concise syntax: https://github.com/casey/just

This introduces a dependency for building the mac app, so I'll understand if you don't want to merge it.

If you like the idea of trying out just but don't want to introduce it as a dependency for building the mac app, I can close this PR and open one which has a simple justfile and doesn't modify the current makefile.

Some advantages of just:

- Variables are single-assignment and order-independent, which makes them very easy to reason about and avoids the `=` vs `:=` duality of make
- Undefined variables generate an error instead of expanding into the empty string
- Both runtime and compile time messages are *much* better than make's. They are colored, give precise information about what went wrong, and highlight the line in question
- Close enough to makefile syntax that vim and emacs syntax highlighting work well out of the box
- Does not depend on make, so behavior is correct regardless of the system-provided make
- Is not a build system, so does not need `.PHONY` targets or other hacks
- Written in rust, installs through cargo
- Supports doc-comments, listing recipes, listing evaluated variables, and other helpful command line options
- Like git, just can be invoked in any subdirectory of the project
- Tabs or spaces both work for indentation, as long as they are consistent within a single recipe

It's very good as a place to store frequently run project-specific commands, both for yourself and collaborators. For example, different ways of running tests, different build configurations, running with a debugger, fuzz testing, running kcov, etc. Basically, anything you currently reverse search your shell history to find. See [here](https://github.com/ssokolow/rust-cli-boilerplate/blob/master/justfile) and [here](https://github.com/casey/boilerplate/blob/master/justfile) for examples."4"We've got [a wiki page](https://github.com/jwilm/alacritty/wiki/Color-schemes) for this purpose now. It actually looks like someone already contributed Terminal.app.

Thanks for the PR, though!"caseyCasey Rodarmor03/11/17 09:07:58 PMUse just instead of make1
47701/11/17 05:07:32 PMNoneGetting [unhandled osc_start]"```
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='@'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='u'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='-'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='~'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='y'
[unhandled osc_end] byte=0
Goodbye
```

This seems to be some issue with handling my PS1 prompt? (this might be my fault!).
xxd output of my bash prompt:
```
00000000: 011b 5b33 336d 0230 312d 3037 2031 333a  ..[33m.01-07 13:
00000010: 3530 3a32 3320 011b 5b30 3b31 6d02 6461  50:23 ..[0;1m.da
00000020: 7572 6e69 6d61 746f 7201 1b5b 306d 0240  urnimator..[0m.@
00000030: 011b 5b33 326d 0264 6175 726e 2d7a 3137  ..[32m.daurn-z17
00000040: 3020 011b 5b31 3b33 346d 027e 2f73 7263  0 ..[1;34m.~/src
00000050: 2f61 6c61 6372 6974 7479 011b 5b30 6d02  /alacritty..[0m.
00000060: 2001 1b5b 3332 6d02 6769 743a 7b6d 6173   ..[32m.git:{mas
00000070: 7465 722e 2e2e 6f72 6967 696e 2f6d 6173  ter...origin/mas
00000080: 7465 723a 6337 3332 3935 377d 2001 1b5b  ter:c732957} ..[
00000090: 306d 0224 2001 1b5b 306d 02              0m.$ ..[0m.
```

Note that bash will eat the `\1` and `\2` (bash uses them as delimiters to know what chars to count for positioning the cursor)"06/23/17 06:36:39 PM[WIP] add possibility for debug and feature build from makefile"with this changes you're able to build allacritty in debug mode and/or witch a different feature set when using the makefile e.g.:
`make  binary DEBUG=true FEATURES=""""` will build allacritty in debug mode without default features

WIP since I'm on linux and can't test the changes"1Fwiw, the unhandled errors from my prompt or prompt command setting the title looked exactly the same.juggle-tuxJuggle Tux03/13/17 09:21:30 PMadd possibility for debug and feature build from makefile1
47801/07/17 07:43:10 PMNoneStop cursor from moving past right screen edge"This fixes #133.

See discussion on #133 about whether or not this is the right way to fix #133. Naturally, if it isn't feel free to close this pull request."04/19/17 02:59:24 AMAdd capability to set working directory as a command line argument.As it stands, running `alacritty -e 'cd foo'` causes `Command::spawn()` to fail with OS error code `2`. With this feature, running `alacritty -c foo` runs alacritty from the working directory `foo` via `libc::chdir`, with the intended purpose of starting the shell from a specific directory. It mirrors the functionality of the `-cd` flag from `urxvt`.11#164 fixed this and a number of other bounds issues. Thanks for the PR, though!zachariedZach Day04/12/17 05:15:50 PMManipulate the command builder instead of setting global environment when setting working directory.1
47901/03/18 07:15:58 PMNoneShift + mouse select should work"Carrying over from https://github.com/jwilm/alacritty/issues/6#issuecomment-271057705

To avoid a terminal program from capturing all mouse events, it's common to hold Shift while selecting."04/04/17 04:34:07 AMFix hang on exit after child process failed"Quick test (works ~50%) is to press Ctrl+C followed by Ctrl+D.

Reproducible on Arch Linux with OpenGL from NVidia.

Fixes #228 

**NOTE:** I'm not sure what the original code tried to solve but AFAIK terminal emulators exit with code 0 even if last child process exit code is non-zero (or is terminated).

Call stack when the app hangs:

```
__GI___sched_yield (__GI___sched_yield @7f4ac603a700:5)
___lldb_unnamed_symbol1397$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol1397$$libGLX_nvidia.so.0 @7f4ac1c10950:8)
___lldb_unnamed_symbol36172$$libnvidia-glcore.so.378.13 (___lldb_unnamed_symbol36172$$libnvidia-glcore.so.378.13 @7f4ac092c710:80)
___lldb_unnamed_symbol899$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol899$$libGLX_nvidia.so.0 @7f4ac1be7bd0:45)
___lldb_unnamed_symbol929$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol929$$libGLX_nvidia.so.0 @7f4ac1beb6e0:244)
___lldb_unnamed_symbol1662$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol1662$$libGLX_nvidia.so.0 @7f4ac1c5c000:112)
_dl_fini (_dl_fini @7f4ac705a750:128)
__run_exit_handlers (__run_exit_handlers @7f4ac5f9c5d0:70)
__GI_exit (@7f4ac5f9c71a:3)
std::sys::imp::os::exit (/build/rust/src/rustc-1.15.1-src/src/libstd/sys/unix/os.rs:526)
std::process::exit (/build/rust/src/rustc-1.15.1-src/src/libstd/process.rs:858)
alacritty::tty::sigchld (/home/lukas/apps/alacritty/src/tty.rs:56)
___lldb_unnamed_symbol1$$libc.so.6 (__restore_rt @7f4ac5f99a90:3)
__GI___poll (__GI___poll @7f4ac6048650:15)
___lldb_unnamed_symbol4$$libxcb.so.1 (___lldb_unnamed_symbol4$$libxcb.so.1 @7f4ac388c840:39)
xcb_wait_for_event (xcb_wait_for_event @7f4ac388e630:28)
_XReadEvents (_XReadEvents @7f4ac3aeb070:88)
XPeekEvent (XPeekEvent @7f4ac3adc9c0:57)
glutin::api::x11::window::{{impl}}::next (/home/lukas/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/cc64178/src/api/x11/window.rs:297)
glutin::platform::platform::api_dispatch::{{impl}}::next (/home/lukas/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/cc64178/src/platform/linux/api_dispatch.rs:169)
```"1"solution: disable the defualt binding in the config
```
mouse_bindings:
  - { mouse: Middle, mods: Shift, action: PasteSelection }
  - { mouse: Right,  mods: Shift, action: Paste }
  - { mouse: Middle,  action: None }
  - { mouse: Right,  action: None }
```"hlukLukas Holecek03/14/17 07:39:20 AM"Fix hang on exit after child process failed

Quick test (works ~50%) is to press Ctrl+C followed by Ctrl+D.

Reproducible on Arch Linux with OpenGL from NVidia.

Fixes #228"1
48001/07/17 10:56:58 PMDaniel RHEL 7 failure to build"I'm running RHEL 7 at work and tried to build Alacrity following the README.

cargo check --verbose                                                                                                                                                     
    Updating registry `https://github.com/rust-lang/crates.io-index`
error: [0/-1] an unknown error occurred

Let me know what other details I can share."04/04/17 04:30:06 AMFix reading output when all child processes exited"Reproducible with e.g. `alacritty -e ls` (app panics when reading
output).

Hopefully this won't break #14."1"I changed the build back to the default: `rustup override set `nightly`

re-exported the paths and tried again with `DEBUG`:

> --- stderr
> /home/dcuneo/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/missing: line 81: gperf: command not found
> WARNING: 'gperf' is missing on your system.
>          You might have modified some files without having the proper
>          tools for further handling them.  Check the 'README' file, it
>          often tells you about the needed prerequisites for installing
>          this package.  You may also peek at any GNU archive site, in
>          case some other package contains this missing 'gperf' program.
> make[3]: *** [fcobjshash.h] Error 1
> make[3]: *** Waiting for unfinished jobs....
> make[2]: *** [all-recursive] Error 1
> make[1]: *** [all] Error 2
> make: *** [/home/dcuneo/alacritty/target/release/build/servo-fontconfig-sys-be329699d5f46d04/out/libfontconfig.a] Error 2
> thread 'main' panicked at 'assertion failed: Command::new(""make"").args(&[""-R"", ""-f"",
>                             ""makefile.cargo""]).status().unwrap().success()', /home/dcuneo/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/build.rs:17
> note: Run with `RUST_BACKTRACE=1` for a backtrace.

After exporting the variable: `RUST_BACKTRACE=1`

> --- stderr
> /home/dcuneo/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/missing: line 81: gperf: command not found
> WARNING: 'gperf' is missing on your system.
>          You might have modified some files without having the proper
>          tools for further handling them.  Check the 'README' file, it
>          often tells you about the needed prerequisites for installing
>          this package.  You may also peek at any GNU archive site, in
>          case some other package contains this missing 'gperf' program.
> make[3]: *** [fcobjshash.h] Error 1
> make[2]: *** [all-recursive] Error 1
> make[1]: *** [all] Error 2
> make: *** [/home/dcuneo/alacritty/target/release/build/servo-fontconfig-sys-be329699d5f46d04/out/libfontconfig.a] Error 2
> thread 'main' panicked at 'assertion failed: Command::new(""make"").args(&[""-R"", ""-f"",
>                             ""makefile.cargo""]).status().unwrap().success()', /home/dcuneo/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/build.rs:17
> stack backtrace:
>    1:     0x7f9f21c8512a - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
>    2:     0x7f9f21c8a1af - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
>    3:     0x7f9f21c89dae - std::panicking::default_hook::he87e0c76c89c52a4
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
>    4:     0x7f9f21c8a597 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
>    5:     0x7f9f21c75a74 - std::panicking::begin_panic::h1dc990fced681ffe
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
>    6:     0x7f9f21c768be - build_script_build::main::hf57109037f3eb7e3
>                         at /home/dcuneo/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/build.rs:17
>    7:     0x7f9f21c92d6a - __rust_maybe_catch_panic
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
>    8:     0x7f9f21c8acd6 - std::rt::lang_start::h832f9067ed8c4dd4
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
>                         at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/rt.rs:57
>    9:     0x7f9f20e6fb34 - __libc_start_main
>   10:     0x7f9f21c75928 - <unknown>
>   11:                0x0 - <unknown>


I ran the build again after yum installing gperf:

`ls target/release/alacritty 
target/release/alacritty`


In summary to BUILD RHEL 7:

- Use the default build
- Install gperf

I copied the git config to my home and ran the program:

`Error creating glutin::Window; No backend is available`"hlukLukas Holecek03/14/17 08:34:29 AM"Fix reading output when all child processes exited

Reproducible with e.g. `alacritty -e ls` (app panics when reading
output)."1
48305/29/18 04:50:51 PMSimonas KazlauskasCompose key does not workA chiefly x11 feature called compose keys does not work with alacritty.04/04/17 03:58:28 AMAdded installation notes for MacOS.I've tried building it on MacOS. Seems to work fine.1Does it work (on X11) on this branch? https://github.com/francesca64/alacritty/tree/winit-gitbeyeranAndre Pascal Beyer03/16/17 01:45:58 PMAdded installation notes for MacOS.1
49201/07/17 03:25:08 AMDanny Dulaiadd shift-tab keybindingfixes part of #140 06/23/17 05:53:15 PMAdd dim color support"Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config,
it will default to 2/3 the previous (not a spec, but the value
other terminals seem to use). 

The actual dimming behavior brings bright colors to normal and
regular colors to the new dim ones. Custom RGB values are not
changed, nor are non-named indexed colors.

Old behavior:
![Old Behavior](https://i.imgur.com/CYwY4Nr.png)

New behavior:
![New Defaults](https://i.imgur.com/JKwdnao.png)

New behavior with (odd-looking) custom colors:
![New w/ Custom Colors](https://i.imgur.com/ngKLRH9.png)

The colors from the config file are roughly Tomorrow Night Eighties."5Thanks for the PR! Would you mind squashing those commits?jmerdichJake Merdich03/22/17 05:07:10 AM"Add dim color support

Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config,
it will default to 2/3 the previous (not a spec, but the value
other terminals seem to use).

The actual dimming behavior brings bright colors to normal and
regular colors to the new dim ones. Custom RGB values are not
changed, nor are non-named indexed colors."1
49407/02/17 01:02:13 AMSimonas KazlauskasJumping from VAAPI-rendered screen to alacritty causes GPU to hang"Reproducible: always.
CPU/GPU: Intel® Core™ i7-4750HQ/Integrated
Driver packages: xf86-video-intel 1:2.99.917+746+g169c74f-1 + i915 1.6.0 20160711

So I’ve used alacrity twice to launch `mpv` (which uses VAAPI decoding and rendering). As soon as I tab from `mpv` directly to `alacrity`, the display (gpu) hangs and no amount of blind typing salvages the system (CPU reset is necessary).

While I doubt there’s anything actionable to be done here, I thought it would be a good idea to report the issue nevertheless."05/01/17 04:56:43 PM"Revert ""Update cell to cursor template when adding a tab.""""Reverted commit introduced a regression that caused `htop` to have
~broken display (misplaced/missing characters).

Fixes #493.

This reverts commit 96a1503040787006a45a69dc55916d983d96421e."3Closing this since there's not anything actionable on our side. Thanks for documenting the problem, though!zetokZetok Zalbavar03/24/17 12:03:04 AM"Revert ""Update cell to cursor template when adding a tab.""

Reverted commit introduced a regression that caused `htop` to have
~broken display (misplaced/missing characters).

Fixes #493.

This reverts commit 96a1503040787006a45a69dc55916d983d96421e."1
49601/07/17 04:06:36 AMDanny Dulaishift-tab key bindingfixes part of #140 06/20/17 10:11:34 AMFix the ability to pin the app to the dock"After installing Alacritty, I found I couldn't pin the application to the dock (in mac os) for easy launching. This change fixes that.

According to the Apple documentation, this property is an identifier in reverse domain form, similar to Java package namespaces.

https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070"6Thanks!mscharleyMatthew Scharley03/24/17 08:17:11 PMFix the ability to pin the app to the dock1
49801/08/17 12:01:39 AMMichael BrumlowClear only new lines on resize."I found that resize was clearing lines from current line to end on resize. In my setup with a 2 line prompt the second line would be cleared if the window resize happened after printing the second line of the prompt. This mostly happened on startup. 

* This also fixes a crash/panic when you resize the window to zero lines. (half of a fix for #12, the other half is fixed in #154)."03/27/17 04:09:48 PMRemap `Copy` and `Paste` to use `Shift + Control` instead of `Command`Closes #307.1Closing this PR, will have one that combines my 2 outstanding PRs into one. zetokZetok Zalbavar03/27/17 10:01:50 AM"Remap `Copy` and `Paste` to use `Shift + Control` instead of `Command`

Closes #307."1
50212/09/19 10:12:46 PMJude TaylorAlacritty doesn't display emoji"I know, I know.

Anyway, iTerm 2 and Terminal.app are both able to display emoji:

![example](https://i.imgur.com/bpSPscs.png)

but alacritty isn't:

![example](https://i.imgur.com/TOLO7IX.png)"04/04/17 03:46:09 AMDo not replace $SHELL with --command option"Fixes #501

Continue to allow user to override default shell in yaml config, but `--command` option is not guaranteed to be a shell command, and should not override `$SHELL`."2"i'm on `linux mint 19.3` and using `alacritty 0.5.0-dev (e009869)`. this is my `zsh` (v5.7.1) and `bash` (v4.4.20):
![Screenshot from 2020-06-04 14-15-17](https://user-images.githubusercontent.com/14293802/83795740-ead9a680-a66d-11ea-8dd6-02d0f652c82c.png)

don't know why it looks different with yours @dvergeylen  `¯\_(ツ)_/¯`

this is on my chrome
![screenshot-github com-2020 06 04-14_16_47](https://user-images.githubusercontent.com/14293802/83795850-16f52780-a66e-11ea-9740-c70a8418ddff.png)

this is my `.config/fontconfig/font.conf`
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE fontconfig SYSTEM ""fonts.dtd"">
<fontconfig>

    <!-- Add generic family. -->
    <match target=""pattern"">
        <test qual=""any"" name=""family""><string>emoji</string></test>
        <edit name=""family"" mode=""assign"" binding=""same""><string>Noto Color Emoji</string></edit>
    </match>

    <!-- This adds Noto Color Emoji as a final fallback font for the default font families. -->
    <match target=""pattern"">
        <test name=""family""><string>sans</string></test>
        <edit name=""family"" mode=""append""><string>Noto Color Emoji</string></edit>
    </match>

    <match target=""pattern"">
        <test name=""family""><string>serif</string></test>
        <edit name=""family"" mode=""append""><string>Noto Color Emoji</string></edit>
    </match>

    <match target=""pattern"">
        <test name=""family""><string>sans-serif</string></test>
        <edit name=""family"" mode=""append""><string>Noto Color Emoji</string></edit>
    </match>

    <match target=""pattern"">
        <test name=""family""><string>monospace</string></test>
        <edit name=""family"" mode=""append""><string>Noto Color Emoji</string></edit>
    </match>

    <!-- Block Symbola from the list of fallback fonts. -->
    <selectfont>
        <rejectfont>
            <pattern>
                <patelt name=""family"">
                    <string>Symbola</string>
                </patelt>
            </pattern>
        </rejectfont>
    </selectfont>

</fontconfig>
```
this is my `~/.font/`
```bash
.
├── AppleColorEmoji.ttf
├── Cousine
│   ├── Cousine Bold Italic Nerd Font Complete Mono.ttf
│   ├── Cousine Bold Italic Nerd Font Complete Mono Windows Compatible.ttf
│   ├── Cousine Bold Italic Nerd Font Complete.ttf
│   ├── Cousine Bold Italic Nerd Font Complete Windows Compatible.ttf
│   ├── Cousine Bold Nerd Font Complete Mono.ttf
│   ├── Cousine Bold Nerd Font Complete Mono Windows Compatible.ttf
│   ├── Cousine Bold Nerd Font Complete.ttf
│   ├── Cousine Bold Nerd Font Complete Windows Compatible.ttf
│   ├── Cousine Italic Nerd Font Complete Mono.ttf
│   ├── Cousine Italic Nerd Font Complete Mono Windows Compatible.ttf
│   ├── Cousine Italic Nerd Font Complete.ttf
│   ├── Cousine Italic Nerd Font Complete Windows Compatible.ttf
│   ├── Cousine Regular Nerd Font Complete Mono.ttf
│   ├── Cousine Regular Nerd Font Complete Mono Windows Compatible.ttf
│   ├── Cousine Regular Nerd Font Complete.ttf
│   └── Cousine Regular Nerd Font Complete Windows Compatible.ttf
├── NotoColorEmoji.ttf
├── NotoEmoji-Regular.ttf
└── TwitterColorEmoji-SVGinOT.ttf
```"boxofroxJustin Charette04/01/17 11:30:29 PM"Do not replace $SHELL with --command option

Signed-off-by: Justin Charette <charetjc@gmail.com>"1
50501/08/17 12:01:51 AMMichael BrumlowMake sure we have at least one column."Prevents a panic when the window is resized to 0 columns width. 

* Final fix for #12 "04/04/17 04:34:22 AMBetter error handling in event loop"Also checks hup first since if the terminal is either not readable or
writable there's nothing for Alacritty to do.

Closes #480." =||= Closing this PR, will have one that combines my 2 outstanding PRs into one. jwilmJoe Wilm04/04/17 04:27:03 AM"Better error handling in event loop

Also checks hup first since if the terminal is either not readable or
writable there's nothing for Alacritty to do.

Closes #480."1
50706/20/17 04:14:41 PMDanny Dulaineed way to change cursor colorRight now the cursor disappears in many cases (like if you over inverted text). A cursor colored differently than the default foreground color fixes that.04/19/17 02:33:24 AMFix delete key bindingResolves jwilm/alacritty#192.2"I have a working patch for this. It lets you create 2 new named colors: cursorforeground and cursorbackground.

However, it breaks the 'invert' option. I personally don't like the invert behavior at all, but I can see how you (@jwilm) might.

Suggestions on how to provide both as an option? maybe a second boolean config option to invert and ignore the cursorfore/background colors?
"HolzhausJoe Wilm04/19/17 02:32:23 AMFix delete key binding for macOS1
50901/07/17 06:06:29 AMMichael BrumlowFixes a slew of bounds issues."Fixed a few bounds issues. 

#133  - Fixed"04/23/17 04:23:28 PMAdd glyph offset - Take 2Fix #317 for all glyphs. This PR also updates #317 to merge in the master branch.3"I have a working patch for this. It lets you create 2 new named colors: cursorforeground and cursorbackground.

However, it breaks the 'invert' option. I personally don't like the invert behavior at all, but I can see how you (@jwilm) might.

Suggestions on how to provide both as an option? maybe a second boolean config option to invert and ignore the cursorfore/background colors?
"overdrivenpotatoMarko Mijalkovic04/09/17 09:04:01 PMProperly offset newly cached glyphs1
51001/29/17 02:15:58 AMVan Tien[Question] How to change code to use zsh or fish-shell?"Hi, how should I modify the code to use zsh or fish-shell instead of bash?

Thanks"12/24/17 05:33:04 PMExtract dpr based vars into method. Rebuild on resize"Fix for #71 atleast resizing seems to still work.

~~**DO NOT MERGE**: have to wait until I get to work to try it on retina monitor. Will update with result.~~

Note: I have no idea what I am doing in rust. Im a node/ruby guy. I'll change anything you want me to change!"11Shell can now be specified in the config file or by using the `-e` argument.trashhalotrashhalo04/30/17 03:25:41 AMdelete atlas textures on glyph cache rebuild1
51301/07/17 06:06:42 AMMatt Donahoe#[feature] may not be used on the stable release channel"Got this error on Ubuntu 14.04 after installing rust per Alacritty's README and attempting a `cargo build --release`

```
master:alacritty$ cargo build --release
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/jwilm/glutin`
    Updating git repository `https://github.com/jwilm/rust-fontconfig`
    Updating git repository `https://github.com/jwilm/libfontconfig`
 Downloading xdg v2.0.0
 Downloading libc v0.2.18
 Downloading bitflags v0.7.0
 Downloading errno v0.1.8
 Downloading serde_derive v0.8.19
 Downloading serde v0.8.19
 Downloading serde_json v0.8.4
 Downloading serde_yaml v0.5.0
 Downloading notify v2.6.3
 Downloading parking_lot v0.3.6
 Downloading vte v0.1.2
 Downloading mio v0.6.1
 Downloading cgmath v0.7.0
 Downloading euclid v0.6.8
 Downloading num-traits v0.1.36
 Downloading heapsize v0.3.7
 Downloading serde v0.7.15
 Downloading rustc-serialize v0.3.22
 Downloading log v0.3.6
 Downloading kernel32-sys v0.2.2
 Downloading winapi v0.2.8
 Downloading winapi-build v0.1.1
 Downloading lazy_static v0.2.2
 Downloading shared_library v0.1.5
 Downloading gl_generator v0.5.2
 Downloading khronos_api v1.0.0
 Downloading xml-rs v0.3.5
 Downloading serde_codegen v0.8.19
 Downloading quote v0.3.10
 Downloading serde_codegen_internals v0.11.1
 Downloading syn v0.10.3
 Downloading unicode-xid v0.0.3
 Downloading itoa v0.1.1
 Downloading dtoa v0.2.2
 Downloading yaml-rust v0.3.5
 Downloading linked-hash-map v0.3.0
 Downloading serde_test v0.8.19
 Downloading filetime v0.1.10
 Downloading time v0.1.35
 Downloading walkdir v0.1.8
 Downloading bitflags v0.4.0
 Downloading owning_ref v0.2.2
 Downloading parking_lot_core v0.2.0
 Downloading rand v0.3.15
 Downloading smallvec v0.1.8
 Downloading utf8parse v0.1.0
 Downloading lazycell v0.4.0
 Downloading net2 v0.2.26
 Downloading slab v0.3.0
 Downloading cfg-if v0.1.0
 Downloading num v0.1.36
 Downloading num-bigint v0.1.35
 Downloading num-complex v0.1.35
 Downloading num-integer v0.1.32
 Downloading num-iter v0.1.32
 Downloading num-rational v0.1.35
 Downloading freetype-rs v0.9.0
 Downloading freetype-sys v0.4.0
 Downloading bitflags v0.6.0
 Downloading libz-sys v1.0.10
 Downloading pkg-config v0.3.8
 Downloading gcc v0.3.40
 Downloading expat-sys v2.1.4
 Downloading cmake v0.1.19
 Downloading x11-dl v2.11.0
 Downloading wayland-client v0.5.12
 Downloading osmesa-sys v0.1.2
 Downloading wayland-kbd v0.3.6
 Downloading wayland-window v0.2.3
 Downloading crossbeam v0.2.10
 Downloading dlib v0.3.1
 Downloading wayland-sys v0.5.11
 Downloading libloading v0.3.1
 Downloading target_build_utils v0.1.2
 Downloading phf v0.7.20
 Downloading phf_shared v0.7.20
 Downloading phf_codegen v0.7.20
 Downloading phf_generator v0.7.20
 Downloading lazy_static v0.1.16
 Downloading wayland-scanner v0.5.11
 Downloading memmap v0.2.3
 Downloading fs2 v0.2.5
 Downloading byteorder v0.5.3
 Downloading tempfile v2.1.4
 Downloading rustc_version v0.1.7
 Downloading semver v0.1.20
 Downloading inotify v0.2.3
 Downloading mio v0.5.1
 Downloading bytes v0.3.0
 Downloading slab v0.1.3
 Downloading miow v0.1.4
 Downloading nix v0.5.1
 Downloading ws2_32-sys v0.2.1
 Downloading nix v0.7.0
 Downloading void v1.0.2
   Compiling gcc v0.3.40
   Compiling bitflags v0.7.0
   Compiling slab v0.1.3
   Compiling slab v0.3.0
   Compiling crossbeam v0.2.10
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.16
   Compiling quote v0.3.10
   Compiling xml-rs v0.3.5
   Compiling log v0.3.6
   Compiling khronos_api v1.0.0
   Compiling byteorder v0.5.3
   Compiling bytes v0.3.0
   Compiling kernel32-sys v0.2.2
   Compiling ws2_32-sys v0.2.1
   Compiling pkg-config v0.3.8
   Compiling phf_shared v0.7.20
   Compiling lazy_static v0.2.2
   Compiling semver v0.1.20
   Compiling libc v0.2.18
   Compiling phf v0.7.20
   Compiling serde v0.8.19
   Compiling xdg v2.0.0
   Compiling shared_library v0.1.5
   Compiling rand v0.3.15
   Compiling filetime v0.1.10
   Compiling owning_ref v0.2.2
   Compiling heapsize v0.3.7
   Compiling serde v0.7.15
   Compiling servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)
   Compiling itoa v0.1.1
   Compiling rustc_version v0.1.7
   Compiling bitflags v0.4.0
   Compiling smallvec v0.1.8
   Compiling nix v0.5.1
   Compiling bitflags v0.6.0
   Compiling ffi-util v0.1.0 (file:///home/matt/alacritty/ffi-util)
   Compiling freetype-sys v0.4.0
   Compiling num-traits v0.1.36
   Compiling tempfile v2.1.4
   Compiling errno v0.1.8
   Compiling parking_lot_core v0.2.0
error[E0554]: #[feature] may not be used on the stable release channel
  --> /home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.0/src/lib.rs:40:34
   |
40 | #![cfg_attr(feature = ""nightly"", feature(const_fn))]
   |                                  ^^^^^^^^^^^^^^^^^

error[E0554]: #[feature] may not be used on the stable release channel
  --> /home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.0/src/lib.rs:41:34
   |
41 | #![cfg_attr(feature = ""nightly"", feature(integer_atomics))]
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0554]: #[feature] may not be used on the stable release channel
  --> /home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.0/src/lib.rs:42:34
   |
42 | #![cfg_attr(feature = ""nightly"", feature(asm))]
   |                                  ^^^^^^^^^^^^

error: aborting due to 3 previous errors

Build failed, waiting for other jobs to finish...
error: Could not compile `parking_lot_core`.

To learn more, run the command again with --verbose.

```"04/14/17 05:19:13 PMBumping winit to 0.6.3 to get fix for macos dpr event change"Looking to bring in:
https://github.com/tomaka/winit/commit/cccc48b84d403b6957b31c5172db1367ed42762d"2"My mistake. I somehow didn't see step 3 and jumped straight to the Ubuntu section.

Works great now, thanks!"trashhalotrashhalo04/13/17 02:31:38 AMBumping winit to 0.6.3 to get fix for dpr change1
51401/07/17 05:43:41 PMJoe WilmFix issue with some international inputscc #87, #5504/19/17 02:30:48 AMuse xxhash for faster glyph caching"[twox-hash](https://libraries.io/cargo/twox-hash) is a rust implementation of the [xxhash](https://github.com/Cyan4973/xxHash) algorithm.
>xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the SMHasher test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical on all platforms (little / big endian).

When doing my `base64 /dev/urandom` test tonight I found a good chunk of time was spent in the fnv hasher inside GlyphCache. I researched hashing algorithms available in rust and thought xxhash would be be a good fit. 
# Before FNV
<img width=""874"" alt=""screen shot 2017-04-14 at 10 35 32 pm"" src=""https://cloud.githubusercontent.com/assets/177491/25060139/1f921372-2164-11e7-8c47-79c902bdf2b7.png"">

# After XXHASH
<img width=""863"" alt=""screen shot 2017-04-14 at 10 37 23 pm"" src=""https://cloud.githubusercontent.com/assets/177491/25060141/29b583d4-2164-11e7-9f94-c727a4e8ef6c.png"">

# Summary
Both benchmarks ran for about two seconds of base64 output. Fnv hashing was about 25% of the weight in the first run. XXhash was about 5.9% of the second run. Seems like an easy win."2Sounds like this is a net positive; merging.trashhalotrashhalo04/15/17 02:39:59 AMuse xxhash for faster glyph caching1
51701/04/19 05:09:32 PMNazri Ramliy"Problem with ""no decoration"" (window title bar)""In openbox I can specify the list of application that should not have window decoration (no window title) by specifying the following entry in `~/.config/openbox/rc.xml`

```xml
<applications>
  <application class=""UXTerm"">
    <decor>no</decor>
  </application>
  <application class=""Alacritty"">
    <decor>no</decor>
  </application>
</applications>
```

It works for uxterm, somehow it doesn't for alacritty. But if I restart openbox then the existing alacritty windows which previously (wrongly) had window titles would (correctly) no longer have the titles. New instances of alacritty will (wrongly) have the window title though."06/20/17 02:56:31 PMAdding snapcraft.yaml"[Snapcraft](https://snapcraft.io/) makes Linux packaging very simple in a cross-distro
way. This adds the snapcraft.yaml file to setup a snap of
alacritty."6It's now possible to disable the titlebar using the Alacritty config.ChrisMacNaughtonChris MacNaughton04/21/17 07:51:05 AMremove $SNAP variable inside snap environment1
52001/09/17 05:42:36 PMJesse CookeCtrl-l panics on Linux"On 852c2d8 I get the following backtrace

```
> env RUST_BACKTRACE=1 alacritty
# I hit Ctrl+l (that's an L)
thread 'pty reader' panicked at 'index out of bounds: the len is 24 but the index is 18446744073709551615', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
stack backtrace:
   1:     0x55ad85cbd2ba - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55ad85cc262f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x55ad85cc222e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x55ad85cc2ad7 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x55ad85cc2964 - std::panicking::begin_panic::h814f60faa3ce8314
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x55ad85cc2889 - std::panicking::begin_panic_fmt::hf4f7d700fa077693
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:499
   7:     0x55ad85cc2817 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:475
   8:     0x55ad85cee8dd - core::panicking::panic_fmt::hee207ff21fb62166
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x55ad85cee888 - core::panicking::panic_bounds_check::hca28eae069525a56
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x55ad85bb809e - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::hefa9b8d1fdb41d3b
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcollections/vec.rs:1371
                        at /home/jesse/src/alacritty/src/grid.rs:310
                        at /home/jesse/src/alacritty/src/grid.rs:224
                        at /home/jesse/src/alacritty/src/term/mod.rs:621
                        at /home/jesse/src/alacritty/src/ansi.rs:438
  11:     0x55ad85bb0b5d - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::hedf7c076eee628c6
                        at /home/jesse/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:167
                        at /home/jesse/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /home/jesse/src/alacritty/src/ansi.rs:85
                        at /home/jesse/src/alacritty/src/event_loop.rs:211
                        at /home/jesse/src/alacritty/src/event_loop.rs:308
  12:     0x55ad85b9c1db - std::panicking::try::do_call::h0f7314b05607066d
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:295
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:458
  13:     0x55ad85cc9a1a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  14:     0x55ad85bae9ca - <F as alloc::boxed::FnBox<A>>::call_box::h4b6067876e9dfe43
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:287
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  15:     0x55ad85cc1924 - std::sys::imp::thread::Thread::new::thread_start::h460a0adc61139b06
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  16:     0x7f5cb4bfb6c9 - start_thread
  17:     0x7f5cb471e0ae - __clone
  18:                0x0 - <unknown>
Goodbye
```

It doesn't crash when I hit `Ctrl+l` in `tmux`.

This project is fantastic! Great work! :tada: :fireworks: :balloon: "04/23/17 04:18:38 PMDesktop file fixes"Resolves #519 "1Resolved, thanks!mberkMaurice Berk04/22/17 08:37:50 AMAdd trailing semicolons to Categories and Actions1
52106/26/17 09:39:49 PMKevin BurkeSupport Fraktur ANSI escape sequence"If I run `echo -e ""\e[20mfoobarblahbizbang\e[0m""` in the command line, I expect to see Gothic text, but instead see text rendered in the default font.

According to the ANSI escape specification in ECMA-48, this escape sequence should produce text rendered in Fraktur (see page 75 here: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)."04/23/17 04:19:26 PMFix typo in Alacritty.desktopDesktop entry wouldn't show up in menus, so I looked through a file in search of any errors. Now everything shows up correctly.2what the fuck how does this escape sequence even existE100BetaPavel Kiselev04/22/17 08:43:05 PM"Fix typo in Alacritty.desktop

Desktop entry wouldn't show up in menus, so I looked through a file in search of any errors. Now everything shows up correctly."1
52201/07/17 06:20:02 PMMichael BrumlowFixes a slew of bounds issues."Fixed a bunch of bounds issues. Most of them were caused by input in src/term/mod.rs leaving self.cursor.col dirty after printing the last char on a line before a wrap was forced. 

These changes ensure when using self.cursor.col and self.cursor.line are within sane values before using them when using them when handling other escape sequences. Care is also taken to ensure the resulting updates to self.cursor.col and self.cursorline are within proper bounds. 

#63 - Fixed
#104 - Fixed 
#108 - Fixed 
#116 - Fixed
#133 - Fixed "02/09/19 11:16:58 AMImplement copypaste/x11 using x11-clipboardfix #515@mbrumlow the two issues I still encounter are have backtraces [in this comment](https://github.com/jwilm/alacritty/issues/63#issuecomment-271103638). Running latest master on my mbp and still get a panic.quininerquininer09/28/17 04:33:40 PMupgrade x11-clipboard to 0.21
52401/08/17 06:27:01 AMKevin CoxLinux: Auto-detect scaling factor.On linux the default scaling factor should be auto detected so that the default user experience isn't a tiny little window.05/28/17 02:58:15 AMAdd script to apply a tilix colorscheme file.None1"Thanks for the report!

You can set your screen's DPI in the config file as a workaround to autodetection. Closing as a duplicate of #202 "akatrevorjayTrevor Joynson (trevorj)04/26/17 11:29:26 AMRespect XDG_CONFIG_HOME1
53101/09/17 12:42:15 AMJames GonzalezWon't build on macOS 10.12.2"I've tried to build, using this command, and following instructions provided, I am receiving errors.

**cmd:** 
`cargo build --release --verbose`

**error:**
```
error: failed to run `rustc` to learn about target-specific information

Caused by:
  process didn't exit successfully: `rustc - --crate-name _ --print=file-names --crate-type bin --crate-type proc-macro --crate-type rlib --target x86_64-apple-darwin` (exit code: 101)
--- stderr
error: unknown crate type: `proc-macro`
```


Note: Command was used before hand `rustup override set $(cat rustc-version)`"05/01/17 03:21:43 PMMore vttest passing"Now passes

* tab stop manipulation
* insert mode

Also has adds a limit check for scrolling logic (was panicking)." =||= Adding this for anyone: I had to do a `brew unlink rust` then restart the terminal before cargo would show the correct path (`~/.cargo/bin/cargo`).jwilmJoe Wilm05/01/17 05:10:38 AMSupport insert mode1
53203/24/19 09:29:55 PMAlex SkrylDragging by the title bar does not report cursor position to OS"When clicking and holing by the title bar to drag the window, a highlighted area appears in the terminal and the cursor position doesn't seem to be reported to the OS. This prevents BetterTouchTool (and other window tools) from performing auto window snapping/resizing.

Thanks for the great work! 👍 "05/01/17 03:36:10 PMSet _NET_WM_PIDSets `_NET_WM_PID` window property in x11 environments. =||= "I was not able to reproduce this with my macos machine, so I'd assume it has been fixed since this issue has been inactive for quite a while.

If it should still exist and there are some specific steps required to reproduce, please let me know."jwilmJoe Wilm04/26/17 05:38:30 PM"Add script for spawning alacritty in CWD

The script uses the recently added _NET_WM_PID window property for
finding the program running in Alacritty, fetching its working
directory, and spawning a new Alacritty using that directory."1
53402/12/18 04:45:09 PMRafael Bodill[Feature] Add setting to hide titlebar"Like iTerm2 allows (_Profile -> Window -> Style: No Title Bar_), please add an option to hide the titlebar.

<img width=""512"" alt=""alacritty"" src=""https://cloud.githubusercontent.com/assets/147918/21741005/df17ec46-d4d2-11e6-94f1-2fcf806beb94.png"">"05/01/17 04:56:43 PMFix bug with tab rendering"Closes #494.
Resolves #529.
Resolves #512.
Resolves #493." =||= It is not.jwilmJoe Wilm05/01/17 04:43:04 PM"Fix bug with tab rendering

Closes #494.
Resolves #529.
Resolves #512.
Resolves #493."1
53601/09/17 12:48:49 AMJonathan 'theJPster' Pallant~/# key doesn't work"I'm running alacritty on Fedora 25. Wayland is used for GDM but my session is running Xorg.

When I press the ~/# key, nothing happens, either with shift or without. All the other keys seem to work OK. It's a UK keyboard layout so ~/# is next to Enter.

xev reports the keypress events correctly:

```
KeyPress event, serial 36, synthetic NO, window 0x2e00001,
    root 0xd5, subw 0x0, time 11055582, (1071,521), root:(1204,713),
    state 0x10, keycode 51 (keysym 0x23, numbersign), same_screen YES,
    XLookupString gives 1 bytes: (23) ""#""
    XmbLookupString gives 1 bytes: (23) ""#""
    XFilterEvent returns: False
KeyRelease event, serial 36, synthetic NO, window 0x2e00001,
    root 0xd5, subw 0x0, time 11055747, (1071,521), root:(1204,713),
    state 0x10, keycode 51 (keysym 0x23, numbersign), same_screen YES,
    XLookupString gives 1 bytes: (23) ""#""
    XFilterEvent returns: False
```

Have I done something daft?"05/28/17 03:04:22 AMTreat white and bright black as grays"See #503 for background, but this starts treating white as a light gray
and bright black as a light gray. This is a commonly found idiom and
makes programs that use gray more readable.

I took the new prooposed colors from the default iTerm2 color scheme.

Fixes #503."4Sounds like this issue was fixedbrandurBrandur05/01/17 08:39:26 PM"Treat white and bright black as grays

See #503 for background, but this starts treating white as a light gray
and bright black as a light gray. This is a commonly found idiom and
makes programs that use gray more readable.

I took the new prooposed colors from the default iTerm2 color scheme.

Fixes #503."1
53906/11/17 08:21:14 PMDamian SennSupport changing cursor shape"Neovim supports changing the cursor shape in supported terminals: https://github.com/neovim/neovim/wiki/FAQ#how-can-i-change-the-cursor-shape-in-the-terminal

This basically means we get a `|` shape for insert mode, `_` shape for replace mode and the default rectangle in command mode."05/07/17 06:11:54 AMOptimize OSX glyph_offset for Menlo"I've optimized the glyph offset on Mac OSX for Menlo.
![Glyph Offset](https://cldup.com/4wEZUsPLcW.png)"3Would be great to see general config support for this too, in addition to the escape code-driven approach proposed above!hhsnopekHenry Snopek05/02/17 10:33:37 PMoptimize glyph_offset for Menlo1
54307/02/17 12:13:03 AMAdrià Garriga-AlonsoOS X: Config on $HOME/.alacritty.yml ignoredThe config at `$XDG_CONFIG_HOME/.alacritty.yml` is read instead. Of course, the config at `$XDG_CONFIG_HOME/alacritty.yml`is also read.05/06/17 07:53:55 PMFix cell layout, add cell padding"* Fixes some old logic which caused text to appear outside of the window in some situations
* Adds window padding option to config"3Has been resolved.jwilmJoe Wilm05/06/17 04:15:50 PMWork around ICE1
54901/07/17 08:34:15 PMAurabindo PillaiFeature request: ScrollingHeading says it all. I only see escape characters in the terminal when I try to scroll.05/07/17 10:14:23 PMAdd support for Query Device Status"Alacritty was responding with device code when queried for device status. Now it responds that terminal is OK.

Fixes #72."1On second examination - I note that the OP stated escape characters showing up in his terminal. That means his scrolling is fine, and requesting scrollback. >.>;; ignore me and my incoherent ramblings.miedzinskiDominik Miedziński05/07/17 08:08:23 PMAdd support for Query Device Status1
55107/02/17 12:14:12 AMKarolin VarnerCharacters below their box"
![screenshot](https://cloud.githubusercontent.com/assets/1451261/21741407/eaf2e3a2-d4d4-11e6-8198-467ce69f1219.jpg)
As can be seen in the screen shot, the BIG ARROW character of my powerline font does not align with the background of the character before.

Config:

```
# Configuration for Alacritty, the GPU enhanced terminal emulator

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 138.0
  y: 138.0

# Display tabs using this many cells (changes require restart)
tabspaces: 2

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Meslo LG S for Powerline # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: Meslo LG S for Powerline # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Meslo LG S for Powerline # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 13.2
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 8.0
    y: -2.0

# Should display the render timer
render_timer: false

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x111111'
    foreground: '0xfcf4d9'

  # Normal colors
  normal:
    black:   '0x111111'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0x424242'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0x2a2a2a'

# Colors (Solarized Dark)
# colors:
#   # Default colors
#   primary:
#     background: '0x002b36'
#     foreground: '0x839496'
#
#   # Normal colors
#   normal:
#     black:   '0x073642'
#     red:     '0xdc322f'
#     green:   '0x859900'
#     yellow:  '0xb58900'
#     blue:    '0x268bd2'
#     magenta: '0xd33682'
#     cyan:    '0x2aa198'
#     white:   '0xeee8d5'
#
#   # Bright colors
#   bright:
#     black:   '0x002b36'
#     red:     '0xcb4b16'
#     green:   '0x586e75'
#     yellow:  '0x657b83'
#     blue:    '0x839496'
#     magenta: '0x6c71c4'
#     cyan:    '0x93a1a1'
#     white:   '0xfdf6e3'

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1b[4~"",  mode: AppCursor   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Delete,                  chars: ""\x1b[3~"",  mode: AppKeypad   }
  - { key: Delete,                  chars: ""\x1b[P"",   mode: ~AppKeypad  }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
```"05/08/17 03:38:03 PMFix Device Status reportsFollowup to #549. Status report was lacking `[` (it wasn't CSI). Additionally, when asked for cursor position (both queries end with `n`), we were responding with device status. Now it's implemented properly - it passes vttest's DSR test and behaves like other terminal emulators I use.1"@rafi `glyth_offset.y: 5.0`
I have different font(+size) so it may not fit you
```
font:
  # The normal (roman) font face to use.
  normal:
    family: ""Source Code Pro"" # should be ""Source Code Pro"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: ""Source Code Pro"" # should be ""Source Code Pro"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: ""Source Code Pro"" # should be ""Source Code Pro"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 13.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0.0
    y: 0.0

  glyph_offset:
    x: 0.0
    y: 5.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true
```
"miedzinskiDominik Miedziński05/08/17 02:50:34 PMFix Device Status reports1
55201/07/17 12:37:31 PMKarolin VarnerShould survive cat /dev/urandom"When I cat /dev/urandom to stdout, it crashes with:

```
thread 'pty reader' panicked at 'cursor fell off grid', src/term/mod.rs:634
note: Run with `RUST_BACKTRACE=1` for a backtrace.
child finished with error '256'
```"05/28/17 02:52:59 AMRemove incorrect close"Ownership of the slave file descriptor is passed to the process::Stdio
structs and will be closed when they are dropped. If the slave fd is
closed explicitly then the next fd that is opened during the same scope
will get silently closed by the Stdio structs when they are dropped.

I had issues with race conditions in another software project so I think it affects this project to. Luckily no fds are opened between `close(slave)` and the end of that scope.

Do you need more details for accepting this?

https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html#tymethod.from_raw_fd"3oops, sorryNickeZNiklas Claesson05/08/17 09:11:50 PM"Remove incorrect close

Ownership of the slave file descriptor is passed to the process::Stdio
structs and will be closed when they are dropped. If the slave fd is
closed explicitly then the next fd that is opened during the same scope
will get silently closed by the Stdio structs when they are dropped."1
55401/29/17 02:15:27 AMGabriel de PerthuisSupport the -e flag"`term -e command` is the standard way to override the default shell on Unix.

Unfortunately there's an inconsistency in the way multiple arguments are handled.

    gnome-terminal -e 'screen vim'

vs

    rxvt -e screen vim

gnome-terminal's way is more compatible with getopt argument conventions. On the other hands there's probably a call to `system()` to make it work, instead of an exec.

xterm handles both. Please don't do that, because that means weird rules for space handling."07/04/17 04:18:17 AMUpdates to the latest Glutin version"Alacritty is now using the latest Glutin/winit. We are temporarily on a
fork while a couple of patches get upstreamed. This branch won't be
merged until the fork is not needed.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/554)
<!-- Reviewable:end -->"5This has been addedjwilmJoe Wilm05/09/17 05:22:39 PM"Updates to the latest Glutin version

Alacritty is now using the latest Glutin/winit. We are temporarily on a
fork while a couple of patches get upstreamed. This branch won't be
merged until the fork is not needed."1
55701/08/17 05:05:57 AMMartin LindheBuilding on Windows"I know that Windows target is not supported at the moment, but since it was a stated goal, here's the current status.

    rustc 1.15.0-nightly (8f02c429a 2016-12-15)

Build fails on servo-fontconfig-sys:

```
error: failed to run custom build command for `servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)`
process didn't exit successfully: `C:\Users\name\dev\rs\alacritty\target\release\build\servo-fontconfig-sys-15a0b66e991dea2e\build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: ""The system cannot find the file specified."" } }', C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libcore\result.rs:837
stack backtrace:
   0:     0x7ff7e6d3a86a - std::panicking::default_hook::{{closure}}
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:354
   1:     0x7ff7e6d39d76 - std::panicking::default_hook
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:365
   2:     0x7ff7e6d3d66d - std::panicking::rust_panic_with_hook
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:553
   3:     0x7ff7e6d3d4b8 - std::panicking::begin_panic<collections::string::String>
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:515
   4:     0x7ff7e6d3d424 - std::panicking::begin_panic_fmt
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:499
   5:     0x7ff7e6d3d3b9 - std::panicking::rust_begin_panic
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\panicking.rs:475
   6:     0x7ff7e6d40147 - core::panicking::panic_fmt
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libcore\panicking.rs:69
   7:     0x7ff7e6d2128f - core::result::unwrap_failed<std::io::error::Error>
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libcore\macros.rs:29
   8:     0x7ff7e6d21dd2 - build_script_build::main
                        at C:\Users\name\.cargo\git\checkouts\libfontconfig-3d5e920c02c2e53f\618a529\build.rs:25
   9:     0x7ff7e6d3fac1 - panic_unwind::__rust_maybe_catch_panic
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libpanic_unwind\lib.rs:98
  10:     0x7ff7e6d3dc5a - std::rt::lang_start
                        at C:\bot\slave\nightly-dist-rustc-win-msvc-64\build\src\libstd\rt.rs:51
  11:     0x7ff7e6d43a48 - __scrt_common_main_seh
                        at f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl:253
  12:     0x7ffedc668363 - BaseThreadInitThunk
```"05/10/17 03:09:03 PMFix viewport_size.height calculationCloses #5564"Thanks for looking into it!

Since this is linked from the Windows Support issue and Windows support is a ways out, I'm just going to close this."dywedirN-00605/10/17 11:24:19 AM"Fix viewport_size.height calculation

Closes #556"1
55801/07/17 09:26:17 PMBenjamin GudehusFeature request: Tiling"Layout terminals in any fashion by splitting them horizontally or vertically.

This feature is supported in some terminals, e.g. [Terminology](https://github.com/billiob/terminology) and [Terminix](https://github.com/gnunn1/terminix).

I know according to the blog Alacritty strives for simplicity and `tmux` could be used, but this is really a useful feature to have directly in the terminal.

Example key-bindings (taken from Terminology):

- `Ctrl+PgUp` &mdash; switch focus to previous terminal inside a window
- `Ctrl+PgDn` &mdash; switch focus to next terminal inside a window
- `Ctrl+Shift+PgUp` &mdash; split terminal horizontally (1 term above the other)
- `Ctrl+Shift+PgDn` &mdash; split terminal vertically (1 term to the left of the other)"05/10/17 03:10:05 PMAdd Ctrl+PageUp and Ctrl+PageDown to default key bindings"I was comparing the output of `showkey -a` with the sakura terminal and I noticed that Alacritty does not react on <kbd>Ctrl+PageUp</kbd> and <kbd>Ctrl+PageDown</kbd>. I personally use these keys in vim, I'm adding them to the default config because think I'm not the only one 🙂 

I also added them to macos config, although I didn't test on Mac."5"For tabs, there is [tab].  It does not provide multiplexing, but provides facilities to switch between contexts.  The sole shortcut is `Ctrl-t`.

[tab]: https://github.com/austinjones/tab-rs

There is also [Pueue] which can be nice when you don’t need a terminal.

[Pueue]: https://github.com/Nukesor/pueue"maximbazMaxim Baz05/10/17 12:46:32 PMAdd Ctrl+PageUp and Ctrl+PageDown to default key bindings1
55901/08/17 03:04:01 AMДмитрий ХаланскийSignificantly slower than st"```
$ ls -lh file
-rw-r--r-- 1 rouanth rouanth 39M Jan  7 15:25 file
```

I've ran `base64 file` multiple times so it would be properly cached. Then I've ran `time base64 file` on `st` with the following results:
```
real    0m9.786s
user    0m0.500s
sys     0m2.600s
```
Multiple attempts have shown that `st` outputs consistently in 9 to 10 seconds.

Then I've ran the same command with `alacritty` off-screen:
```
real    1m1.395s
user    0m1.407s
sys     0m5.950s
```
If it is present on the screen, it takes
```
real    1m25.855s
user    0m2.003s
sys     0m8.593s
```
Multiple attempts have confirmed these numbers.

I use Arch Linux, recently updated. alacritty was built just now from AUR. I use the default configuration file. `st` is built from commit `e44832408bb3` dated November 24th.

`lspci | grep VGA` says
```
00:02.0 VGA compatible controller: Intel Corporation Atom Processor Z36xxx/Z37xxx Series Graphics & Display (rev 0e)
```

Both terminal emulators are run under XWayland.

I'm ready to provide additional information if requested."05/10/17 06:02:46 PMAdd Shift+PageUp and Shift+PageDown to default key bindings"Followup to PR #558 ""Add Ctrl+PageUp and Ctrl+PageDown to default key bindings"", but with ***Shift***. Have been working for me with tmux under Linux."1Yeah, its true, even opening and closing the terminal somehow feels snappier when I use st. Alacritty sometimes takes a sec to open.ronjouchRonan Jouchet05/10/17 04:51:41 PMAdd Shift+PageUp and Shift+PageDown to default key bindings1
56007/02/17 12:12:43 AMpimpmypixel$-sign and freeze on unknown keys."Hi Guys and congratulations on this great achievement!

I just wanted to post that on my danish macbook pro Alacritty compiled just fine (after I added 'source $HOME/.cargo/env' to my ~/.zshrc) however it crashes whenever an unknown key (say, æøå) is pressed. 
Also, the $ sign doesn't work. It's placed left of my number 1 key, and the documentation in the .yml file doesn't really tell me how to add own ""custom"" keys.

Thanks again!"12/23/17 01:39:12 AMAnti-alias controlled by `use_anti_alias` boolean flagThe font I use on my current development machine ([Envy Code R](https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released)) looks way better without any anti-alias. I needed to deactivate anti-alias, and it's better to do it without having to recompile Alacritty again.4Duplicate of #209amalbuquerqueAndré Albuquerque05/11/17 09:48:41 AMAnti-alias controlled by `use_anti_alias` boolean flag1
56210/21/17 11:03:59 PMStephen HabermanSet x-windows urgent on bell"I'm not really an expert on how this is implemented (and especially have no idea what the Mac/growl/whatever equivalents are), but I use the X urgent-on-bell feature of my current terminal to flash the window title in i3wm when long-running commands (compiles/etc.) are complete.

E.g. a short command to run as a test to see if it works is:

```
sleep 2 && echo -e ""\a""
```

The sleep is because if you're already looking at the terminal window, i3wm will ignore/reset the urgent flag right away, so ""sleep 2"" gives me time to switch to another window/desktop to see if, when echo \a runs, the window it's in is highlighted. I don't know how other window managers handle/display the urgent flag.

Understood if this is considered bloat, but hopefully it wouldn't be too hard to add; I currently have it working even through tmux sessions, so a bell in a terminal session on a remote host gets percolated through tmux back to my local terminal window, and it's very nice/important for my workflow, to get me back on task."05/12/17 03:58:41 PMUse debug! instead of println!As title says.1Sounds reasonable. Adding it to the list!miedzinskiDominik Miedziński05/12/17 10:32:15 AMUse debug! instead of println!1
56606/20/17 04:01:18 PMNonemacOS 10.12.2 Doesn't show Chinese char at all."Hi,
Just build on macOS 10.12.2, and ls my Downloads, alacritty display all Chinese char as black."05/25/17 04:19:00 PMAdd support for running commands on key press"Based on option `command` in key binding section in config, e.g.

```
  - { key: N,        mods: Control|Shift,    command: alacritty          }
  # or
  - {
      key: N,
      mods: Control|Shift,
      command: {
        program: ""alacritty"",
        args: [""-e"", ""vttest""],
  }}
```

specified command will be run in the background on key press. Alacritty doesn't wait for its result nor block IO.

Fixes #334."2We recently added some fallback support to macOS, and I think this should work nowmiedzinskiDominik Miedziński05/13/17 11:18:40 AMAdjust logging when running command1
56802/17/17 07:32:20 AMDelyan AngelovPanic when running micro text editor"https://micro-editor.github.io

```
$ micro --version
Version: 1.1.4-55
Commit hash: a3c58e5
Compiled on January 02, 2017

$ RUST_BACKTRACE=1 target/release/alacritty 
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
num fonts = 916
num fonts = 916
num fonts = 916
Finished initializing glyph cache in 0.048065535
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 128, 42
width: 1024, height: 768
num_cols, num_lines = 80, 24
width: 644, height: 436
[Unhandled CSI] action='h', args=[1003], intermediates=[63]
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
thread 'pty reader' panicked at 'index out of bounds: the len is 3 but the index is 4', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:640
stack backtrace:
   1:     0x558e45deea1a - std::sys::imp::backtrace::tracing::imp::write::h2b860f17b6b0f511
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x558e45df3d8f - std::panicking::default_hook::{{closure}}::hedea7d569eb1e6b8
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:349
   3:     0x558e45df398e - std::panicking::default_hook::he87e0c76c89c52a4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:365
   4:     0x558e45df4237 - std::panicking::rust_panic_with_hook::h304127bde2d3d5e2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:553
   5:     0x558e45df40c4 - std::panicking::begin_panic::h814f60faa3ce8314
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:515
   6:     0x558e45df3fe9 - std::panicking::begin_panic_fmt::hf4f7d700fa077693
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:499
   7:     0x558e45df3f77 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:475
   8:     0x558e45e2003d - core::panicking::panic_fmt::hee207ff21fb62166
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x558e45e1ffe8 - core::panicking::panic_bounds_check::hca28eae069525a56
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x558e45d0668d - alacritty::ansi::parse_color::hc430a62794d53a39
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:640
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:542
                        at /13/home/delian/Work/alacritty/src/ansi.rs:732
  11:     0x558e45ccee7c - vte::Parser::perform_action::he65c63b8394f4232
                        at /13/home/delian/Work/alacritty/src/ansi.rs:646
                        at /home/delian/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:205
  12:     0x558e45ce200a - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::hea55e6f19d8f9463
                        at /home/delian/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:158
                        at /home/delian/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /13/home/delian/Work/alacritty/src/ansi.rs:85
                        at /13/home/delian/Work/alacritty/src/event_loop.rs:211
                        at /13/home/delian/Work/alacritty/src/event_loop.rs:308
  13:     0x558e45ccd70b - std::panicking::try::do_call::h6d19ebed5c41899d
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:295
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:458
  14:     0x558e45dfb17a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  15:     0x558e45cdfeca - <F as alloc::boxed::FnBox<A>>::call_box::hd8775355f3c9dc97
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:434
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:287
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  16:     0x558e45df3084 - std::sys::imp::thread::Thread::new::thread_start::h460a0adc61139b06
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  17:     0x7ff2845a76b9 - start_thread
  18:     0x7ff2840c782c - clone
  19:                0x0 - <unknown>
child finished with error '1'


```"05/17/17 01:19:46 PMsomewhat DRYer code for font loadingI want to contribute so getting my head around the code. This is just a slight cleanup of some repeated code.1"Alacritty 0.1.0 (62eb1e2) does run micro without panics:


RUST_BACKTRACE=1 target/release/alacritty
num_cols, num_lines = 128, 42
num_cols, num_lines = 80, 24
[Unhandled CSI] action='h', args=[1003], intermediates=[63]
[Unhandled CSI] action='l', args=[1003], intermediates=[63]
"algestenMartin Algesten05/13/17 09:46:31 AMsomewhat DRYer code for font loading1
57505/29/17 12:36:56 AMDonnie BishopPanic on setting Bitmap font"When setting any of the font options to use Tewi, a bitmap font, attempting to start Alacritty using rofi or dmenu causes it to briefly open before force closing.

When trying to start alacritty from another terminal, it briefly opens and force closes again. Running with backtrace enabled:

```
device_pixel_ratio: 1
width: 715, height: 217
Initializing glyph cache
num fonts = 790
num fonts = 790
num fonts = 790
thread 'main' panicked at 'index 4 out of range for slice of length 3', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:560
stack backtrace:
   1:     0x562e86ed05fa - <unknown>
   2:     0x562e86ed596f - <unknown>
   3:     0x562e86ed556e - <unknown>
   4:     0x562e86ed5e17 - <unknown>
   5:     0x562e86ed5ca4 - <unknown>
   6:     0x562e86ed5bc9 - <unknown>
   7:     0x562e86ed5b57 - <unknown>
   8:     0x562e86f01c1d - <unknown>
   9:     0x562e86f01cf9 - <unknown>
  10:     0x562e86e680af - <unknown>
  11:     0x562e86df9044 - <unknown>
  12:     0x562e86df3e3e - <unknown>
  13:     0x562e86dd1037 - <unknown>
  14:     0x562e86dd09e5 - <unknown>
  15:     0x562e86edcd5a - <unknown>
  16:     0x562e86ed6556 - <unknown>
  17:     0x7f24ab0b4290 - __libc_start_main
  18:     0x562e86daa799 - <unknown>
  19:                0x0 - <unknown>

```

This is the current font configuration in `~/.config/alacritty.yml`:

```
# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: tewi # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: tewi # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: tewi # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 9.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 2.0
    y: -7.0

```

Please let me know if there's anything else I can provide"05/31/17 08:32:08 AMUser fonts, macOS font fallback and refactoring"1. Config change so `alacritty.yml` have lists of fonts that works as fallbacks.
2. Moved some shared logic to `font/src/lib.rs` so that user fallbacks can work in a similar way regardless of platform.
3. Supports two different fallback strategies depending on platform:
  - macOS adds on system defined font fallbacks at the end of the user font lists.
  - freetype/fontconfig attempts to get a fontconfig fallback per rendered glyph when needed.
4. Tidy up in `darwin` to split out some core-graphics stuff.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/575)
<!-- Reviewable:end -->"29"I've run into this issue as well (specifically the 'index 68 out of range for slice of length 64' version of the panic). Here is some gdb info at the point where the panic occurs in font/src/mod.rs:

```
(gdb) next
212             let mut packed = Vec::with_capacity((bitmap.rows() * bitmap.width()) as usize);
(gdb)
213             for i in 0..bitmap.rows() {
(gdb)
214                 let start = (i as usize) * pitch;
(gdb)
215                 let stop = start + bitmap.width() as usize;
(gdb)
216                 packed.extend_from_slice(&buf[start..stop]);
(gdb) info locals
stop = 8
start = 0
i = 0
iter = core::ops::Range<i32> {start: 1, end: 16}
packed = collections::vec::Vec<u8> {buf: alloc::raw_vec::RawVec<u8> {ptr: core::ptr::Unique<u8> {pointer: core::nonzero::NonZero<*const u8> (0x7ffff511a080 ""\000""), _marker: core::marker::PhantomData<u8>}, cap: 128}, len: 0}
pitch = 4
buf = &[u8] {data_ptr: 0x7ffff07f5b80 ""\000"", length: 64}
bitmap = freetype::bitmap::Bitmap {raw: 0x7ffff50855d8}
glyph = 0x7ffff07e1c08
index = 128
c = 127 '\x7f'
size = 10
face = 0x7ffff07e1bf8
faces = std::collections::hash::map::HashMap<font::FontKey, freetype::face::Face, std::collections::hash::map::RandomState> {hash_builder: std::collections::hash::map::RandomState {k0: 810756667983202956, k1: 9049055774554616794}, table:
std::collections::hash::table::RawTable<font::FontKey, freetype::face::Face> {capacity: 32, size: 4, hashes: std::collections::hash::table::TaggedHashUintPtr (core::ptr::Unique<usize> {pointer: core::nonzero::NonZero<*const usize> (0x7ffff07e1a00), _marker: core::marker::PhantomData<usize>}), marker: core::marker::PhantomData<(font::FontKey, freetype::face::Face)>}, resize_policy: std::collections::hash::map::DefaultResizePolicy}
self = 0x7fffffff4f78
glyph_key = 0x7fffffff3c80
have_recursed = true
```
Note that pitch = 4, while the difference between start and end (i.e. bitmap.width()) is 8. On our last iteration, we end up here (some variables omitted):
```
(gdb) info locals
stop = 68
start = 60
i = 15
iter = core::ops::Range<i32> {start: 16, end: 16}
pitch = 4
buf = &[u8] {data_ptr: 0x7ffff07f5b80 ""\000"", length: 64}
c = 127 '\x7f'
```
Not sure how best to fix it. My stopgap is to replace line 216 in mod.rs with:
```
let stop = cmp::min(buf.len() as usize, start + bitmap.width() as usize);
```
...but I'm sure there's a better way. Let me know if there is any other info from the trace you need."algestenMartin Algesten05/26/17 07:39:24 AMconsequences of updated deps in master1
57601/07/17 03:16:43 PMJoel WrightCan't type # or ~ (Ubuntu 16.10 UK Keyboard)Alacritty compiles and starts fine, but the #~ key on my laptop keyboard is ignored. I'm using the standard Ubuntu 'English (UK)' keymap on 16.10.05/29/17 12:42:37 AMAdd config file as cli option"I wanted to be able to test different versions of alacritty that had different configuration file syntaxes and then this was useful.

Intended use is `--config-file alacritty.yml`.

This also allows you to use the built-in defaults with `--config-file /dev/null`.

Please review =)"19Sorry, I searched for the issue but couldn't find it. Closing.NickeZNiklas Claesson05/28/17 03:12:41 PMAdd cow patch1
57801/07/17 07:35:08 PMNiklas Dusenlund256 color mode issues"I'm using Solarized Dark both as color scheme of the terminal and vim. To get this working on other terminals I use: https://github.com/chriskempson/base16-shell and https://github.com/chriskempson/base16-vim

![vimissue](https://cloud.githubusercontent.com/assets/492753/21742797/389894fa-d4f6-11e6-9af6-11f92914b116.png)

In alacritty I get blue bars which indicate that ""Base16 Shell is not working for your terminal"" according to https://github.com/chriskempson/base16-vim.

I'm not really an expert when it comes to terminal emulation. Should I do something differently to get this working?

I get the following output when I source `base16-shell/scripts/base16-solarized-dark.sh`:

```
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='6'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='f'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='4'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='8'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='3'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='f'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='4'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='8'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='3'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='6'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='5'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='6'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='7'
[unhandled osc_put] byte='5'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='4'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='6'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='4'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='8'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='5'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='9'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='1'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='0'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='3'
[unhandled osc_put] byte='6'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='7'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[], byte='\\' (5c)
```"05/28/17 02:55:44 AMAdd a terminfo file declaring TrueColor support"Alacritty supports true color (24bit) escape codes. There isn't an official terminfo entry for this (yet?) but tmux has an unofficial one: _Tc_

This is used by others, e.g. [st](http://git.suckless.org/st/commit/?id=06f8cf8ca87a81db15816658c40b2afcd1ad5332)"10The issue you saw is due to #26. It would be relatively easy to implement, but I think it makes reloading the config require the current config. Going to close this as a duplicate, but we can reopen if you feel that's not appropriate.cac04Charles Collicutt05/25/17 08:11:30 PM"Add 256color variant of terminfo entry

This just duplicates the existing entry but may be handy for programs
that look for the suffix '-256color' in term names."1
57901/07/17 05:43:18 PMJosh LeveretteChange README.md to reflect the current compiler situationSuggesting that `alacritty` only works on one version of the compiler is not something new users will want to hear, and it doesn't seem to be true. It compiles and runs just fine on the nightly from last night, and the nightly before that.05/24/17 05:56:51 PMEnsure that the event loop thread cleanly exits on shutdown"Background:

If a shell process exits with children still alive (typically due to the
`disown` shell builtin), POLLHUP will not be sent to the master PTY file
descriptor. This is due to the fact that the disowned process still has
the slave PTY open as its STDIN, STDOUT, and STDERR.

If a disowned process never reads or writes from its file descriptors
(which is often the case for graphical applications), the event loop
will end up blocking on poll()/select() when not handling user input
received over the mio channel. When Alacritty shuts down and joins on the
event loop thread, there can never be any more input on the mio channel -
the main thread is no longer handling user keystrokes from the window. Unless
a disowned process happens to access its slave PTY file descriptors, the
event loop will never get the chance to deetect that it should exit.

This commit extends the `Msg` enum to include an explicit `Shutdown`
message, which ensures a clean shutdown (e.g. closing the 'recording'
file). This allows the select()/poll() call to remain blocking, instead
of needing to periodically check the shutdown state in between
timed-out calls.

Fixes #339"2Looks good, thanks!Aaron1011Joe Wilm05/24/17 04:50:49 PMMinor cleanup, style fix, dead code removal1
58001/07/17 05:49:27 PMPablo FernandezLine height looking weird on macOS"Just installed and the terminal looks ""compressed"" vertically (see image).

Also, the background color changes if you move the mouse pointer over it.

![screen shot 2017-01-07 at 1 29 01 pm](https://cloud.githubusercontent.com/assets/28029/21743263/48ad41e2-d4dd-11e6-8768-acd0217faa40.png)"05/24/17 04:10:12 PMFix #573. Ensure we don't write 0 bytes to pty"On macOS, pasting 0 bytes from the clipboard hangs the terminal.
I.e. `pbcopy </dev/null` followed by ctrl-v. This ensures
we never send 0 bytes."7Fixed! Thanks!algestenMartin Algesten05/21/17 04:25:08 PM"Fix #573. Ensure we don't write 0 bytes to pty

Any action that results in 0 bytes, such as pasting 0 bytes
from the clipboard hangs the terminal (`pbcopy </dev/null`
followed by ctrl-v), hangs the terminal on both macOS and
Linux. This ensures we never send 0 bytes."1
58601/09/17 12:24:57 AMPablo FernandezCrash on macOS while cat-ing a binary file."Steps to reproduce:

- install alacritty
- go to `target/release` directory
- run `./alacritty`
- on the terminal, `cat libalacritty.rlib`
- the program will crash.

Running it with RUST_BACKTRACE=1 yields:
```
thread 'pty reader' panicked at 'cursor fell off grid', src/term/mod.rs:634
stack backtrace:
   1:        0x10d6c8e8a - std::sys::imp::backtrace::tracing::imp::write::h1461f67be4bf68a9
   2:        0x10d6cb06f - std::panicking::default_hook::{{closure}}::h6dba65b2b498d274
   3:        0x10d6cad17 - std::panicking::default_hook::ha8ecbcff1f59e805
   4:        0x10d6cb536 - std::panicking::rust_panic_with_hook::h5ceed7bd7aef311a
   5:        0x10d60ba54 - std::panicking::begin_panic::hac4cfc1999155f3b
   6:        0x10d625cb2 - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::h5f86d9cf613035bb
   7:        0x10d61dc8e - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::hd6fb5177d4ce92b7
   8:        0x10d60ba9b - std::panicking::try::do_call::h0094239def3a34ee
   9:        0x10d6cc40a - __rust_maybe_catch_panic
  10:        0x10d61bb7a - <F as alloc::boxed::FnBox<A>>::call_box::h854e414bff848aff
  11:        0x10d6ca744 - std::sys::imp::thread::Thread::new::thread_start::haeb202749da670ee
  12:     0x7fffdf0feaaa - _pthread_body
  13:     0x7fffdf0fe9f6 - _pthread_start
child finished with error '256'
```"05/28/17 03:08:29 AMFind and set $WINDOWID to X11 window ID"Closes issue #471.

The window ID is retrieved from Display (from Window) in `run` and passed to `tty::new`, which uses `builder.env` to set it.

```
ns ~> echo $WINDOWID
62914562
ns ~> xdotool getactivewindow
62914562
```"4"Closing in favor of #63.

@Zenexer maybe a separate issue? Also maybe related to #72 "qohns05/24/17 11:25:50 AMOnly use unix::WindowExt when target_os is not macos1
58801/09/17 05:33:56 PMErica KastnerCorrected default alacritty.yml path in READMEI can confirm that `$HOME/.alacritty.yml` is not found, while `$HOME/.config/alacritty.yml` is found per https://github.com/jwilm/alacritty/issues/17205/25/17 06:04:51 PMMake alacritty compile on FreeBSD 11-CURRENT"Fixes #571.

While it does compile (and run) now, there are still a handful of bugs, like ^C handling, resizing and job control(?)."4The other PR ended up updating the README. Thanks for the PR, though!vifinoAdrian Pistol05/25/17 05:30:44 PM"Make alacritty compile on FreeBSD 11-CURRENT.

While it does compile (and run) now, there are still a handful of bugs, like ^C handling, resizing and job control(?). Fixes #571."1
58904/19/17 02:33:24 AMLucas SchwiderskiDelete key not workingThe `Delete` key is not recognized on Fedora 25 with a fresh install of alacritty and default configuration file.05/29/17 04:51:50 PMImplement FocusIn/FocusOut reports"Implements sending FocusIn/FocusOut events, as defined at
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-FocusIn_FocusOut

I've duplicated a small amount of code between `match` arms in `handle_event`, but this seemed like the cleanest way to handle `glutin::Event::Focused`.

This should resolve https://github.com/jwilm/alacritty/issues/572

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/589)
<!-- Reviewable:end -->"2"I can't seem to find any documentation mentioning the `\e[P` escape anywhere. `\e[3~` [seems to be](https://en.wikipedia.org/wiki/Delete_key#Uses) [the standard delete binding](http://www.ibb.net/~anne/keyboard/keyboard.html#prob). I'd suggest making them both `\x1b[3~` unless there's a good reason not to?"Aaron1011Aaron Hill05/28/17 12:43:45 AM"Implement FocusIn/FocusOut reports

Implements sending FocusIn/FocusOut events, as defined at
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-FocusIn_FocusOut"1
59006/26/17 09:38:00 PMLucas SchwiderskiConfig file not recognized"I just installed Alacritty and copied the configuration file to `~/.alacritty.yml` as described in the README.
However no matter which value I change in that file, it won't be reflected in the terminal, even after restarting it.

Might be the reason for #192. Arrow keys on the other hand do work.

I'm running Fedora 25."05/29/17 12:36:56 AMFixes font raster for mono, gray bitmaps"As it turns out, FreeType does not always provide glyph data in LCD mode
as we requested. We now correctly handle several common modes returned
from FreeType including Lcd, Mono, and Gray.

Note that we don't check number of grays at this time since it's

1. Almost always 256, according to FreeType docs
2. Not available in the Rust FreeType bindings being used

Resolves #515
Resolves #185
Resolves #482" =||= See #3590.jwilmJoe Wilm05/28/17 05:51:10 PM"Fixes font raster for mono, gray bitmaps

As it turns out, FreeType does not always provide glyph data in LCD mode
as we requested. We now correctly handle several common modes returned
from FreeType including Lcd, Mono, and Gray.

Note that we don't check number of grays at this time since it's

1. Almost always 256, according to FreeType docs
2. Not available in the Rust FreeType bindings being used

Resolves #515
Resolves #185
Resolves #482"1
59206/28/17 02:33:24 PMLucas SchwiderskiCurrent line disappears on window resize"When resizing the terminal window, the prompt and anything I already typed after it disappears. Anything above that line is not affected.
Once I start typing it reappears.

This does not happen in `vim`.

The third line in the following screenshot is supposed to show the prompt

![Screenshot](http://i.imgur.com/PQlACf3.png)"06/27/17 04:10:42 PMCorrect info in README.md about scrollback according to #124 =||= Thanks!zetokZetok Zalbavar05/31/17 07:07:44 AMCorrect info in README.md about scrollback according to #1241
59304/03/17 04:38:26 PMNoneMinor graphical bug in htop"alacritty 0.1.0.312 (commit 852c2d8f15bfc11f0222fa08626c38724accd35a):
![alacritty](https://cloud.githubusercontent.com/assets/546779/21743487/e402b4f0-d524-11e6-815e-7dce5d7a4636.png)

For comparison:
xfce4-terminal:
![xfce4-terminal](https://cloud.githubusercontent.com/assets/546779/21741863/2e7ae1d6-d504-11e6-9067-4caf953f4d16.png)
gnome-terminal:
![gnome-terminal](https://cloud.githubusercontent.com/assets/546779/21741865/2e846904-d504-11e6-938b-c1cf6d3e894c.png)
lxterminal, xterm, urxvt, konsole also correctly display htop.
Log:
```
device_pixel_ratio: 1
width: 1920, height: 1080
Initializing glyph cache
num fonts = 3394
num fonts = 3394
num fonts = 3394
Finished initializing glyph cache in 0.055820115
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 240, 60
width: 1920, height: 1080
[unhandled osc_start]
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='@'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='-'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='~'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='~'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='7'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='p'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='p'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[Unhandled CSI] action='l', args=[4], intermediates=[]
[Unhandled CSI] action='h', args=[7], intermediates=[63]
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled osc_start]
[unhandled osc_put] byte='2'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='@'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='-'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='c'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='~'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='~'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='7'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='t'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
Goodbye
```"05/31/17 04:30:55 PMPreparatory changes for macOS font fallback1Closing in favor of #85.algestenMartin Algesten05/31/17 09:10:05 AMremove code that has been upstreamed1
59401/10/17 02:54:03 PMSteve KlabnikHow often is the nightly updated?alacritty compiles with the latest nightly, and in fact, because it has procedrual macros in let, lets you remove that flag. How often do you plan to update the pinned version, roughly?06/06/17 04:47:33 PMmacOS use system font fallbackGiven feedback in #575, this is a rewrite intended to be minimally invasive in terms of architectural changes. The PR needs #593 to land in master first to get the required dependencies.8Great! i'm going to close this, given that this will just become stable as of 1.15, so the question is a bit moot 😄 algestenMartin Algesten05/31/17 10:53:12 AMmacOS use system font fallback1
59603/08/19 12:49:14 AMJude TaylorAbility to apply offset-y to the bottom of lines rather than the top"As you can see here, my vim status bar is looking a little distressed:

![foo](https://i.imgur.com/jnsvjBO.png)

Increasing offset-y doesn't help because it adds more spacing to the *top* of the line."06/01/17 04:47:59 PMtwo things2It is possible to set a negative y offset.algestenMartin Algesten05/31/17 06:23:11 PMavoid named field shorthand1
59701/07/17 07:38:41 PMNoneUpdate README.mdUseless use of cat06/04/17 04:46:43 PMTest old stableDue to #595 I propose that we build for old stable versions as well.4Oh, nifty. Thanks!NickeZNiklas Claesson06/01/17 09:29:09 AMCI with the oldest known working version of rust1
60107/02/17 12:10:27 AMMax GonzihPanic when running doge command"Just after i compiled and tried terminal for the first time it panicked. I have `doge` (https://github.com/thiderman/doge) in my fish shell startup and it causes the crash. Crash happens when the face of the dog is being rendered. Looks like it might be related to the color or character used for the ASCII graphics.

Full output with backtrace:
```
device_pixel_ratio: 1
width: 1920, height: 1169
Initializing glyph cache
num fonts = 165
num fonts = 165
num fonts = 165
Finished initializing glyph cache in 0.014723604
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 240, 64
width: 1920, height: 1169
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[Unhandled CSI] action='q', args=[1], intermediates=[32]
[Unhandled CSI] action='q', args=[1], intermediates=[32]
[Unhandled CSI] action='q', args=[1], intermediates=[32]
[unhandled osc_start]
[unhandled osc_put] byte='7'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='l'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte=':'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='a'
[unhandled osc_put] byte='x'
[unhandled osc_put] byte='b'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='k'
[unhandled osc_put] byte='-'
[unhandled osc_put] byte='p'
[unhandled osc_put] byte='r'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='f'
[unhandled osc_put] byte='i'
[unhandled osc_put] byte='s'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[Unhandled CSI] action='q', args=[1], intermediates=[32]
[unhandled osc_start]
[unhandled osc_put] byte='0'
[unhandled osc_put] byte=';'
[unhandled osc_put] byte='d'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte=' '
[unhandled osc_put] byte=' '
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='h'
[unhandled osc_put] byte='o'
[unhandled osc_put] byte='m'
[unhandled osc_put] byte='e'
[unhandled osc_put] byte='/'
[unhandled osc_put] byte='g'
[unhandled osc_put] byte='n'
[unhandled osc_put] byte='z'
[unhandled osc_put] byte='h'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
Unexpected color attr: 172
thread 'pty reader' panicked at 'index out of bounds: the len is 3 but the index is 4', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:644
stack backtrace:
   1:     0x55bdf2c1e41c - std::sys::imp::backtrace::tracing::imp::write::h2a972e172776bc73
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55bdf2c2376e - std::panicking::default_hook::{{closure}}::h3350be9abe4c8496
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:351
   3:     0x55bdf2c23374 - std::panicking::default_hook::h255964940ef72e84
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:367
   4:     0x55bdf2c23c17 - std::panicking::rust_panic_with_hook::ha02a85ff57cdb669
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:555
   5:     0x55bdf2c23a54 - std::panicking::begin_panic::h3472a76248a19370
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:517
   6:     0x55bdf2c239c9 - std::panicking::begin_panic_fmt::h353221386e3766a5
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:501
   7:     0x55bdf2c23957 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:477
   8:     0x55bdf2c4fa3d - core::panicking::panic_fmt::h2a5bed77fd55efc9
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:69
   9:     0x55bdf2c4f9e8 - core::panicking::panic_bounds_check::h9cc2800ddc8a467d
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/panicking.rs:56
  10:     0x55bdf2b375cd - alacritty::ansi::parse_color::h4866de22b677e43e
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:644
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:546
                        at /home/gnzh/mydev/alacritty/src/ansi.rs:732
  11:     0x55bdf2b009b8 - vte::Parser::perform_action::hf1320867736df0df
                        at /home/gnzh/mydev/alacritty/src/ansi.rs:630
                        at /home/gnzh/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:205
  12:     0x55bdf2b13129 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h01f2d3e2971fa2ce
                        at /home/gnzh/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:158
                        at /home/gnzh/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /home/gnzh/mydev/alacritty/src/ansi.rs:85
                        at /home/gnzh/mydev/alacritty/src/event_loop.rs:211
                        at /home/gnzh/mydev/alacritty/src/event_loop.rs:308
  13:     0x55bdf2aff2ab - std::panicking::try::do_call::h1b3a9ca1e5d9038c
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
  14:     0x55bdf2c2ab7a - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
  15:     0x55bdf2b1109a - <F as alloc::boxed::FnBox<A>>::call_box::h6335d48d53dc84d2
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:302
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  16:     0x55bdf2c22a64 - std::sys::imp::thread::Thread::new::thread_start::h27fa49fe81f658e4
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  17:     0x7f6c6293f453 - start_thread
  18:     0x7f6c6246b7de - __GI___clone
  19:                0x0 - <unknown>
Goodbye
```"06/06/17 03:26:37 PMFix selection when padding is presentWhen making a selection, the selection jumps between adjacent cells under the cursor. This happens only when padding is used.1Likely resolved.siiptuoTuomas Siipola06/06/17 02:10:43 PMFix selection when padding is present1
60302/11/17 09:52:04 PMNoneUse logging instead of printlnRight now macronized println() is used everywhere for debug/info output. Can we replace that with logging as provided by `env_logger`?06/07/17 03:59:22 AMchanges osx fallback symbol font style"Previously, the fallback symbol font copied the style of the font from
the config. However, the only available style for the fallback symbol
font is Normal slant, Normal weight."2"I've pushed a [branch](https://github.com/lukaslueg/alacritty/tree/log)

Without any further options the output on stderr now looks like

> WARN alacritty::ansi [unhandled osc_start]
> WARN alacritty::ansi [unhandled osc_put] byte='7'
> WARN alacritty::ansi [unhandled osc_put] byte=';'
> WARN alacritty::ansi [unhandled osc_put] byte='f'
> WARN alacritty::ansi [unhandled osc_put] byte='i'


Running with `-vvv` now shows

> INFO alacritty::display device_pixel_ratio: 1
> INFO font::darwin device_pixel_ratio: 1
> INFO alacritty::renderer width: 1024, height: 768
> INFO alacritty::display Initializing glyph cache
> INFO alacritty::display Finished initializing glyph cache in 0.069378625
> INFO alacritty::display set_inner_size: 564px × 340px
> INFO alacritty::renderer width: 564, height: 340
> INFO alacritty::display Cell Size: (7 x 14)
> INFO alacritty PTY Dimensions: Line(24) x Column(80)
> TRACE mio::sys::unix::kqueue registering; token=Token(18446744073709551615); interests=Ready {Readable}
> TRACE mio::poll registering with poller
> TRACE mio::poll registering with poller
> TRACE mio::sys::unix::kqueue registering; token=Token(1); interests=Ready {Readable}
> WARN alacritty::ansi [unhandled osc_start]
> WARN alacritty::ansi [unhandled osc_put] byte='7'
> WARN alacritty::ansi [unhandled osc_put] byte=';'
> WARN alacritty::ansi [unhandled osc_put] byte='f'


Running with `-q` silences it to `Error`, running with `-qq` makes it quiet."jamakJames A Keene06/07/17 03:51:13 AM"changes osx fallback symbol font style

Previously, the fallback symbol font copied the style of the font from
the config. However, the only available style for the fallback symbol
font is Normal slant, Normal weight."1
60807/02/17 12:10:10 AMRick Richardsonalacritty fails to exit cleanly when shell is exited"when exiting via ctrl-d or exit,  the window hangs.. the pstack of the hanging threads is :

pstack : 
```
Thread 3 (Thread 0x7f75895ff700 (LWP 32051)):
#0  0x00007f759325d573 in epoll_wait () from /lib64/libc.so.6
#1  0x000055a6e708c61c in nix::sys::epoll::epoll_wait (epfd=<optimized out>, events=..., timeout_ms=<optimized out>) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/nix-0.5.1/src/sys/epoll.rs:91
#2  mio::sys::unix::epoll::Selector::select (self=<optimized out>, evts=<optimized out>, timeout_ms=...) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.5.1/src/sys/unix/epoll.rs:52
#3  mio::poll::Poll::poll (self=0x7f75895fe788, timeout_ms=...) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.5.1/src/poll.rs:52
#4  0x000055a6e707a3d8 in mio::event_loop::EventLoop<notify::inotify::INotifyHandler>::io_poll<notify::inotify::INotifyHandler> (timeout=..., self=<optimized out>) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.5.1/src/event_loop.rs:317
#5  mio::event_loop::EventLoop<notify::inotify::INotifyHandler>::run_once<notify::inotify::INotifyHandler> (timeout_ms=..., self=<optimized out>, handler=<optimized out>) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.5.1/src/event_loop.rs:279
#6  mio::event_loop::EventLoop<notify::inotify::INotifyHandler>::run<notify::inotify::INotifyHandler> (handler=<optimized out>, self=<optimized out>) at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.5.1/src/event_loop.rs:247
#7  notify::inotify::{{impl}}::new::{{closure}}::{{closure}} () at /home/rick/.cargo/registry/src/github.com-1ecc6299db9ec823/notify-2.6.3/src/inotify/mod.rs:243
#8  std::panic::{{impl}}::call_once<core::result::Result<(), std::io::error::Error>,closure> (self=..., _args=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
#9  std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,core::result::Result<(), std::io::error::Error>> (data=0x7f75895fea20 ""\001\024\000"") at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
#10 0x000055a6e7105c4b in panic_unwind::__rust_maybe_catch_panic () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
#11 0x000055a6e708054b in std::panicking::try<core::result::Result<(), std::io::error::Error>,std::panic::AssertUnwindSafe<closure>> (f=...) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
#12 std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure>,core::result::Result<(), std::io::error::Error>> (f=...) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
#13 std::thread::{{impl}}::spawn::{{closure}}<closure,core::result::Result<(), std::io::error::Error>> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:357
#14 alloc::boxed::{{impl}}::call_box<(),closure> (self=0x7f7589890000, args=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
#15 0x000055a6e70fdb25 in alloc::boxed::{{impl}}::call_once<(),()> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
#16 std::sys_common::thread::start_thread () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
#17 std::sys::imp::thread::{{impl}}::new::thread_start () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
#18 0x00007f75937396ca in start_thread () from /lib64/libpthread.so.0
#19 0x00007f759325cf7f in clone () from /lib64/libc.so.6
Thread 2 (Thread 0x7f7589ee1700 (LWP 32049)):
#0  0x00007f759373f460 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x000055a6e70ef059 in std::sys::imp::condvar::Condvar::wait () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/condvar.rs:64
#2  std::sys_common::condvar::Condvar::wait () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/condvar.rs:51
#3  std::sync::condvar::Condvar::wait<bool> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sync/condvar.rs:126
#4  std::thread::park () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:571
#5  0x000055a6e70f6660 in std::sync::mpsc::blocking::WaitToken::wait () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sync/mpsc/blocking.rs:81
#6  0x000055a6e6ff7e0f in std::sync::mpsc::oneshot::Packet<notify::Event>::recv<notify::Event> (deadline=..., self=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sync/mpsc/oneshot.rs:163
#7  std::sync::mpsc::Receiver<notify::Event>::recv<notify::Event> (self=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sync/mpsc/mod.rs:875
#8  alacritty::config::{{impl}}::new::{{closure}}<alacritty::display::Notifier,&std::path::Path> () at /home/rick/Projects/alacritty/src/config.rs:1140
#9  0x000055a6e6fdb2f8 in std::panic::{{impl}}::call_once<(),closure> (self=..., _args=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
#10 std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,()> (data=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
#11 0x000055a6e7105c4b in panic_unwind::__rust_maybe_catch_panic () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
#12 0x000055a6e6fed12a in std::panicking::try<(),std::panic::AssertUnwindSafe<closure>> (f=...) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
#13 std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure>,()> (f=...) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
#14 std::thread::{{impl}}::spawn::{{closure}}<closure,()> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:357
#15 alloc::boxed::{{impl}}::call_box<(),closure> (self=0x7f758bdfde80, args=<optimized out>) at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
#16 0x000055a6e70fdb25 in alloc::boxed::{{impl}}::call_once<(),()> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
#17 std::sys_common::thread::start_thread () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
#18 std::sys::imp::thread::{{impl}}::new::thread_start () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
#19 0x00007f75937396ca in start_thread () from /lib64/libpthread.so.0
#20 0x00007f759325cf7f in clone () from /lib64/libc.so.6
Thread 1 (Thread 0x7f7594653d00 (LWP 32047)):
#0  0x00007f759373f460 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x00007f7591aa4f87 in _xcb_conn_wait () from /lib64/libxcb.so.1
#2  0x00007f7591aa67cf in wait_for_reply () from /lib64/libxcb.so.1
#3  0x00007f7591aa6941 in xcb_wait_for_reply64 () from /lib64/libxcb.so.1
#4  0x00007f7591d02bd8 in _XReply () from /lib64/libX11.so.6
#5  0x00007f758ffdf9c8 in ?? () from /lib64/libGLX_nvidia.so.0
#6  0x00007f758ffe02a5 in ?? () from /lib64/libGLX_nvidia.so.0
#7  0x00007f758ffe3ab9 in ?? () from /lib64/libGLX_nvidia.so.0
#8  0x00007f7590054234 in ?? () from /lib64/libGLX_nvidia.so.0
#9  0x00007f759445f1a8 in _dl_fini () from /lib64/ld-linux-x86-64.so.2
#10 0x00007f759318f410 in __run_exit_handlers () from /lib64/libc.so.6
#11 0x00007f759318f46a in exit () from /lib64/libc.so.6
#12 0x000055a6e70f6514 in std::sys::imp::os::exit () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/os.rs:526
#13 std::process::exit () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/process.rs:897
#14 0x000055a6e7026a2d in alacritty::tty::sigchld (_a=<optimized out>) at /home/rick/Projects/alacritty/src/tty.rs:55
#15 <signal handler called>
#16 0x00007f759325101d in poll () from /lib64/libc.so.6
#17 0x00007f7591aa4d10 in _xcb_conn_wait () from /lib64/libxcb.so.1
#18 0x00007f7591aa6aa9 in xcb_wait_for_event () from /lib64/libxcb.so.1
#19 0x00007f7591d028a8 in _XReadEvents () from /lib64/libX11.so.6
#20 0x00007f7591cf4180 in XPeekEvent () from /lib64/libX11.so.6
#21 0x000055a6e70a6c9a in glutin::api::x11::window::{{impl}}::next (self=0x7ffc6ef98730) at /home/rick/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/api/x11/window.rs:297
#22 0x000055a6e6ffd993 in glutin::platform::platform::api_dispatch::{{impl}}::next (self=<optimized out>) at /home/rick/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/platform/linux/api_dispatch.rs:169
#23 glutin::window::{{impl}}::next (self=<optimized out>) at /home/rick/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/window.rs:584
#24 alacritty::event::Processor<alacritty::event_loop::Notifier>::process_events<alacritty::event_loop::Notifier> (term=<optimized out>, self=<optimized out>, window=<optimized out>) at /home/rick/Projects/alacritty/src/event.rs:196
#25 alacritty::run (config=..., options=...) at /home/rick/Projects/alacritty/src/main.rs:139
#26 0x000055a6e6ffbc80 in alacritty::main () at /home/rick/Projects/alacritty/src/main.rs:59
#27 0x000055a6e7105c4b in panic_unwind::__rust_maybe_catch_panic () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
#28 0x000055a6e70ff437 in std::panicking::try<(),fn()> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:436
#29 std::panic::catch_unwind<fn(),()> () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
#30 std::rt::lang_start () at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/rt.rs:57
#31 0x00007f7593175401 in __libc_start_main () from /lib64/libc.so.6
#32 0x000055a6e6fd583a in _start ()
```"06/11/17 08:21:14 PMAdd support for Beam, Underline cursors"Notable about this implementation is it takes a different approach for
managing cursor cells that previously. The terminal Grid is now
borrowed *immutably*. Instead of mutating Cells in the Grid, a list is
managed within the RenderableCellsIter. The cell at the cursor location
is skipped over, and instead cells are popped off a list of cursor
cells.

It would be good in the future to share some more code between the
different cursor style implementations for populating the cursor cells
list.

Supercedes #349.
Resolves #171."16Is this still an issue?jwilmJoe Wilm05/28/17 04:38:10 PM"Add support for Beam, Underline cursors

Notable about this implementation is it takes a different approach for
managing cursor cells that previously. The terminal Grid is now
borrowed *immutably*. Instead of mutating Cells in the Grid, a list is
managed within the RenderableCellsIter. The cell at the cursor location
is skipped over, and instead cells are popped off a list of cursor
cells.

It would be good in the future to share some more code between the
different cursor style implementations for populating the cursor cells
list.

Supercedes #349."1
61010/31/17 03:49:52 PMAnders PitmanAdd proper high DPI support with X11"I'm using a 28 inch 4k display. I'm using `xrandr` to set the dpi to 168. Most applications handle the scaling fine, but some (java guis being one example) don't. Alacritty doesn't seem to. Is there a configuration for this, or if not would it be a feature I might be able to contribute (I know nothing about X programming)?

For the short term cranking up the font to 18 seems to work fairly well."12/23/17 01:34:08 AMrefactored osx fallbacks to include menlo"When basing the fallbacks on fonts like ""Source Code Pro"", we
miss out glyphs like ""❯"". We refactor the fallback font loading
to cleanly provide a modified fallback list that always is
based on (and includes) ""Menlo""."4This is technically done. Remaining issue is updating DPI on monitor switch, but that's blocked on Glutin/winit. Please subscribe to #71 for further updates.algestenMartin Algesten06/13/17 12:46:10 AM"refactored osx fallbacks to include menlo

When basing the fallbacks on fonts like ""Source Code Pro"", we
miss out glyphs like ""❯"". We refactor the fallback font loading
to cleanly provide a modified fallback list that always is
based on (and includes) ""Menlo""."1
61501/09/17 05:23:33 PMAlbertoConform to XDG spec"Alacritty configuration should default to `$HOME/.config/alacritty/alacritty.yml` as the [XDG spec suggests](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html). This is also the standard behavior for most applications. This will also help avoid environment variables being unset and introduce bugs with expected configuration file loading.

I'm also willing to open a PR for this issue."06/14/17 05:43:43 PMUse cursor cell template when handling 'CSI X' escape sequence"This ensures that the cleared cells are set to the proper background
color, which is the main usage of this escape sequence.

Fixes #612"1"This would me a stopgap measure so that older installations would still work while newer put the file in the right place from the get-go. Alacritty might issue a warning when it loads the file from there. The priority is

1. `$HOME/.config/alacritty/alacritty.yml`
2. `$HOME/.alacritty.yml`
3. `$HOME/.config/alacritty.yml` (works, but warning given)"Aaron1011Aaron Hill06/14/17 04:38:44 PM"Use cursor cell template when handling 'CSI X' escape sequence

This ensures that the cleared cells are set to the proper background
color, which is the main usage of this escape sequence.

Fixes #612"1
61604/14/19 03:37:59 PMTitus von der MalsburgAlacritty window rescales during startup"When I start alacrity, it first creates a large window which is then very quickly resized to the final size (~70%).  The resizing is really fast and wouldn't bother me but my window manager (fvwm2) places the window based on the original size and that means that the window position ends up not being what it is supposed to be. 

Ubuntu 16.10.  Default alacritty.yml except that I changed the font size to 13."06/14/17 06:33:45 PMMake Travis test alacritty on nightly Rust, but allow failures"This allows us to notice and report any regressions that have occured on
nightly, without requiring tests to pass on nightly for the entire build
to succeed.

The `fast_finish` flag will cause Travis to mark the build as successful
if the only builds still running are allowed to fail (e.g. `nightly`).
This allows us to manually inspect builds (or implement some form of
notifications) to see if any nightly regressions have occured, without
slowing down the overall build time."1"@chrisduerr fixes it entirely on my laptop.
Can't verify on my office system (not being in the office or anything), but I doubt it'd be any different.
Tried to build on my windows setup, but the build fails (not alacritty's fault, I think my rust setup is broken there).

I'll comment here if I run into further problems on either of the remaining two systems above.
If you don't hear from me it's because this UX issue is solved (at least on my end)!

P.S. I would have preferred if there was a simpler solution as well, but UX problems are pretty important in terminal emulators :/"Aaron1011Aaron Hill06/14/17 04:56:45 PM"Make Travis test alacritty on nightly Rust, but allow failures

This allows us to notice and report any regressions that have occured on
nightly, without requiring tests to pass on nightly for the entire build
to succeed.

The `fast_finish` flag will cause Travis to mark the build as successful
if the only builds still running are allowed to fail (e.g. `nightly`).
This allows us to manually inspect builds (or implement some form of
notifications) to see if any nightly regressions have occured, without
slowing down the overall build time."1
61709/28/18 08:20:18 PMPetter UvestenColor weirdness after exiting vim on macOS 10.12.2"There seems to be a problem with color handling in the latest commit (f4b10a1dbb991861a84c5085a0ee4384d2377448), built with rust nigthly. Vim colors are way darker than they are in iTerm or Terminal.app, and it seems that the vim colorscheme persists after quitting. 

1. Start alacritty, all is well (using Source Code Pro instead of Menlo)
    ![img 2017-01-07 at 20 52 11](https://cloud.githubusercontent.com/assets/449540/21744729/9c5543ba-d51b-11e6-9931-52314a6a9027.png)

2. Fire up vim (colorscheme molokai-dark)

    ![img 2017-01-07 at 20 52 19](https://cloud.githubusercontent.com/assets/449540/21744734/b7185eee-d51b-11e6-8963-56af846cc8bd.png)

    The colors are _really_ dark. 

3. After exiting, dark colors persist

    ![img 2017-01-07 at 20 52 34](https://cloud.githubusercontent.com/assets/449540/21744746/ebe6b0c6-d51b-11e6-99ad-56d2308b5df2.png)



Log from alacritty: 
[log.txt](https://github.com/jwilm/alacritty/files/691673/log.txt)

Alacritty config: 
```yml
# Configuration for Alacritty, the GPU enhanced terminal emulator

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Source Code Pro
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 12.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0.0
    y: 0.0

# Should display the render timer
render_timer: false

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0x424242'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0x2a2a2a'

# Colors (Solarized Dark)
# colors:
#   # Default colors
#   primary:
#     background: '0x002b36'
#     foreground: '0x839496'
#
#   # Normal colors
#   normal:
#     black:   '0x073642'
#     red:     '0xdc322f'
#     green:   '0x859900'
#     yellow:  '0xb58900'
#     blue:    '0x268bd2'
#     magenta: '0xd33682'
#     cyan:    '0x2aa198'
#     white:   '0xeee8d5'
#
#   # Bright colors
#   bright:
#     black:   '0x002b36'
#     red:     '0xcb4b16'
#     green:   '0x586e75'
#     yellow:  '0x657b83'
#     blue:    '0x839496'
#     magenta: '0x6c71c4'
#     cyan:    '0x93a1a1'
#     white:   '0xfdf6e3'

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1b[4~"",  mode: AppCursor   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Delete,                  chars: ""\x1b[3~"",  mode: AppKeypad   }
  - { key: Delete,                  chars: ""\x1b[P"",   mode: ~AppKeypad  }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Shell
#
# You can set this to a path to your favorite shell, e.g. /bin/fish
shell:
```




Relevant lines from .vimrc: `colorscheme molokai-dark`



 
"06/19/17 12:05:12 AMAdd dependency to FreeBSD-specific setupFixes problem I had with issue #609 and should be better documented.1Colors in vim seem to work fine and there hasn't been any update to this issue for a while. Closing it as resolved.svmhdvnSiva Mahadevan06/14/17 07:25:22 PM"Add dependency to FreeBSD-specific setup

Fixes problem I had with issue #609, should be better documented."1
62005/18/18 11:26:37 PMAaron Muir HamiltonAlacritty doesn't place fish prompt at the top of the viewport on clear (C-l)I don't know how fish does this differently from bash, but whatever the case, Alacritty doesn't handle its escape sequence correctly.06/19/17 12:03:14 AMImplement 'backwards tab'"This escape sequence isn't officially documented anywhere, but is
supported by xterm and gnome-vte."1Closing because according to @qoh it seems like it should work and there was no further response from @xorgy.Aaron1011Aaron Hill06/15/17 07:46:53 PM"Implement 'backwards tab'

This escape sequence isn't officially documented anywhere, but is
supported by xterm and gnome-vte."1
62101/07/17 08:49:15 PMTom B BrownUpdate README.md06/19/17 12:04:17 AMFix bright inverse colors"Fixes https://github.com/jwilm/alacritty/issues/611

First time coding in Rust so I'm sure that this could potentially be solved in a better way..."2thanksDarkDefenderSebastian Parborg06/15/17 11:02:13 PMFeedback fixes1
62512/23/18 11:17:06 PMLucas BebberHangs whenever I try to input a diacritic (macOS)As soon as I try to type ~, ', etc., I can't type anything on the terminal anymore—it doesn't exactly hang, as I can still select text, resize the window, and stuff, but it stops responding to the keyboard.10/14/17 05:35:56 PMImplement user actions for font resize30"> dead keys works now (~, ¨, ^ etc)

So this issue is resolved. Problems with other characters should probably be handled separately to keep issues small and precise."da-xDan Aloni07/31/17 02:12:54 PMFont resize: Support a Reset action1
62611/10/18 04:08:49 PMPetter UvestenAllow alacritty to run on the integrated graphics card on macOS"As it is now, alacritty triggers a switch to the discrete graphics card on dual-graphics macbook pro's. It feels like a bit of overkill to run down the laptop battery by using the discrete card just to run a terminal. 

Apple's official doc for running openGL contexts on the integrated card is at https://developer.apple.com/library/content/qa/qa1734/_index.html , no idea how it relates to rust, though. "06/20/17 04:31:51 AMImplement semantic and line selection dragging2"Hello everyone,

So I'm not sure if I'll be of much help here (I know very little about Rust), but I can definitely confirm that opening Alacritty.app triggers the high performance gpu. Here's a [video capture](https://www.dropbox.com/s/2kmh8bie9o9qjhd/Kapture%202018-07-19%20at%2022.56.02.webm?dl=0). If you take a look at the middle column on the bottom, you'll see the moment it switches.

"jwilmJoe Wilm06/17/17 05:29:59 PMUpdate tests for new Selection API1
63302/17/17 11:28:48 PMDanilo BargenDead keys / combined characters printed twice"I'm on the Swiss German layout.

When typing dead keys (e.g. the backtick or the tilde) by pressing the corresponding key (usually with the AltGr modifier) and then space, the symbol is printed twice.

The same thing happens with combined characters. When typing the `é` using the corresponding direct key (it's available on my keyboard layout) it works. But when typing the forward-accent modifier dead key and then the letter e, the output is `éé`."06/23/17 06:27:16 PMAdd dim color support"Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config, it
will default to 2/3 the previous (not a spec, but the value other
terminals seem to use).

The actual dimming behavior brings bright colors to normal and regular
colors to the new dim ones. Custom RGB values are not changed, nor are
non-named indexed colors.

Closes #492 " =||= "Sorry for reopening this and it's probably me doing something wrong. But this issue (and #411) are not still resolved for me on OS X. Is that normal? Can you point me to a way to fix them?

Thank you!"jwilmJake Merdich06/23/17 05:01:53 PM"Add dim color support

Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config, it
will default to 2/3 the previous (not a spec, but the value other
terminals seem to use).

The actual dimming behavior brings bright colors to normal and regular
colors to the new dim ones. Custom RGB values are not changed, nor are
non-named indexed colors."1
64201/08/17 08:00:50 AMNoneAlacritty crashes when apt finishes"Whenever `apt` finishes installing, upgrading or removing package(s) Alacritty crashes. The operation finishes just fine, and immediately after that the terminal window closes. This doesn't happen with `apt-get`, just with `apt`. Might have something to do with the progress bar in `apt` but there doesn't seem to be any unusual characters in it...
```
$ uname -a
Linux localhost 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux
```"07/01/17 06:13:14 AMAdd Solus instructionsAdded some instructions for Solus.1I just tried this again with the latest master and the problem seems to have gone away, probably with the PR #91 as this indeed seems to be a duplicate of #94. Closing this, thanks!dimas-cyriacoDimas Cyriaco07/01/17 01:45:53 AMAdd Solus instructions1
64301/07/17 09:17:26 PMAndres VahterCrashed if window was resized"Mac OS X 10.11.6
Alacritty:
```
commit 707c20a365d6cc0b22f9bc3307ceefcf63411aea
Merge: f4b10a1 6d4f89b
Author: Joe Wilm <jwilm@users.noreply.github.com>
Date:   Sat Jan 7 11:38:41 2017 -0800
```

Crash:
```num_cols, num_lines = 192, 60
width: 2696, height: 1694
thread 'pty reader' panicked at 'cursor fell off grid', src/term/mod.rs:634
note: Run with `RUST_BACKTRACE=1` for a backtrace.
child finished with error '256'
```"07/01/17 05:24:51 PMReduce InstanceData footprint"The InstanceData type in the rendering subsystem was previously 16
floats which occupied a total of 64 bytes per instance. This meant that
for every character or background cell drawn, 64 bytes were sent to the
GPU. In the case of a 400x100 cell grid, a total of 2.5MB would be sent.

This patch reduces InstanceData's size to 26 bytes, a 60% improvement!
Using the above example for comparison, a worst case of 1MB would be
transferred.

The motivation for this patch comes from macOS. Once the terminal grid
would reach a certain size, performance experienced a sharp and dramatic
drop (render times would go from ~3ms to ~16ms). I don't want to
speculate too much on the underlying issue, but suffice it to say that
this patch alleviates the problem in my testing."1"Thanks for the report! We've got a few similar issues open already so going to close this as a duplicate

cc #12, #154"jwilmJoe Wilm07/01/17 04:58:37 PM"Reduce InstanceData footprint

The InstanceData type in the rendering subsystem was previously 16
floats which occupied a total of 64 bytes per instance. This meant that
for every character or background cell drawn, 64 bytes were sent to the
GPU. In the case of a 400x100 cell grid, a total of 2.5MB would be sent.

This patch reduces InstanceData's size to 26 bytes, a 60% improvement!
Using the above example for comparison, a worst case of 1MB would be
transferred.

The motivation for this patch comes from macOS. Once the terminal grid
would reach a certain size, performance experienced a sharp and dramatic
drop (render times would go from ~3ms to ~16ms). I don't want to
speculate too much on the underlying issue, but suffice it to say that
this patch alleviates the problem in my testing."1
64701/07/17 09:26:46 PMNoneUpdate README.mdSmall fix for markdown parsing, github fudges this07/02/17 03:38:14 AMDocument binding keys to a `command`"The ability for `key_bindings` to trigger a `command` was added in #566.
This PR documents their use, and gives a simple example.

Resolves #646."3Thanks!OJFordOllie Ford07/02/17 12:10:44 AM"Document binding keys to a `command`

The ability for `key_bindings` to trigger a `command` was added in #566.
This commit documents their use, and gives a simple example.

Resolves #646."1
65001/09/17 05:23:33 PMAlbertoConform to XDG spec for configuration"Use `$XDG_CONFIG_HOME/alacritty/alacritty.yml` for loading the configuration file falling back to first `$XDG_CONFIG_HOME/alacritty.yml` then finally `$HOME/.config/alacritty/alacritty.yml`

Closes #203"07/31/17 07:57:18 PMRead more from pty"Resolves an issue with partial draws where programs like vim would send
data, but only part of it would be drawn.

The logic for escaping when a write is pending has been removed in favor
of limiting bytes processed during a pty_read call.

The value of MAX_READ may not be ideal.

cc #598"3Thanks @0X1A!jwilmJoe Wilm07/02/17 08:11:00 PM"Read more from pty

Resolves an issue with partial draws where programs like vim would send
data, but only part of it would be drawn.

The logic for escaping when a write is pending has been removed in favor
of limiting bytes processed during a pty_read call.

The value of MAX_READ may not be ideal."1
65101/08/17 05:24:55 AMMichael BrumlowBetter bounds checking."- Remove the use of limit.
- Reduce the number of comparisons.

When using numbers provided by the PTY for subtractions there is a extra
step of ensuring that we won't trigger failure on testing when trying to
subtract form zero."12/25/17 01:15:00 AMBlinking Cursor"This is very much a WIP for blinking cursor. I'm not very fond of the implementation at the moment, and I may end up scrapping this and taking a different approach.

## Implementation Status

- [x] Cursor blinks
- [ ] Cursor blinks only when window is focused
- [ ] Cursor blink should be disabled for a second after keyboard input"6There's some discussion about that strategy [in another issue](https://github.com/jwilm/alacritty/issues/85#issuecomment-271108058). It looks like there's graphical bugs that crop up elsewhere, but those could also be bugs with Alacritty.jwilmJoe Wilm07/04/17 02:41:58 AMCrappy cursor blinking impl1
65210/21/17 11:32:38 PMBen BurkertAdd non-ASCII fontAdd a configurable non-ASCII font so that non-ASCII characters can be displayed when the normal font does not include non-ASCII glyphs.08/05/20 12:24:52 AMReduce InstanceData footprint"The InstanceData type in the rendering subsystem was previously 16
floats which occupied a total of 64 bytes per instance. This meant that
for every character or background cell drawn, 64 bytes were sent to the
GPU. In the case of a 400x100 cell grid, a total of 2.5MB would be sent.

This patch reduces InstanceData's size to 26 bytes, a 60% improvement!
Using the above example for comparison, a worst case of 1MB would be
transferred.

The motivation for this patch comes from macOS. Once the terminal grid
would reach a certain size, performance experienced a sharp and dramatic
drop (render times would go from ~3ms to ~16ms). I don't want to
speculate too much on the underlying issue, but suffice it to say that
this patch alleviates the problem in my testing.

If this patch looks familiar, it's because it was just landed a few days ago in #643! It ended up being reverted due to #648. There's clearly some more work needed in order to land this properly, so it has returned in a new PR to continue development."4Thanks again for the PR. However, I'm going to close this in favor of another approach. Basically, we want to add a more general system where it's possible to specify a list of fallback fonts within the config file rather than having one special case font.jwilmChristian Duerr08/04/20 08:18:54 PMFix floating point literal consistency1
65402/06/17 02:53:53 AMJohannes RidderstedtmacOS: Can't quit by pressing Cmd-QOn macOS any application can be terminated by pressing Cmd-Q. Not allowing this can be very confusing for newcomers. Plus it slows down restart time when you need to move your fingers to the trackpad / mouse.07/08/17 05:33:18 PMFix typo in rustdoc1"> Cmd-W is essentially going to be equivalent to Cmd-Q at this point since each Alacritty is a process leader.

I think that would be fine until there are actually windows to be closed individually.

> Cmd-N I was planning to implement very generally -- just making it possible through config. One Action that we would like to have is the ability to exec another process. You can imagine then that CmdN would just exec another Alacritty.

Yep, that makes perfect sense. My bar is low, and I'd just like to (eventually) see it behave roughly like other common windowed applications on Mac OS like Finder, iTerm2, or Chrome.

I've taken a shot at a basic fix for this one in #393."lukaslueglukaslueg07/05/17 05:33:54 PMFix typo in rustdoc1
65512/15/18 09:33:37 PMColin DeanTab characters are not output, at least for copying"I tweeted about display time, [praising Alacritty for being faster to display than iTerm2](https://twitter.com/colindean/status/817881616198537216). Way to go!

But in the process, identified a bug: tab characters are copied as spaces. See the tweet linked above and its replies for the thoughts.

I reproduced it more simply here:

```
# iterm2
$ echo -e ""[\t\t\t\t]""
[				]

#alacritty
$ echo -e ""[\t\t\t\t]""
[       ]
```

I retrieved the above output by highlighting from the `$` to the `]` as displayed by each terminal emulator. iTerm2 is allowing the copy of 4 tab characters. Alacritty is outputting _7_ spaces?

I'm using Alacrity at 61389c1 on macOS 10.11 using what is the default settings, but with font changed to Menlo and the Solarized theme uncommented.

#106 could be related because it demonstrates some tab weirdness."07/08/17 05:32:57 PMAdd a long option for the command flag (-e)These changes introduce `--command` as long version of the `-e` flag.1Hmmm, interesting. I believe I can reproduce this as well. FWIW, I found piping things into `xxd` to be a bit more insightful.polyfloydpolyfloyd07/05/17 08:44:07 PMAdd a long option for the command flag (-e)1
65701/08/17 01:16:50 AMMichael BrumlowFixing resize crashes."Most of the crashes on resize were due to columns and lines being set to
zero. This causes all sorts of other checks within the code to ensure
these values are greater than zero before running calculations. To avoid
this we just need to ensure that lines and columns are some non zero
value. This is seems to be what gnome terminal does. I have selected
2 lines and two columns for min terminal size for now.

#12 - Fixed"09/17/18 03:15:21 PMImplementation of scrollback"The `Grid<T>` is now a view into a region (I called it the 'active region') of a `VecDeque`. When new lines are added, they are pushed onto the back of the queue, and once the scrollback buffer is considered 'full', then old lines are popped off the front of the queue. This seems to work rather well since, unlike a `Vec`, elements don't need to be reshuffled around very often.

Of course, as discussed in #124 there are a few things that need to be fixed before I'd consider this 'ready':

- [x] configurable max scrollback length
- [ ] write new tests
- [x] fix existing `ref` tests
- [ ] measure performance impact (it seems fine but some numbers would be more reassuring)
- [x] fix out of bounds errors on resize"124I think #12 may be slightly different, but that's being resolved by your other work.neon64Chris Chamberlain12/21/17 01:11:19 AM"Merge pull request #9 from chrisduerr/scrollback

Fix failing ref tests"1
65909/24/20 02:02:24 AMTrentAutomate Benchmarks & Run in CIIs it possible to include a shell script to run benchmarks against other terminals that could be automated at CI time to catch speed regressions?07/20/17 05:54:41 PMImplement and use ansi attribute CancelBoldWhile playing around with ansi.rs I noticed that CancelBold was not implemented, so I would like to fix that upstream as well.1"See https://github.com/alacritty/termbenchbot.

A follow up for more features can be found here: https://github.com/alacritty/termbenchbot/issues/1."ftildeftilde07/12/17 04:08:30 PMImplement and use ansi attribute CancelBold1
66101/08/17 06:56:40 PMNik KantarOTF font support"Alacritty doesn't seem to recognize OTF font files. Example error message:

```
Couldn't find a font with name 'SourceCodePro' and style 'Regular'
```

Is this a known issue, and are there plans to fix it? Thanks!

---

Edit: macOS Sierra 10.12.2, TTF fonts work just fine and dandy."10/30/17 04:48:19 PMRemove the launcher and set the locale/current directory in alacrittyThis fixes all the weirdness where opening the app bundle would start one copy which immediately disappeared and then start another copy, etc. The code to get the locale probably should be reorganized.9"@jwilm You were correct—I wasn't using the correct font family and style. Running `fc-scan` (from `fontconfig`) on the font files revealed the correct values and all is well now.

@N-006 I was using the file name for reference instead of the `family` value from the font file metadata."tbodtTheodore Dubois07/13/17 08:41:51 PMRemove the launcher and set the locale/current directory in alacritty1
66207/01/17 11:51:56 PMNoneCopy-Paste inop in XUbuntu"Unable to user Copy-Paste in XUbuntu.
Tried middle click, ctrl-c, ctrl-v to no avail"07/28/17 10:14:19 PMSupport background and foreground color escape codesFixes #6565Right-click menus are not going to happen. It's just much work for a tiny quality-of-life feature. What's wrong with key bindings?siiptuoTuomas Siipola07/28/17 08:46:39 PMRefactor background color change tracking1
67101/08/17 05:08:51 AMCody LaederEnabled Rustc's Link Time Optimization"Changed:

Turned on LTO

Why:

Rust's Link Time Optimization forces all compiled code + dependencies to share the same LLVM codegen module which greatly increases the scope of optimization the LLVM can perform. As its no longer linking together separate libraries as `.o` files but as native llvm-ir. 

This normally shows a ~20% performance gain. Alacritty does aim for performance. 

Issues:

I've been running a build with this flag compiled for most of today with no issues."07/20/17 05:50:51 PMUpdate to latest Glutin/winit"This *finally* gets us off the fork of Glutin we've been on for so long
and will unblock a number of other items. Functionality should be the
same as before.

Resolves #234 "15This sounds great; thanks!jwilmJoe Wilm07/20/17 04:53:47 PMOnly test against latest stable.1
67202/16/17 05:07:38 PMManish R JainAlacritty is slower than Terminator"I followed lead from another Github Issue here (against urxvt). Created a 1m.rdf file from github.com/dgraph-io/benchmarks/data/22million.rdf.gz using `zcat 22million.rdf.gz | head -n 1000000 > 1m.rdf`.

I then ran Alacritty and Terminator one after another, twice. Here're the results.

- Alacritty:  cat 1m.rdf  2.08s system 7% cpu 29.3 total
- Terminator: cat 1m.rdf  2.15s system 27% cpu 7.819 total

- Alacritty: cat 1m.rdf 2.34s system 6% cpu 37.762 total
- Terminator: cat 1m.rdf  1.98s system 25% cpu 7.680 total

Alacritty is a factor slower than Terminator. Here's what archey3 shows on my system.

```
               +                OS: Arch Linux x86_64
               #                Hostname: mrjn-thinkpad
              ###               Kernel Release: 4.8.13-1-ARCH
             #####              Uptime: 1:04
             ######             WM: i3
            ; #####;            DE: None
           +##.#####            Packages: 764
          +##########           RAM: 2498 MB / 7855 MB
         #############;         Processor Type: Intel(R) Core(TM) i5-6300U CPU @ 2.40GHz
        ###############+        $EDITOR: vim
       #######   #######        Root: 69G / 168G (41%) (ext4)
     .######;     ;###;`"".      
    .#######;     ;#####.       
    #########.   .########`     
   ######'           '######    
  ;####                 ####;   
  ##'                     '##   
 #'                         `#  
```"07/19/17 07:26:46 PMCanonicalize the config watching path"This should resolve an issue where config behind a symlink was not being
properly reloaded when edited." =||= I confirm issue is resolved for me. Now Alacritty is twice faster than Terminator when `cat`-ing a 7.5MB file. Scrolling in vim/nvim is a bit faster, no more jerkiness.jwilmJoe Wilm07/18/17 04:01:21 PM"Canonicalize the config watching path

This should resolve an issue where config behind a symlink was not being
properly reloaded when edited."1
68306/20/17 03:58:36 PMNoneUnhandled Esc Dispatch"I'm getting the following error from Alacritty whenever I do anything in vim (inside tmux), and I think it make vim scrolling very slow.

```
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
```"07/28/17 04:02:57 PMDon't panic when setting cursor visibility failsCurrently setting cursor visibility always fails on Wayland. It shouldn't be a critical error on any platform.1I have the same issue.siiptuoTuomas Siipola07/23/17 07:08:31 PMFix code style1
68801/10/17 03:33:42 PMquininer[WIP] copypasta x11 support use xcb"1. Should add an `x11` feature to support non-Linux OS(like freebsd) ?
2. Should support Windows?

~~3. Should add `Clear` trait?~~"07/28/17 04:02:05 PMdocs(): add instructions for mac appsCloses https://github.com/jwilm/alacritty/issues/6872I found an interesting [library](https://github.com/jeandudey/xrb-rs). when I'm ready, I will open a new PR.mhartingtonmhartington07/24/17 10:12:53 PMdocs(): update copy1
68904/04/17 04:34:07 AMDavid RomanHangs when exiting from zsh"When the last command I executed in the zsh returned an error (for example if you execute a non existing command) then alacritty will print an error like *child finished with error '32512'* and hang.

The complete log is:
```
device_pixel_ratio: 1
width: 1360, height: 752
Initializing glyph cache
num fonts = 1058
num fonts = 1058
num fonts = 1058
Finished initializing glyph cache in 0.008676536
set_inner_size: 564px × 316px
width: 564, height: 316
Cell Size: (7 x 13)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 194, 57
width: 1360, height: 752
[unhandled] execute byte=00
[unhandled] execute byte=00
child finished with error '32512'
```"08/29/17 04:32:09 PMImplement an option to not start the config_monitor thread"I normally have a lot of terminals open and don't really care if they can reload the latest configuration or not.

It seems that I'm not alone on this, hence this PR.

CC: #670 "16"+0.5 for this, hadn't noticed because I usually start it via xmonad and don't see the output.

I also just had one instance hanging for 1-2s.

with these steps it does *not* happen: 
running `zsh` in `terminator`:
 ```
$ alacritty
```
in that window: 
```
$ false
$ exit
```
Debian testing x86_64 on kernel 4.7.0-1

output:
```
device_pixel_ratio: 1
width: 681, height: 747
Initializing glyph cache
num fonts = 486
num fonts = 486
num fonts = 486
Finished initializing glyph cache in 0.025590954
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 85, 41
width: 681, height: 747
child finished with error '256'
```"liuwWei Liu07/23/17 05:57:19 PM"Implement options to not start the config_monitor thread

Provide a command line option as well as a configuration file option.
The command line option takes precedence."1
69101/09/17 12:44:57 AMAdrian BrinkAppreciation + potentially unrelated bug"I am on macOS10.12 and build it with --release and running it from iTerm2 with ./target/release/alacritty .

The problem that I have is that the typed command shadows over to its output.
<img width=""212"" alt=""screen shot 2017-01-08 at 12 03 20"" src=""https://cloud.githubusercontent.com/assets/11320251/21749218/b79e2626-d59a-11e6-883e-20d9dbd871f5.png"">

The same issue appears with Terminal.app, however it doesn't appear with iTerm2.app

Any help would be appreciated.

Also, damn this is awesome. :-) I'm going to start using alacritty from now on (even though it would be nice to get rid of the shadowing).
Furthermore, how can I bind alacritty to a desktop shortcut that I can open from spotlight?"07/25/17 12:54:07 AMadd support for X input methodReapply the changes to the latest master (https://github.com/jwilm/alacritty/pull/658).1"> Also, damn this is awesome

Thanks!

> Furthermore, how can I bind alacritty to a desktop shortcut that I can open from spotlight?

Need to build an `Alacritty.app`. We'll be publishing these at some point once the project matures.

> Any help would be appreciated.

This does sound like a potential TERM issue. Going to close this as such, but feel free to correct me if this turns out to be an Alacritty issue."DeterminantDeterminant07/24/17 05:28:25 PMmake changes for better maintenance1
69202/07/17 04:08:10 PMinsunazsh tab completion does not print"This is how it looks for me:
![tabc](https://cloud.githubusercontent.com/assets/3718129/21749673/b77ecd9a-d5a3-11e6-8119-61dd136ee2ff.gif)
How it should look is that everything is already visible and just the white highlighting moves, not new things being printed
I'm using the diff from #85 that fixes the htop bars."07/28/17 04:00:56 PMfont: update macOS core-text dependency to 6.1.0, fixes #6852"> it's quite a critical bug for me, and probably for others too.

Myself included ;)

I'm expecting this to be a pretty trivial fix, just need to make time to dig into it."martinlindheMartin Lindhe07/24/17 03:04:39 PMfont: update macOS core-text dependency to 6.1.0, fixes #6851
69408/14/20 09:26:38 PMNathan RingoSet WM_WINDOW_ROLE via flag or env var.Would it be possible to get a flag similar to `gnome-terminal`'s (and I assume others') `--role` flag?07/28/17 04:00:04 PMREADME.md: add NixOS instructions1Alacritty can freely set class and instance, that should be sufficient for the goals stated in this issue.Mic92Jörg Thalheim07/25/17 10:36:28 AMREADME.md: add NixOS1
71709/16/17 01:15:06 AMNoneAllow transparent background colors"As far as feature requests go, is only a minor visual nitpick ;-)

I'm currently using [termite](https://github.com/thestinger/termite) as a daily driver, and the only obvious thing I'm missing so far is the option to specify a semi-transparent background. I'm not aware on how easily this is done using OpenGL - there is a [Stackoverflow thread](http://stackoverflow.com/questions/4052940/how-to-make-an-opengl-rendering-context-with-transparent-background/9215724#9215724) with some useful hints, but all answers seem to be platform-dependent."08/08/17 01:55:05 PMremove unused macrosThis silences a couple of compiler warnings in the build.3Ah, yes. Thanks @anxiousmodernman!oconnor663Jack O'Connor08/07/17 03:16:54 PM"remove unused macros

This silences a couple of compiler warnings in the build."1
72005/18/18 11:22:58 PMNonePiping speed"I tried to test the piping speed in `alacritty` using commands that generate a big amount of text. So far, it seems that the speed at which `alacritty` displays the results can't quite keep up with the terminal application I currently use ([termite](https://github.com/thestinger/termite)).

> Alacritty’s biggest claim is that it’s the fastest terminal emulator available. If there’s a case where it’s not, then it’s either a bug in Alacritty or a misconfigured system.

Taking your blogpost by it's word, I thought I'd open an issue :)

---

I've made some recordings showing the results of two such commands:

```
dmesg
```
[![](https://img.youtube.com/vi/lIo7ixVXuP0/0.jpg)](https://www.youtube.com/watch?v=lIo7ixVXuP0)

```
journalctl | cat
```
[![](https://img.youtube.com/vi/lMYiE30-0LQ/0.jpg)](https://www.youtube.com/watch?v=lMYiE30-0LQ)"08/11/17 03:29:57 PMFixes"* Resolves BCE issues affecting 24-bit vim color schemes
* Fixes some warnings
* Fix bug with alt screen toggle (now sets instead of toggles)" =||= "Both `journalctl | cat` and `dmesg` finish instantaneously for me on alacritty. This issue has probably been fixed at some point.

If someone else is able to reproduce it, please let me know and I can re-open it."jwilmJoe Wilm08/10/17 04:33:50 PMAdd ref test for 24-bit vim BCE1
72207/20/17 05:50:51 PMErik RigtorpUpdate Glutin"This version of glutin doesn't compile on Windows 10:
```
[dependencies.glutin]
git = ""https://github.com/jwilm/glutin""
rev = ""af7fe340bd4a2af53ea521defcb4f377cdc588cf""
```
Upstream glutin 0.7.1 compiles fine:
```
glutin = ""0.7.1""
```

This is blocking windows support."08/11/17 06:27:38 PMAdd rust to the list of Arch Linux dependenciesFixes #7181Glutin/winit API churn is really high right now, and the latest candidate branch has some bugs. There's a new WIP to update current Glutin API to winit 0.7.1, and hopefully we can get on that.maximbazMaxim Baz08/11/17 06:16:19 PM"Add rust to the list of Arch Linux dependencies

Fixes #718"1
72401/08/17 06:40:12 PMAndronik OrdianPerformance issue on Linux with Mesa"> Alacritty is incredibly fast. Compare find /usr or equivalent with your favorite terminal emulator. Keep in mind that command will be faster the second time it’s run due to OS caching.

_On Alacritty (width: 724, height: 484)_
```
find /usr  1.88s user 3.00s system 5% cpu 1:32.78 total
```
_On gnome-terminal, Konsole (width: 1366, height: 768)_
```
find /usr  1.13s user 1.75s system 44% cpu 6.409 total
find /usr  1.31s user 1.75s system 72% cpu 4.204 total
```
> Alacritty’s biggest claim is that it’s the fastest terminal emulator available. If there’s a case where it’s not, then it’s either a bug in Alacritty or a misconfigured system. 

I've recorded some flame graphs (w/ and w/o ""--call-graph dwarf""):
```sh
perf record -F 99 --call-graph dwarf target/release/alacritty
perf script | stackcollapse-perf| flamegraph --width 1920 > alacritty_dwarf.svg
``` 
[flame_graphs.zip](https://github.com/jwilm/alacritty/files/692326/flame_graphs.zip)

Some system info:
* Alacritty: 9e713189cc6dc83f97e87fa18b66b39d2c7222cc
* Kernel: x86_64 Linux 4.9.0-1-MANJARO
* CPU: Intel Core i7-3520M @ 4x 3.6GHz
* GPU: Mesa DRI Intel(R) Ivybridge Mobile
* OpenGL core profile version string: 3.3 (Core Profile) Mesa 13.0.2
* OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.00"08/12/17 07:49:58 PMMove rust dependency to the Prerequisites sectionBetter fix for #718.5Thanks for the charts!maximbazMaxim Baz08/12/17 06:08:30 PMRemove reference to a specific compiler version1
72601/09/17 05:43:28 AMTom Crayfordprint glutin events if --print-events is passed"When debugging many issues, it's often very helpful to have the raw
glutin events printed out to stderr as they come in. This does that.

Note that since `glutin::Event` doesn't implement `Display`, we just use
rust's debugging output for now via `{:?}`."09/02/17 07:29:04 PMTouchpad scroll fix (do not merge!)This is an RFC PR to fix #721, my first attempt at modifying a Rust application that people use and my first foray into Alacritty's code. As such there are a few issues with how it's implemented — I'm not happy with how the scrolling state is duplicated across `event::Processor` and `input::ActionContext` (although this might be appropriate?), the names I've used are terrible and I've added a dumb implementation of the state function to what is as far as I can tell a stub implementation of `ActionContext` for testing purposes. I'd love to get some feedback on where this stuff should go and what it should look like!4Looks good, thanks!lheckemannLinus Heckemann08/12/17 12:05:19 PMFix #721: touchpad scrolling1
73901/09/17 05:40:39 AMTom Crayfordlink to dpi.lvWhen trying to figure out what my dpi was, I came across this site. Ideally alacritty would figure out your dpi automatically at bootup somehow, but for now, linking to the site saves a user a google search.08/20/17 05:06:25 PMrebased mystal:transparency with master"This is a rebase of mystal transparency work here:
https://github.com/jwilm/alacritty/pull/331

Mystal seems to be busy with other work so I decided to go ahead and rebase this with the current code accordingly.

This code has been tested accordingly on a fresh master on osx 10.12.6 and seems to be working as expected."3I'd rather not link to random websites from the config.jquickjquick08/18/17 03:50:00 PMrebased mystal:transparency with master1
74701/13/17 05:21:15 AMTom Crayfordadd suggestive fallback messages on unavailable fontsas per https://github.com/jwilm/alacritty/issues/3908/22/17 06:24:34 PMFix newline + scroll region bug"When a scroll region is active with the cursor below the bottom of the
region, newlines should not cause the region to scroll.

A ref test was added for this situation to prevent regressions.

Thanks @hiciu for reporting and @nicm for the test case.

Resolves #745." =||= @jwilm donejwilmJoe Wilm08/22/17 05:54:46 PM"Fix newline + scroll region bug

When a scroll region is active with the cursor below the bottom of the
region, newlines should not cause the region to scroll.

A ref test was added for this situation to prevent regressions.

Thanks @hiciu for reporting and @nicm for the test case.

Resolves #745."1
75601/09/17 10:40:03 AMTom Crayfordadd a suggestion to report a bugWhen we see a crash, suggest reporting a bug to the github issue tracker.08/29/17 03:54:13 PMFix reloading colors from configThis is a bit ugly fix for #749. =||= Fair!siiptuoTuomas Siipola08/26/17 12:07:53 PMFix reloading colors from config1
75708/24/20 12:05:13 AMJasper WallaceAlacritty should pass vttest"Hi,

vttest is an old program for testing terminals and terminal emulators, it's in the vttest package on Debian (and presumably Ubuntu too).

Alacritty panics at the start of test 1, and part way through test 2 (just keep pressing enter).

vttest is probably useful for developing alacritty since it tests all kinds of odd edge cases in terminal handling."11/12/17 03:11:22 AMSupport more color escape codes"This should fix #743. However some codes like those related to highlight color
are not implemented because they are not (yet) supported by the application.
Also intrestingly, there doesn't seem to be an escape code for changing cursor
foreground color, only the background color."2"I went through all basic tests that are necessary for most terminal features and Alacritty seems to pass them without any troubles. While it doesn't match XTerm, most of the deviations are intentional and match other terminals like VTE.

So while I wouldn't close this issue as completely resolved, since that's not desired anyways, I think there's not much value in keeping this open anymore.

If there are escape sequences desired that are covered by vttest, I would recommend to instead open separate issues with references to what they are used for. That should make fixing things much easier than a generic ""vttest"" issue."siiptuoTuomas Siipola09/02/17 04:53:23 PMCheck for overflow when parsing number input1
75901/09/17 12:40:51 AMTomas KorcakDoes not compile at OSX"## OS Version - `sw_vers`

```
$ sw_vers
ProductName:	Mac OS X
ProductVersion:	10.12.2
BuildVersion:	16C67
```

## Rust Version - `rustup show`

```
$ rustup show
Default host: x86_64-apple-darwin

installed toolchains
--------------------

stable-x86_64-apple-darwin
beta-x86_64-apple-darwin
nightly-2016-11-06-x86_64-apple-darwin (default)
nightly-x86_64-apple-darwin
local

active toolchain
----------------

nightly-2016-11-06-x86_64-apple-darwin (default)
rustc 1.14.0-nightly (cae6ab1c4 2016-11-05)
```

## Output `cargo build --release --verbose`

```
Running `rustc /Users/tomaskorcak/.cargo/registry/src/github.com-1ecc6299db9ec823/gleam-0.2.29/src/lib.rs --crate-name gleam --crate-type lib -C opt-level=3 -g -C metadata=aa1584a24024c7fc -C extra-filename=-aa1584a24024c7fc --out-dir /Users/tomaskorcak/dev/alacritty/target/release/deps --emit=dep-info,link -L dependency=/Users/tomaskorcak/dev/alacritty/target/release/deps --cap-lints allow -l framework=OpenGL`
   Compiling objc_id v0.1.0
     Running `rustc /Users/tomaskorcak/.cargo/registry/src/github.com-1ecc6299db9ec823/objc_id-0.1.0/src/lib.rs --crate-name objc_id --crate-type lib -C opt-level=3 -g -C metadata=1b90e6745bca1976 -C extra-filename=-1b90e6745bca1976 --out-dir /Users/tomaskorcak/dev/alacritty/target/release/deps --emit=dep-info,link -L dependency=/Users/tomaskorcak/dev/alacritty/target/release/deps --extern objc=/Users/tomaskorcak/dev/alacritty/target/release/deps/libobjc-9578ff0dad145ffa.rlib --cap-lints allow`
error: attribute must only have one argument
 --> /Users/tomaskorcak/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.8.19/src/lib.rs:9:3
  |
9 | #[proc_macro_derive(Serialize, attributes(serde))]
  |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: attribute must only have one argument
  --> /Users/tomaskorcak/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.8.19/src/lib.rs:17:3
   |
17 | #[proc_macro_derive(Deserialize, attributes(serde))]
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 2 previous errors
```"08/29/17 03:40:52 PMAdd gentoo instructions.I added some installation instructions for gentoo. It uses the `slyfox` overlay, and I'll try to keep this README up to date if that overlay disappears and/or if it's broken.2"If it helps, I was able to compile it with this setup: 

```
→ sw_vers
ProductName:	Mac OS X
ProductVersion:	10.12.2
BuildVersion:	16C67
```

```
→ rustup show
Default host: x86_64-apple-darwin

installed toolchains
--------------------

stable-x86_64-apple-darwin (default)
nightly-2016-12-16-x86_64-apple-darwin

active toolchain
----------------

stable-x86_64-apple-darwin (default)
rustc 1.14.0 (e8a012324 2016-12-16)
```"refactoazarus08/27/17 09:55:16 AMAdd gentoo instructions.1
76101/19/17 05:13:59 AMTomas KorcakUpdate dependencies08/28/17 05:01:20 PMPush winit dependency to 0.7.6"Update winit from 0.7.5 to 0.7.6.

I realize that alacritty pulls ""master"" rather than actually using 0.7.5 but it seems a good idea to keep up with winit versions regardless...

Also, this should allow us to fix the NixOS/nixpkgs build."3Thanks for the PR! Could you squash your commits please?NeQuissimusTim Steinbach08/27/17 01:38:24 PMwinit: 0.7.5 -> 0.7.6, glutin: 0.9.1 -> 0.9.21
76201/19/17 05:47:49 PMCarlos MondragonCtrl + Alt + Cmd + Space freezes Alacritty on OSX"First of all, amazing project! It's blazing fast!

I use that shortcut for switching input sources, disabled the shortcut and still end up with a frozen terminal. 

Happy to help fix it, but I have no idea on how to debug this."12/24/17 09:23:53 PMRefactor populate cursor, fix-wide-cursor"This refactors the populate cursor functions. It also applies the functional part of the fix-wide-cursor branch (i.e. does not apply the debug printlines.)

Tested with all three cursor modes. Tested with wide characters `ａｓｄｆ`."4@mondras ok, that's odd. Never the less, this is duplicate of #99 and should be tracked there.OliverUvJoe Wilm12/24/17 09:12:18 PMMerge remote-tracking branch 'origin/master' into refactor-populate-cursor1
76301/09/17 05:22:09 AMElias RoaFix yml errors from uncommenting solarized block in configVery small and simple change. The solarized dark example block has one additional space, which causes yml related errors when you uncomment the block without removing the extra space. This can be confusing to new users and doesn't really add to the overall readability.08/29/17 02:52:21 PMRestore winit deps"Accidentally removed in
https://github.com/jwilm/alacritty/commit/c4ece6dde3c9dcf825a44aa775535a65c0c376a6
when winit version was bumped."1Sounds like a plan. Thanks for the PR!tiziano88Tiziano Santoro08/29/17 09:01:55 AM"Restore winit deps

Accidentally removed in
https://github.com/jwilm/alacritty/commit/c4ece6dde3c9dcf825a44aa775535a65c0c376a6
when winit version was bumped."1
76502/22/17 10:49:30 PMNoneOption to auto-hide mouse when typingTerminal.app has this feature and I've always liked it. It's probably not for everyone so it'd be cool if it was exposed in the config.12/23/17 08:15:19 PMFeature/remember window position and size"See discussion on https://github.com/jwilm/alacritty/issues/669

Don't merge this -- just opening this so it can be examined easily."4I've found a fix for mac in https://github.com/jwilm/alacritty/pull/437 which uses a different call, that seems more appropriate across platformsbrycefisherBryce Fisher-Fleig08/29/17 04:17:59 PM(WIP) store the window position on close1
76701/11/17 03:43:33 PMDanny Dulaisupport to change cursor color or invert itsolves #155, while preserving the invert behavior by default09/05/17 04:07:02 PMUpdate dependencies"The serde updated required adding lifetimes and some renaming.
The notify update required refactoring to use new types.
Mio split some parts into mio-more, and did some refactoring.
The other deps did not required changes."1Easiest thing would be to checkout the latest master and then cherry-pick your commitParadoxSpiralJoe Wilm09/05/17 04:03:30 PMComment about duration arg to file watcher1
76901/09/17 05:07:28 AMVan TienOption to run without the terminal"Hi,
I am using Alacritty on Mac. Whenever I launch it, the new iTerm/terminal opens and prints the debug message. Is there any option to disable that and run Alac alone?


"09/02/17 02:14:27 PMRemove invalid characters from default config filesI found invalid character: U+FFFC at all heads of line on dim colors section.1"Cross linking to the PR where work on Alacritty.app is happening:
https://github.com/jwilm/alacritty/pull/301"tanittatanitta09/02/17 09:39:04 AMRemove invalid characters from default config files.1
77006/20/17 04:04:08 PMRichard GuayNot building on OSX"I followed your instructions for installing and I get this error:

cargo build --release --verbose
    Updating registry `https://github.com/rust-lang/crates.io-index`
error: failed to fetch `https://github.com/rust-lang/crates.io-index`

Caused by:
  [9/-3] Object not found - no match for id (a568bd9494aa9d6eccd58d87ef8cb0d493b3defe)

Sorry, I haven't dived into learning Rust yet.

Rust Version: rustc 1.16.0-nightly (47c8d9fdc 2017-01-08)
macOS 10.12.3 Beta (16D17a)"09/05/17 03:56:33 PMA (very) little english fixup...1Haven't had any reports of macOS building issues for a long time.vale981vale98109/04/17 06:49:03 AMA (very) little english fixup...1
77601/09/17 05:06:38 AMCole Thompsoncrash on MacOS when parent shell's window is closed"Running MacOS Sierra (10.12.2). If I launch Alacritty from another terminal emulator, and close the window used to launch it, Alacritty crashes. Error is reproducible with both bash via Terminal and with fish via iTerm.

Steps to reproduce:

1. Open a terminal window.
2. Run `alacritty` and background it (either via `alacritty &` or Ctrl-Z followed by `bg`).
3. Close the original Terminal/iTerm window.
4. Do something with alacritty, e.g. resize the window or enter input. It immediately crashes.

I can work around this by using `tmux`: open a tmux session, run `alacritty`, detach tmux, close the window. Alacritty will continue to run just fine in this state, until I terminate the tmux session, at which point Alacritty becomes ""crashable"" (i.e. goto step 4)"10/09/17 05:21:00 AMSupport bitmap fonts"To allow FontConfig to work with Bitmap font, we shall pass the size
we are interested in, and account for the size returned in the font
matching process. This is, because we cannot scale those fonts.

FontConfig will return the closest match, and we take its returned
pixel size back when we are rendering the glyphs.

There's an oddity when call set_char_size in `freetype2` - we need to
behave as if the DPI is 72. It is due to the following macro:

    #define FT_REQUEST_HEIGHT( req )                                        \
          ( (req)->vertResolution                                           \
              ? ( (req)->height * (FT_Pos)(req)->vertResolution + 36 ) / 72 \
              : (req)->height )

Further work can allow for integer scaling of the largest bitmap
font varient.

Tested with Terminus PCF-type font under Linux.

This addresses issue #582 ."4This will be resolved when we ship an `Alacritty.app`.da-xDan Aloni09/08/17 06:03:14 PM"Support bitmap fonts

To allow FontConfig to work with Bitmap font, we shall pass the size
we are interested in, and account for the size returned in the font
matching process. This is, because we cannot scale those fonts.

FontConfig will return the closest match, and we take its returned
pixel size back when we are rendering the glyphs.

There's an oddity when call set_char_size in TrueType - we need to
behave as if the DPI is 72. It is due to the following macro:

    #define FT_REQUEST_HEIGHT( req )                                        \
          ( (req)->vertResolution                                           \
              ? ( (req)->height * (FT_Pos)(req)->vertResolution + 36 ) / 72 \
              : (req)->height )

Further work can allow for integer scaling of the largest bitmap
font varient.

Tested with Terminus PCF-type font under Linux.

This addresses issue #582 ."1
77701/12/17 06:59:06 PMDaniel RHEL7: Error creating glutin::Window; No backend is available"Now that I have built the binary I'm getting this error when running:

`Error creating glutin::Window; No backend is available`
"12/23/17 05:17:05 AMAssure that newlines are in selections"When a selection was made, the last line of the selection did not include a new line character when the line ending was selected. This would occur if only one line was selected; if multiple lines were selected, only the final line did not include a newline.

This commit updates the `string_from_selection` function to attempt to append a newline character in all places where they are suitable. Because of the simplification of newline insertion, several trait implementations were removed.

This fixes the first part of #432."4"yum update and a restart fixed the issue.

I have an alacritty term open !"DSpeckhalsDustin Speckhals09/07/17 09:03:07 PM"Assure that newlines are in selections

When a selection was made, the last line of the selection did not
include a new line character when the line ending was selected. This
would occur if only one line was selected; if multiple lines were
selected, only the final line did not include a newline.

This commit updates the `string_from_selection` function to attempt to
append a newline character in all places where they are suitable.
Because of the simplification of newline insertion, several trait
implementations were removed."1
77801/29/17 02:15:14 AMKhaja Minhajuddinshell: /bin/bash --login fails"To make alacritty use a `login` shell, I used the following config. But it fails with an error

```yaml
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

shell: /bin/bash --login
```

```
alacritty $ alacritty 
device_pixel_ratio: 1
width: 1918, height: 1078
Initializing glyph cache
got font path=""/home/minhajuddin/.local/share/fonts/Sauce Code Powerline Regular.otf""
num fonts = 436
num fonts = 436
Finished initializing glyph cache in 0.02053962
set_inner_size: 724px × 580px
width: 724, height: 580
Cell Size: (9 x 24)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 213, 44
width: 1918, height: 1078
child finished with error '256'

alacritty $ 
```

As a workaround I am using this wrapper:

```bash
#!/bin/bash

exec /bin/bash --login
```"10/22/17 06:34:31 PMChange cursor from pointer to text"It seems that (as a rule) terminal emulators use the text mouse cursor rather
than the pointer that is used now. This commit changes the cursor to
using winit's built-in configuration function."3This should work nowDSpeckhalsJoe Wilm10/22/17 03:48:50 PMMerge branch 'master' into mouse-cursor-test1
79007/01/17 11:45:16 PMSemyon PisarevAdd a git tag"It is useful to add a git ""version tag"" to give users ability to fetch particular versions (even for alpha).
It is also required for homebrew formula."10/09/17 05:14:44 PMSupport web notation for hex colors"Just checking if you would be interested in this.
Not being able to just use the more common format of specifying hex colors has bugged me for a while now.

This is my first contribution to a Rust project in any form, so please be gentle 🙂 "1@cweagans Properly tagging versions is planned and tracked in #1240. Currently I don't think there's any direct focus on which things should be tackled in which order, so I wouldn't expect milestones to be super actively used.robertgzrRobert Günzler06/12/17 10:16:57 AMSupport web notation for hex colors1
79201/09/17 05:32:54 PMJAMIE PETER GOODWINMasterNone10/07/17 03:02:55 PMUpdate Solus depsRemoved freetype2-devel, it isn't necessary given fontconfig-devel depends on freetype2-devel, just as it depends on expat-devel.1pull request completeJoshStroblJoshua Strobl09/23/17 10:11:41 AM"Update Solus deps

Removed freetype2-devel, it isn't necessary given fontconfig-devel depends on freetype2-devel, just as it depends on expat-devel."1
79601/09/17 05:34:21 PMNoneUpdate README.mdTiny grammar fix.09/28/17 12:29:46 AMUse a wildcard dependency for clippy, and start fixing warnings"Because there are so many clippy warnings in the current codebase,
this commit removes '#![cfg_attr(feature = ""clippy"", deny(clippy))]',
to make it easier to fix warnings incrementally."1Thanks!Aaron1011Aaron Hill09/27/17 07:50:54 PMFix more clippy warnings1
79801/09/17 05:17:47 PMArtem Zinnatullin :slowpoke:cat /dev/random crashes alacritty after few seconds"To check performance of `alacritty` I've decided to run `cat /dev/random` and compared it with standard Mac Terminal, have to say that `alacritty` is visible faster!

The problem is that `alacritty` crashes after few seconds of `cat /dev/random` with following error:

```
thread 'pty reader' panicked at 'ansi::ClearMode::Above not implemented', src/term/mod.rs:971
note: Run with `RUST_BACKTRACE=1` for a backtrace.
child finished with error '256'
``` 

I'm on commit `2fa271419c4765f7758dcf336fe0b913c12c18a6`."12/22/17 11:05:25 PMCorrect accuracy of first sentence in READMEAs documented in https://github.com/jwilm/alacritty/issues/289 it's not currently the fastest-- only a small number of terminals running a single task for initially benchmarked.4Tracking this in #63markstosMark Stosberg09/28/17 06:54:23 PM"Correct accuracy of first sentence in README

As documented in https://github.com/jwilm/alacritty/issues/289 it's not currently the fastest-- only a small number of terminals running a single task for initially benchmarked."1
79907/01/17 11:44:50 PMMiikka SalminenUnnecessary padding at the top side of terminal window"There's some unnecessary padding at the top of the terminal window, before the first text line starts. Changing the DPI or vertical offset doesn't seem to affect this. FWIW I'm using xmonad (a tiling WM).

Attached is a comparison of Irssi running in Alacritty (left) and urxvt (right).

![alacritty_padding_top](https://cloud.githubusercontent.com/assets/1662621/21767517/672e8f58-d67d-11e6-827f-f218f10f4e43.png)"10/22/17 03:42:40 PMRewrite err_println to eprintln introduced in Rust 1.191Resolved in 9316771f64842533181cfb04a27aa9ae809cc435polyfloydpolyfloyd09/28/17 08:46:30 PMRewrite err_println to eprintln introduced in Rust 1.191
80101/09/17 05:15:59 PMPaulo Matos`swap_lines` breaks with `cat /dev/urandom`"While trying to reproduce #256 found:

```
thread 'pty reader' panicked at 'swap_lines dst out of bounds; len=114, dst=114', src/grid.rs:163
stack backtrace:
   1:     0x564d918c73ca - std::sys::imp::backtrace::tracing::imp::write::h9c41d2f69e5caabf
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x564d918c6851 - std::panicking::default_hook::{{closure}}::h1f61f3c769fffe7a
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:351
   3:     0x564d918c5a17 - std::panicking::rust_panic_with_hook::hffbc74969c7b5d87
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:367
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:555
   4:     0x564d918c5571 - std::panicking::begin_panic::h3bbdbb2a23440035
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:517
   5:     0x564d918c54e9 - std::panicking::begin_panic_fmt::h34f5b320b0f94559
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:501
   6:     0x564d917b5781 - alacritty::term::Term::scroll_up_relative::h62df3f49e0598206
                        at /home/pmatos/Projects/alacritty/<panic macros>:8
                        at /home/pmatos/Projects/alacritty/src/grid.rs:138
                        at /home/pmatos/Projects/alacritty/src/term/mod.rs:615
   7:     0x564d9179ab10 - vte::Parser::perform_action::hdc022bd1ccfcbadf
                        at /home/pmatos/Projects/alacritty/src/term/mod.rs:839
                        at /home/pmatos/Projects/alacritty/src/ansi.rs:568
                        at /home/pmatos/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:205
   8:     0x564d917ad6a2 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h611a00c07d8ab92f
                        at /home/pmatos/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:158
                        at /home/pmatos/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.1.2/src/lib.rs:137
                        at /home/pmatos/Projects/alacritty/src/ansi.rs:85
                        at /home/pmatos/Projects/alacritty/src/event_loop.rs:211
                        at /home/pmatos/Projects/alacritty/src/event_loop.rs:308
   9:     0x564d917aabf4 - <F as alloc::boxed::FnBox<A>>::call_box::h789415a8ffb21203
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:296
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:460
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libpanic_unwind/lib.rs:98
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panic.rs:361
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/thread/mod.rs:357
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:605
  10:     0x564d918d3748 - std::sys::imp::thread::Thread::new::thread_start::h76badbf9b0ecaf58
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/liballoc/boxed.rs:615
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys_common/thread.rs:21
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/thread.rs:84
  11:     0x7f04760fa6c9 - start_thread
  12:     0x7f0475c1df7e - clone
  13:                0x0 - <unknown>
child finished with error '1'
```

This is at commit `2fa271`."09/30/17 11:30:05 PMimplement ANSI CSI REP (Repeat)"I'm not sure if this is the best way to do this, but it fixes #795 for me. There is a small additional overhead caused by storing the preceding_char -- perhaps there is a better way to do that.

If an ANSI CSI with action REP ('b') is received, the previously-printed character is repeated the number of times according to the first argument of the CSI (defaulting to 1).

Note that the previously-printed char is repeated even if it was not the previous byte in the stream (e.g. if there were escape sequences since the previous graphical character). This seems to be acceptable according to standards, because according to the text for REP [here](http://bjh21.me.uk/all-escapes/all-escapes.txt), if the previous byte in the stream was not a graphical character, the behaviour is undefined."1Yep this is a duplicate; tracking in #63.jbgJoe Wilm09/30/17 05:34:06 PMAdd ref test for CSI REP1
80505/13/17 03:31:28 PMMarek Dědičapt doesn't show properly on debianIf I try to use apt (not apt-get!) on debian the terminal starts drawing over previous lines, doesn't properly show the progress bar at the bottom and finally clears the whole screen on finish.10/01/17 09:48:36 AMYaml split1Confirmed, I updated Alacritty and the issue has been resolvedkokoaxkokoax10/01/17 09:41:42 AMAdd yaml split feature1
81106/20/17 04:11:23 PMMarek DědičScrolling causes prompt to be deletable"When I have a clean terminal, with the promt like:
```bash
user@machine:~/some/path$
```
and I scroll in the terminal (using a touchpad) instead of scrolling the terminal, I get a bunch of characters entered, something like these lines:
```bash
user@machine:~/some/path$ `;`;`;`;
user@machine:~/some/path$ `5`5`5`5
user@machine:~/some/path$ `I.`I.`I.`I.
```
When I then try to delete those, I can delete parts of path as well, the prompt being left incomplete. Enter fixes that (the new prompt is ok)

Also, when I later use up/down keys, the prompt is messed completely, with the previous wrong inputs replacing parts of it, for example:
```bash
user@machine`;`;`;`;`;`;``>`>`>`>`>`>`¨ortest
```
which i believe was ```colortest``` originally.
Also when I press enter on this invalid line, I get endless lines of the format
```bash
>
```
until I press Ctrl-C.

Could be related to: I was running apt (See #259 , but I restarted Alacritty afterwards) and also the current path has a space in it."12/23/17 08:36:45 PMUpdate glutin, bitflags and other dependencies"Vastly improves wayland support. Only one line had to be added in event.rs to pass on an additional case in a match statement. I also removed minor version numbers specified in Cargo.toml so we always use the latest compatible versions. Every dependency is on the latest version (major and minor) with the exception of bitflags. They recently pushed version 1.0 but haven't published any release notes about the breaking changes.

Edit: Closes #758 and #702. "13Can confirm.chetgurevitchchetgurevitch12/12/17 05:00:35 AMUpdate Wayland info in README.md1
81201/13/17 03:49:14 PMJude TaylormacOS: Make thin strokes toggleable"iTerm has an option called ""Use thin strokes for anti-aliased text"" which I have set to Never.

When it's disabled, Hasklig Light looks like this, which is nice and readable on both my retina display and my external standard DPI monitor:

![iterm](https://i.imgur.com/gby76E7.png)

alacritty obviously has no such option, and Hasklig Light looks like [this](https://i.imgur.com/o7WeYiR.png). Similarly, [this is what it looks like when the option is enabled in iTerm](https://i.imgur.com/cLrCrQI.png).

Do you happen to know if the ""thin strokes"" option is a feature of macOS's font rendering system or if it's specifically an iTerm feature? Would it be feasible to replicate it?"10/21/17 11:03:59 PMSet urgent WM flag on bell on X11 systems"This patch adds support for setting the urgent flag on systems using X11
when a terminal bell occurs.

When the window becomes focused, we will clear the urgent flag since not
all WMs will clear it automatically.

Fixes #181"10@jwilm should we close this issue?brennieBarret Rennie10/04/17 09:49:01 PM"Set urgent WM flag when bell is emitted on X11 systems

When the window becomes focused, we will clear the urgent flag since not
all WMs will clear it automatically.

Fixes #181"1
81303/18/20 02:35:09 AMSebastian FrysztakModal keyboard controlsDo you have plans to implement Termite-like selection mode?10/04/17 03:49:35 PMCentOS/RHEL 7  build instructions added1"Is there a way to add additional shortcuts when in ""keyboard motion mode""?"typekpbPeter Butkovic10/04/17 10:47:29 AMcentos/RHEL 7  build instructions added1
81507/01/17 11:44:09 PMDavid Sanders"Window separators (line chars) printed as ""x"" and ""q"" in tmux""![screen shot 2017-01-09 at 11 51 25 am](https://cloud.githubusercontent.com/assets/791437/21779080/421897d2-d663-11e6-803c-ed29fb0aa140.png)

Launching tmux with `tmux -u` seems to fix the problem but suggests that alacritty maybe isn't reporting its features correctly to tmux?  Don't really know enough about the nuts and bolts of terminal emulation to tell if it's a problem with alacritty or tmux."10/06/17 03:47:52 PMUpdate glutin & fix a few wayland issues"This PR fixes a few wayland issues of alacritty (and updates glutin on the process because it is needed).

Mainly two changes are done:

First add a `drawing_ready()` method on `Window`: see https://docs.rs/winit/0.8.2/winit/os/unix/trait.WindowExt.html#tymethod.is_ready for explanations. Hopefully glutin will be able to handle it itself in the future, but it currently does not.

Secondly; resize window and OpenGL contextes. The way wayland forces winit to draw its own decorations and how surface size is defined by its content means that in practice:

- winit's `window.set_inner_size()` defines the dimensions of the borders
- glutins `gl_window.resize()` defines the dimensions of the content (and is a noop in other platforms)

It is for now glutin's user responsibility to keep them in sync otherwise borders are drawn stupidly. This PR changes the resize methods of `alacritty::Window` to always update both.

This fixed the borders issues for me, tested on weston."1"> export LANG=en_US.UTF-8; export TERM=ansi

There are of course exceptions, but in general, TERM should never ever be set in an init script. It is much better to let the terminal define how it can communicate, otherwise sooner or later you might connect with a different terminal app and get all kinds of screen glitches.

So should normally be hardcoded into your physical terminal (ok joking)
Or set in your terminal app, most terminals give you a list of options they can emulate. Your initial shell and any hops getting you to where you intend to use terminal features can be assumed to keep track of TERM, so in the vast majority of cases where something goes wrong, it is somewhere in the connection path from your term app to your furtherest session some script hardcoded a TERM setting.

Of course, sometimes it takes too long to figure it out and then a quick solution is to set TERM, but doing that in an init script is actually worsening the problem instead of fixing it, since now its permanent and in 5 mins time you have forgotten about it.
If I run into TERM issues and am in a hurry, I would rather do it as: TERM=ansi tmux
ie set it manually for that session as a prefix on the command line, thus remembering to sort out the glitch when I have more time, if I still don't have time to fix it next time I just scroll back to the last tmux in my history to find the workaround.

There are a few valid cases to override the TERM setting, for example with tmux since it normally expects you to use the xterm family of terminals. If you use some ancient vt100 terminal, the workaround is to use TERM=screen
with that you dumb down the screen handling parts of tmux to a so low level that virtually any terminal can handle it.
But even that should in most cases not be done in an init script."vbergerVictor Berger10/05/17 06:32:01 PMUpdate glutin & fix a few wayland issues1
81901/17/17 07:43:39 PMLuca DorigoDead keys make terminal freeze on macOS"Hi, I was pretty excited to try this out but unfortunately it's unusable due to this issue:

All characters that require more than a keypress to be entered ( ' , "" , ^ , ~ , ...) make Alacritty freeze and I have no choice but to force quit it.

I'm running macOS Sierra 10.12.1 (16B2555).
Let me know if there is additional information you need.

Cheers!"12/24/17 06:24:29 PMAdding dynamic_title property to configurationThis PR adds a small feature to Alacritty, namely turning off the dynamic title in the bar of the application. I was thinking of maybe adding another property which completely removes any text from the title bar. Thoughts on this?1No problem :)voider1Joe Wilm12/24/17 06:13:11 PM"Optimize dynamic title handling

By moving the logic for this config into the ansi::Handler, we can avoid
allocations for the title when it won't be used."1
82207/01/17 11:43:57 PMRobyn SpeerDoesn't respect Unicode character width; all characters take up one cell"In Unicode, ""monospaced"" characters are meant to take up 0, 1, or 2 character cells based on what kind of character they are. Combining characters take up 0 cells because they stack on top of the previous character. CJK characters (except for the ones designated as ""halfwidth"") take up 2 cells, because that's how the original CJK terminal displays were designed.

In alacritty, all characters take up 1 cell, even the ones that aren't supposed to, leading to display problems. This leads to incorrect scrolling and wrapping in tmux, for example.

To demonstrate the problem, I defined this string using python3:

```python
text = 'u\N{COMBINING DIAERESIS}' * 200
```

Without Python, you could just try pasting in this string, I believe (but don't use the pre-combined character `ü`):

```
üüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüü
```

My terminal is 240 characters wide, so when I `print(text)`, the result should fit on one line for me. Instead, not only does it wrap, but the unexpected wrapping causes tmux to glitch, so the entire window gets filled with columns of un-combined `u` and `¨` characters.

The Japanese word `ありがとう` should take up 10 character cells. Instead, it takes up 5 character cells, with the characters overlapping each other.

This is not a font issue, it's an issue with the actual behavior of the terminal. The lack of fallback fonts just makes the issue harder to see.

C code uses the `wcwidth(3)` function to determine how wide a character is. This function seems to have at one point been in the Rust standard library, then moved out. http://unicode-rs.github.io/unicode-width/unicode_width/index.html is a crate that seems to provide it."10/09/17 05:21:00 AMVarious improvements to fontconfig/FreeType rasterization"* Idiomatic wrappers for much of _fontconfig_ library
* Remove unnecessary clone of loaded face hash when rasterizing glyphs
* Respect _fontconfig_ settings like `antialias`, `hintstyle`, `rgba`, `lcdfilter`
* Support for bitmap fonts (cc @da-x, I reimplemented your patch on top of the new fontconfig bindings)

Closes #776 
Closes #321 
Resolves #582 
Resolves #460 
Resolves #101 "2"We handle double width characters now. Lots of work for full unicode support.

Closing in favor of #306. Please subscribe there if you want to follow development on this subject."jwilmJoe Wilm10/09/17 01:10:29 AM"Scale all fonts based on device-pixel-ratio

Rather than use DPI from config, use device-pixel-ratio from winit. This
is computed using the display DPI anyhow, so it should have the same
effect."1
84101/09/17 10:26:10 PMJAMIE PETER GOODWINMasterNone12/23/17 01:36:32 AMFallback"Disclaimer: total rust n00b.

This was the only thing keeping me from switching over, so I took a crack at implementing the requested changes in #610 .

* rebased against current master
* fixed all the multiline method signatures
* inlined `get_specific_descriptor`
* fixed indentation of chained method
* implemented a separate `to_font_with_fallbacks` constructor on `Descriptor` (wasn't totally sure this is what you meant [here](https://github.com/jwilm/alacritty/pull/610#discussion_r122882474)

Also not sure if I should squash this with @algesten's and leave him as the author, since my contribution is so trivial.

fixes #45"12"Please refrain from opening PRs like this with no description and broken code that includes git merge artifacts.

The `wip` commit you're trying to merge is a work-in-progress and very much not ready. It depends on code that's not even public."sodiumjoeJoe Moon12/22/17 09:19:20 PMMerge branch 'master' into fallback1
84301/10/17 05:43:14 AMPeter Vessenesclear mode not implemented"I'm not sure if you want an Issue here about this, but I was trying out `cat /dev/urandom` to get a feel for the speed of alacritty. Wow! 

Unfortunately it doesn't love binary data. Run with backtrace on I see:

```
thread 'pty reader' panicked at 'ansi::ClearMode::Above not implemented', src/term/mod.rs:971
stack backtrace:
   1:        0x108fbe826 - std::sys::imp::backtrace::tracing::imp::write::h36dcd6719b30e145
   2:        0x108fbdc01 - std::panicking::default_hook::{{closure}}::hce0d7336eef94718
   3:        0x108fbce18 - std::panicking::rust_panic_with_hook::h33761bada49f3713
   4:        0x108f032b1 - std::panicking::begin_panic::h5871bdf0eba452a7
   5:        0x108f07060 - vte::Parser::perform_action::h166c5803e170e630
   6:        0x108f13bc2 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h575075cb1062cf6d
   7:        0x108f11c15 - <F as alloc::boxed::FnBox<A>>::call_box::h5f9c51d5935444c7
   8:        0x108fc91a8 - std::sys::imp::thread::Thread::new::thread_start::he1b44499d44cc4a4
   9:     0x7fffd8434aaa - _pthread_body
  10:     0x7fffd84349f6 - _pthread_start
child finished with error '1'```"10/16/17 04:57:05 PMUse correct keyname for decreasing font size in MacOS 5"It almost loves binary data :)

There's two issues like this both being tracked in #63. Thanks for filing; going to close as a dupe though."enilsen16Erik Nilsen10/16/17 04:53:39 PMPrefer Command instead of Control1
84501/10/17 07:19:08 AMMichael BrumlowFixing panic on cat /dev/urandom"- Checks to make sure lines count coming from the pty are within a proper
range before doing scrolling.

- Sanitizes scroll region when being set.

- Changes panic for unimplemented screen clear to a print statement.

The first two changes ensure scrolling won't crash us. By sanitizing the
region on set we don't have to complicate the scroll code with limits,
mins, or maxes to ensure the scroll operation is within the range.
Checking if the lines is greater than the total region allows us to
simply clear the region and avoid subtracting large numbers from small
ones.

Fixes #63
"10/17/17 05:15:25 PMFix render issues on macOS"Parts of neighboring glyphs in the atlas were being rendered
incorrectly. The issue is resolved by aligning cells to the pixel grid.

This behavior was achieved previously by first applying integer
truncation before casting to a float.

Fixes #844." =||= I was still getting one panic after your changes. I pushed one more change on top of them, and `cat /dev/urandom` no longer panics for me (at least within 10 minutes).jwilmJoe Wilm10/16/17 06:05:07 PM"Fix render issues on macOS

Parts of neighboring glyphs in the atlas were being rendered
incorrectly. The issue is resolved by aligning cells to the pixel grid.

This behavior was achieved previously by first applying integer
truncation before casting to a float.

Fixes #844."1
84704/04/17 08:42:57 PMVinay Vinod MararUbuntu : child finished with error"Hi I tried to run the executable after compilation. The below was the output and the error messaged popped.

device_pixel_ratio: 1
width: 1024, height: 716
Initializing glyph cache
num fonts = 673
num fonts = 673
num fonts = 673
Finished initializing glyph cache in 0.069083935
set_inner_size: 644px × 436px
width: 644, height: 436
Cell Size: (8 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 128, 39
width: 1024, height: 716
**child finished with error '256'**"10/21/17 10:26:43 PMFix solid background color opacity"Since landing the patch adding transparency support to Alacritty,
there's been an issue where othewise solid background cells were also
being rendered partially transparent. Now, all filled background cells
are rendered fully opaque.

Some logic was added to support discarding filled backgrounds which had
the same color as the default background. This means that, if the
default background is #000 and a cell has that background, it will never
be rendered opaque. This may not be correct.

Note that many truecolor vim color schemes print spaces for default
colored background cells. Performance can be dramatically improved by
using ctermbg=NONE guibg=NONE to skip rendering those cells."4Thanks for the feedback @olivierbeltrando! We landed a patch last night that resolves this.jwilmJoe Wilm10/20/17 06:00:46 PMfixup! Fix solid background color opacity1
84806/03/17 05:03:28 AMNoneHow to debug or work around segfault?"alacritty% target/release/alacritty                                                                                                                     
zsh: segmentation fault  target/release/alacritty

Linux x86_64 
4.8.15 kernel
on xfce4"10/21/17 10:26:15 PMList all valid actions in config error message1Works for meguywithnoseRobert Bittle10/17/17 07:04:31 PMList all valid actions in config error message1
85201/11/17 06:33:34 PMNone`cat` blocks input"After the latest PR merge, Alacritty doesn't crash anymore when running `cat /dev/urandom`. However, I'm unable to cancel the command with `Ctrl+C`, so the only way to quit is to kill the terminal window. For reference, `Ctrl+C` works on gnome-terminal almost immediately, and on urxvt after bashing it for a while. I also tried it with `cat`ing some long text files and they seem to have the same problem, though they respond to `Ctrl+C` after a while.

`<insert a bad pun about long cat being long here>`

I'm at ec339f728a18657f3b47af55fd2afed56ed39a26.

Oh, and I'm on Debian Jessie Stable if that makes any difference.
```
$ uname -a
Linux localhost 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux
```"11/11/17 05:44:33 PMDon't enforce window dimensions if configured with 0 columns or lines"Currently alacritty always enforces the starting window size based on the dimensions specified as an option or in the configuration file. This presents a problem for me, because I use XMonad to create the window with a certain size and in a certain position based on the size of the screen.

However, since alacritty forces itself into a certain size instead of allowing the window manager to dictate the size of the window, it makes alacritty difficult to integrate into my workflow as the window always resizes itself to something else. This pull request essentially falls back to using the existing size of the window when either the `width` or the `height` dimension properties are less than or equal to zero.

This will allow me to specify `-d 0 0` in order to tell alacritty not to resize itself at all.

Thanks!"4"@okuuva I think the reason it takes so long to go through is all of the output being written to stderr during that time. If you run `target/release/alacritty 2>/dev/null`, it will probably be *a lot* faster.

The `6c` is part of a response to the identify terminal request. Since other terminals don't display that, it's likely we're doing something wrong.

In any case, I'm going to merge that branch since it seems to fix this issue."gilbertw1Joe Wilm11/11/17 05:42:26 PMFix typo and whitespace1
85301/11/17 12:13:52 PMKhaled Monsoorin Vim, `Del` key acts weird"i am using Kubuntu 16.04, and NeoVim with it. just installed Alacritty to check it out, so it's still in defalt settings.

in Vim, whenever i press `del` key (regardless, `insert` mode or `command` mode) , it opens up Vim's help-screen. it don't happen on any other terminal app.

here's the screenshot after it happens ...
![Imgur](http://i.imgur.com/jYY9nzY.png)"10/20/17 02:59:29 PMAdd Function + Modifier keybindings"Also rearranged the default config slightly to move the long key binding
list to the bottom of the file.

Resolves #690 
Resolves #727 " =||= i agree with you, @Libbum. Thanks for the pointer, closing the issue. jwilmJoe Wilm10/20/17 02:07:24 AM"Add Function + Modifier keybindings

Also rearranged the default config slightly to move the long key binding
list to the bottom of the file."1
85601/10/17 04:58:52 PMJAMIE PETER GOODWINMaster1None10/21/17 10:25:49 PMUpdate macOS icon with icon from #285"This takes the icon agreed on in #285 and makes it the new icon
for macOS apps generated with `make app`. It's using the icns that
@net posted in the thread.

![image](https://user-images.githubusercontent.com/1333960/31856207-72c4a124-b6b3-11e7-93c9-040702e52f78.png)"2"Just going to pre-empt @jwilm here and say that this PR needs some significant clean-up before it can be merged:

 - The changes seem to include merge conflicts. These should be resolved before submitting.
 - A description of the change you want to make, and why, should be included with the PR. A title of ""Master"" is not particularly descriptive.
 - The commit history should be cleaned up so that the commits are descriptive and self-contained. Why, for example, is a commit named `wip` by @jwilm from Sep 22, 2016 included?"k0nservHugo Tunius10/21/17 09:54:27 PMUpdate macOS icon with icon from #2851
86301/24/17 06:46:00 AMNiklas DusenlundAllow arguments in shell option"I added support for arguments to the shell option. This is convenient when debugging, e.g. `shell: /bin/bash --norc --noprofile` can be used to avoid loading everything when running bash.

I'm a bit of a rookie when it comes to rust so please review.

Cheers

EDIT: I've also added the -e command line argument so that you temporarily can launch alacritty with another shell."12/24/17 09:33:26 PMIcon for linux desktop entry"Uses the icon from #285 converted to PNG (a SVG might be better if @net could make one).

I put the icon in `assets` but there might be a better location.

How it looks like on Cinnamon desktop: 
![alacritty_mint](https://user-images.githubusercontent.com/25256520/31931718-cf828118-b8ef-11e7-891d-9a842a9aba31.png)"9Since alacritty is switching to clap this is obsolete.enizorRémi Garde10/24/17 08:07:57 AMFeat: Icon for Linux desktop entry1
86501/12/17 02:44:55 PMMatthew Denner"""No backend is available"" on NixOS system""I've managed to get alacritty to build on NixOS but I'm seeing the following on running:

```
$ alacritty
Alacritty encountered an unrecoverable error:

        Error creating glutin::Window; No backend is available
```

I've noticed #251 mentions trying `glxgears` and that does run on my system, although it outputs:

```
$ glxgears
Running synchronized to the vertical refresh.  The framerate should be
approximately the same as the monitor refresh rate.
```

I'm running with i3 window manager and I've attached the output from [glxinfo.txt](https://github.com/jwilm/alacritty/files/696092/glxinfo.txt) if that helps.  The `default.nix` file I used to build alacritty is below:

```
let
  pkgs = import <nixpkgs> {};
in pkgs.rustNightlyBin.buildRustPackage rec {
  version = ""0.1.0"";
  name = ""alacritty-${version}"";

  buildInputs = with pkgs; [
    cmake
    pkgconfig
    freetype
    fontconfig
    xclip
  ];

  src = pkgs.fetchFromGitHub {
    owner = ""jwilm"";
    repo = ""alacritty"";
    rev = ""ec339f728a18657f3b47af55fd2afed56ed39a26"";
    sha256 = ""04xawask22nr6f89q7gvxgc9xjzq4bhdr2wr3w31pppkjjkf34ia"";
  };

  depsSha256 = ""138bfnrg3j49vl6j2daf1jyyng5r6d088qhsqikhyyqzjx1ih0v2"";
}
```

If there's anything else you need or I can try let me know.

"12/24/17 08:15:43 PMChange mouse cursor on terminal mode change"Some terminals have functionality around changing the type of mouse
cursor dynamically (arrow and text) based on which mode(s) the VTE is
in. For example, gnome-terminal changes the cursor from text (default)
to an arrow when opening programs that track mouse events (e.g. vim,
emacs, tmux, htop, etc.). The programs all allow using the mouse
interactively under some circumstances (like executing `set mouse=a` in
vim).

The programs that use an interactive mouse set the terminal mode to
different values. Though they're not entirely the same terminal mode
across programs, an emulator like vte (the library gnome-terminal
implements), changes the mouse cursor if the mouse mode is one of the
following:

- 1000: Mouse Click Tracking
- 1001: Mouse Highlight Tracking
- 1002: Mouse Cell Motion Tracking
- 1003: Mouse All Motion Tracking
- 1004: Mouse Focus Tracking

See https://github.com/GNOME/vte/blob/6acfa59dfcceef65c1f7e3570db37ab245f049c4/src/vteseq.cc#L708
for more information.

This commit adds functionality that changes the winit/glutin
`MouseCursor` when a mouse-listening mode of 1000-1004 is set. It
behaves similarly to when the window title changes.

### Notes:
- I renamed `ReportMouseMotion` to `ReportCellMouseMotion` to be more precise.
- I added `ReportAllMouseMotion` (1003); tmux sets this mode when mouse mode is on.
- I wrapped winit's `CursorMode` into a local library enum. It felt kind of dirty leaking winit all over the application.
- Please let me know of anything that could be better implemented!"2"FWIW, I wrote a wrapper looking like this:
```sh
#!/bin/sh
export LD_LIBRARY_PATH=/run/opengl-driver/lib/:$(nix-instantiate --eval -E 'with import <nixpkgs> {}; lib.makeLibraryPath (with xorg; [libX11 libXcursor libXxf86vm libXi])' | tr -d '""')
exec path/to/alacritty
```
which allows it to run just fine, and is a better (more nix-appropriate) solution than adding the libraries to the user profile. "DSpeckhalsJoe Wilm12/24/17 06:38:56 PMMerge branch 'master' into vte-mode-mouse-cursor1
86701/10/17 05:33:58 PMNoneUpdate README.md`cmake` is required everywhere in order to build `expat-sys`10/27/17 01:48:11 AMfix warning on mac caused by set_urgent"On mac, compiling throws a warning due to `is_urgent` not being used within `set_urgent`. This can be changed just by using an underscore instead.
I'm aware of how much of a non-issue this is, but still it's nice to not see any warnings when compiling."1Thanks for the PR!Ophirr33Ty Coghlan10/25/17 07:45:30 PM"set_urgent on mac throws a warning

On mac, compiling throws a warning due to `is_urgent` not being used within `set_urgent`. This can be changed just by using an underscore instead."1
87401/13/17 05:19:42 AMTom Crayfordmake thin stroke rendering configurable"Makes thin stroke rendering for darwin configurable by a new toplevel
key under `font:` in the config file. Defaults to false, has no impact
on non macos."12/22/17 10:13:40 PM[WIP] Run lints as part of the build process5@jwilm thanks for the review! I've been running with this branch since I wrote it, not seen any issues, and the rendering is super nice.thedrowOmer Katz10/28/17 06:40:58 AMUse nightly rust to run clippy.1
87601/26/17 03:40:33 PMNoneUpdate README.mdadded Slackware11/11/17 04:24:08 PMFixed typo in README.md1Landed in 4ebcbf1c4d02d83b023cdb93a521b55a150418eethelearnerofcodethelearnerofcode10/28/17 12:30:40 AMFixed typo in README.md1
87807/01/17 11:42:33 PMAaronOS X: Fullscreen has text cut off at bottom of screen"### System:

- OS X El Capitan
- Mac Mini (Late 2014)
- **Graphics:** Intel Iris 1536 MB

### Config:

Only thing changed was DPI and Font Size everything else is default.

- **DPI:** 93.0 ( x and y )
- **Font Size:** 17.0

### Alacritty version:

commit ec339f728a18657f3b47af55fd2afed56ed39a26

### Screenshot


![alacritty_bug](https://cloud.githubusercontent.com/assets/321920/21813537/36c4386e-d71c-11e6-952e-ef37659bab64.png)"10/30/17 04:25:14 PMfix some typos1Resolved in 9316771f64842533181cfb04a27aa9ae809cc435martinlindheMartin Lindhe10/30/17 03:03:58 PMfix some typos in comments1
87901/10/17 04:40:52 PMNathan MoosStable RustWhat exactly would be required to make Alacritty run on stable? I'd like to do some work in this direction to familiarize myself with the codebase.12/13/17 05:52:37 PMRemove the launcher and set the locale/current directory in alacrittyThis is #661 but off of a different branch in my fork, and with merge conflicts fixed. For some reason, it's working perfectly for me now.1Oh awesome!tbodtTheodore Dubois10/30/17 05:33:12 PMFix build failures on Linux1
88106/20/17 04:09:12 PMManuel Mendezshell: directive is buggy..."I've been trying to get alacritty to run many different programs and most (all?) have some buggy behavior. Here's what the relevant section of the config:
```
shell: /home/manny/bin/alacrity-shell
```
_(it'd be great for alacrity to expand ~ here)_

And the contents of alacrity-shell have been trying to start tmux, nvim (with term://$SHELL), and $SHELL to some sort of woe. The worst has been nvim which for some reason can sometimes lock up my system quite badly.

I'll be calling alacritty from pangoterm for all the examples.
First up is tmux. I have my tmux.conf setup to create a new session so that `alacritty-shell` can just be `tmux attach`

```
❯ cat bin/alacritty-shell 
#!/usr/bin/env bash

tmux attach -t default
#zsh --login -i
#$SHELL --login -i
#nvim term://zsh

```

```
new-session -s default
set -g prefix C-s
unbind C-b
...
```

```
❯ killall tmux
tmux: no process found
                                                                                                                  
~  
❯ alacritty
device_pixel_ratio: 1
width: 1144, height: 1394
Initializing glyph cache
num fonts = 244
num fonts = 244
num fonts = 244
Finished initializing glyph cache in 0.071625394
set_inner_size: 804px × 436px
width: 804, height: 436
Cell Size: (10 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 114, 77
width: 1144, height: 1394
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
thread 'pty reader' panicked at 'unexpected read err: Error { repr: Os { code: 5, message: ""Input/output error"" } 
}', src/event_loop.rs:227
note: Run with `RUST_BACKTRACE=1` for a backtrace.
Goodbye
                                                                                                                  
~  
❯ bin/alacritty-shell 
[exited]
```
so alacritty exits/fails, but when I called alacritty-shell manually I was able to exit cleanly. Now, if I run tmux and detach, alacritty works just fine.

```
~  
❯ bin/alacritty-shell
[detached (from session default)]
                                                                                                                  
~ 1529ms 
❯ alacritty          
device_pixel_ratio: 1
width: 1144, height: 1394
Initializing glyph cache
num fonts = 244
num fonts = 244
num fonts = 244
Finished initializing glyph cache in 0.072823565
set_inner_size: 804px × 436px
width: 804, height: 436
Cell Size: (10 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 114, 77
width: 1144, height: 1394
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled osc_start]
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='1'
[unhandled osc_put] byte='2'
[unhandled osc_end] byte=0
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
Goodbye
```
 I'm having a worse time with nvim (my preferred multiplexer), but figured I'd go with tmux since that should work only to find this situation.

When I try with the nvim line I get:
```
❯ alacritty
device_pixel_ratio: 1
width: 1144, height: 1394
Initializing glyph cache
num fonts = 244
num fonts = 244
num fonts = 244
Finished initializing glyph cache in 0.072128687
set_inner_size: 804px × 436px
width: 804, height: 436
Cell Size: (10 x 18)
PTY Dimensions: Line(24) x Column(80)
num_cols, num_lines = 114, 77
width: 1144, height: 1394
[Unhandled CSI] action='h', args=[1004], intermediates=[63]
[Unhandled CSI] action='t', args=[8, 77, 114], intermediates=[]
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
^C
```"10/31/17 03:54:31 PMLink to FAQ when referencing itSuggestion to convert this to a link because I was being hella lazy while reading it and decided to fix the case where other developers are hella lazy as well ❤️ 1Agree @NickeZ; thanks!monokromeBailey10/31/17 07:01:47 AMLink to FAQ when referencing it1
88601/12/17 06:10:50 AMJack O'Connor"support for ""disable line wrap"" escape sequences""From this list: http://www.termsys.demon.co.uk/vtansi.htm

```
Reset Device		<ESC>c
    Reset all terminal settings to default.
Enable Line Wrap	<ESC>[7h
    Text wraps to next line if longer than the length of the display area.
Disable Line Wrap	<ESC>[7l
    Disables line wrapping.
```

Very understandable if obscure ANSI escape sequences aren't high on the priorities list yet :)

For examples of apps using these codes in the wild, see [`buck`](https://github.com/facebook/buck/blob/master/src/com/facebook/buck/util/Ansi.java#L58-L59) and [`peru`](https://github.com/oconnor663/peru/blob/master/peru/display.py#L27-L28). An easy-to-repro peru example would be:

```bash
$ pip install peru  # in a virtualenv is fine
...
$ git clone https://github.com/oconnor663/dotfiles
...
$ cd dotfiles
$ peru sync
... [fancy output]
$ git clean -dfx && peru sync  # to clear the cache and see the whole thing again
... [fancy output]
```

With nowrap support, the fancy output looks like [this gif](https://github.com/buildinspace/peru#peru---) made in gnome-terminal. Without support, and with a narrow enough terminal, it overflows the line and leaves a bunch of junk above the prompt like this:

![image](https://cloud.githubusercontent.com/assets/860932/21825406/987a0d10-d751-11e6-9975-4b8fb6f38991.png)"11/11/17 04:23:49 PMFixed #882 =||= Works great! Thanks @mbrumlow!thelearnerofcodethelearnerofcode11/04/17 12:38:18 AMFixed #8821
88701/19/17 05:48:08 PMNoneC-SPC causes hang"Using origin/master, latest commit is 4fb7801ba3515922e3dbb8b27c1c28ec2efaf22b.

In an emacs buffer, setting a mark (C-@ or C-SPC) causes alacritty to hang. The emacs child process is healthy but doesn't receive any other signals and the screen doesn't update.

Subsequent to the hang, alacritty begins using all of one core.  MacOS ""samples"" attached of both emacs and alacritty.

[Sample of alacritty.txt](https://github.com/jwilm/alacritty/files/697781/Sample.of.alacritty.txt)
[Sample of emacs-25.1.txt](https://github.com/jwilm/alacritty/files/697782/Sample.of.emacs-25.1.txt)
"11/11/17 05:23:44 PMCorrect linefeed handling when scroll region set (#855)"Linefeeds should only move the cursor down if it's before the end of
the scroll region.

The ""out of bounds"" panic was triggered by linefeeds going off the
bottom of the screen when the scroll region end was above the cursor.

Note: https://vt100.net/docs/vt102-ug/chapter5.html
""Characters added outside the scrolling region do not cause the screen to scroll."""2Duplicate of #99.metayanJoe Wilm11/11/17 04:51:53 PMAdd ref test for 8551
88801/11/17 05:07:32 PMJoe WilmAdd support for setting title from OSC"Resolves #23
Resolves #144"11/12/17 01:17:47 AMOutput more info for `--version`"Example output:
```
$ alacritty --version
alacritty 0.1.0 (git commit f68558e) [debug build using rustc 1.21.0 (3b72af97e 2017-10-09)])
```

`-V` after this PR will still have a short output:
```
$ alacritty -V
alacritty 0.1.0
```

### Rationale

Useful when requesting more info from users to help investigating issues.

### Drawbacks

- Increase in build time because `built` depends on a large `git2` dependency which may not be fine for an application that already has a relatively large build time (~400 secs on my 4-cored machine with Rust 1.21). On the flip side, alacritty ""already taking a lot of time to build"" may mean that an additional large dependency has less impact on it than on a smaller application (in a relative time addition sense).
- Different outputs for `-V` and `--version` may confuse users who used to them being equivalent (for many programs `-V` and `--version` have the same output in my experience).

### Unresolved questions

- Format of `--version` is the subject for bikeshedding. I've only included info that is definitely useful when asking users what configuration of `alacritty` were they using when hitting issues. Please leave your opinion on  how much `--version` should reveal and how this info should be shown."2Duplicate of #99.hcplhcpl11/05/17 09:52:39 PM"Output more info for `--version`

Useful when requesting more info to help investigating issues."1
89005/22/19 09:02:21 PMPatrick J Jankunalacrity fancy icon!"It nagged me the whole afternoon that Alacritty does not have a fancy icon,
so I made one. If you like it - let me know. I kind of do - but thats not good enough.
Now since I can look at it- its not nagging me anymore ;-)

[Preview 01](http://pasteboard.co/kIrULs44F.png)
[Preview 02](http://pasteboard.co/kIsyFpFFO.png)
[Preview 03](http://pasteboard.co/kItyGJHao.png)
[Preview 04](http://pasteboard.co/24rOhrIdT.png)
[Preview 05](http://pasteboard.co/kIuAnbFV6.png)
[Preview 06](http://pasteboard.co/kIwjRvijI.png)"01/17/19 08:42:13 PMAdd a config option to send or not send ESC when ALT-key is pressed"In some keyboard layouts, some characters like @, {}, [], etc.. requires the ALT-key. Sending the escape character when the ALT-key i pressed, makes it hard to enter those characters.

Therefore I think it's a good idea to choose wether to send the escape character or not. This PR should fix that."3"The proposed icon has not yet been converted to SVG successfully. While some distributions and package managers have already taken what is available, unfortunately it hasn't been standardized yet.

Unfortunately I'm no artist myself and there are definitely still some finishing touches required. So until that is done there won't be an 'official' icon available in standard formats."thezicChristian Duerr01/17/19 11:23:40 AMAdd change log entry1
90602/07/17 03:10:13 AMNikolai HellwigIncrease / Decrease font size while running"For presentation and working in pairing, it would be very helpful to be able to increase / decrease the font-size while running alacritty.

Similar to Command + ""+"" and Command + ""-"" on most mac os terminal implementations. "11/19/17 04:49:35 PMRemove outdated TASKS.mdTitle says it all. I'm just going through things from top to bottom here and this stood out to me.1#121nixpulvisNathan Lilienthal11/19/17 12:04:23 AMRemove outdated TASK.md1
90701/04/19 05:07:47 PMinsunaShow version / build"Can you add a version counter in the software somewhere that can be called with

```zsh
./alacritty --version
```
or something similar?
This command should (in my opinion) not open a new shell, it should only print the version number in whatever shell that called it.

Whether the flag should be called ""--version"" is debatable, I don't know if conventions for this kind of thing exist.

urxvt does not have something like this, as far as I know, but when I put something random as an option, this will print:

```zsh
urxvt: ""asdf"": unknown or malformed option.
rxvt-unicode (urxvt) v9.22 - released: 2015-10-11
[...]
```

I hope I'm not the only one who thinks that this can be useful?

Edit:

Here's an extremely crude implementation: https://github.com/d3rrial/alacritty/commit/60121301923a64ab9af5ee4ffc3b3551913fd135"11/19/17 04:57:02 PMWait to display window until initialization is complete"Helps to address #297.

Patch waits to display window until initial configuration is complete. This prevents the window from visually resizing.

Gif demonstration:

![test2](https://user-images.githubusercontent.com/1291012/32991608-8c62b2fa-cd0c-11e7-9a68-4d156f9386d1.gif)

In the current release, the window will snap and resize as it configures. In the second case, it hides while configuring.

Unfortunately, this doesn't seem to fix the initial blink of black for the screen, but it does help to address some of the ""flickering"" during startup.
"2With the help of #340, Alacritty has now supported `alacritty --version` for a long time. So it seems like this issue should be resolved.charles-lnc11/19/17 01:41:12 PMWait to display window until initialization is complete1
92401/11/17 11:31:57 PMDanny Dulaisupport for inverting the cursor or using colorssolves #155, while preserving the invert behavior by default12/03/17 08:50:41 PMfix a bunch of clippy warnings (mostly about references)1With the help of #340, Alacritty has now supported `alacritty --version` for a long time. So it seems like this issue should be resolved.matthiaskrgrMatthias Krüger11/29/17 11:38:29 PMclippy: do and don't pass some things by reference as suggested (needless_pass_by_value, needless_borrow).1
92809/17/18 10:47:16 PMLilian BessonOpen-sourced your benchmark?"Hi,
- First, I just tested your project on XUbuntu 16.10, and everything works fine. Good job, it's easy to install and launch.
- I think your warning about the config file in the README.md file might not be necessary (as you say, if the config file is not present, it is created on the first run of alacritty).

I tested `alacritty`'s performance against `xfce4-terminal`, on simple programs, and on [`cmatrix`](https://launchpad.net/ubuntu/+source/cmatrix). My observation is that runs slightly slower than `xfce4-terminal`.

But it is unclear *how* you measured the performance and what kind of benchmarks did you use.
Could it be possible to explain more, and maybe open-source whatever software or script was used for the benchmark?

I would be curious to test again, with a more robust measure.
Thanks."12/03/17 09:38:42 PMAdd cursor style option"This makes it possible to change the default cursor style of the
terminal. It requires a restart to apply the changes.

When vim or a different terminal application changes the cursor, it is
not reset. But I wouldn't say that's an issue with alacritty, but rather
with the terminal application."7"The benchmarking procedure of Alacritty is documented in the blog post about the scrollback release:
https://jwilm.io/blog/alacritty-lands-scrollback

There's still work to be done here, like automated benchmarks and including tests for things like terminal latency. But I think this should resolve this issue for now.

If anyone wants to help out with benchmarking Alacritty, the https://github.com/jwilm/vtebench repository is where all the code is present."chrisduerrChristian Duerr12/03/17 09:06:31 PM"Add live-reload of default cursor

The default cursor can now be updated at runtime without having to
restart alacritty.

This does not change the current cursor but only affects the default, so
the cursor is not changed if the current cursor is set explicitly, even
if it is using the default style."1
93204/04/17 03:44:24 AMFabrice VaillantWeechat rendering improperly "Hi

I'm not sure who is wrong between weechat (the irc client) and alacritty, but it seems to render improperly in alacritty.

![screenshot from 2017-01-11 17-23-45](https://cloud.githubusercontent.com/assets/8531875/21857180/dbc22e3a-d824-11e6-95ce-50a9a974a1c6.png)

You can see on the attached picture, the vertical line of blue X should be a thin bleu line. And the horizontal status line should be blue not just around the word but from beginning to end.

I can provide better comparison screenshoot or debuging info if needed. I'd just rather avoid publishing too many info about my chats online. "12/22/17 11:00:07 PMBump built to 0.2.2 to fix #917 build failureSee also https://github.com/lukaslueg/built/issues/71@xyin96 the reason it doesn't work with `xterm` and `xterm-256colors` is that they both claim to support _background color erase_ which Alacritty doesn't but should (we are claiming to be `xterm-256colors`).jonathonfJonathon Fernyhough12/04/17 09:21:42 PMBump built to 0.2.2 to bring in new crate deps1
93301/11/17 06:33:57 PMJoe WilmFix bug where event loop could get stuck reading"One symptom of this bug was being unable to send C-c during `cat
/dev/urandom`.

cc #271"12/17/17 06:04:11 AMFix License link at the bottom of the readme1@xyin96 the reason it doesn't work with `xterm` and `xterm-256colors` is that they both claim to support _background color erase_ which Alacritty doesn't but should (we are claiming to be `xterm-256colors`).jmcduffie32Jon McDuffie12/04/17 09:26:45 PMFix License link at the bottom of the readme1
93701/21/17 08:09:22 PMRichard Palethorpe (rpalethorpe)ansi: Designate G0 graphic character set"Hi, I am new to Rust so this may not be the best way to go about doing this, but I am trying to implement the line drawing characters for applications like YasT and GNU/Linux's `make menuconfig`. So far I have spent a lot of time reading specifications (only then to realise you have a nice neat summary in this repo) and have made some stubs. I haven't looked at remapping the glyphs yet. Also, great job!

Related issue: https://github.com/jwilm/alacritty/issues/226
Commit message:
Parse `ESC ( B` as designate the G0 graphic character set as ASCII and parse
`ESC ( 0` as designate the G0 graphic character set as line drawing
glyphs. This does not implement actually using the line drawing glyphs,
but prints out a debug message when the control sequence is parsed."12/24/17 05:46:55 PMAdd custom underline, beam and box cursors"As mentioned in jwilm/alacritty#931, it can be troublesome if a font has
an underline symbol outside of the glyph's bounding box. This can lead
to the underline disappearing at the bottom of the terminal.

As a solution a symbol from the private use area was used as the
character code for the underline symbol. Whenever this symbol is
encountered, instead of rendering it, a custom block is rendered.

In this implementation the block has the full character as width and
sits flush with the bottom of the glyph's bounding box. The height is
half the distance between the baseline and the bottom of the bounding
box.

Here are some screenshots of how this underline looks now:
![Small](https://u.teknik.io/58RVG.png)
![Normal](https://u.teknik.io/hDJSo.png)
![Big](https://u.teknik.io/PguV1.png)
![Huge](https://u.teknik.io/bW9dl.png)

This fixes #931 "30This looks great; thanks for all the work here and for following up with reviews! :star2: chrisduerrChristian Dürr12/24/17 04:17:07 PM"Move custom cursor block on ft

Moved the custom cursor block on ft to the top, so no unnecessary
operations are executed when trying to draw a custom cursor glyph."1
93801/30/17 12:06:30 AMDanny Dulaisupport for inverting the cursor or using colorssolves #155 12/22/17 10:09:10 PMUpdate README.md for current state of macOS"Homebrew Rust will correctly compile `alacritty` now, and the monospace
font is automatically set to `Menlo` at first launch."1Finally had time to test this; looks great! Thanks for the work here, and sorry for taking so long to land it.hakujinColin King12/10/17 01:53:22 AM"Update README.md for current state of macOS

Homebrew Rust will correctly compile `alacritty` now, and the monospace
font is automatically set to `Menlo` at first launch."1
93901/30/17 04:29:23 AMMarkus RudyMissing packages on Arch Linux"On a pretty fresh arch installation, I found the following packages to be missing:

  * `make`
  * `pkg-config`"12/22/17 10:07:46 PMAdd Void Linux to distrobutions with packagesVoid Linux has the alacritty package in the main repository's, so compilation from source isn't needed.1"@MoSal I think it might be useful to make a note that `base-devel` is assumed if you need to build software (I didn't even know that, or at least it never occurred to me). I think there are two possibilities for the Arch Linux instructions:
1. Show how to build from source. In that case, I think it makes sense to say that you need `base-devel`
2. Point people to the AUR package. In that case, make no mention of `base-devel`, [since it is assumed](https://wiki.archlinux.org/index.php/Arch_User_Repository#Getting_started)"ArzteBenjamin Hoffmeyer12/10/17 03:36:09 AM"Add Void Linux to distrobutions with packages

Void Linux has the alacritty package in the main repository's, so compilation from source isn't needed."1
94101/12/17 06:10:50 AMMichael BrumlowProposal for line wrap - ^[[7h and ^[[7l (private)"These changes provide support for disabling auto line wrap which is
currently default to on.

'tput rman' will now disable auto line wrap and alacritty will now not
automatically wrap lines.

'tput sman' will now (re)enable auto line wrap and alacritty will now
automatically wrap lines once it reaches the end of the line.

My testing showed this to work the same as gnome-terminal.

I should note that simply having ^[[7h or ^[[7l in a recording does not
enable and disable line wrapping. This is the same behavior as
gnome-terminal and xterm. Those cape codes come through as private
which are not handled yet. I behave this is the correct behavior.

** I fixed vim to trim trailing whitespace on save, just about every line I committed in the past had trailing white space. This is also corrected here. ** 

Fixes #282"12/13/17 09:30:27 PMOn macOS when launching multiple times focus win"I dug into this and narrowed the issue down to the macOS app bundle
Info.plist file. So, I spun up a native macOS app real quick and tested
it by launching the binary directly and launching it via the app bundle.
When launching from the command line directly, it created multiple
windows & instances of the app. However, when launching via the app
bundle it behaved as I normally expect a macOS app to behave, that is
when launched multiple times to simply focus the already existing window
and instance.

This informed me that it wasn't something in code as much as it was
something in the app bundle configuration. Hence, I reworked the
Info.plist file based on the one that was created by XCode when I made
the native macOS app and it started behaving as expected.

The downside is that the ALACRITTY_LOCALE, LANG, and LC_CTYPE are not set as
they would be via the launcher script. Also, the PWD starts out at / rather than
the users home directory. The LANG, LC_CTYPE environment variables can be set in
your config under the env section. It isn't dynamic which still isn't quite as
nice as the bash + applescript approach. However, it make the behavior work
correctly which is critical for anyone using an app launcher like Spotlight to
switch apps."13This looks great; thanks!drewdeponteAndrew De Ponte12/13/17 06:54:07 PMMerge branch 'master' into make_launching_twice_focus_running_instance1
94506/20/17 04:08:38 PMMichael BrumlowModes. I am working on cursor movements in vttest and need to add some more terminal modes. Right now modes are one of 8 bits. @jwilm do you have any issue if I bump that to 32bits? Or do you think this should be handled some other way? 01/23/19 07:44:25 PMMemorize the input source for MacOS"This PR tries to partially fix the #909. Specifically, memorising the input source when window loses focus and restoring it once focus is received.

I'm new to Rust and have no MacOS API experience, so the code is quite naive, but solves the problem I'm having. I would appreciate an advice on how to make it better / more idiomatic.

@kalekseev, do mind giving it a whirl?"7Anyway, I think this can be closed since yes, we can definitely add more modes to the term::Mode flags.zindelOleksiy Golovko12/16/17 03:42:42 PMfix non-macos build1
94601/12/17 06:49:31 AMMichael BrumlowAdding test for line wrap.This test ensures we can enable and disable line wrap.12/22/17 10:00:18 PMImplement faux scrolling"This patch implements faux scrolling inside the alternate screen buffer.

Whenever the user scrolls up or down while the alternate screen buffer
is active, instead of actual scrolling three up/down arrow keys are
inserted.

This fixes #550.

**Important:** I wasn't able to test this on a touch device, because I do not own one, so if anyone could test it, that would be nice.

Also I've tested termite and they seem to scroll 7 lines, I've settled for 3 lines for now, but any feedback is appreciated."27Look good; thanks!chrisduerrJoe Wilm12/22/17 09:35:55 PMStyle nits1
94701/13/17 05:09:45 AMJohannes LundbergMake it run on FreeBSD"Hey! This is really cool. Works great after a couple of modifications.

Changes to code:
- Added FreeBSD paragraph in README.md
- Added ""freebsd"" to target_os cfg's in macOS's openpty() function
- Added ""freebsd"" to target_os cfg's in copypasta
- Had to add derive Default to some Font related structs to get it to build. Did this really build on Linux?
- Apparently TIOCSCTTY is missing from FreeBSD's libc. Added a separate function for that ioctl until libc crate can be fixed.

- Rustfmt (and remove trailing whitespace) runs automatically on save for me and have restructured a lot of the code in the files I edited. I hope this is OK? I highly recommend using rustfmt. 

Hope we can get it running on Wayland soon :) "12/22/17 09:14:49 PMAdd option to draw borderless windowsPartial solution for #168 until winit has more granular control over the window decorations https://github.com/tomaka/winit/issues/323 17Yeah, I didn't realize linux and macos had their default impls for Font and that is why I had to add derive default in a bunch of places. I have given FreeBSD same default as linux. Gonna close this and make a new PR. robertgzrJoe Wilm12/22/17 08:52:35 PMUse consistent config deprecation message style1
94901/12/17 07:52:17 AMJohannes LundbergHiDPI not correct render offset"Hey! 

I have tried upping the dpi to 192 and while I got bigger fonts they seem to be rendered at the same locations as 96 dpi so they overlap and make just a big blur.

Not optimal but as a temporary solution, I ended up just using a bigger font on my HiDPI display. 

Edit: (on FreeBSD)"12/22/17 09:18:09 PMFix stack-overflow when creating a new atlas"When an atlas is full and the `insert` call fails, a new atlas should be
created. This is the current strategy, however the atlas is put at the
end of the vector, but the `current_atlas` index is set to 0, instead of
the last element. This leads to a recursion where it keeps trying to
insert into the full atlas at position 0 instead of the new at
`atlas.len() - 1`.

With this simple fix a stack-overflow is prevented because the new atlas
is inserted as the first element, which then will be used correctly for
loading new glyphs.

This fixes jwilm/alacritty/issues/842 and might also solve
jwilm/alacritty/issues/914 (I wasn't able to reproduce this with the
latest master). Also fixes #898."2Never mind, I see in previous issue report that there is a solution...chrisduerrJoe Wilm12/20/17 02:59:45 AM"Share LoadGlyph implementations

Previously there were two separate but intended-to-be-identical
implementations. Now the two implementations simply delegate to a
single, shared method. This should help correctness issues in the
future."1
95303/08/17 03:47:48 PMSemyon PisarevOSX: Add app packing tooling"Having **Alacritty.desktop** for Linux users, I thought it would be useful to have some tooling for creating MacOS **Alacritty.app** with release binary.

This _Makefile_ includes targets for creating **Alacritty.app** and **Alacritty.dmg**.

_Info.plist_, simple terminal iconset and launcher script are located in _assets/osx_.

**!** Please note that **Alacritty.app** should be moved to MacOS _Applications_ to start and work correctly."12/22/17 09:15:59 PMAdd --needed to pacman command"By default, `pacman` _reinstalls_ any package specified that is already installed. The `--needed` flag says ""if this package is already installed, just ignore it"". From the man page:

```
       --needed
           Do not reinstall the targets that are already up-to-date.
```

I quickly glanced through the other distributions listed, and I couldn't immediately find any others that have the same behavior. However, I haven't used most of them, so I'm not sure."6"Since this PR seems to have stalled, I've pulled in the feedback necessary from this thread into another PR https://github.com/jwilm/alacritty/pull/462 that works for me and is rebased against master. I'm happy to merge ""my"" changes into @cema-sp PR here or have this PR closed in favor of mine. Either way, I'd love to keep this work moving forward."khyperiakhyperia12/21/17 04:55:35 PMAdd --needed to pacman command1
95611/23/20 11:11:03 PMNoneCursor Not BlinkingIs there an option to cause the cursor to blink? I find it to be helpful confirmation that the terminal has (or doesn't have) focus.12/23/17 01:36:53 AMFix macOS fallbacks"The cascade list is now generated from Menlo for all fonts. This doesn't
feel correct to me, but it seems to give the expected behavior on macOS.
One of the problems cited was that certain glyphs like ❯ would not be
rendered with default cascade lists for some fonts." =||= "This worked for me : 
```yaml
cursor:
  style:
    blinking: Always
  blink_interval: 500
```
close and reopen"jwilmJoe Wilm12/22/17 11:52:41 PM"Fix macOS fallbacks

The cascade list is now generated from Menlo for all fonts. This doesn't
feel correct to me, but it seems to give the expected behavior on macOS.
One of the problems cited was that certain glyphs like ❯ would not be
rendered with default cascade lists for some fonts."1
96001/12/17 08:07:39 PMDavid KelsoAdd desktop install instructions for macOSInstructions for adding an extremely simple application wrapper for macOS12/24/17 05:39:10 AMUpdate Dependencies"ref #959 
Some other dependency updates that didn't require any changes to source are included in the first commit. Simplified versions specified since cargo update will handle minor versions.

Edit: Pushing again w/o built. Also all the updates not directly referenced in #959 are to dependencies shared with glutin (core-*, gl_generator etc.) other than parking_lot."1Ah whoops I saw #301 right after creating this. Closing.chetgurevitchchetgurevitch12/12/17 03:37:53 AMUpdate glutin to v0.111
96301/19/17 06:28:17 AMJohannes LundbergMake it run on FreeBSD"Changes to code:

- Added FreeBSD paragraph in README.md
- Added ""freebsd"" to target_os cfg's in macOS's openpty() function
- Added ""freebsd"" to target_os cfg's in Linux's copypasta
- Added ""freebsd"" to target_os cfg's in Linux's default font
- Apparently TIOCSCTTY is missing from FreeBSD's libc. Added a separate function for that ioctl until libc crate can be fixed."12/17/18 07:06:07 PMMake visual bell flash color customizable (#2)"This addresses the main feedback in jwilm/alacritty/pull/430. I've
decided to go from scratch instead of basing my work on top of what
markandrus has already implemented to keep it as simple as possible.

If there's any stuff that I should take from the other PR, please let me
know. I can also try to send a PR to markandrus."18Sure! The plan is to go, unless weather like today.. chrisduerrChristian Duerr12/17/18 05:20:06 PMFix remaining style issues1
96801/19/17 06:28:48 AMNoneWarning while compiling on rustc 1.16"Compiler gives the following warning on macOS Sierra 10.12.2 (16C67):

```
warning: this feature has been stable since 1.15.0. Attribute no longer needed, #[warn(stable_features)] on by default
  --> src/lib.rs:25:12
   |
25 | #![feature(proc_macro)]
   |            ^^^^^^^^^^
```

The same warning doesn't appear on Debian Jessie stable.
I'm on 67aba7f4e4758c5fcb7eda50f083b138017fbfdb."01/02/18 04:24:04 PMAdd configuration option for faux scrollback"Some people have complained about the behavior of faux scrollback inside
of vim/tmux, however from what I can tell, alacritty behaves the same
way as other terminal emulators that support faux scrollback.

However there are a lot of terminal emulators that do not support faux
scrollback at all, which leads to people complaining about unusual
scroll behavior.

This is my proposal on how to solve this issue, by giving people that do
not like the VTE-Style faux scrolling the option to opt-out."1I confirmed this warning comes up with Debian Jessie Stable too when using rustc version 1.16.chrisduerrChristian Duerr12/29/17 05:37:46 PM"Address feedback

The config documentation has been changed to make it clear which part of
the documentation is related to which setting.

The faux scrollback part of the `scroll_terminal` method has been
cleaned up by making use of the fact that the `codepoint + 1` can be
used in the escape sequence which is used for scrolling."1
97012/17/20 03:36:50 AMj gillesFull unicode support"TL;DR: Supporting unicode is hard, and it might be a good idea to use a library that knows how to do it well. Maybe look into using [harfbuzz](https://www.freedesktop.org/wiki/Software/HarfBuzz/) as well as freetype for font rendering. [Unicode-width](http://unicode-rs.github.io/unicode-width/unicode_width/index.html) is good but doesn't do everything.

The problem of translating sequences of unicode codepoints to actual you-can-draw-this-on-screen glyphs, supporting things like character width (https://github.com/jwilm/alacritty/issues/265), ligatures (https://github.com/jwilm/alacritty/issues/50), bidirectional text (like in arabic), and text reordering (!), is called [complex text layout](https://en.wikipedia.org/wiki/Complex_text_layout). It is, appropriately, complex, and most terminals don't actually do it very well.

Windows and Mac both have systems that perform layout, integrated with their font rasterizers:
- On windows, there's several different supported libraries, from various periods of windows history: DirectWrite, GDI, and Uniscribe on windows.
- On OS X, there's Core Text.
- On linux, there's a stack: freetype for rasterizing, [harfbuzz](https://www.freedesktop.org/wiki/Software/HarfBuzz/) for ""text shaping"", and [pango](http://www.pango.org/) for full layout. All of these libraries are actually cross-platform, though. See [this article](http://mces.blogspot.in/2009/11/pango-vs-harfbuzz.html) for more on the difference between pango and harfbuzz.

There's also [ICU](http://site.icu-project.org/), which is cross-platform and supported by IBM (I think?)

Of the available options:
- OS X Terminal / Iterm2 use Core Text
- Terminator (and everything else that uses GTK) uses Pango
- Windows CMD and Powershell use black magic and baby tears
- Chrome uses harfbuzz
- Firefox uses pango
- ...

It seems to me like harfbuzz is the best option in terms of cross-platform support and level of control. You basically hand it a line of text and it tells you all the glyphs to draw in that line. Keep in mind I'm not actually a font rendering person, though, and it's possible I'm missing important details here.

This would probably have a performance cost, but I'm not sure how *much* of a performance cost. With a clever implementation it might not be too bad, and would be a huge boon to international users.

Other relevant links:
- [Iterm2 discussing ligature support](https://gitlab.com/gnachman/iterm2/issues/3568)
- [Chromium discussing a switch to harfbuzz](https://bugs.chromium.org/p/chromium/issues/detail?id=286450)
- Terminals that support bidirectional / multilingual text:
  - http://mlterm.sourceforge.net/
  - http://www.africa.upenn.edu/Software/AlFaseeh_Arabic_18584.html
- https://github.com/servo/rust-harfbuzz
- https://github.com/gtk-rs/pango
- https://github.com/servo/rust-icu
"01/02/18 04:32:51 PMImplement OSC 52 (set clipboard)"This change allows a program running in the terminal to set the clipboard via the OSC 52 escape code. This is useful with remote commands running under tmux.

To test, set the tmux configuration variable ""set-clipboard"" to ""on"", and select some text. The text will be copied to the primary clipboard.

The best documentation that I've found for this escape code is here:

http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Operating-System-Commands"3"I'm going to close this issue since it is rather unspecific. Many of the issues mentioned here already have dedicated issues like bidi (https://github.com/alacritty/alacritty/issues/663) or ligatures (https://github.com/alacritty/alacritty/issues/50).

Though generally I don't see Alacritty implementing many of these features in the future, since most of them simply come with too big of a performance impact on all users to justify adding them for the few users that actually need them."geertjGeert Jansen12/24/17 04:50:43 AM"Add support for set-clipboard.

This allows e.g. tmux to set the clipboard via the OSC 52 escape code."1
97403/27/17 04:09:48 PMMarek DědičCopy & paste shortcuts don't work on gnome"The default shortcuts for copy & paste are AFAIK Win+c and Win+v (Linux guy here). This is:
a) confusing as the usual shortcuts are Ctrl-Shift-c and Ctrl-Shift-v
b) doesn't work on gnome (I am on debian-testing) as the Win-v shortcut opens the notifications & calendar

Yes, I know I can remap these easily and that's not my point - there should be more sensible defaults IMHO."01/03/18 07:15:58 PMEnable shift+select in mouse mode"When an application takes control over the mouse, it usually disables
selection completely. However the common way to still make selection
possible is by allowing selection while the shift key is held down.

This feature is implemented here by making use of the new `modifiers`
field on mouse events with glutin/winit.

This fixes jwilm/alacritty#146.

I've thought about changing the cursor, but it seems like that would be kinda odd (you wouldn't want it changing every time when hitting shift). And other terminal emulators also do not seem to change the cursor with shift selection.
For clearing a selection you also need to hold shift and click, but this also seems consistent with my experience on other terminal emulators.
If you have any feedback on these two things, feel free to tell me about it."35"I'm on 715d4f8 and `Control+C` works to copy selected text and `Control+V` works to paste it.

I have the same mappings, but... as I test in `tmux`... yeah, it's not working correctly. Might you have a `tmux` binding that's getting in the way?

Here's my [.tmux.conf](https://github.com/jc00ke/dotfiles/blob/master/tmux.conf) for reference. There's probably something in there I could tweak to make it work correctly."chrisduerrChristian Duerr01/03/18 04:55:39 PMPass ModifiersState to mouse_moved method too1
97601/14/17 08:56:55 PMTom Crayfordset option as meta"@jwilm I picked this up from https://github.com/jwilm/alacritty/issues/62. I got (I think) most of the way there, but would love to hear feedback about the approach I used. The rough pattern is that there's an `event_translator` that can be passed this config, and it is called in the `events::Processor`.

I'm struggling a bit with why the build fails with this error:

```

error[E0282]: unable to infer enough type information about `E`
   --> src/event.rs:197:21
    |
197 |                     Processor::handle_event(
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `E`
...
224 |                     process!(translated);
    |                     --------------------- in this macro invocation
    |
    = note: type annotations or generic parameter binding required

error: aborting due to previous error

error: Could not compile `alacritty`.

To learn more, run the command again with --verbose.
```

I'd be happy to take a different approach than this - you could hardcode everything into the processor, but it seemed like a reasonable place to put a new thing in."12/29/17 05:19:15 PMFix zombie childrenResolves #973 =||= @jwilm think I'm gonna redo this in a new PRjwilmJoe Wilm12/29/17 04:43:11 PM"Fix zombie children

Resolves #973"1
97901/15/17 05:39:02 PMNoneIncorrect font rendering"http://i.imgur.com/lUEFvTL.png

In the link above you see xfce terminal on the left vs alacritty on the right, both set to use Fantasque Sans Mono 12.

In the top row alacritty fails to render Font Awesome's ❯ character. This is font dependent, as the issue sppears when using Fantasque Sans and Terminus, but not monospace.

In the middle you see ncmpcpp's lines turned into q's. The used font does not seem to matter here, however the rendering is correct if you run ncmpcpp in tmux.


I'm running a release build of the master branch, compiled today, using rustc 1.16.0-nightly."12/29/17 11:53:16 PMBump glutin to 0.12This removes a lot of duplicated dependencies3I've subscribed to the threads you linked, no need to clutter up the issue tracker with known and worked-on problems.EijebongBastien Orivel12/29/17 11:43:15 PM"Bump glutin to 0.12

This removes a lot of duplicated dependencies"1
98107/01/17 11:39:40 PMinsunaVery slow rendering in tmux (split-mode or multi-attached mode) (Linux)"When in tmux with a split pane, running 
```zsh
ls -al
```
in a folder with a few hundred files, alacritty needs 1-2 seconds to render it. If I do the same in urxvt, it's almost immediate.
If I use alacritty and urxvt side by side, both attached to the same tmux session but without split panes, urxvt also finishes drawing almost immediately, while alacritty takes quite a long while.

Running the same command in the same folder without using tmux, alacritty renders much faster

The speed is does not noticably change when comparing split vs. attached vs. attached&split

I'm using mesa drivers (in case it's relevant)

My system:
![neofetch](https://cloud.githubusercontent.com/assets/3718129/21955386/8f40b6c4-da6a-11e6-92f3-074c9899c743.png)"01/02/18 04:09:10 PMImplement block selection"Basic block selection has been implemented. This fixes #978.

Currently this still uses a fixed key, which is `ctrl`. It might be desirable to use a configurable key option for this, but I wasn't sure if I should put that in the key shortcuts, or if a separate option outside of the key options should be used.

One issue with setting up a `key_binding` is that especially when keys like control or shift are used, they might be counted as modifiers. So when holding shifit and pressing control, it would be a different key combination. So this key would need to be setup to catch the key itself and all modifiers.

It would also be the first key that requires a separate release event as far as I know. So that might be some code complexity that would not be desired."10Sounds like there's no further action required herechrisduerrChristian Duerr12/31/17 03:35:36 PM"Clean up PR

A typo has been fixed and an unnecessary serde default has been removed."1
98601/23/17 05:14:02 PMNoneStart using the log-crate instead of printing to stdoutI'm not done changing all occurrences, requesting for comments01/06/18 01:42:56 AMAdd clippy check to travis "This commit adds clippy as a required step of the build process. To make
this possible, all existing clippy issues have been resolved.

I think making clippy part of the travis CI run would be a great step,
but if this is not desired, I can also take that part out of this and
add just the fixes for all current clippy issues."1Squashed and rebasedchrisduerrChristian Duerr01/05/18 05:46:07 PMRename HollowBox to HollowBlock1
98705/18/18 11:39:31 PMNoneAlacritty doesn't work in VirtualBox"Alcracitty running on Fedora 25 (on VirtualBox) crashes at startup:
```
$ RUST_BACKTRACE=1 target/release/alacritty 
OpenGL Warning: glXChooseVisual: ignoring attribute 0x22
device_pixel_ratio: 1
width: 1024, height: 768
thread 'main' panicked at 'gl function was not loaded', /home/ldanko/work/alacritty/target/release/build/alacritty-d032f55a418cfed4/out/gl_bindings.rs:20591
stack backtrace:
   1:     0x55d3d2b4752a - std::sys::imp::backtrace::tracing::imp::write::h9c41d2f69e5caabf
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x55d3d2b469b1 - std::panicking::default_hook::{{closure}}::h1f61f3c769fffe7a
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:351
   3:     0x55d3d2b45b77 - std::panicking::rust_panic_with_hook::hffbc74969c7b5d87
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:367
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:555
   4:     0x55d3d2a48711 - _ZN3std9panicking11begin_panic17h0a82ee08bc6f08bcE.641
                        at /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libstd/panicking.rs:517
   5:     0x55d3d2a486cb - alacritty::gl::missing_fn_panic::he1a3e5d8d51883fb
                        at /home/ldanko/work/alacritty/src/lib.rs:85
   6:     0x55d3d2a75df9 - alacritty::display::Display::new::h05668100d7c3e445
                        at /home/ldanko/work/alacritty/src/lib.rs:85
                        at /home/ldanko/work/alacritty/src/renderer/mod.rs:471
                        at /home/ldanko/work/alacritty/src/display.rs:154
   7:     0x55d3d2a3c8bb - alacritty::run::he9434698bec6f695
                        at /home/ldanko/work/alacritty/src/main.rs:75
   8:     0x55d3d2a3be89 - alacritty::main::h3744b8d6b60d0e63
                        at /home/ldanko/work/alacritty/src/main.rs:59
   9:     0x55d3d2a482d0 - main
  10:     0x7faa9a6eb400 - __libc_start_main
  11:     0x55d3d2a0e6e9 - _start
  12:                0x0 - <unknown>

```"01/06/18 08:12:29 PMHonour working dir on linux"Apparently switching to the home directory on startup was primarily done for macos, however the default behavior on linux is to start the terminal emulator in the working directory.

This just doesn't switch to the home directory when alacritty is run on linux.
If there is any more to it, please let me know.

This fixes #961."3Thanks for looking into this @mbilker. Please follow #128 for tracking of minimal OpenGL version. Most people aren't affected by this, so it's not a priority for me right now. All contributions torwards this would be much appreciated though! chrisduerrChristian Duerr01/03/18 02:51:53 AMRemove comment about switching directory1
99101/30/17 04:29:23 AMDaniel M. CapellaAdd Arch Linux package install instructions"Includes (relatively) minor touch ups.

Fixes #294."12/15/18 09:33:34 PMFixing tabs in copy-paste (#219)Adding tab characters to the Grid as an actual tab - rather than a space - followed by spacer characters. The spacer characters have the WIDE_CHAR_SPACER flag so the selection code will *not* pass them to the clipboard. This means `Term::string_from_selection()` will filter out the spacers and just return the tabs.1"I think it is sufficient to link to the AUR package, rather than stepping the user through the process of downloading and building with `makepkg`. An Arch Linux user will likely know how to install from the AUR (if they want to). If they do not know, they should definitely refer to the [wiki](https://wiki.archlinux.org/index.php/Arch_User_Repository)

EDIT: I should add that this is important because in the Arch Linux world you are assumed to have read the PKGBUILD yourself and verified that it is not malicious, since AUR packages are 100% community contributions. While probably harmless, it's the sort of thing that exposes unknowledgeable  users unnecessarily. Also the author of the package is clearly not the author of the software, so this may be placing too much trust in the package author's benevolence."sblundyChristian Duerr12/15/18 08:25:35 PMRemove unneeded newline1
99402/13/17 06:08:56 PMNoneAlt+Backspace does not work in fish shellAlt+Backspace is supposed to backwards delete entire words, and it works just as I'm used to in bash, however using fish shell what happens instead is that the cursor goes back a single character and fish switches to its version of vi normal mode, as if I had pressed ESC.01/05/18 03:22:59 AMPrevent font_size_modifier from sinking too low"This change prevents the `font_size_modifier` of the terminal from going
below the font size 1. If this is not done, it is possible to decrease
the `font_size_modifier` without the font size itself changing. So when
raising it again, nothing happens until the `font_size_modifier` is back
at a reasonable level.

This fixes this by making sure the `font_size_modifier` never goes below
`1 - original_font_size`. So if the original font size is 12, the
`font_size_modifier` will always bee `-11` or bigger. Effectively limiting
it to the value where the font is 1. (`12 - 11 = 1`)

This fixes #955."3"

Sent from Alto

On Sunday, January 15, 2017 at 10:44 AM Alexander-Miller <notifications@github.com> wrote:

Alt+Backspace is supposed to backwards delete entire words, and it works just as I'm used to in bash, however using fish shell what happens instead is that the cursor goes back a single character and fish switches to its version of vi normal mode, as if I had pressed ESC.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.￼

"chrisduerrChristian Duerr01/05/18 02:44:53 AMRemove useless type conversions1
99501/15/17 06:04:56 PMRalf GutkowskiSupport full screen on GNU/LinuxSometimes I use window manager (mate) that doesn't provide funcionality of making window _fully_ full screen (panels and titlebars are kept). Would it be possible to implement full screen for alacritty?01/07/18 09:11:47 PMResolves #733.(see comment on issue #733, which would have probably been better inserted here instead)9Yep. There's an issue for it already: #34 giorgigaGiorgio Gallo01/07/18 05:38:16 PM"Non-bracketed paste support for DOS CRLFs.

When pasting in non-bracketed more, all line endings (including
DOS-style CRLFs) get normalized to a single CR to simulate a keypress of
the <return> key."1
99805/01/17 03:52:23 PMAaron WilliamsonAdd Glyph Offset Option to User Configuration"Love the idea of this terminal, great work so far! I really wanted this so I went ahead and added it myself :smile:

Let me know if there's anything I missed for this change, or tests you would like to accompany these changes."01/06/18 07:42:43 PMFix scrolling outside of u8 range"Until now scrolling past column and line 222 has been ignored. With this
patch it now reports scrolling beyond these lines as scrolling at the
limits (222).

I'm not entirely sure if there is a way to report numbers outside of the
u8 range, however I do not see any separator between line and column and
have choosen to just report these as line/column 222 for now. If someone
knows more about this, please let me know.

This fixes #698."1One use case we've had suggested for per-font sizes is to make CJK text more readable.chrisduerrChristian Duerr01/06/18 01:44:46 AMRemove unused imports1
99901/15/17 08:41:13 PMMickaël SalaünUse tty-rsAlacritty could benefit from the thread-safe implementation of openpty(3) from [tty-rs](https://github.com/stemjail/tty-rs). I'll be happy to make a pull request but I can't test tty-rs on macOS.01/06/18 12:50:13 AMImprove ability of alacritty to deal with broken config"When part of the config is broken, alacritty shouldn't instantly try to
recover to the default config, but instead try to use defaults only for
the parts of the config which are broken.

The primary fields which are still breaking the complete config when
they are not configured properly are fonts, mouse bindings and key
bindings. In those cases alacritty falls back to the default config.

This fixes #954.

I think it might be possible to prevent the mouse and keyboard shortcuts from destroying everything with a custom deserializer over the whole vec, I'll look into that.
I'm not sure about the fonts though.
  
**Update**: Mouse and Keyboard bindings should work now too. Only invalid yaml should be able to break the config now." =||= The tty-rs FFI module offers a safe Rust typed API reimplementation of `openpty`. Feel free to send a pull request if you find some room for improvement. :)chrisduerrChristian Duerr01/05/18 11:47:18 PM"Prevent broken bindings from destroying config

Key- and Mousebindings can now be faulty. Whenever a faulty binding is
detected, an error is printed and the element is ignored.

If the complete Vector is faulty, it should fall back to an empty
vector.

Now only fonts and broken yaml should lead to the default config."1
100102/01/17 06:02:59 PMRyan SchmittImplement save/restore cursor positionThis relatively trivial feature is required by [Heatseeker](https://github.com/rschmitt/heatseeker), which seems to work perfectly on alacritty once this patch is applied.01/06/18 07:57:40 PMFix SGR mouse reporting"There were two bugs fixed in this commit:

1. `sgr_mouse_report` was not always called when `SGR_MOUSE` bit was set
   due to calling `normal_mouse_report` instead of `mouse_report` in the
   scrolling method.
2. SGR reporting was always going off the left mouse button state rather
   than what was appropriate. This affected SGR scroll reporting since
   it only behaves correctly for pressed events (final character 'M').

Resolves #698."1Thanks for trying it out, and I'm glad to hear it's working for you. Will not be able to finish that PR until tomorrow at the earliest.jwilmJoe Wilm01/06/18 07:39:33 PM"Fix SGR mouse reporting

There were two bugs fixed in this commit:

1. `sgr_mouse_report` was not always called when `SGR_MOUSE` bit was set
   due to calling `normal_mouse_report` instead of `mouse_report` in the
   scrolling method.
2. SGR reporting was always going off the left mouse button state rather
   than what was appropriate. This affected SGR scroll reporting since
   it only behaves correctly for pressed events (final character 'M').

Resolves #698."1
100707/01/17 11:37:16 PMHugo Duthilthread 'main' panicked at 'expected send event loop msg'"Hello guys,

I tried to install allacritty on macOS Yosemite 10.10.5. It went well but when I launch it and press any key, I have this error:

- Macbook pro retina early 2015 
- OS: macOS Yosemite 10.10.5
- Chipset gpu: Intel Iris Graphics 6100 1536 Mo
- Keyboard layout: fr

```Initializing glyph cache
Finished initializing glyph cache in 0.036782698
set_inner_size: 1124px × 676px
width: 1124, height: 676
Cell Size: (14 x 28)
PTY Dimensions: Line(24) x Column(80)
thread 'pty reader' panicked at 'unexpected err: Error { repr: Os { code: 5, message: ""Input/output error"" } }', src/event_loop.rs:283
note: Run with `RUST_BACKTRACE=1` for a backtrace.
thread 'main' panicked at 'expected send event loop msg', src/event_loop.rs:65```"01/08/18 04:46:12 AMRevert #987 behavior on macos"Probably should have double-checked this before merging, but apparently macos did change its behavior after #987.

This should make sure the macos behavior is to switch to home directory, while linux stays in the working directory." =||= Is this still a problem for you?chrisduerrChristian Duerr01/08/18 03:16:40 AMRevert #987 behavior on macos1
100910/09/17 05:21:00 AMEvan Cameronadd toggle for subpixel renderingAs we talked about in issue #101 just removing the lcd filter flag on linux is sufficient to turn subpixel rendering off. I am unable to test the mac changes at the moment.01/08/18 01:07:31 PMFix indexed color setting regression.Fixes: #10081"You need to take and post a high resolution picture of the monitor screen to show what you see. Subpixel rendering is a work around some physical limitation of LCD. 

> Subpixel rendering is a way to increase the apparent resolution of a computer's liquid crystal display (LCD) or organic light-emitting diode (OLED) display by rendering pixels to take into account the screen type's physical properties

From https://en.wikipedia.org/wiki/Subpixel_rendering."NickeZNiklas Claesson01/08/18 09:00:57 AM"Fix indexed color setting regression.

Fixes: #1008"1
101101/17/17 07:44:13 PMDrew De PonteOn MacOS does not recognize keyboard layout for Key Combos like copy/paste "For some reason on MacOS it doesn't recognize the system configured keyboard layout (for me Dvorak) with the key commands.

The normal terminal interaction works properly. It is just the key commands that seem to ignore the keyboard layout configured in the system settings."01/08/18 10:49:02 PMFix `ioctl` call failing on 32 bit architecture =||= Possibly related to / duplicate of #61.chrisduerrChristian Duerr01/08/18 09:47:26 PMFix `ioctl` call failing on 32 bit architecture1
101201/18/17 09:45:34 AMNoneRemove unnecessry feature definitionProc_macro has been stable since 1.15.0, so compiling on 1.16.0-nightly gives warning about unnecessary feature definition. Removed the definition and updated rustc-version to match 1.16.0.-nightly. Fixes #305.01/10/18 06:36:35 PMExpand key binding config documentation"A link to all variants available as `key` has been added at the top of
the key bindings documentation, to help users with finding the right
place for mapping key codes."8Changing HEAD branch, so closing this and opening a new PR.chrisduerrChristian Duerr01/09/18 04:08:54 PMMake glutin doc link independent from version1
101501/17/17 07:30:05 PMXiaoyu YinEscape sequence b'B' (42)"It looks like the escape sequence`b'B'` (42) is being handled by both `esc_dispatch` and `csi_dispatch`.

After digging into the code a little bit, it doesn't look like an error with implementation, but with `vte`'s Parser.

I'm also not sure if this is intended behavior.

The `unhandled` error is clogging the logs, making it hard to debug.

Logs:
```
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
[unhandled] esc_dispatch params=[], ints=[40], byte='B' (42)
```"01/10/18 04:54:34 PMMake Mac app installation steps idempotent"* Repeated uses of `cp -r target/release/osx/Alacritty.app
  /Applications/Alacritty.app` will result in copying Alacritty.app to
  `/Applications/Alacritty.app/Alacritty.app`."1Thanks for the report! This is being worked on in #292 pclalvpaul alvarez01/02/18 07:15:32 PM"Make Mac app installation steps idempotent

* Repeated uses of `cp -r target/release/osx/Alacritty.app
  /Applications/Alacritty.app` will result in copying Alacritty.app to
  `/Applications/Alacritty.app/Alacritty.app`."1
101607/01/17 11:36:53 PMSam PhillipsMiddle mouse button doesn't Paste or PasteSelection on Mac OSX Yosemite"Relevant config option:
```
mouse_bindings:
  - { mouse: Middle, action: Paste }
```

I have tried with `Paste` and `PasteSelection`, neither pastes.  ~~I've also tried switching the action to the Right mouse button, and it is not working.~~ I was changing the wrong config file.  Right mouse button does work.

Command-V does work at pasting."01/11/18 04:30:53 PMUpdate lockfile"Clippy failed to build with the latest nightly, so the lockfile has been
updated to allow the nightly builds to work again."2Duplicate of #234 at this pointchrisduerrChristian Duerr01/10/18 06:41:19 PM"Update lockfile

Clippy failed to build with the latest nightly, so the lockfile has been
updated to allow the nightly builds to work again."1
102302/16/17 05:44:53 PMNoneAdd build_info mod"This outputs version, git version, profile, features and dependencies and their versions. Without the logging-module, the output is too verbose.

> Welcome to alacritty 0.1.0a2cd4b6 debug.
> I was compiled for x86_64-apple-darwin using bitflags 0.7.0, cgmath 0.7.0, clippy 0.0.104, copypasta 0.0.1, errno 0.1.8, font 0.1.0, git2 0.6.3, gl_generator 0.5.2, glutin 0.6.1, lazy_static 0.2.2, libc 0.2.18, mio 0.6.1, notify 2.6.3, parking_lot 0.3.6, serde 0.8.19, serde_derive 0.8.19, serde_json 0.8.4, serde_yaml 0.5.0, toml 0.2.1, vte 0.2.1, xdg 2.0.0
> Enabled features are DEFAULT, ERR_PRINTLN
> device_pixel_ratio: 2
> device_pixel_ratio: 2
> width: 2048, height: 1536
> 

Requesting for comments. The branch also caches the gl_bindings; I'm unsure about this."04/14/19 12:25:39 AM[very WIP] Make Alacritty into a libraryMy work on #450. As far as I can tell very little progress has been made on that issue, so I'm posting this just to get a bit of code out there, that maybe others can build on. Feedback would be appreciated.27Reworked thistbodtGreg V04/01/18 09:49:50 PM"Make the window::Notifier a trait in event_loop

Since event_loop consumes it"1
102401/17/17 10:33:04 PMRichard WilsonAdd smart text highlighting with the mouse."Given a string `the quick brown fox`. If I double click quick, the terminal should highlight the word, a third click would highlight the line.

Any interest on this?"11/01/18 04:27:16 PMMake the directory the shaders live in more clear.Hopefully this kind of PR isn't more irritating that helpful. I think it might be helpful to newbs like me to name the directory where the shaders live `shaders/`.2Thanks for the suggestion! We're already tracking this in #30.nixpulvisNathan Lilienthal01/13/18 01:03:25 AMMake the directory the shaders live in more clear.1
102501/19/17 06:28:48 AMNoneRemove unnecessary feature definitionProc_macro has been stable since 1.15.0, so compiling on 1.16.0-nightly gives warning about unnecessary feature definition. Removed the definition and updated rustc-version to match 1.16.0.-nightly. Fixes #305.12/08/18 08:28:58 PMScripts Refactor"Thought I'd clean things up a bit, add some functionality and all that jazz.

- Moved `spawn-alacritty-cwd` into a new top level `share/` directory to help people find it.
- Modified `create-flamegraph.sh` so it can be run from anywhere, and so that it hides the cloned FlameGraph repo a bit.
- Added a useful `colors.sh` script.
- Updated the README.

I didn't touch the python script because I couldn't seem to get it to work."5Thanks for the suggestion! We're already tracking this in #30.nixpulvisChristian Duerr12/08/18 08:24:46 PM"Revert move of alacritty-cwd script

This reverts the move of the `spawn-alacritty-cwd` script since it
requires to create an additional directory in the project root just for
a single script. The existing `scripts` directory seems better fit and
more likely to be where users would look for it."1
102601/20/17 07:21:32 AMTrevor StrieberTest using trust to cross build.07/15/18 07:47:08 PMAdd bright foreground color option"It was requested in jwilm/alacritty#825 that it should be possible to
add an optional bright foreground color.

This is now added to the primary colors structure and allows the user to
set a foreground color for bold normal text. This has no effect unless
the `draw_bold_text_with_bright_colors` option is also enabled.

If the color is not specified, the bright foreground color will fall
back to the normal foreground color.

This fixes #825."9Oops, WIP.chrisduerrChristian Duerr07/15/18 07:33:18 PMMerge branch 'master' into master1
102803/06/17 07:37:58 PMBryce Fisher-FleigUbuntu 16.10: Alacritty.desktop opens unstyled separate icon on launcher"## Goal

I want to add Alacritty as a pinned icon on my launcher using a custom logo.

## Background

I'm on Ubuntu 16.10, and I've add copied this Alacritty.desktop to my `~/.local/share/applications/`:

```
[Desktop Entry]
Type=Application
TryExec=/usr/local/bin/alacritty
Exec=/usr/local/bin/alacritty
Icon=custom-logo
Terminal=false
X-Catagories=System;TerminalEmulator
Name=Alacritty
GenericName=Terminal
Comment=A cross-platform, GPU enhanced terminal emulator
```

I've also copied `custom-logo.png` to `/usr/share/pixmaps/`

I copied the Alacritty.desktop icon to the launcher, and the custom logo appears in the launcher as expected.

## Problem

Cicking on the logo causes a separate entry to appear on the launcher.  See screenshots:

![before](https://cloud.githubusercontent.com/assets/220106/22157399/680438ca-deec-11e6-9eeb-12f46a3286ec.png)

![after](https://cloud.githubusercontent.com/assets/220106/22157408/6e4a2bf4-deec-11e6-9d87-ce042a5843f9.png)"01/15/18 04:19:33 PMSpawn alacritty window as invisible"This change initially spawns alacritty as in invisible window, this
makes it possible for the pty to already access data like `window_id`
without having to wait for the window manager to actually open the
window.

This fixes #875."2"@tomterl unrelated to #348. 

This is should be closed since its now a duplicate of #455 -- which also contains the solution to this issue. "chrisduerrChristian Duerr01/14/18 10:13:26 PM"Show window right after creation

Even though `GlWindow::new` is blocking when `with_visibility(true)` is
used, the `window.show` call is not blocking. So calling `GlWindow::new`
and `with_visibility(false)`, then immediately calling `window.show`
will create a window and make it visible instantly.

Hopefully this helps with flickering during window creation."1
102908/20/17 04:55:46 PMGabriel MartinezAdd alpha option to set background transparency"Works on OS X, but not on Linux due to a glutin bug: https://github.com/tomaka/glutin/issues/639.

There are a few things I'd like to clean up/look into, but I figure I can put it out to start review. Things I'd like to do:
* Add a validation check to the alpha read from the config file to make sure it's within 0.0 and 1.0, inclusive.
* Not sure if `alpha` is the best config option name for this, so decide on the best name.
* Not sure if `alpha` values should be a float from 0.0 to 1.0, or integers or whatever.

Addresses issue #232."01/21/18 09:29:58 PMBetter character cell width with FreeType"This should fix #1020, #710, and #902 

I'm happy to rework this if there are any problems with it."14Thanks again @mystal for the PR, bringing it up-to-date, and your patience. Thanks @maximbaz for all the testing.rkanatiRachel K01/14/18 11:25:25 PM"Better character cell width with FreeType
This should fix #1020, #710, and #902"1
103101/21/17 08:21:16 PMJude Taylor(Some?) key bindings don't follow keyboard layout on OSX"I use dvorak. From my config file:

```
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
```

but to actually paste, I have to Cmd+K, as Dvorak K is in the same place as QWERTY V."01/16/18 08:29:55 PMUpdate lockfileThe lockfile has been updated to make clippy work with nightly again. =||= Thanks @okuuva chrisduerrChristian Duerr01/16/18 08:17:57 PM"Update lockfile

The lockfile has been updated to make clippy work with nightly again."1
103206/20/17 04:05:23 PMNonex-offset is to lowI'm not sure if this is only a problem on non-retina monitors, but the characters were very squashed together and hard to read.  I had to change the x offset from 2.0 to 3.0 in the default config file.01/26/18 08:20:42 PMUpdate dependencies"- log 0.3 -> 0.4
- freetype-rs 0.13 -> 0.16

- gl_generator 0.7 -> 0.8
- env_logger 0.4 -> 0.5
- cgmath 0.15 -> 0.16" =||= We've improved our use of font metrics so that 0 offsets can typically be used.golem131Christian Duerr01/25/18 10:12:58 PM"Revert freetype update

Freetype can't be updated because our internal dependencies require an
older version of freetype. So freetype has been downgraded again.

There were also some new clippy lints that have been fixed."1
103505/25/17 04:19:00 PMNoneBind keys to arbitrary commands"So, for instance, I could do something like this:

      - { key: N, mods: Control|Shift, command: ""alacritty"" }

And then press ctrl+shift+n to spawn a new terminal"01/18/18 05:27:08 PMImplement `reset_state` of Term struct"Up to this point the `reset_state` method of the `Term` struct has been
just a placeholder. This has been changed and all important state has
been reset.

The only state that has not been reset is stuff which is retrieved from
the config and isn't stored as default on the `Term` struct either. From
what I can tell these are all never changed though.

This fixes jwilm/alacritty#1033.

After doing some more testing trying to figure out how to fix that all
glyphs are messed up after doing `cat /dev/urandom`, I was able to
confirm that resetting `Term::cursor` fixes the glyphs and restores
everything to normal.

So this also fixes jwilm/alacritty#804." =||= I think we have another issue for this somewhere... can't find it though. This feature is definitely something we plan to implement.chrisduerrChristian Duerr01/17/18 10:23:25 PM"Implement `reset_state` of Term struct

Up to this point the `reset_state` method of the `Term` struct has been
just a placeholder. This has been changed and all important state has
been reset.

The only state that has not been reset is stuff which is retrieved from
the config and isn't stored as default on the `Term` struct either. From
what I can tell these are all never changed though.

This fixes jwilm/alacritty#1033.

After doing some more testing trying to figure out how to fix that all
glyphs are messed up after doing `cat /dev/urandom`, I was able to
confirm that resetting `Term::cursor` fixes the glyphs and restores
everything to normal.

So this also fixes jwilm/alacritty#804."1
104901/23/17 04:59:55 PMSteven FacklerDynamically generate ref tests"This uses the rustc-test crate, a copy of the standard test crate, to
dynamically create tests for each reference test. No need to remember to
update the macro, just add the directory to ref!

It also removes the line_wrap test, as it was never actually enabled and doesn't pass :( cc @mbrumlow"01/20/19 05:55:55 PMSupport config to control width of ambiguous width characters"Fonts for some languages (mainly CJK) expects east asian width characters to be full-width.
This pull request provides a way to let users choose width for such characters.

For example, Ricty font with `east_asian_fullwidth: true`, seems correct:
![ambiwidth=full](https://user-images.githubusercontent.com/1246590/35299227-fc5c3e3e-00c7-11e8-958c-1c35001ca2b3.png)
Ricty font with `east_asian_fullwidth: false`:
![ambiwidth=half](https://user-images.githubusercontent.com/1246590/35299241-06051bae-00c8-11e8-96ce-6cd8780c2fec.png)

`east_asian_fullwidth: false` is behaviour before this PR (and default config value).
In this example, `…` has full-width for the font but treated as half-width on terminal, so display is broken and cursor doesn't works correctly."21"This feature is still a big win so I'm going to merge it. I enabled the ""capture"" feature so all the stdout noise would go away.

Thanks again for putting this together!"lo48576YOSHIOKA Takuma01/23/18 06:50:37 PMAdd and implement a config to calculate ambiwidth as fullwidth1
105701/21/17 08:04:56 PMNoneMention talk at Rust Meetup in README.md03/13/18 06:21:20 AMExtend SGR and VT200 (normal) mouse support (fixes #714, #506)"This PR extends Alacritty's mouse handling to handle:
* Reporting all three of the left, right, and middle mouse buttons.
* Reporting mouse dragging events with all three buttons.
* Reporting mouse movement events when no button is pressed.

This PR does *not* report modifier keys with clicks/drags, because I'm unsure what modifiers (if any) we want or need to handle. We *can't* report Shift, as that is the de-facto standard modifier for ignoring application mouse handling (and Alacritty already treats it as such). The vast majority of CLI applications out there don't *expect* Ctrl to be reported, because xterm mandates Ctrl-Click to access its menus. They also do not generally expect Alt, as the de-facto standard modifier for moving and resizing windows with the mouse. The Windows key, of course, is also generally ignored.

This PR also does not support more than three mouse buttons (plus the wheel). While Glutin reports them, VT200/SGR button codes treat 0 as left, 1 as middle, 2 as right, and 3 as either ""button release"" (VT200), ""any other button"" (SGR), or ""no button pressed"" (SGR with any-event tracking); thus, we skip supporting them entirely.

This fixes #714, fixes #506 and fixes #1145."12Thanks!CeltiChristian Duerr03/09/18 11:40:53 PMSwitch meta key to alt instead of super1
106102/07/17 02:53:29 AMNoneNeed to install more packages under archOn arch, I also had to install `make` and `pkgconfig` to get alacritty to build.01/31/18 05:03:24 PMUpdate core-textThis cleans up a bunch of code.3@polyzen Alright.  Closed.jrmuizelJeff Muizelaar01/27/18 08:55:46 PM"Update core-text

This cleans up a bunch of code."1
106601/22/17 09:12:08 PMNonealacritty is slower than xterm (but uses less cpu??)"If I, for instance, do a `find /usr`, the command takes around 6 seconds to execute under alacritty but only 1 second under xterm.  However, using the `time` command, I get the following number for alacritty:

    find /usr  0.14s user 0.26s system 5% cpu 6.794 total

and for xterm:

    find /usr  0.21s user 0.35s system 42% cpu 1.318 total

What's going on here?"01/30/18 04:20:53 PMImprove Rust toolchain selectionSimplify instructions and enforce expected toolchain selection.3Closed as duplicate. Please subscribe to #125 for updates.sanmai-NLSander Maijers01/30/18 12:19:39 PM"Improve Rust toolchain selection

Simplify instructions and enforce expected toolchain selection."1
106705/24/17 05:56:51 PMNoneIf a job is running in the background, the terminal won't exit"If I do, for example, this:

    xclock & disown

and then exit, the terminal gets unresponsive and won't exit; and I have to use my WM's ""destroy"" utility to get rid of it."01/30/18 06:59:18 PMUpdate lockfile"Updated the lockfile to make sure clippy is building properly with the
latest nightly toolchain." =||= "Yes. My goggles, they do nothing.

But `join()` never returns..."chrisduerrChristian Duerr01/30/18 06:32:31 PM"Update lockfile

Updated the lockfile to make sure clippy is building properly with the
latest nightly toolchain."1
107401/24/17 04:38:40 PMEvgeny KurnevskyUse clap as cli parser."Relates to https://github.com/jwilm/alacritty/issues/287

Help output:
```
alacritty 0.1.0
GPU-accelerated terminal emulator

USAGE:
    alacritty [FLAGS] [OPTIONS]

FLAGS:
    -h, --help            Prints help information
        --print-events
        --ref-test        Generates ref test
    -V, --version         Prints version information

OPTIONS:
    -d, --dimensions <columns> <lines>    Defines the window dimensions
    -t, --title <title>                   Defines the window title [default: Alacritty]
```"02/11/18 05:50:53 PMFixed a typo in the ANSI docFixed a typo in the ANSI doc: `starting` not `staring`1This looks great; thanks for putting it together @kurnevsky!snoblenetSteven Noble02/01/18 12:55:57 AM`starting` not `staring`1
107801/22/17 09:21:22 PMEvgeny Kurnevsky"""-e command"" cli option"It would be convenient to have this option for launching console apps (tmux, mc, etc) instead of shell.12/22/18 05:16:55 PMAdd proper underline and strikethrough support"Support for strikethrough has been added by inserting and removing a
`STRIKE_THROUGH` flag on the cell.

Now all strikethrough and underline drawing is also done through the
rectangle renderer. So no glyphs are used to render underlines and
strikethrough.
The position is taken from the font metrics and should be accurate for
linux, however is not yet tested on macos.

It works by checking the underline state for each cell and then drawing
from the start until the last position whenever an underline ended. This
adds a few checks even if no underline is rendered but I was not able to
measure any significant performance impact.

Fixes jwilm/alacritty#806.
Fixes jwilm/alacritty#31.

Demo:
![](https://u.teknik.io/Nwzo3.png)

TODO:
 - [x] Account for font and glyph offsets
 - [x] Account for window padding
 - [x] Test (and potentially fix) DPI
 - [x] Refactor code and extract it into separate files
 - [x] Add Windows support"67Thanks @Elronnd. Closing as duplicate; please subscribe to the original issue for updates.chrisduerrChristian Duerr12/21/18 11:42:33 AMImplement strikeout/underline metrics for RustType1
107907/01/17 11:36:15 PMCarl-Erik KopsengMissing docs on how to get debug infoI just tried out Alacritty on macOS yesterday, and while it seemed super smooth for a while, _it hung after less than five minutes of normal cli activity with 100% cpu usage_. I tried `-h` and `--help` to find any way of capturing a log, but that was quite fruitless. I also looked for pointers on getting debug info in the README, and found nothing. The only thing I could find was an issue on debugging a segfault that mentioned building with debug symbols and executing the process with `rust-gdb`. If that is the way to go, then this should be part of the docs, to lower the noise on the issue tracker.07/15/18 01:10:33 PMAdd config for unfocused window cursor changeCurrently Alacritty changes the cursor to a hollow block shape when the window loses focus. While it's a reasonable default, some may prefer their normal configured cursor. This PR adds a config toggle for this, defaulting to using the hollow block. =||= "The issue you encountered is due to a [bug](https://github.com/tomaka/winit/issues/101) in the windowing library we depend on.

Thanks for the suggestion about adding debug instructions--will definitely add that."forellPatrycja Balik02/01/18 10:13:19 PMChange setting name to `unfocused_hollow_cursor`1
108107/01/17 10:13:50 PMJosé Luis NederInner Borders like rxvt-unicodeI like to know if there is a way to add inner borders aka padding like in rxvt-unicode or vte terminals with gtk.css.02/02/18 12:27:27 PMSupport dead keys and AltGr on macOS1"This feature was implemented a while ago. Configuration for padding is at the top level of the config file. Example:

```yaml
# Adds this many blank pixels of padding around the window
#
# Units are physical pixels; this is not DPI aware. Fractional pixels will be
# truncated.
padding:
  x: 3
  y: 3
```"mrmekonTrevor Bentley08/24/17 03:20:39 PMSupport dead keys and AltGr on macOS1
108702/07/17 03:21:09 AMNone"""insert"" key doesn't work""My keyboard has a ""Insert"" key that pastes, similar to the middle click.  Binding it has no effect, and it doesn't do anything by default."05/14/18 07:37:15 PMSet $LANG env var using languageCode, countryCode"fixes #993 

Using logic from https://github.com/gnachman/iTerm2/blob/79aff4d59fd591e7628649bcabe5f27541740bf6/sources/PTYSession.m#L1703"20I've determined that this is a keyboard problem.  Sorry about that.sodiumjoeJoe Moon05/08/18 05:28:21 PM"handle older macOS versions

add logic to fallback to `localeIdentifier` if
`currentLocale.languageCode` and `currentLocale.countryCode` are not
available."1
109206/20/17 04:12:07 PMJohannes LundbergUpdate cargo.lock for new libc"Needs cargo update for new libc version to run on FreeBSD. "11/01/18 05:23:49 PMRework cursor configuration"The cursor configuration has been reworked based on the proposal made in
jwilm/alacritty#1080. This moves the `custom_cursor_colors` into the
`culors.cursor` struct, cleans up the deserialization of primary and
cursor colors and moves all other cursor configuration in a new `cursor`
config field.

I'm proposing this as one potential implementation to improve cursor configuration.
If there are any changes desired that haven't been stated in the RFC, I'd love to
incorporate them in this PR.

This also updates all dependencies to get back on track with clippy.

This fixes #1080."6donechrisduerrChristian Duerr10/29/18 06:52:56 PM"Rename cursor to mouse

This PR initially put the `hide_cursor_when_typing` variable under
`cursor.hide_when_typing`. However this field is completely unrelated to
the cursor, but instead relates to the mouse cursor.

Since the word `cursor` is already used for the active cell in the grid
of a terminal emulator, all occurences of the word `cursor` when talking
about the mouse have been replaced with the word `mouse`.

The configuration option has also been moved to
`mouse.hide_when_typing`, to make it clear what this option is changing."1
109501/24/17 05:08:01 AMNiklas Dusenlundstd process command"This changes to use std::process::Command instead of libc::execpv. Should compile with 1.15 and newer.

* I need some help to figure out how to use slave/master fds in both child and parent.
* set_controlling_terminal is needed on ubuntu.. Should I change the comment about it only beeing needed on bsd?
* Should I store `child` globally instead of `PID`?"03/09/18 06:48:14 PMRename `faux_scrollback_lines` to `_scrolling_`"I've noticed that in the config the setting for the faux scrolling is
called `faux_scollback_lines`. I've probably got confused when writing
that PR because it should be `faux_scrolling_lines` since this has
nothing to do with a scrollback buffer.

This is just a tiny nitpick about a name I've made up myself, but I feel
like it could help making things a lot more clear in the future.

Currently both options are still available, but `faux_scrollback_lines`
has been deprecated.

This also updates all dependencies to make the travis clippy check work." =||= This is great. Thanks for implementing this!chrisduerrChristian Duerr02/05/18 07:40:14 PM"Rename `faux_scrollback_lines` to `_scrolling_`

I've noticed that in the config the setting for the faux scrolling is
called `faux_scollback_lines`. I've probably got confused when writing
that PR because it should be `faux_scrolling_lines` since this has
nothing to do with a scrollback buffer.

This is just a tiny nitpick about a name I've made up myself, but I feel
like it could help making things a lot more clear in the future.

Currently both options are still available, but `faux_scrollback_lines`
has been deprecated."1
109910/01/17 09:58:23 AMTom RegnerImplement setting of freedesktop.org EWHM _NET properties"There are certain properties specified by freedesktop.org that desktop environments rely on, but that aren't set by the window-manager -- so the client should set them itself.

Here is the list: https://specifications.freedesktop.org/wm-spec/1.3/ar01s05.html

It would be easier/possible to configure enhanced window-manager behaviour regarding alacritty if these properties were present.

Not all of the properties are necesseary, but all marked with 'the client SHOULD/COULD set' should be considered (_NET_WM_NAME, _NET_WM_PID, NET_WM_WINDOW_TYPE, ...)"02/07/18 04:53:59 PMfix fallbacks in macosfixes #10861"Sorry for the long delay -- I just now fixed up my rust setup, so that alacritty compiles again; 

My issue is fixed, xmonand interaction with alacritty works fine. Thanks al lot! alacritty is now set as my standard terminal..."sodiumjoeJoe Moon02/07/18 07:19:33 AM"fix fallbacks in macos

fixes #1086"1
110506/11/17 08:08:24 PMArtem BiryukovAdd cursor type"This PR basically will solve #171 in future because right now it's still kinda bad looking patch and I hope I'll implement everything in a right way in couple days.

What works right now:

- [x] Specifying from config file
- [x] Steady block
- [x] Steady beam
- [x] Steady underline
- [x] Fix rendering

The way it works right now is pretty hacky and I hope we will manage it with @jwilm because I don't really like how it works right now and I still have a couple of bugs so...yeah."07/21/18 06:05:15 PMSupport PixelMode::LcdVThis fixes #1039.3@FelipeMarcelino `cursor_style` is now an option you can use in the config file.yshuiChristian Duerr07/21/18 05:51:40 PMMerge branch 'master' into master1
110701/23/17 11:21:34 PMJonathan DahanBuild MacOS application bundleI was able to get a hacky version working, which I documented [on the wiki](https://github.com/jwilm/alacritty/wiki/MacOS-application-bundle), but it would be cool to bundle this in the build scripts somehow.07/15/18 01:11:20 PMPass right and middle clicks to the application2There's an active PR for this feature: #301 yshuiYuxuan Shui02/09/18 05:11:21 AMPass right and middle clicks to the application1
111201/25/17 04:50:30 PMNiklas Dusenlundadd args to alacritty config"This pull request builds on my previous pull request #347 

It implements args in the config file like this:

```yaml
shell:
  program: /bin/bash
  args:
    - --login
```"02/13/18 04:36:26 PMInstall instructions via cargo --git =||= Updated itbugabingaOliver Jan Krylow02/11/18 05:14:54 PMInstall instructions via cargo --git1
111401/30/17 03:30:47 PMJesse CookePaste uses primary copy bufferI'm open to feedback; this is my first PR for a Rust project. Thanks to @jimmycuadra for help.02/28/18 07:52:42 PMUpgrade dependencies"This patch updates `Cargo.lock` to pick up in-range updates, and bumps the `euclid` and `gl_generator` dependencies.

As a suggestion, it also includes a dependency status badge in the `README.md`. Let me know if you want to keep it!"4Awesome, thanks!srijsChristian Duerr02/28/18 07:42:17 PM"Remove dependency badge

These github badges can get very confusing very quickly. Because there
is no big gain from adding a dependency badge, it has been removed for
now, so the dependency update can quickly get merged."1
111701/25/17 12:12:28 AMDavid SandersCan't build current master (1dca5617e2c308b3c2f86d6cfa9d530d8d178885).  Experimental feature error."```
Davids-MacBook-Pro-2 ~/projects/alacritty
$ rustc --version
rustc 1.15.0-nightly (8f02c429a 2016-12-15)
Davids-MacBook-Pro-2 ~/projects/alacritty
$ cargo build --release
   Compiling serde_derive v0.8.23
   Compiling alacritty v0.1.0 (file:///Users/david/projects/alacritty)
error: the `proc-macro` crate type is experimental
  |
  = help: add #![feature(proc_macro)] to the crate attributes to enable
error: the `#[proc_macro_derive]` attribute is an experimental feature (see issue #35900)
 --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.8.23/src/lib.rs:6:1
  |
6 | #[proc_macro_derive(Serialize, attributes(serde))]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: add #![feature(proc_macro)] to the crate attributes to enable
error: the `#[proc_macro_derive]` attribute is an experimental feature (see issue #35900)
  --> /Users/david/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.8.23/src/lib.rs:14:1
   |
14 | #[proc_macro_derive(Deserialize, attributes(serde))]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: add #![feature(proc_macro)] to the crate attributes to enable
error: aborting due to 2 previous errors
Build failed, waiting for other jobs to finish...
error: Could not compile `serde_derive`.
To learn more, run the command again with --verbose.
Davids-MacBook-Pro-2 ~/projects/alacritty
$
```"02/13/18 04:20:58 PMAdd info about default configuration for macOSUpdated README.md to include information for default macOS configuration file: `alacritty_macos.yml`5"~~Having this issue while trying to [build on Arch](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=alacritty-git) with Rust 1.15.~~

rustc 1.15.0 (10893a9a3 2017-01-19)"mesaugatSaugat Acharya02/13/18 04:51:39 AMAdd info about default configuration for macOS1
111807/01/17 11:33:59 PMJohannes LundbergImplement xkbcommon stuff for Wayland"Hey

I really want to get this up and running on Wayland. What it's missing to run with newer glutin that supports Wayland is implementing key event handling using xkbcommon as described here: https://xkbcommon.org/doc/current/md_doc_quick-guide.html

Do you have any plan for this yet?  I'm not sure but I guess that won't be done in glutin since they only forward key events from Wayland as is so it's up to alacritty to keep a state of modifiers, etc. 

I can give an initial implementation a shot, unless you have some other plans or info I don't know about. "03/10/18 02:04:32 AMAdd centos missing dependencyCentOS was missing the development tools dependency to build alacritty.2At this point, this is a duplicate of #234.ashwinathashwinath02/14/18 01:28:47 PMAdd centos missing dependency1
112301/28/17 08:25:58 PMNiklas DusenlundAdd cli -e optionI've added support for -e option and done some minor fixes to the config file I forgot in the last PR.02/28/18 08:33:30 PMUpdate dependencyThis patch updates `arraydeque` dependency to v0.4.1. It removes indirect dependency of `odd` and `nodrop`, and it also reduced one cell memory usage. 5This looks great; thanks again!andylokandyChristian Duerr02/28/18 07:54:51 PMMerge branch 'master' into master1
112601/26/17 04:43:55 PMJoe WilmOptimize glyph cache access"Loading a glyph from the cache is a very hot operation in the renderer.
The original implementation would first check if a glyph was loaded and
then call `get()` which would have to search a second time. This showed
up as a very slow point in profiles.

This patch addresses glyph cache access in two ways: by using a faster
hasher optimized for small keys (fnv), and by using the entry API for
fetching a cached glyph. The `fnv` hasher is faster than the default and
is very efficient for small keys. Using the entry API on the HashMap
means only 1 lookup instead of two. The entry API has a downside where
the key needs to get cloned on fetches.

Reducing the GlyphKey width to 64-bits helps in both areas. Copying an
8-byte wide type is very cheap and thus limits downside of the entry
API. The small width also helps with the hasher performance.

Over all, this patch reduced typical render times by several hundred
microseconds on a 2013 MacBook Pro with a full screen terminal full of
text."06/19/18 09:27:48 PMChanged green implementation to use the macro =||= This looks great; thanks again!asodermanAlex Soderman02/22/18 02:29:03 PMChanged green implementation to use the macro1
113008/01/20 01:44:45 AMCasey RodarmorPublish to crates.io"Things that need to happen before alacritty can be published to crates.io:

- [x] publish `font` subcrate to crates.io
- [x] publish `copypasta` subcrate to crates.io
- [x] Get back on main glutin tree"02/28/18 02:57:21 AMFix heading for NixOS/NixpkgsThe level of heading were one to high. =||= You can now install from crates.io using `cargo install alacritty`.MindToothMindTooth02/27/18 01:33:20 PM"Fix heading for NixOS/Nixpkgs

The level of heading were one to high."1
113101/30/17 08:20:09 AMCasey RodarmorAllow a relative path for the shell configuration option"It would be nice to allow the shell configuration option to take a binary name instead of an absolute path.

I have alacritty use tmux as the default shell, but tmux is located in different places on different systems, so it would be nice to be able to do:

```
shell:
    program: tmux
```

and have it just work.

I'm willing to write a PR for this feature if it sounds good. Let me know!"03/23/18 05:20:36 PMFix typoAlso, made the the FAQ section look a bit better.3Thanks for following up and closing the issue.mesaugatSaugat Acharya02/28/18 03:48:37 AMFix typo1
113302/10/17 05:32:39 PMCasey RodarmorReport line, column, and ideally property name in config file error messages"Currently they look like the following:

`problem with config: Custom(""Invalid type. Expected `Str`"")`

It would be nice if they gave the line, column number, and property path (a.b.c)"03/07/18 09:34:06 PMAdd shell completions and manpage"This adds basic completions for `bash` and `zsh` to make exploration and frequent usage of alacritty's flags and options a bit easier.

The information from the README and `--help` has also been used to create this manpage:

![](https://u.teknik.io/MFvHr.png)"2"I opened #403 to also include the path to the errors.

> font.use_thin_strokes: invalid type: string ""tru"", expected a boolean at line 51 column 21"chrisduerrChristian Duerr03/03/18 04:13:16 PM"Update readme with manpage and completions

Added the install instructions for the manpage and completions to the
README.md.

Also tweaked the current readme a slight bit because the build section
was structured in a slightly confusing way."1
113608/01/19 04:59:14 AMArunav SanyalByobu shortcuts stop working"Terminal emulator : Alacritty
Terminal multiplexer : byobu
System : Mac OS X El Capitan

Hi

I just downloaded and installed alacritty. The byobu shortcuts for creating and deleting shortcuts was fine for a good hour before it stopped working unexpectedly. There is absolutely no information on stdout or anywhere in logs. Please help. 

P.S : Said shortcuts work fine on both iterm2 and terminal.app. I was under the impression that alacritty's SLA was ""just works multiplexer supporter"". "03/04/18 10:40:15 PMRemove all instances of unwrap() from config"Unwrapping inside the config file parsing can lead to some issues that
prevent us from falling back to a default configuration file.

One instance of that issue was mentioned in #1135.

Now all instances of `unwrap()` have been removed and replaced with
proper error handling. This will make the config more robust and
prevents live reload from silently breaking while alacritty is running." =||= "Thanks for the pointer! The problem I mentioned looks like a different issue indeed.

As for this one, I can't reproduce it. I use byobu with alacritty on a regular basis, and some terminal windows stay open for days. I've never seen the behavior described above."chrisduerrChristian Duerr03/04/18 09:05:44 PM"Fix clippy issues

Clippy added an additonal lint which complains about `MyStruct { field:
field }`.

These issues have been fixed, except for some false-positives and issues
in external macros which will probably be fixed with future updates."1
114102/10/17 05:29:24 PMArunav SanyalHomebrew packaging?Is it too unstable for a homebrew build ? 03/08/18 08:54:48 PMFix SGR mouse reporting, report middle and right mouse and report modifiers"There was an issue with mouse clicks not working inside of htop which
was caused by incorrect SGR mouse reporting.

With normal mouse reporting the button codes 0/1/2 are used to indicate
which button has been pressed and button code 3 is used to indicate that
any button was released.

However in SGR mode the button codes are always 0/1/2 even when the
mouse is released (this is instead indicated through m/M at the end).

Alacritty was sending button code 3 whenever the mouse has been released
even in SGR mode, which is incorrect.
This has been fixed by only overwriting the button code on release
inside the normal mouse handling and always passing the exact button
code for mouse handling in general.

There were also a few inconsistencies with xterm.
In xterm before any mouse interaction is allowed, the normal mouse flag
always has to be set. If only SGR or MOUSE_MOTION is enabled, without
the normal mouse mode, nothing should happen.
When an application enables multiple things at once ([1006, 1000]), xterm
also enables both, alacritty only attempts to enable the first and uses
the second one as fallback.

Alacritty now adds all modes in the args array whith the 'h' flag and
removes all modes inside the array with the 'l' flag.
It also doesn't do anything with mouse motion or sgr mouse unless the
normal mouse support is also enabled.

This fixes #1142."7See #80chrisduerrChristian Duerr03/08/18 06:07:04 PM"Move modifiers into `mouse_report`

Applying the modifier offsets to the button outside of the `normal_` and
`sgr_` mouse reports inside the `mouse_report` method to reduce code
duplication."1
114706/18/18 05:29:39 PMArunav SanyalMaximize button on alacritty does not work in MacOSXPressing maximize does not resize and fill screen. I have to manually drag and resize it. 09/17/18 03:15:22 PMScrollback"_Warning: this is under development, is missing several features, and has a number of known bugs. The progress of this feature is being tracked under the [Scrollback](https://github.com/jwilm/alacritty/projects/2) project which captures all known issues and missing functionality (to be populated after filing this PR)._

## Motivation

A while ago [I mentioned] that I had an alternative implementation of scrollback that I was working on, and here it is! First of all, some explanation of why an alternative implementation was needed in the first place is warranted. There are two main reasons,

* Performance
* Maintainability

Regarding performance, I've written a small tool, [vtebench], for testing certain performance characteristics of terminals that have a big impact on users. From the original scrollback thread, there were some benchmarks recorded which suffered under that implementation. Without diving into details, they are all resolved in this branch. To see for yourself, try running

```
time vtebench -h $(tput lines) -w $(tput cols) -b 10000000 scrolling-in-region
```

on master, this PR, and the original scrollback PR. There are some other benchmarks built into the tool that can be seen with `vtebench --help`. `scrolling-in-region` just happens to show the biggest disparity.

On the topic of maintainability, this is from the perspective of a maintainer who will be supporting this code for who knows how long into the future. Scrollback fundamentally changes how storage is implemented in the terminal, how updates work, and introduces the need for transformations between ""visible screen space"" and ""storage space"" or ""buffer space"". To help ensure we can continue to grow the project, I want to be intimately familiar with these parts of the code base.

The work @neon64 did was excellent, and the number of people I've seen on the internet claiming they use that branch every day is a testament to that. I am certainly not saying their code is unmaintainable; it's just not the way I thought about the problem, and I didn't know how to think about the problem until playing around with several approaches myself.

I am very thankful for all the work @neon64 did, and I intend to recognize that work  in a number of ways:

1. The [bounty] for scrollback should be awarded to them after this PR lands. The only reason they haven't already received it is because I've been playing around with this alternative implementation instead of landing theirs
2. Add a _Special Thanks_ section in several highly visible places. This will be a way to recognize not only @neon64 for this work but several other contributors who have had an outsized impact on the project.
    * The project README
    * The Alacritty website once it launches (does not yet exist)
    * The `--help` text
    * The `man` page.

## Approach

The approach here starts before ever considering scrollback. There were some improvements to be made in the `Grid` implementation along with cleanup, and we needed a storage layer which could support fast scrolling operations.

The new storage layer is still based on a `Vec`, but it's been abstracted behind a `struct Storage<T>` which only allows certain operations on the `Vec`. Critically, it's been optimized to make scrolling a simple addition or subtraction to an offset. In this way, the `Vec` became a circular buffer, and scrolling becomes very cheap.

There's also a new optimization with _scrolling regions_. These regions are a VT feature which fix certain _lines_ in place while allowing others to scroll; classic examples of this are the colored bar at the bottom of a `tmux` screen, or the status bar at the bottom of `vim`. The optimization here is that we can still implement scrolling as a rotation, and then we just need to swap the non-""scrolling"" lines back into their correct location.

The _scrolling region_ optimization was inspired by a request on #1000. @maximbaz was asking for the ability to ""use tmux and native scrolling"" at the same time such that a maximized tmux pane would simply have output move into the native buffer. There's a gif in the ticket for additional clarity. The nice thing about this feature is it actually leads to a very efficient implementation!

In addition to all of the tickets in the project linked at the top, there's a bit more work to do around finalizing transformations between ""screen"" and ""buffer"" space. I realized that this could be cleaned up significantly while updating selections to work with scrolling.

Finally, one really important piece to me was that the `Term` implementation doesn't have to think about conversions to/from buffer coordinates. That should all be handled inside `Grid`; said another way, `Grid` should continue to be indexable by `Line` and `Column` and do a transformation internally for those cases. This keeps the `Term` impl much simpler.

## Benchmarks

It's getting late and I still need to file tickets for outstanding issues here, but I just want to add that this branch is, for scrolling operations, about 30% faster than master is today in my testing.

Closes #124
Closes #657
Closes #1000 
Resolves #836 
Resolves #885 
Resolves #837 
Resolves #923 
Resolves #1022

[I mentioned]: https://github.com/jwilm/alacritty/pull/657#issuecomment-355662163
[vtebench]: https://github.com/jwilm/vtebench/
[bounty]: https://www.bountysource.com/issues/52061265-complete-implementation-of-scrollback"32"@francesca64 Thanks for the heads-up! Great work!

If anyone is still experiencing this problem, please let me know and I'll reopen this issue."jwilmJoe Wilm09/17/18 02:56:58 PMBump version in CHANGELOG1
115501/26/17 03:30:54 PMArunav SanyalLack of stdout information on programs ran."There is a lack of information about info posted, other than resize operations and multiplexers ran. 

Here is all the stdout info from one hour of usage:-

    [unhandled osc_dispatch]: [['1',],['.','.','c','/','A','B','A','L','o','a','d','T','e','s','t',],]
    num_cols, num_lines = 182, 57
    num_cols, num_lines = 80, 24
    num_cols, num_lines = 182, 50
    [unhandled osc_dispatch]: [['1',],['b','y','o','b','u',],]
    [Unhandled CSI] action='l', args=[1005], intermediates=[63]
    num_cols, num_lines = 182, 57
    num_cols, num_lines = 182, 50
    num_cols, num_lines = 182, 57
    num_cols, num_lines = 182, 50
    num_cols, num_lines = 182, 57
    num_cols, num_lines = 182, 50

In an ideal world I should see operations done. Is there a different logging level I need to init with so get full access to operation logs. If so would someone mind posting it here?"03/09/18 05:54:47 PMAdd caret key"This fixes #680

It is rather old but it took some time for the winit changes to get into master + get the version bump into glutin.

Ref: https://github.com/tomaka/winit/pull/380

It allows on my germany keyboard to enter ^ (Caret) with the given configuration:

```
  - { key: Caret,                         chars: ""\x5e""                          }
```

Mainly created to use VIM like I used to :-D"1Closing this unless you are asking for something different than what's in the extra verbosity levels.schumacher-mMichael Schumacher01/04/18 06:58:19 AMAdd caret key1
116201/26/17 03:32:54 PMNiklas Dusenlundfix config file03/09/18 05:51:29 PMFix benchmarksThis fixes #1161.1Great; thanks!chrisduerrChristian Duerr03/09/18 01:42:11 PMFix benchmarks1
117601/29/17 07:11:02 PMOtis SuttonRendering random square glyph on Ubuntu 16.10"I have a terminal theme that is working fine on Xfce Terminal but rendering with an odd square glyph on alacritty like so:


Xfce Terminal:
![selection_002](https://cloud.githubusercontent.com/assets/2978850/22364949/c0002b0e-e4d9-11e6-870e-bc69e2c46b2a.png)

Alacritty Terminal:
![selection_003](https://cloud.githubusercontent.com/assets/2978850/22364956/d0cfa8b0-e4d9-11e6-9975-2fe34e4fdbba.png)

Please let me know if this is caused by something else I am assuming it is alacritty simply because it works in another terminal but my knowledge of fonts/glyphs is pretty limited.

Cheers."05/06/18 06:17:04 PMWrite macro for serde fallbacks"This adds a macro which makes it easy to implement a custom deserializer
for a specific field in the config.

Applying this deserializer and the default value it provides will always
make sure that this value has a valid fallback value.

This also makes a small change to the way the `mouse._*click` fields are
deserialized, because the `threshold` did not have a default value, it
leads to a complete config fallback in the current master.
However by providing 300 as the default, it is possible to fall back to
this value and make sure that the rest of the config is not ignored.

This is a proposal which should make custom deserializers a little more
straight-forward in the future, this fixes #1166."2Closed in favour of [#306](https://github.com/jwilm/alacritty/issues/306).chrisduerrChristian Duerr03/11/18 06:53:56 PM"Write macro for serde fallbacks

This adds a macro which makes it easy to implement a custom deserializer
for a specific field in the config.

Applying this deserializer and the default value it provides will always
make sure that this value has a valid fallback value.

This also makes a small change to the way the `mouse._*click` fields are
deserialized, because the `threshold` did not have a default value, it
leads to a complete config fallback in the current master.
However by providing 300 as the default, it is possible to fall back to
this value and make sure that the rest of the config is not ignored.

This is a proposal which should make custom deserializers a little more
straight-forward in the future, this fixes #1166."1
117802/10/17 06:04:16 PMJason GauciMulti-Tab / Multi-Window Support"I would like to use Alacritty but within ssh i run tmux in control mode:

`tmux -CC`

This way I can have multiple tabs and windows and keep their state across reboots.  Is adding tab/window support a priority?"03/13/18 06:11:57 AMEnable SRGB (fix #921)"This fixes #921, the error `Error creating GL context; Couldn't find any pixel format that matches the criterias.`.

I'm not sure whether this is right and ideal solution, but [this change actually fix the issue for some people](https://github.com/jwilm/alacritty/issues/921#issuecomment-372295759) including me."1"Ok thanks. I use tmux with control mode (tmux -CC) where it uses the terminal tabs/windows/scrollbars and I like it too much to give it up. 
Best of luck with the project. "lo48576YOSHIOKA Takuma03/12/18 12:27:16 PM"Enable SRGB

This will solve the error ""Error creating GL context; Couldn't find any
pixel format that matches the criterias.""

(I think this maybe a problem of mesa (18.0.0_rc4), but I'm not sure.

See the thread <https://mastodon.cardina1.red/@lo48576/99670278063669603>
for my debug log."1
117901/29/17 01:54:47 AMSoni L.FreeBSD is not linuxWhy's FreeBSD listed as a linux distro on the README?03/13/18 06:06:06 AMAdd fish shell completions"- [x] `-d --dimensions`

- [x] `-e command`

- [x] add installation instructions to `README`."3"Sorry, I originally intended this as a sort of joke issue.

It's kind of a meme to say FreeBSD is a linux distro - the ""not linux"" distro. Sorry for sounding confrontational."jc00keJesse Cooke03/13/18 01:20:45 AMAdd completion install instructions for Fish1
118102/08/17 05:04:19 AMXiaoyu Yin[#30] Semantic / Smart Selection"I'm very new to Rust, so if there is a better way to do this, let me know!

This PR is to implement semantic (or smart) selection through double, or triple click events (#30).

TODOs:
 - [x] Implement Double Click handler
 - [x] Implement Triple Click handler
 - [x] Implement Semantic selection
 - [x] Implement `BidrectionalIterator`
 - [x] Add configurable definitions for selection stopping characters
 - [x] Add configurable double (and triple) click threshold
 - [x] Add unit tests for semantic selection
 - [x] Add unit tests for double / triple click
 - [x] Add unit tests for `BidirectionalIterator` / `GridIterator`"03/13/18 06:07:40 AMPrevent negative cell dimensions"Prevent the cell dimensions from going below 1, this bug resulted in
allocation of large amounts of memory in the scrollback PR but is also
present on master.

Currently the approach is to just `panic!`, however an `eprintln!` and
`exit` could be an alternative too. I don't think it's realistic to
check this at startup and it should have no performance impact since the
failing method is only called once at startup.

To make it a bit more clear what kind of values are accepted, the
datatypes of offsets and paddings have also been changed so that these
don't accept floats anymore and padding can never be negative.

This should allow us to be a bit more strict with the config to make
sure that errors are printed when invalid values are specified (like
negative padding).

This fixes #1167." =||= Thanks! Going to wait until travis is green and then I'll merge.chrisduerrChristian Duerr03/12/18 10:35:11 PM"Prevent negative cell dimensions

Prevent the cell dimensions from going below 1, this bug resulted in
allocation of large amounts of memory in the scrollback PR but is also
present on master.

Currently the approach is to just `panic!`, however an `eprintln!` and
`exit` could be an alternative too. I don't think it's realistic to
check this at startup and it should have no performance impact since the
failing method is only called once at startup.

To make it a bit more clear what kind of values are accepted, the
datatypes of offsets and paddings have also been changed so that these
don't accept floats anymore and padding can never be negative.

This should allow us to be a bit more strict with the config to make
sure that errors are printed when invalid values are specified (like
negative padding).

This fixes #1167."1
118302/10/17 05:29:40 PMSolomon Choinabuild failure" Running `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg 'feature=""err-println""' --cfg 'feature=""default""' -C metadata=ba77e7d3a17f56b2 -C extra-filename=-ba77e7d3a17f56b2 --out-dir /home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps -L dependency=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps --extern fnv=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libfnv-557bfb60b466380f.rlib --extern errno=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liberrno-bd87a5b2fb49c6b0.rlib --extern libc=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblibc-8d751f39a7380bf8.rlib --extern glutin=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libglutin-82c337e2a6c98fde.rlib --extern serde_json=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_json-eea150fe898f260b.rlib --extern copypasta=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libcopypasta-b74e6e5f9c8ba141.rlib --extern vte=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libvte-5b6ff9942b6f6079.rlib --extern serde=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde-87a79748e04d6dbe.rlib --extern parking_lot=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libparking_lot-e9d443ebed0629da.rlib --extern log=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblog-63006d84b4444419.rlib --extern bitflags=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libbitflags-75fc9619122ee22e.rlib --extern lazy_static=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblazy_static-3b2d015b4349e676.rlib --extern serde_yaml=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_yaml-be418d3ff0d0e18f.rlib --extern mio=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libmio-878a6eff7e53a112.rlib --extern serde_derive=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_derive-1f6e4fbcd435203a.so --extern xdg=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libxdg-7b6286b4c94e9a36.rlib --extern notify=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libnotify-254fa238b4fb97b7.rlib --extern cgmath=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libcgmath-7964b7acee178b01.rlib --extern clap=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libclap-393e575a2885d525.rlib --extern font=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libfont-b1e09a02a029609c.rlib -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib`
error[E0277]: the trait bound `grid::Grid<term::cell::Cell>: serde::ser::Serialize` is not satisfied
   --> src/event.rs:121:43
    |
121 |                     let serialized_grid = json::to_string(&grid)
    |                                           ^^^^^^^^^^^^^^^ the trait `serde::ser::Serialize` is not implemented for `grid::Grid<term::cell::Cell>`
    |
    = note: required because of the requirements on the impl of `serde::ser::Serialize` for `&grid::Grid<term::cell::Cell>`
    = note: required by `serde_json::to_string`

error[E0277]: the trait bound `term::SizeInfo: serde::ser::Serialize` is not satisfied
   --> src/event.rs:124:43
    |
124 |                     let serialized_size = json::to_string(processor.ctx.terminal.size_info())
    |                                           ^^^^^^^^^^^^^^^ the trait `serde::ser::Serialize` is not implemented for `term::SizeInfo`
    |
    = note: required by `serde_json::to_string`

error: aborting due to 2 previous errors

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg feature=""err-println"" --cfg feature=""default"" -C metadata=ba77e7d3a17f56b2 -C extra-filename=-ba77e7d3a17f56b2 --out-dir /home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps -L dependency=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps --extern fnv=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libfnv-557bfb60b466380f.rlib --extern errno=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liberrno-bd87a5b2fb49c6b0.rlib --extern libc=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblibc-8d751f39a7380bf8.rlib --extern glutin=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libglutin-82c337e2a6c98fde.rlib --extern serde_json=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_json-eea150fe898f260b.rlib --extern copypasta=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libcopypasta-b74e6e5f9c8ba141.rlib --extern vte=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libvte-5b6ff9942b6f6079.rlib --extern serde=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde-87a79748e04d6dbe.rlib --extern parking_lot=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libparking_lot-e9d443ebed0629da.rlib --extern log=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblog-63006d84b4444419.rlib --extern bitflags=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libbitflags-75fc9619122ee22e.rlib --extern lazy_static=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/liblazy_static-3b2d015b4349e676.rlib --extern serde_yaml=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_yaml-be418d3ff0d0e18f.rlib --extern mio=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libmio-878a6eff7e53a112.rlib --extern serde_derive=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libserde_derive-1f6e4fbcd435203a.so --extern xdg=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libxdg-7b6286b4c94e9a36.rlib --extern notify=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libnotify-254fa238b4fb97b7.rlib --extern cgmath=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libcgmath-7964b7acee178b01.rlib --extern clap=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libclap-393e575a2885d525.rlib --extern font=/home/solaraquarion/.cache/pacaur/alacritty-git/src/alacritty-git/target/release/deps/libfont-b1e09a02a029609c.rlib -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib -L native=/usr/lib` (exit code: 101)
==> ERROR: A failure occurred in build()."03/13/18 11:43:16 PMTry to create window with different SRGB config when failed (solve #921, #1178)"By this patch, alacritty will try to create window with SRGB enabled at first,
but when creation failed, retry with SRGB disabled.

This may truly solve #921, and issue caused by #1178: <https://github.com/jwilm/alacritty/issues/921#issuecomment-372619121>."3Thanks for the updatelo48576YOSHIOKA Takuma03/13/18 11:16:01 AM"Try to create window with different SRGB config when failed

This may truly solve #921 (and issue caused by #1178)
<https://github.com/jwilm/alacritty/issues/921#issuecomment-372619121>."1
118802/07/17 04:45:20 AMShane GibbsSpecify default dimensions in `alacritty.yml`"Just an idea. This is something I usually like to set for my terminals.

It wasn't immediately obvious to me how to set the default values for this. I dug into the code to find it was set from the cli. Setting the `-d` option does work. As far as I can tell, this requires updating `Alacritty.desktop` to set.

I think this is a common option and it would be nice to have the default values set in `alacritty.yml`, but still allow the cli args to supersede. I imagine this should be easy, I can take a pass at this if needed.

Thank you and great work!!

Shane"11/17/18 02:39:14 PMPrint config error warning on startup"This change adds an error message at the bottom of the screen which will
be displayed when the config file contains any errors.

Currently deprecation warnings are unchanged but it would be possible to
add these too (maybe in yellow?) if it is desired.

The method for rendering text has been changed to always render at the
bottom of the terminal, this seems like a more reliable way of doing
this and it shouldn't cause any issues because under normal use, nothing
should be displayed.

I'd say this is still a bit rough around the edges so feedback is
welcome, maybe some things could be streamlined?
Currently if the terminal is not wide enough, nothing will be displayed,
maybe we should display the message but cut off? Not sure how important
this is because it would probably be fine to not display anything in
small terminals.

All errors are written to `/tmp/alacritty.log`, nothing is written to
stderr anymore, we could do both but I think it should not be necessary
to write anything to stderr anymore.

This fixes #1143."18🎉 chrisduerrChristian Duerr11/17/18 12:11:55 AMFix remaining style issues1
118901/30/17 01:29:57 AMJoe WilmUpdate to serde 0.9 and serde-yaml 0.6.03/27/18 04:58:20 PMadd freeBSD support on the top6"The serde_yaml downloads graph on crates.io is amusing. Can you spot the Alacritty announcement?

---

![selection_019](https://cloud.githubusercontent.com/assets/1940490/22454896/f98aadb6-e73d-11e6-934f-0c293f912214.png)
"ShalokShalomMatthiasSchuster03/16/18 09:10:01 AMadd freeBSD on the top1
119005/29/18 04:50:51 PMNoneGlutin reports wrong KeyboardInput for modifier keys"I don't know if this is a general problem with glutin or specific to the fork used in Alacritty: The KeyboardInput-events only report `LAlt` / `LControl` / `LWin`, even if the right modifier key is pressed. Since some special characters like `|` can only be reached via the right modifier keys on my keyboard-layout, I can't produce characters like `|` in Alacritty.

Running Darwin Kernel Version 16.3.0 with glutin 0.6.1 (git+https://github.com/jwilm/glutin?rev=af7fe340bd4a2af53ea521defcb4f377cdc588cf)"".


> glutin event: KeyboardInput(Released, 62, Some(LControl), , None)
> glutin event: KeyboardInput(Pressed, 61, Some(LAlt), , None)
> glutin event: KeyboardInput(Pressed, 54, Some(LWin), , None)"11/11/18 08:24:42 PMCenter the grid inside the window"Currently alacritty always puts the grid at the top-left position of the
window. The only distance to the top-left window border is set by the
padding in the config.

However the grid always has a fixed size, and if a cell doesn't
completely fit the screen anymore, the padding at the bottom right
window corner can be significantly bigger than the padding at the top
left.

To fix this whenever there is more space left and there would usually be
a bigger padding at the bottom right, the space is now split up and
added to the padding.

This should always center the grid inside the window and make sure all
borders have the same padding from the text area.

This screenshot shows how it has been until now:
![Before](https://u.teknik.io/kRJwg.png)

Here is how it looks now:
![After](https://u.teknik.io/m4puV.png)

This fixes #1065.

This also solves a few minor clippy issues."7No problem. There's still some Linux compose/IME issues dangling too.chrisduerrChristian Duerr11/11/18 06:38:58 PM"Center the grid inside the window

Currently alacritty always puts the grid at the top-left position of the
window. The only distance to the top-left window border is set by the
padding in the config.

However the grid always has a fixed size, and if a cell doesn't
completely fit the screen anymore, the padding at the bottom right
window corner can be significantly bigger than the padding at the top
left.

To fix this whenever there is more space left and there would usually be
a bigger padding at the bottom right, the space is now split up and
added to the padding.

This should always center the grid inside the window and make sure all
borders have the same padding from the text area.

This screenshot shows how it has been until now:
![Before](https://u.teknik.io/kRJwg.png)

Here is how it looks now:
![After](https://u.teknik.io/m4puV.png)

This fixes #1065."1
120201/30/17 06:57:37 PMJesse CookeAdd colors for Solarized Light03/23/18 01:10:28 AMExplicitly call log::set_max_level (Closes: #1201)"For some reason, log 0.4 requires that we explicitly set the log level
with log::set_max_level or it defaults to Off.  The documentation
isn't clear but suggests we must do this in addition to doing the
filtration ourselves in the Log impl."1Cool, I wasn't aware of the wiki additions. I'll go take a look.hliebermanHarlan Lieberman-Berg03/23/18 01:06:12 AM"Explicitly call log::set_max_level (Closes: #1201)

For some reason, log 0.4 requires that we explicitly set the log level
with log::set_max_level or it defaults to Off.  The documentation
isn't clear but suggests we must do this in addition to doing the
filtration ourselves in the Log impl."1
121402/06/17 07:44:04 PMTuomas SiipolaSend mouse wheel commands only if they're supported"This seems to work for me. However should other mouse modes also be checked?

Fixes #48"03/30/18 02:47:40 AMFixes typos in READMEFixes a typo in the name of FreeBSD, and reorders the OS support list alphabetically.1Landed in 6cc6086lovesegfaultBernardo Meurer03/30/18 02:32:57 AM"Oxford comma

Added an Oxford comma to the OS support list"1
121602/02/17 05:07:02 PMJoe WilmImplement save/restore cursor position"This passes the vttest for save and restore cursor position. The
implementation was done according to:

    http://www.vt100.net/docs/vt510-rm/DECSC.html

As of yet, there are a few things not supported by the terminal which
should otherwise be saved/restored.

![image](https://cloud.githubusercontent.com/assets/4285147/22519473/3999ce1e-e865-11e6-8e3e-e429feff6b4d.png)

Supercedes #319 "07/21/18 05:41:40 PMNumpadEnter sends newline on MacOS1Travis has a backlog or something and tests pass locallyapiarianAleksandr Pasechnik03/30/18 01:27:22 PMNumpadEnter sends newline on MacOS1
121802/06/17 07:47:03 PMTuomas SiipolaFix rendering of underline spanning multiple words"Before this change there were gaps between words. To fix this underline is
rendering also on those empty cells."05/05/18 03:10:59 PMDon't paste selection when in mouse mode"When the mouse mode is set using either 1000h, 1002h or 1003h, the
selection should not be pasted when hitting the middle mouse button,
because it is job of the application to handle this when mouse mode is
enabled.

This has been solved by checking for the current mouse modes whenever
the `PasteSelection` binding is invoked.

This fixes #1215." =||= Landed in 9d44526bf9ac8f20b090cc8a9279e527ec07d189chrisduerrChristian Duerr03/31/18 12:16:05 PM"Don't paste selection when in mouse mode

When the mouse mode is set using either 1000h, 1002h or 1003h, the
selection should not be pasted when hitting the middle mouse button,
because it is job of the application to handle this when mouse mode is
enabled.

This has been solved by checking for the current mouse modes whenever
the `PasteSelection` binding is invoked.

This fixes #1215."1
121905/06/17 03:53:14 PMTuomas SiipolaAdd terminal window padding support"- [x] Basic support
- [x] Add configuration
- [x] Fix underflow error

Fixes #343"07/01/18 02:22:57 PMREADME: opensuse package availableadds `zypper` install line6Closing this in favor of #543.avindraAvindra Goolcharan03/31/18 05:36:44 PM"README: opensuse package available

adds `zypper` install line"1
122602/02/17 05:25:10 PMJoe WilmDecouple input processing from Term"Should make input processing much more easily tested. Going to clean this up a bit in the morning before merging.

cc @xyin96
"04/14/18 05:17:51 PMalacritty: add support for OpenBSD."This commit expands the conditional compilation directives to support
building Alacritty for OpenBSD.  The build succeeds, and Alacritty runs
without issue once https://github.com/rust-lang/libc/pull/957 has been
merged and added to a versioned release.

This has been tested on the recently-released OpenBSD 6.3 on amd64 with
rustc 1.24.0 from its standard ports tree.

Oligatory screenshot: https://twitter.com/khanreaper/status/981073170580017153"1Yeah, it looks good. Thanks! 👍 matttproudMatt T. Proud04/03/18 06:52:41 AM"alacritty: add support for OpenBSD.

This commit expands the conditional compilation directives to support
building Alacritty for OpenBSD.  The build succeeds, and Alacritty runs
without issue once https://github.com/rust-lang/libc/pull/957 has been
merged and added to a versioned libc release.

This has been tested on the recently-released OpenBSD 6.3 on amd64 with
rustc 1.24.0 from its standard ports tree."1
123302/09/17 07:49:47 PMOliver FordPrints `[?6c` at xonsh prompt, which breaks vi-mode"Alacritty seems to do something bizarre to Xonsh when running with 'vi-mode' navigation: after every command all but the last line is cleared (the last line now being at the top) and it then searches history (`I-search backward`) for the characters `6c`.

The only occurrence of `6c` in the source is [here](https://github.com/jwilm/alacritty/blob/40d7c0c4344022636f27fac89c4253140b8019fc/src/term/mod.rs#L904).

If I remove `""VI_MODE"": true` (or set to `false`) from my `$XDG_CONFIG_DIR/xonsh/config.json` then I instead see `[?6c` at the prompt.

To reproduce characters at prompt, just install xonsh/xonsh and run it in alacritty.

To reproduce wild vi, find the automatically created `config.json` (either in `$HOME/.xonsh`, or XDG as above) and add `""VI_MODE"": true` to the JSON object."10/04/18 12:06:35 AMImprove smart select to include :// by default"Hiya, I'm trying to improve on #368 by fixing part of #1210 and let double-click select include things that look like URLs by default (ie. include `://`). Otherwise, the `:` character breaks the selection by default which is frustrating.

I'm also very new to Rust, so please be gentle with the review. I'm happy to iterate on it.

I believe there is still room for improvement (see #1210 for a more complete outline) but I'm using this patch locally which has been a very convenient improvement and a good first step."14Closing in favour of #72.shazowAndrey Petrov04/05/18 10:55:45 PMTests1
124102/03/17 05:40:40 AMJoe WilmFix bug introduced with save/restore patch"Switching between main and alt grids should no longer clear the main
grid."09/20/18 03:24:27 PMchanges `decorations` config from a `bool` to an `enum`:"* update glutin dependency to 0.14
* full|transparent|buttonless|none
* `transparent` and `buttonless` are macos only (fallback to `default`
  in others)
* `bool`s in config show a deprecation message and fallback to `default`

fixes #686
fixes #1461 "30Closing in favour of #72.sodiumjoeJoe Wilm09/20/18 03:18:09 PMUpdate CHANGELOG.md1
124302/03/17 04:11:20 PMJoe WilmAlacritty now compiles on stable Rustbenchmarks still need nightly, but that's just for development.09/20/18 02:58:59 PMFix Bracketed Paste Mode when input contains end sequence.Should fix #800.6Closing in favour of #72.aereauxAidan Epstein04/12/18 07:08:20 PM"Remove \x1b instead of just the paste end sequence."1
126206/02/17 04:44:23 AMJoe WilmAUR package out of date"@quininer 

Would you mind updating the AUR package now that Alacritty builds on stable Rust?"01/13/19 09:26:01 PMEscape character is now inserted for subsequent keypresses when the A…"…lt modifier is held down

I suppose this is more of a question on reasoning than a real request for my patch to be merged, is the behavior of enforcing `self.ctx.received_count()` to be zero typical? I noticed that using Emacs in alacritty felt a little bit off, since I tried to use M-< and M-> to navigate the buffer and it would only work for the first keystroke, with any subsequent keystrokes inserting '<' into the buffer. This is the only terminal emulator I've used that does this.

To reproduce this, I would suggest running `cat` and inserting key sequences while holding the alt key.

In URxvt:
```
$ cat
^[<^[>^[<^[>^[<^[>^[<^[>
```

In alacritty:
```
$ cat
^[<><><><>
```"5tyTsarFoxChristian Duerr01/08/19 07:37:42 PMRemove dead code1
127302/03/17 08:59:19 PMDaniel M. Capellareadme: Remove stray lineNo longer needed thanks to #382.11/19/18 07:32:34 PMAdded start_maximized option in config8Thank you. :)doubleloopJakub Łuczyński05/07/18 06:43:12 PMAdded tags to gitignore1
127902/08/17 05:15:36 AMMark RobertsAdd visual bell support"Hi @jwilm,

This project is awesome 👍. I haven't written Rust before, but I wanted to try my hand at a small feature. I think this change is not quite ready, since `draw` is called lazily (so the bell will not be smooth). If you are interested in accepting this feature, perhaps you could share some tips on how to make the right changes? Commit message below.

Thanks,
Mark

***

This commit adds support for a visual bell. Although the Handler in src/ansi.rs warns ""Hopefully this is never implemented"", I wanted to give it a try. Two new config options are added, with sensible defaults:

* `visual_bell`, which defaults to `true`, and
* `visual_bell_duration`, which defaults to 150 ms.

The visual bell is modeled by VisualBell in src/display.rs. It has a method to ring the bell, `ring`, and another method, `value`. Both return the ""value"" of the bell, which ramps down from 1.0 to 0.0 at a rate set by `duration`."12/21/18 11:17:19 PMDisable live-config-reload for opacity"It is now not possible anymore to update the background opacity of
alacritty while it is running.

This is not just the removal of a feature though, there have been a lot
of issues with the `with_transparency(true)` call in the `window.rs`
module. Some of these issues are flickering on resize and alacritty
crashing on startup.

To fix these issues the transparency of alacritty is now set at startup,
if alacritty is started with opacity `1.0` the window is crated
with `.with_transparency(false)`. If the opacity is anything other than
`1.0` alacritty will function as usual, so it is possible to start
alacritty with transparency `0.99` and then change it to `0.5` at
runtime.

Even though this definitely is not a great solution, I think this should
be beneficial for most users and solve a lot of annoyances that have
been mentioned in the past.

This fixes #1268 and fixes #969."6Thanks again for all the work on this! I'll be using it. :smile: chrisduerrChristian Duerr12/10/18 11:15:14 PM"Disable live-config-reload for opacity

It is now not possible anymore to update the background opacity of
alacritty while it is running.

This is not just the removal of a feature though, there have been a lot
of issues with the `with_transparency(true)` call in the `window.rs`
module. Some of these issues are flickering on resize and alacritty
crashing on startup.

To fix these issues the transparency of alacritty is now set at startup,
if alacritty is started with opacity `1.0` the window is crated
with `.with_transparency(false)`. Otherwise transparency is disabled.

Even though this definitely is not a great solution, this should be
beneficial for most users and solve a lot of annoyances that have
been mentioned in the past.

This fixes #1268."1
128002/07/17 04:09:28 PMJoe WilmNeed bounds check for save/restore cursor04/28/18 12:36:41 AMmacOS: fixes segfault on nightlyfixes #12641Resolved in 82c9235sodiumjoeJoe Moon04/28/18 12:07:12 AM"macOS: fixes segfault on nightly

fixes #1264"1
128102/04/17 04:01:14 AMJoe WilmFix bug with restore cursor"The saved cursor position could previously end up outside of the grid if
the terminal was resized to be smaller and then calling a restore.
Restore now ensures the cursor line and column are within grid bounds."07/22/18 12:38:54 AMHide Window"This fixes #542 

This PR is based on the changed provided by @sorccu and @algesten in #542 in that the Alacritty window is hidden when handling `Action::Hide`. Additionally, I've updated the macos config to bind `Command+H` to emit `Action::Hide`.

Currently though, when the window is hidden, focus is maintained on Alacritty. I couldn't see a way to unfocus the window with glutin so I'm thinking it might be an upstream issue but I'll keep investigating. 

Tested on macOS"7"I took pictures with my phone and will upload those soon.

When I open a terminal, the problem doesn't present right away. When I resize the window, then the problems start.

Many times the cursor will not be next to the prompt, that is to the right on the same line. Rather it appears on a  blank line beneath the prompt, to the far right.

When I begin typing, pressing a key brings the cursor back to the right of the prompt, where you'd expect it.

Also, pressing enter doesn't not always execute a command. I must press enter twice.
"joshleebJosh Leeb-du Toit04/28/18 01:46:41 AMUpdate macos config with Hide key binding1
128302/11/17 06:32:39 AMNoneNo progress report in mplayer?It works fine in in xterm and gnome-terminal.  It doesn't matter what TERM is.05/01/18 05:58:54 PMFix completion install instructions for Fish on macOS (#1237)"Install completion for Fish on macOS.

This fixes #1237." =||= It seems to work as of the latest release.ji-zhouzhouji04/29/18 01:47:02 PMFix completion install instructions for Fish on macOS (#1237)1
128509/19/18 06:27:44 PMNoneScroll on resize[Here](http://0x0.st/Wqz.png)'s alacritty before being resized, and [after](https://0x0.st/Wqi.png).  [Here](https://0x0.st/Wqo.png)'s what xterm looks after being resized (the desired effect).05/02/18 03:05:02 PMadd instructions for setting as default3The original images are not available anymore, but I believe this was fixed in https://github.com/jwilm/alacritty/pull/1506.twhitbeckTim Whitbeck04/30/18 02:19:42 PMadd instructions for setting as default1
128902/07/17 04:45:18 AMAndo “Thor” Nando Configurable window dimensions"I saw #370 and decided to have a go at implementing this.

Will use a default of 80x24 cols x lines if neither config file or argument options are specified.
Argument options will override config options if specified."05/01/18 10:38:00 PMm =||= Thanks!ghostzeemz05/01/18 10:21:20 PMUpdate .travis.yml1
129010/31/19 08:11:02 PMJan BerktoldMissing default keys on OS X"I am using the latest version of alacrity ( 82c9235) on OS X 10.12.3 with a German keyboard.

Essential key combinations for special characters do not work.

Examples include;
@ (right alt + L)
| (left alt + 7)
\ (left alt + shift +7)"10/28/18 08:23:40 PMAdd more granular padding: top,right,bottom,left17Duplicate of #62, since the issue is that alt keys send special characters on macos.sodiumjoeJoe Moon05/07/18 06:53:54 AMfix tests1
130002/06/17 02:53:53 AMBrandur Leach"Add ""Quit"" action to allow exit on a Cmd-W or Cmd-Q""Adds a new ""Quit"" action and binds it to Cmd-W and Cmd-Q on Mac OS in an
attempt to make Alacritty feel more like a ""normal"" citizen of the
operating system. Alternatives like Ctrl-D are okay, but I usually want
to leave my shells nested within Tmux open even if I exit my terminal.
It's also largely selfish: I've built up muscle memory over the years
that takes my fingers to Cmd-Q first (and I suspect I'm not the only
one).

The implementation for an exit is copied from `event.rs` which notably
is already tagged with a FIXME. It seems that `tty.rs` contains a
`process_should_exit` system to help handle a `SIGCHLD`, and it's
possible that these two exit implementations should be merged together.
I could probably tackle that as my next project.

As mentioned in #218, Alacritty can't really spawn other windows right
now, so I've tied in Cmd-W as simply another synonym for quitting until
that's implemented.

One other thought: I'm not super convinced on the approach of having all
key bindings configured directly from a Yaml file and without any
defaults. You can see that even here it will be a bit of a problem
because there may be hundreds of Mac users out there who won't get this
key binding until they port it in manually or bootstrap from a fresh
version of the repository's default configuration file.

Fixes #218."11/01/18 07:35:38 PMAllow mouse pasting in mouse mode with shift"It is now possible to paste in mouse mode again by making use of the
`shift` key while pressing the mouse button reserved for PasteSelection.

This fixes #1298."14"> This will become much less of a problem once the project matures. I'm ok with the trade.

Cool. I guess there's a point where new bindings certainly become much more unusual.

> We can always improve the shutdown handling later. This seems far better than nothing.

Thanks! I'll see if I can introduce an incremental improvement there as my next minor patch."chrisduerrChristian Duerr10/27/18 06:03:46 PM"Allow mouse pasting in mouse mode with shift

It is now possible to paste in mouse mode again by making use of the
`shift` key while pressing the mouse button reserved for PasteSelection.

All mouse bindings are now also matching the modifiers in a relaxed way,
so extra modifiers are ignored."1
130402/07/17 04:08:10 PMJoe WilmFix zsh tab completeResolves #23005/11/18 11:54:21 PMPaste path into terminal when drag & dropping file"It's now possible to insert the path of a file or directory by dropping
it from the file manager into alacritty.

This fixes #1301."11"> This will become much less of a problem once the project matures. I'm ok with the trade.

Cool. I guess there's a point where new bindings certainly become much more unusual.

> We can always improve the shutdown handling later. This seems far better than nothing.

Thanks! I'll see if I can introduce an incremental improvement there as my next minor patch."chrisduerrChristian Duerr05/11/18 06:22:36 PMFix clippy lints1
130602/10/17 05:26:13 PMNoneZSH-autosuggestions not rendered"![alacritty](https://cloud.githubusercontent.com/assets/3148704/22700325/8e4f6d7a-ed5a-11e6-8e3f-2c34b89c17d5.jpeg)

The top portion shows `zsh-autosuggestions` rendered in osx' Terminal, the bottom one is rendered by alacritty. Besides the missing powerline-font, the autosuggestions `-release` is not rendered by alacritty. The cursor is at `|` as in `cargo build -|`."10/16/18 06:46:27 PMAllow the usage of scancodes in the config"This change should allow the usage of scancodes in the configuration
file.

When a VirtualKeyCode for glutin is not present, this should now allow
the user to use the scancodes instead. If the user specifiecs a key with
its scancode even though the key has a VirtualKeyCode, it should still
work.

The behavior of directly specifying a VirtualKeyCode should be unchanged
by this.

This fixes #1265." =||= Seems like a color scheme specific issue.chrisduerrChristian Duerr10/15/18 09:49:59 PMAdd change log entry1
131502/08/17 07:13:26 PMPatrick McLeanbuild failed on Gentoo"Full build output pasted below. Here are the versions of the dependencies (as far as I can tell from other distros listed)

cmake-3.7.2
freetype-2.7.1
fontconfig-2.12.1
xclip-0.13
pkgconfig-0.29.1
expat-2.2.0
```
$ cargo build --release --verbose
       Fresh crossbeam v0.2.10
       Fresh itoa v0.2.1
       Fresh byteorder v0.5.3
       Fresh bytes v0.3.0
       Fresh rustc-serialize v0.3.22
       Fresh vec_map v0.6.0
       Fresh lazy_static v0.1.16
       Fresh pkg-config v0.3.8
       Fresh libc v0.2.18
       Fresh bitflags v0.6.0
       Fresh ffi-util v0.1.0 (file:///home/chutz/src/alacritty/ffi-util)
       Fresh gcc v0.3.41
       Fresh ansi_term v0.9.0
       Fresh strsim v0.6.0
       Fresh cfg-if v0.1.0
       Fresh lazy_static v0.2.2
       Fresh itoa v0.1.1
       Fresh smallvec v0.1.8
       Fresh unicode-xid v0.0.4
       Fresh filetime v0.1.10
       Fresh inotify v0.2.3
       Fresh errno v0.1.8
       Fresh serde v0.8.23
       Fresh dtoa v0.3.0
       Fresh unicode-segmentation v1.0.1
       Fresh net2 v0.2.26
       Fresh owning_ref v0.2.4
       Fresh shared_library v0.1.5
       Fresh serde v0.7.15
       Fresh xdg v2.0.0
       Fresh winapi-build v0.1.1
       Fresh log v0.3.6
       Fresh quote v0.3.12
       Fresh num-traits v0.1.36
       Fresh bitflags v0.4.0
       Fresh bitflags v0.7.0
       Fresh khronos_api v1.0.0
       Fresh osmesa-sys v0.1.2
       Fresh fnv v1.0.5
       Fresh linked-hash-map v0.3.0
       Fresh syn v0.11.4
       Fresh num-integer v0.1.32
       Fresh nix v0.5.1
       Fresh cmake v0.1.20
       Fresh serde v0.9.3
       Fresh lazycell v0.4.0
       Fresh copypasta v0.0.1 (file:///home/chutz/src/alacritty/copypasta)
       Fresh yaml-rust v0.3.5
       Fresh x11-dl v2.12.0
       Fresh serde_codegen_internals v0.12.0
       Fresh num-iter v0.1.32
       Fresh libz-sys v1.0.12
       Fresh xml-rs v0.3.5
       Fresh term_size v0.2.1
       Fresh serde_json v0.9.2
       Fresh num-complex v0.1.35
       Fresh serde_yaml v0.6.0
       Fresh unicode-width v0.1.4
       Fresh slab v0.1.3
   Compiling serde_derive v0.9.2
       Fresh rand v0.3.15
       Fresh winapi v0.2.8
       Fresh gl_generator v0.5.2
       Fresh wayland-scanner v0.5.11
       Fresh utf8parse v0.1.0
       Fresh slab v0.3.0
       Fresh time v0.1.36
       Fresh clap v2.20.0
       Fresh dtoa v0.2.2
     Running `rustc --crate-name serde_derive /home/chutz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.2/src/lib.rs --crate-type proc-macro -C prefer-dynamic -C opt-level=3 -g -C metadata=db51438f57e31c20 -C extra-filename=-db51438f57e31c20 --out-dir /home/chutz/src/alacritty/target/release/deps --emit=dep-info,link -L dependency=/home/chutz/src/alacritty/target/release/deps --extern serde_codegen_internals=/home/chutz/src/alacritty/target/release/deps/libserde_codegen_internals-905b88de0ca0027c.rlib --extern quote=/home/chutz/src/alacritty/target/release/deps/libquote-169f642f4327bdc2.rlib --extern syn=/home/chutz/src/alacritty/target/release/deps/libsyn-f1dbe93b8f5306e0.rlib --cap-lints allow`
       Fresh parking_lot_core v0.2.0
       Fresh kernel32-sys v0.2.2
       Fresh ws2_32-sys v0.2.1
       Fresh freetype-sys v0.4.0
       Fresh serde_json v0.8.6
       Fresh num-bigint v0.1.35
       Fresh parking_lot v0.3.6
       Fresh walkdir v0.1.8
       Fresh fs2 v0.2.5
       Fresh miow v0.1.5
       Fresh freetype-rs v0.9.0
       Fresh expat-sys v2.1.4
       Fresh num-rational v0.1.35
       Fresh void v1.0.2
       Fresh memmap v0.2.3
       Fresh mio v0.5.1
       Fresh siphasher v0.2.0
       Fresh semver v0.1.20
       Fresh servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)
       Fresh num v0.1.36
       Fresh heapsize v0.3.8
       Fresh notify v2.6.3
       Fresh phf_shared v0.7.21
       Fresh rustc_version v0.1.7
       Fresh servo-fontconfig v0.2.0 (https://github.com/jwilm/rust-fontconfig#419135e5)
       Fresh cgmath v0.7.0
       Fresh euclid v0.6.8
       Fresh phf v0.7.21
       Fresh phf_generator v0.7.21
   Compiling font v0.1.0 (file:///home/chutz/src/alacritty/font)
       Fresh phf_codegen v0.7.21
     Running `rustc --crate-name font font/src/lib.rs --crate-type lib -C opt-level=3 -g -C metadata=0fcfd330bae37043 -C extra-filename=-0fcfd330bae37043 --out-dir /home/chutz/src/alacritty/target/release/deps --emit=dep-info,link -L dependency=/home/chutz/src/alacritty/target/release/deps --extern log=/home/chutz/src/alacritty/target/release/deps/liblog-b725a1d0410e69a0.rlib --extern ffi_util=/home/chutz/src/alacritty/target/release/deps/libffi_util-7bce33593004abf9.rlib --extern fontconfig=/home/chutz/src/alacritty/target/release/deps/libfontconfig-315db4d2d53bdfd2.rlib --extern euclid=/home/chutz/src/alacritty/target/release/deps/libeuclid-50619909c45ad756.rlib --extern libc=/home/chutz/src/alacritty/target/release/deps/liblibc-7bd9dcf312659623.rlib --extern freetype=/home/chutz/src/alacritty/target/release/deps/libfreetype-69cdd1a93f0de099.rlib -L native=/usr/lib64 -L native=/usr/lib64 -L native=/usr/lib64 -L native=/usr/lib64`
       Fresh nix v0.7.0
       Fresh tempfile v2.1.5
       Fresh vte v0.2.2
       Fresh mio v0.6.2
       Fresh target_build_utils v0.1.2
       Fresh libloading v0.3.1
       Fresh dlib v0.3.1
       Fresh wayland-sys v0.5.11
       Fresh wayland-client v0.5.12
       Fresh wayland-kbd v0.3.6
       Fresh wayland-window v0.2.3
       Fresh glutin v0.6.1 (https://github.com/jwilm/glutin?rev=af7fe340bd4a2af53ea521defcb4f377cdc588cf#af7fe340)
error[E0432]: unresolved import `self::ffi::FcConfigGetCurrent`
  --> font/src/ft/list_fonts.rs:27:21
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                     ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigGetFonts`
  --> font/src/ft/list_fonts.rs:27:41
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                         ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcSetSystem`
  --> font/src/ft/list_fonts.rs:27:59
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                                           ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcSetApplication`
  --> font/src/ft/list_fonts.rs:27:72
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                                                        ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternGetString`
  --> font/src/ft/list_fonts.rs:28:21
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                     ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternCreate`
  --> font/src/ft/list_fonts.rs:28:41
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                                         ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternAddString`
  --> font/src/ft/list_fonts.rs:28:58
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternGetInteger`
  --> font/src/ft/list_fonts.rs:29:21
   |
29 |     use self::ffi::{FcPatternGetInteger, FcPatternAddInteger};
   |                     ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternAddInteger`
  --> font/src/ft/list_fonts.rs:29:42
   |
29 |     use self::ffi::{FcPatternGetInteger, FcPatternAddInteger};
   |                                          ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetCreate`
  --> font/src/ft/list_fonts.rs:30:21
   |
30 |     use self::ffi::{FcObjectSetCreate, FcObjectSetAdd};
   |                     ^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetAdd`
  --> font/src/ft/list_fonts.rs:30:40
   |
30 |     use self::ffi::{FcObjectSetCreate, FcObjectSetAdd};
   |                                        ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcResultMatch`
  --> font/src/ft/list_fonts.rs:31:21
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                     ^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcResultNoMatch`
  --> font/src/ft/list_fonts.rs:31:36
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                                    ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSetList`
  --> font/src/ft/list_fonts.rs:31:53
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                                                     ^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcChar8`
  --> font/src/ft/list_fonts.rs:32:21
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                     ^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfig`
  --> font/src/ft/list_fonts.rs:32:30
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                              ^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPattern`
  --> font/src/ft/list_fonts.rs:32:40
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                        ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSet`
  --> font/src/ft/list_fonts.rs:32:51
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                   ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSet`
  --> font/src/ft/list_fonts.rs:32:62
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                              ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcCharSet`
  --> font/src/ft/list_fonts.rs:32:75
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                                           ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSetDestroy`
  --> font/src/ft/list_fonts.rs:33:21
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                     ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternDestroy`
  --> font/src/ft/list_fonts.rs:33:39
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                       ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetDestroy`
  --> font/src/ft/list_fonts.rs:33:57
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                                         ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigDestroy`
  --> font/src/ft/list_fonts.rs:33:77
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                                                             ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontMatch`
  --> font/src/ft/list_fonts.rs:34:21
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                     ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontList`
  --> font/src/ft/list_fonts.rs:34:34
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                  ^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSort`
  --> font/src/ft/list_fonts.rs:34:46
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                              ^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigSubstitute`
  --> font/src/ft/list_fonts.rs:34:58
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcDefaultSubstitute`
  --> font/src/ft/list_fonts.rs:34:78
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                                                              ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchFont`
  --> font/src/ft/list_fonts.rs:35:21
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                     ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchPattern`
  --> font/src/ft/list_fonts.rs:35:34
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                  ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchScan`
  --> font/src/ft/list_fonts.rs:35:50
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                  ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_ITALIC`
  --> font/src/ft/list_fonts.rs:35:63
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                               ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_ROMAN`
  --> font/src/ft/list_fonts.rs:35:80
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                                                ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_OBLIQUE`
  --> font/src/ft/list_fonts.rs:36:21
   |
36 |     use self::ffi::{FC_SLANT_OBLIQUE};
   |                     ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_THIN`
  --> font/src/ft/list_fonts.rs:37:21
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRALIGHT`
  --> font/src/ft/list_fonts.rs:37:37
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                                     ^^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_LIGHT`
  --> font/src/ft/list_fonts.rs:37:59
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                                                           ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BOOK`
  --> font/src/ft/list_fonts.rs:38:21
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_REGULAR`
  --> font/src/ft/list_fonts.rs:38:37
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                     ^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_MEDIUM`
  --> font/src/ft/list_fonts.rs:38:56
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                                        ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_SEMIBOLD`
  --> font/src/ft/list_fonts.rs:38:74
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BOLD`
  --> font/src/ft/list_fonts.rs:39:21
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRABOLD`
  --> font/src/ft/list_fonts.rs:39:37
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                     ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BLACK`
  --> font/src/ft/list_fonts.rs:39:58
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                                          ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRABLACK`
  --> font/src/ft/list_fonts.rs:39:75
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                                                           ^^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:274:18
    |
274 |         Italic = FC_SLANT_ITALIC as isize,
    |                  ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:275:19
    |
275 |         Oblique = FC_SLANT_OBLIQUE as isize,
    |                   ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:276:17
    |
276 |         Roman = FC_SLANT_ROMAN as isize,
    |                 ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:281:16
    |
281 |         Thin = FC_WEIGHT_THIN as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:282:22
    |
282 |         Extralight = FC_WEIGHT_EXTRALIGHT as isize,
    |                      ^^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:283:17
    |
283 |         Light = FC_WEIGHT_LIGHT as isize,
    |                 ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:284:16
    |
284 |         Book = FC_WEIGHT_BOOK as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:285:19
    |
285 |         Regular = FC_WEIGHT_REGULAR as isize,
    |                   ^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:286:18
    |
286 |         Medium = FC_WEIGHT_MEDIUM as isize,
    |                  ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:287:20
    |
287 |         Semibold = FC_WEIGHT_SEMIBOLD as isize,
    |                    ^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:288:16
    |
288 |         Bold = FC_WEIGHT_BOLD as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:289:21
    |
289 |         Extrabold = FC_WEIGHT_EXTRABOLD as isize,
    |                     ^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:290:17
    |
290 |         Black = FC_WEIGHT_BLACK as isize,
    |                 ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:291:22
    |
291 |         Extrablack = FC_WEIGHT_EXTRABLACK as isize,
    |                      ^^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:210:16
    |
210 |         Font = FcMatchFont as isize,
    |                ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:211:19
    |
211 |         Pattern = FcMatchPattern as isize,
    |                   ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:212:16
    |
212 |         Scan = FcMatchScan as isize,
    |                ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:203:18
    |
203 |         System = FcSetSystem as isize,
    |                  ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:204:23
    |
204 |         Application = FcSetApplication as isize,
    |                       ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error: aborting due to 19 previous errors

Build failed, waiting for other jobs to finish...
error: attribute must only have one argument
  --> /home/chutz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.2/src/lib.rs:22:3
   |
22 | #[proc_macro_derive(Serialize, attributes(serde))]
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: attribute must only have one argument
  --> /home/chutz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.2/src/lib.rs:31:3
   |
31 | #[proc_macro_derive(Deserialize, attributes(serde))]
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: the `proc-macro` crate type is experimental
  |
  = help: add #![feature(proc_macro)] to the crate attributes to enable

error: the `#[proc_macro_derive]` attribute is an experimental feature (see issue #35900)
  --> /home/chutz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.2/src/lib.rs:22:1
   |
22 | #[proc_macro_derive(Serialize, attributes(serde))]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: the `#[proc_macro_derive]` attribute is an experimental feature (see issue #35900)
  --> /home/chutz/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.2/src/lib.rs:31:1
   |
31 | #[proc_macro_derive(Deserialize, attributes(serde))]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 2 previous errors

error: Could not compile `font`.

Caused by:
  process didn't exit successfully: `rustc --crate-name font font/src/lib.rs --crate-type lib -C opt-level=3 -g -C metadata=0fcfd330bae37043 -C extra-filename=-0fcfd330bae37043 --out-dir /home/chutz/src/alacritty/target/release/deps --emit=dep-info,link -L dependency=/home/chutz/src/alacritty/target/release/deps --extern log=/home/chutz/src/alacritty/target/release/deps/liblog-b725a1d0410e69a0.rlib --extern ffi_util=/home/chutz/src/alacritty/target/release/deps/libffi_util-7bce33593004abf9.rlib --extern fontconfig=/home/chutz/src/alacritty/target/release/deps/libfontconfig-315db4d2d53bdfd2.rlib --extern euclid=/home/chutz/src/alacritty/target/release/deps/libeuclid-50619909c45ad756.rlib --extern libc=/home/chutz/src/alacritty/target/release/deps/liblibc-7bd9dcf312659623.rlib --extern freetype=/home/chutz/src/alacritty/target/release/deps/libfreetype-69cdd1a93f0de099.rlib -L native=/usr/lib64 -L native=/usr/lib64 -L native=/usr/lib64 -L native=/usr/lib64` (exit code: 101)
```"07/15/18 04:02:44 PMAdd support for setting the cursor shape"This makes cursor shapes in neovim work for me.
I couldn't find any documentation or specification on these `osc_dispatch` commands, but I'm guessing this addition is simple enough not to get anything too wrong :)"9"> Are the requirements documented anywhere?

Yep, we've got them in the [README](https://github.com/jwilm/alacritty#prerequisites)."anthonyclaysAnthony Clays05/17/18 07:54:36 PMAdd support for setting the cursor shape1
131807/01/17 11:26:10 PMPhilipp KellerOSX: No redraw when changing from/to retina"when switching a alacritty window from thunderbold display (no retina) to the laptop screen (retina) e.g. when unplugging the external screen then the font size is wrong.

I didn't find a way to force the redraw of the screen, as when starting new alactritty instances the font size is correct both on retina as on non-retina"12/08/18 07:13:15 PMfix zero-width character rendering"this adds support at the terminal representation level for zero-width characters, which should make zero-width characters not destroy the rendering of ncurses apps, for instance. it also includes a refactoring to support storing multiple codepoints in a single cell - it only renders a single one for now, but it should be a small first step towards #306.

This fixes #1317."9Indeed, it is a duplicate of #71.doyJesse Luehrs04/04/18 06:28:12 AMhandle soft hyphen properly1
132402/10/17 05:25:04 PMChris WaldonArch Build Error"When I try to build from the AUR, I get the following compilation error. (I have run `pacman -S cmake freetype2 fontconfig pkg-config make xclip`)

[alacrittylog.txt](https://github.com/jwilm/alacritty/files/760575/alacrittylog.txt)

Is this related to #383?"07/15/18 01:00:59 PMUpdated Cargo.toml to build using `cargo deb`"I updated the `Cargo.toml` file and added a `package.metadata.deb`
subsection to define how to build a debian ""deb"" instal file using
`cargp deb`. This will allow debian/ubuntu users to install `alacritty`
using their systems package manager. It also will make it easier to
provide pre-built binaries for those systems."3Yep, dupe of #383mynameisfiberChristian Duerr07/15/18 12:59:42 PMMerge branch 'master' into master1
132702/10/17 05:27:05 PMSimon SerPanic on startup"Just built the latest Git revision, but I get this error when I launch alacritty:

```
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[unhandled osc_dispatch]: [['1','1','2',],]
thread 'pty reader' panicked at 'not yet implemented', /home/simon/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/af7fe34/src/api/wayland/window.rs:26
stack backtrace:
   1:     0x55fde8f82eda - <unknown>
   2:     0x55fde8f82361 - <unknown>
   3:     0x55fde8f81527 - <unknown>
   4:     0x55fde8e01c21 - <unknown>
   5:     0x55fde8dd098c - <unknown>
   6:     0x55fde8de584d - <unknown>
   7:     0x55fde8f925d8 - <unknown>
   8:     0x7f7189de6453 - start_thread
   9:     0x7f71899127de - __GI___clone
  10:                0x0 - <unknown>
child finished with error '256'
```"05/25/18 01:57:48 PMFix locale_id for older versions of OS X (<= 10.11)Fixes jwilm/alacritty#13266"We don't yet support Wayland directly. You can use Alacritty through XWayland though. There's instructions in the README.

cc #97 "bradfordboyleBradford D. Boyle05/24/18 05:31:13 AM"Fix locale_id for older versions of OS X (<= 10.11)

Fixes jwilm/alacritty#1326"1
132902/09/17 05:05:26 PMNoneError GLSL"Error :
There was an error initializing the shades: failed compiling shader: 0: 14(10): error: GLSL 3.30 is not supported. Supported versions are: 1.10, 1.20 ans 1.00 ES

DEBIAN 32 bit"11/03/18 03:08:31 PMPublish Github releases from Travis"This release introduces some config to automatically build deploy a `.deb` and `.dmg` on the github release page using travis. The build only happens when a commit is tagged and it uses the stable version of rust.

TODO:
- Mechanism for changelog in both debian release and github release
- Mechanism for manpages in debian release
- Potential PPA upload for debian release?

BEFORE MERGE:
- In `.travis.yml`, the github api key needs to be changed to one that has write permissions for this repo

AFTER MERGE:
- Set cron task in travis to create nightlies

@chrisduerr ^

This pull request is built off of #1324"15"Sorry, 
Didn't saw that "mynameisfiberChristian Duerr11/03/18 02:11:26 AM"Build binary inside 18.04 docker image

Instead of using the 14.04 image which travis provides by default, an
18.04 docker image is now used to build the output binaries for Linux.
This affects both the .deb and a new .tar.gz binary.

The advantage of this is that while binaries compiled on 14.04, do not
work on 18.04, it does work the other way around. The generated .tar.gz
binary has been tested on 18.04, Debian, Fedora and Archlinux and all
systems were able to run it without any warnings or errors."1
133002/10/17 05:24:23 PMSerhii KhomaError on build from aur"Excerpt
```
   Compiling inotify v0.2.3
   Compiling font v0.1.0 (file:///tmp/yaourt-tmp-bjorn/aur-alacritty-git/src/alacritty-git/font)
error[E0432]: unresolved import `self::ffi::FcConfigGetCurrent`
  --> font/src/ft/list_fonts.rs:27:21
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                     ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigGetFonts`
  --> font/src/ft/list_fonts.rs:27:41
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                         ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcSetSystem`
  --> font/src/ft/list_fonts.rs:27:59
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                                           ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcSetApplication`
  --> font/src/ft/list_fonts.rs:27:72
   |
27 |     use self::ffi::{FcConfigGetCurrent, FcConfigGetFonts, FcSetSystem, FcSetApplication};
   |                                                                        ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternGetString`
  --> font/src/ft/list_fonts.rs:28:21
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                     ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternCreate`
  --> font/src/ft/list_fonts.rs:28:41
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                                         ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternAddString`
  --> font/src/ft/list_fonts.rs:28:58
   |
28 |     use self::ffi::{FcPatternGetString, FcPatternCreate, FcPatternAddString};
   |                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternGetInteger`
  --> font/src/ft/list_fonts.rs:29:21
   |
29 |     use self::ffi::{FcPatternGetInteger, FcPatternAddInteger};
   |                     ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternAddInteger`
  --> font/src/ft/list_fonts.rs:29:42
   |
29 |     use self::ffi::{FcPatternGetInteger, FcPatternAddInteger};
   |                                          ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetCreate`
  --> font/src/ft/list_fonts.rs:30:21
   |
30 |     use self::ffi::{FcObjectSetCreate, FcObjectSetAdd};
   |                     ^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetAdd`
  --> font/src/ft/list_fonts.rs:30:40
   |
30 |     use self::ffi::{FcObjectSetCreate, FcObjectSetAdd};
   |                                        ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcResultMatch`
  --> font/src/ft/list_fonts.rs:31:21
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                     ^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcResultNoMatch`
  --> font/src/ft/list_fonts.rs:31:36
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                                    ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSetList`
  --> font/src/ft/list_fonts.rs:31:53
   |
31 |     use self::ffi::{FcResultMatch, FcResultNoMatch, FcFontSetList};
   |                                                     ^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcChar8`
  --> font/src/ft/list_fonts.rs:32:21
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                     ^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfig`
  --> font/src/ft/list_fonts.rs:32:30
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                              ^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPattern`
  --> font/src/ft/list_fonts.rs:32:40
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                        ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSet`
  --> font/src/ft/list_fonts.rs:32:51
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                   ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSet`
  --> font/src/ft/list_fonts.rs:32:62
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                              ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcCharSet`
  --> font/src/ft/list_fonts.rs:32:75
   |
32 |     use self::ffi::{FcChar8, FcConfig, FcPattern, FcFontSet, FcObjectSet, FcCharSet};
   |                                                                           ^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSetDestroy`
  --> font/src/ft/list_fonts.rs:33:21
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                     ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcPatternDestroy`
  --> font/src/ft/list_fonts.rs:33:39
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                       ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcObjectSetDestroy`
  --> font/src/ft/list_fonts.rs:33:57
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                                         ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigDestroy`
  --> font/src/ft/list_fonts.rs:33:77
   |
33 |     use self::ffi::{FcFontSetDestroy, FcPatternDestroy, FcObjectSetDestroy, FcConfigDestroy};
   |                                                                             ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontMatch`
  --> font/src/ft/list_fonts.rs:34:21
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                     ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontList`
  --> font/src/ft/list_fonts.rs:34:34
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                  ^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcFontSort`
  --> font/src/ft/list_fonts.rs:34:46
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                              ^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcConfigSubstitute`
  --> font/src/ft/list_fonts.rs:34:58
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcDefaultSubstitute`
  --> font/src/ft/list_fonts.rs:34:78
   |
34 |     use self::ffi::{FcFontMatch, FcFontList, FcFontSort, FcConfigSubstitute, FcDefaultSubstitute};
   |                                                                              ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchFont`
  --> font/src/ft/list_fonts.rs:35:21
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                     ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchPattern`
  --> font/src/ft/list_fonts.rs:35:34
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                  ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FcMatchScan`
  --> font/src/ft/list_fonts.rs:35:50
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                  ^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_ITALIC`
  --> font/src/ft/list_fonts.rs:35:63
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                               ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_ROMAN`
  --> font/src/ft/list_fonts.rs:35:80
   |
35 |     use self::ffi::{FcMatchFont, FcMatchPattern, FcMatchScan, FC_SLANT_ITALIC, FC_SLANT_ROMAN};
   |                                                                                ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_SLANT_OBLIQUE`
  --> font/src/ft/list_fonts.rs:36:21
   |
36 |     use self::ffi::{FC_SLANT_OBLIQUE};
   |                     ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_THIN`
  --> font/src/ft/list_fonts.rs:37:21
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRALIGHT`
  --> font/src/ft/list_fonts.rs:37:37
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                                     ^^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_LIGHT`
  --> font/src/ft/list_fonts.rs:37:59
   |
37 |     use self::ffi::{FC_WEIGHT_THIN, FC_WEIGHT_EXTRALIGHT, FC_WEIGHT_LIGHT};
   |                                                           ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BOOK`
  --> font/src/ft/list_fonts.rs:38:21
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_REGULAR`
  --> font/src/ft/list_fonts.rs:38:37
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                     ^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_MEDIUM`
  --> font/src/ft/list_fonts.rs:38:56
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                                        ^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_SEMIBOLD`
  --> font/src/ft/list_fonts.rs:38:74
   |
38 |     use self::ffi::{FC_WEIGHT_BOOK, FC_WEIGHT_REGULAR, FC_WEIGHT_MEDIUM, FC_WEIGHT_SEMIBOLD};
   |                                                                          ^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BOLD`
  --> font/src/ft/list_fonts.rs:39:21
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                     ^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRABOLD`
  --> font/src/ft/list_fonts.rs:39:37
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                     ^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_BLACK`
  --> font/src/ft/list_fonts.rs:39:58
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                                          ^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0432]: unresolved import `self::ffi::FC_WEIGHT_EXTRABLACK`
  --> font/src/ft/list_fonts.rs:39:75
   |
39 |     use self::ffi::{FC_WEIGHT_BOLD, FC_WEIGHT_EXTRABOLD, FC_WEIGHT_BLACK, FC_WEIGHT_EXTRABLACK};
   |                                                                           ^^^^^^^^^^^^^^^^^^^^ Could not find `ffi` in `ft::list_fonts::fc`

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:274:18
    |
274 |         Italic = FC_SLANT_ITALIC as isize,
    |                  ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:275:19
    |
275 |         Oblique = FC_SLANT_OBLIQUE as isize,
    |                   ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:276:17
    |
276 |         Roman = FC_SLANT_ROMAN as isize,
    |                 ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:281:16
    |
281 |         Thin = FC_WEIGHT_THIN as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:282:22
    |
282 |         Extralight = FC_WEIGHT_EXTRALIGHT as isize,
    |                      ^^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:283:17
    |
283 |         Light = FC_WEIGHT_LIGHT as isize,
    |                 ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:284:16
    |
284 |         Book = FC_WEIGHT_BOOK as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:285:19
    |
285 |         Regular = FC_WEIGHT_REGULAR as isize,
    |                   ^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:286:18
    |
286 |         Medium = FC_WEIGHT_MEDIUM as isize,
    |                  ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:287:20
    |
287 |         Semibold = FC_WEIGHT_SEMIBOLD as isize,
    |                    ^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:288:16
    |
288 |         Bold = FC_WEIGHT_BOLD as isize,
    |                ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:289:21
    |
289 |         Extrabold = FC_WEIGHT_EXTRABOLD as isize,
    |                     ^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:290:17
    |
290 |         Black = FC_WEIGHT_BLACK as isize,
    |                 ^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:291:22
    |
291 |         Extrablack = FC_WEIGHT_EXTRABLACK as isize,
    |                      ^^^^^^^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:210:16
    |
210 |         Font = FcMatchFont as isize,
    |                ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:211:19
    |
211 |         Pattern = FcMatchPattern as isize,
    |                   ^^^^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:212:16
    |
212 |         Scan = FcMatchScan as isize,
    |                ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:203:18
    |
203 |         System = FcSetSystem as isize,
    |                  ^^^^^^^^^^^ non-constant path in constant expression

error[E0080]: constant evaluation error
   --> font/src/ft/list_fonts.rs:204:23
    |
204 |         Application = FcSetApplication as isize,
    |                       ^^^^^^^^^^^^^^^^ non-constant path in constant expression

error: aborting due to 19 previous errors

```"05/25/18 08:51:56 PMFix error message typoJust a small typo I noticed during usage.1"@jwilm , no, I have tried
Also it don't react on size of font, it big no matter what

```
$ alacritty
num_cols, num_lines = 119, 61
[unhandled osc_dispatch]: [['1',],['.','.','n','f','i','g','/','d','o','t','f','i','l','e','s',],]
```"watersalesmanRandy Ramos05/25/18 08:36:42 PMFix error message typo1
133202/11/17 02:22:46 AMDavid TolnayReport property name of errors in the config file"> **font.use_thin_strokes**: invalid type: string ""tru"", expected a boolean at line 51 column 21"05/27/18 07:26:30 PMFix semantic_escape_chars to match linksThe default config has problems selecting links using double-clicks because the `:` is not considered for the semantic select. When doubleclicking on `https://example.com/index.html` alacritty is only selecting `//example.com/index.html`, so I either have to fix the link manually or select the whole link manually.3Ooooo, fancy! Thanks for the PR. 😄 kpcyrdkpcyrd05/27/18 12:45:27 PMFix semantic_escape_chars to match links1
133302/11/17 10:18:07 PMJoe WilmHandle OSC for setting indexed color values05/29/18 04:50:51 PMUpdate to glutin 0.16.0"Note that `WM_CLASS` is now set to `""alacritty"", ""Alacritty""` instead of the previous value of `""Alacritty"", ""Alacritty""`. This seems to be more standard.

This also contains some revised recommendations for installing the `.desktop` file.

Fixes #148
Fixes #372
Fixes #764
Fixes #830
Fixes #1041 
Fixes #1185"4Ooooo, fancy! Thanks for the PR. 😄 francesca64Francesca Frangipane05/15/18 03:21:06 AM"Update to glutin 0.16.0

Note that `WM_CLASS` is now set to `""alacritty"", ""Alacritty""`
instead of the previous value of `""Alacritty"", ""Alacritty""`. This
seems to be more standard.

This also contains some revised recommendations for installing the
`.desktop` file."1
134006/20/17 04:13:47 PMJoe WilmIssue using Terminus font"Backtrace: http://sprunge.us/CiGA
Config: http://sprunge.us/WIhY

As reported by _brotherBox_ on IRC"05/30/18 05:23:04 PMReduce debug level for releaseBacktraces are useful, but line-level debuginfo bloats the binary, and has impact on compile times notably. This reduces it to function-level debuginfo which is a good compromise point.1@jcguu95 There is no problem with the terminus font. Make sure you have it installed and you are using the correct font name.ishitatsuyukiTatsuyuki Ishi05/30/18 09:08:35 AM"Reduce debug level for release

Backtraces are useful, but line-level debuginfo bloats the binary, and has impact on compile times notably. This reduces it to function-level debuginfo which is a good compromise point."1
134602/12/17 03:02:00 AMJon GjengsetFlashing terminal on bell"The default alacritty behavior on a terminal bell (i.e., on `\a`), is quite visually disturbing ([a white flash of the terminal](https://jon.tsp.io/share/alacritty-406.ogv)). Could this behavior be customizeable, or at least possible to disable?"07/14/18 12:35:39 AM964 dpi change"Resolves #964.
Resolves #71."6Re `behavior`, I think that might actually be *more* useful than the current support for different animation styles. `EaseOutCubic` vs `EaseOutQuint` for example seems like unnecessary complexity in something like a visual bell.sodiumjoeJoe Moon04/17/18 06:01:31 PMhandle dpi changes in macos1
135104/04/17 03:44:24 AMJoe WilmFix issue with htop rendering incorrectly"Since we're emulating xterm, we need to support back_color_erase. If
this is found to cause any issues, please open a ticket on GitHub.

Resolves #85.
Resolves #290.

This is currently causing a couple of tests to fail. Will need to investigate, but I expect this fixes some broken behavior, and the correct action is to fix the tests."06/07/18 04:53:17 PMSet WM_CLASS to given title on supported platforms"This fixes #1350. 

I don't know how elegant this is, if you have suggestions I'd be glad to apply them."12"![image](https://cloud.githubusercontent.com/assets/4285147/22859852/ac0c02ea-f09f-11e6-8368-f180ff3388d3.png)
"TezkerekTezkerek06/05/18 03:07:11 PMBetter --class description1
135509/28/18 08:16:47 PMJon GjengsetReversal of reverse video for cursor"alacritty's default behavior is to reverse the foreground and background colors for the current cursor (unless `custom_cursor_colors` is set). This usually works quite well, *except* in the case where the cursor is over a character that is *already* reversed. Consider, for example, the case where you are highlighting text in `tmux` (`^[`, move to some text, `v` to visually highlight). `tmux` will reverse all selected characters (including the current cursors position). `alacritty` will then reverse the color again. Depending on your particular color configuration, the cursor essentially disappears. If the highlight also changes the background color, the net effect is just that the font color of the character under the cursor changes, but this is still not particularly visible.

I'm not entirely sure how this would be fixed though? Can alacritty somehow detect that it is reversing a reversal?"06/07/18 03:52:07 PMAllow disabling DPI scaling"This makes it possible to disable DPI scaling completely, instead the
the display pixel ration will always be fixed to 1.0.

By default nothing has changed and DPI is still enabled, this just seems
like a better way than running `WINIT_HIDPI_FACTOR=1.0 alacritty` every
time the user wants to start alacritty.

It would be possible to allow specifying any DPR, however I've decided
against this since I'd assume it's a very rare usecase. It's also still
possible to make use of `WINIT_HIDPI_FACTOR` to do this on X11.

Currently this is not updated at runtime using the live config update,
there is not really much of a technical limitation why this woudn't be
possible, however a solution for that issue should be first added in
jwilm/alacritty#1346, once a system is established for changing DPI at
runtime, porting that functionality to this PR should be simple."2I believe this has been resolved, since we now check for INVERSE or cursor to inverse the cell content.chrisduerrChristian Duerr06/07/18 05:50:02 AMRemove unwanted println1
135602/14/17 04:53:19 PMAndo “Thor” Nando Add TERM config entry"This PR solves an issue I had with vim not displaying comments in italics due to the TERM env variable being set to a terminfo which did not support setting and resetting italics.

Vim uses the codes defined in terminfo and invokes them with `tput` ([italics in iterm2 vim tmux ](https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/) explains a bit and has a handy bit of code to test if the TERM is set correctly)

I kept the default as xterm-256color because as far as I can tell no terminfo db has a correct entry for italics.

There seem to be a few issues here that might be fixed if the TERM variable is set correctly (#85)"06/16/18 10:11:47 AMAdd Copy/Cut/Paste keys"This just adds support for the Copy/Cut/Paste keys and sets up
Copy/Paste as alternative defaults for Ctrl+Shift+C/V.

I'm not sure if this should be part of the default key bindings, but I
find this useful and don't really see anything wrong with having this
functionality work by default." =||= For future reference: Mac osx can have an updated version `ncurses` via homebrew by installing the `homebrew/dupes/ncurses` formula and linking it with `brew link homebrew/dupes/ncurses --force`chrisduerrChristian Duerr06/06/18 07:27:50 PM"Add Copy/Cut/Paste keys

This just adds support for the Copy/Cut/Paste keys and sets up
Copy/Paste as alternative defaults for Ctrl+Shift+C/V.

I'm not sure if this should be part of the default key bindings, but I
find this useful and don't really see anything wrong with having this
functionality work by default."1
135702/15/17 06:03:47 PMJoe WilmImplement workaround for Mesa issue"This addresses the issue where systems running Mesa drivers would be an
order of magnitude slower than other terminals. With this patch,
performance is nearly as good as with proprietary drivers. There is one
caveat where, since the cause of slowness hasn't been removed, there is
less time available for rendering on Mesa systems.

I've benchmarked this on my system (i5-3570 @ 3.4GHz, GTX 680) using
`time find /usr` with the following results:

* ~2.0 seconds average with proprietary driver
* ~2.3 seconds average with Mesa driver

cc #125"06/18/18 05:26:55 AM--title should override the dynamic_title config."This PR makes it so that the `--title` flag is respected regardless of your `dynamic_title` configuration, which is the intended behavior.

- `alacritty` by default, still has a dynamic title
- `alacritty --title ""<title>""` will effectively set the title to any string you like
- `alacritty --title """"` will effectively hide the title (just a special case of the last one)"3"Alacritty is now much faster, but still slower than URxvt normally

```OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) Ivybridge Mobile
OpenGL core profile version string: 3.3 (Core Profile) Mesa 17.0.5
OpenGL core profile shading language version string: 3.30
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 17.0.5
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.0 Mesa 17.0.5
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.00
OpenGL ES profile extensions:
```"nixpulvisNathan Lilienthal06/18/18 02:58:13 AMRemove some superfluous documentation.1
136107/02/17 12:07:22 AMCasey RodarmorAllacritty hangs when dead key is pressed or emoji keyboard is opened on macOS"For the definition of the somewhat unusual phrase ""dead key"", see: https://en.wikipedia.org/wiki/Dead_key

I didn't know until looking it up a few minutes ago, but a dead key is one which does not produce a character itself, but combines with the next character pressed. In macOS `option-e` is a dead key that combines with vowels to give them an acute accent: `option-e + o = ó`

Anyways, long story short, alacritty hangs on macOS when any dead key is pressed. It doesn't crash, since the process doesn't exit, but the window freezes and ignores input. I tried option + `e`, `u`, `i`, `n`, and backtick, and they all crashed.

I ran it under lldb, `ctrl-c`-ed after doing it to get to the debugger prompt, and captured this backtrace:

https://gist.github.com/casey/7eb6c2d967da370f106a8d8c5d9761d6

It appears to be waiting for an event which never comes. Kind of sad, really :'–(

(Mach ports and messages are the low-level kernel provided mechanism through which much IPC happens on macOS.)

Also of note is that this happens when you press `command-control-space`, which opens the emoji keyboard on macOS. I captured a stack trace for this, and it appears to be identical.

Obviously, emoji keyboard functionality is of near paramount importance, since without it it is very difficult to include cute emoji in my git commit messages."06/08/18 11:32:22 PMReduce change_font_size step to 0.5Fix for issue https://github.com/jwilm/alacritty/issues/13539Please follow #209 for updates.felippemrChristian Duerr06/08/18 11:27:09 PMAdd missing empty new line1
136204/13/21 09:15:56 AMNicolas HillegeerSwitching out font library: PathfinderHi! I just saw this (http://pcwalton.github.io/blog/2017/02/14/pathfinder/) on Hacker News and thought you might be interested, since Alacritty focuses on performance. Reading some of the issues on purported bad performance when comparing to xterm/Gnome Terminal/..., I'm always wondering how much of that is due to the font rendering, my gut feeling says a lot. Of course, switching out the font rendering library just to see if this is true may be too much effort, I don't know (not a rustacean myself).07/13/18 07:38:25 PMEnable live dpi toggling"This change makes it possible to enable/disable DPI scaling during runtime on
all platforms."7I think at this point it's more worthwhile to improve our own library.chrisduerrChristian Duerr06/09/18 12:47:11 PM"Enable live dpi toggling

This change makes it possible to enable/disable DPR during runtime on
all platforms."1
136702/16/17 03:08:40 PMHenry SnopekUnable to compile Master:HEAD"I know we were chatting about this in the irc channel, but here's a formal ticket!
```
> echo $PWD
/Users/henrysnopek/dev/alacritty

> rustc -V
rustc 1.15.1

> cargo build --release --verbose
       Fresh bitflags v0.3.3
       Fresh winapi v0.2.8
       Fresh unicode-segmentation v1.0.1
       Fresh libc v0.2.18
       Fresh utf8parse v0.1.0
       Fresh smallvec v0.1.8
       Fresh filetime v0.1.10
       Fresh fsevent-sys v0.1.5
       Fresh itoa v0.2.1
       Fresh log v0.3.6
       Fresh strsim v0.6.0
       Fresh void v1.0.2
       Fresh core-foundation-sys v0.2.3
       Fresh vec_map v0.6.0
       Fresh lazycell v0.4.0
       Fresh time v0.1.36
       Fresh core-foundation v0.2.3
       Fresh vte v0.2.2
       Fresh xdg v2.0.0
       Fresh unicode-width v0.1.4
       Fresh rustc-serialize v0.3.22
       Fresh quote v0.3.12
       Fresh block v0.1.6
       Fresh fnv v1.0.5
       Fresh malloc_buf v0.0.6
       Fresh heapsize v0.3.8
       Fresh slab v0.3.0
       Fresh pkg-config v0.3.8
       Fresh objc v0.2.2
       Fresh errno v0.1.8
       Fresh dtoa v0.3.0
       Fresh term_size v0.2.1
       Fresh objc_id v0.1.0
       Fresh owning_ref v0.2.4
       Fresh semver v0.1.20
       Fresh ffi-util v0.1.0 (file:///Users/henrysnopek/dev/alacritty/ffi-util)
       Fresh objc-foundation v0.1.1
       Fresh unicode-xid v0.0.4
       Fresh rustc_version v0.1.7
       Fresh linked-hash-map v0.3.0
       Fresh copypasta v0.0.1 (file:///Users/henrysnopek/dev/alacritty/copypasta)
       Fresh syn v0.11.4
       Fresh yaml-rust v0.3.5
       Fresh serde v0.9.3
       Fresh serde_codegen_internals v0.12.0
       Fresh serde v0.7.15
       Fresh serde_yaml v0.6.1
       Fresh serde_derive v0.9.2
       Fresh winapi-build v0.1.1
       Fresh bitflags v0.4.0
       Fresh num-traits v0.1.36
       Fresh fsevent v0.2.15
       Fresh num-integer v0.1.32
       Fresh euclid v0.6.8
       Fresh serde_json v0.9.2
       Fresh num-iter v0.1.32
       Fresh ansi_term v0.9.0
       Fresh core-graphics v0.3.2
       Fresh lazy_static v0.2.2
       Fresh rand v0.3.15
       Fresh cocoa v0.3.3
       Fresh shared_library v0.1.5
       Fresh core-text v1.1.1
       Fresh num-bigint v0.1.35
       Fresh parking_lot_core v0.2.0
       Fresh kernel32-sys v0.2.2
       Fresh font v0.1.0 (file:///Users/henrysnopek/dev/alacritty/font)
       Fresh num-complex v0.1.35
       Fresh parking_lot v0.3.6
       Fresh walkdir v0.1.8
       Fresh num-rational v0.1.35
       Fresh cfg-if v0.1.0
       Fresh bitflags v0.7.0
       Fresh notify v2.6.3
       Fresh num v0.1.36
       Fresh net2 v0.2.26
       Fresh xml-rs v0.3.5
       Fresh clap v2.20.0
       Fresh cgmath v0.7.0
       Fresh nix v0.7.0
       Fresh khronos_api v1.0.0
       Fresh mio v0.6.2
       Fresh gl_generator v0.5.2
       Fresh gleam v0.2.31
       Fresh cgl v0.1.5
       Fresh glutin v0.6.1 (https://github.com/jwilm/glutin?rev=af7fe340bd4a2af53ea521defcb4f377cdc588cf#af7fe340)
   Compiling alacritty v0.1.0 (file:///Users/henrysnopek/dev/alacritty)
     Running `rustc --crate-name alacritty src/lib.rs --crate-type lib -C opt-level=3 -g --cfg feature=\""default\"" --cfg feature=\""err-println\"" -C metadata=eb43d948c3bb0977 -C extra-filename=-eb43d948c3bb0977 --out-dir /Users/henrysnopek/dev/alacritty/target/release/deps --emit=dep-info,link -L dependency=/Users/henrysnopek/dev/alacritty/target/release/deps --extern serde=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde-0c717dcae121e614.rlib --extern errno=/Users/henrysnopek/dev/alacritty/target/release/deps/liberrno-fec28fe5a5820fa1.rlib --extern glutin=/Users/henrysnopek/dev/alacritty/target/release/deps/libglutin-6889fda6d77cacdf.rlib --extern log=/Users/henrysnopek/dev/alacritty/target/release/deps/liblog-b725a1d0410e69a0.rlib --extern notify=/Users/henrysnopek/dev/alacritty/target/release/deps/libnotify-b213d1cde8e9f59d.rlib --extern bitflags=/Users/henrysnopek/dev/alacritty/target/release/deps/libbitflags-727787834281b926.rlib --extern mio=/Users/henrysnopek/dev/alacritty/target/release/deps/libmio-932f9c146210a634.rlib --extern serde_json=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_json-990edb5c3fbe8b8c.rlib --extern font=/Users/henrysnopek/dev/alacritty/target/release/deps/libfont-b41419bc3aab9324.rlib --extern xdg=/Users/henrysnopek/dev/alacritty/target/release/deps/libxdg-a598b56a9dda6295.rlib --extern serde_yaml=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_yaml-4d83207c8c7de13e.rlib --extern parking_lot=/Users/henrysnopek/dev/alacritty/target/release/deps/libparking_lot-89b1b2f5152e3d62.rlib --extern serde_derive=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_derive-db51438f57e31c20.dylib --extern vte=/Users/henrysnopek/dev/alacritty/target/release/deps/libvte-6ef1a65e6340177a.rlib --extern fnv=/Users/henrysnopek/dev/alacritty/target/release/deps/libfnv-e7331f8baa341134.rlib --extern cgmath=/Users/henrysnopek/dev/alacritty/target/release/deps/libcgmath-21ac5c70e98d7763.rlib --extern lazy_static=/Users/henrysnopek/dev/alacritty/target/release/deps/liblazy_static-7562ce08c0b12be3.rlib --extern clap=/Users/henrysnopek/dev/alacritty/target/release/deps/libclap-0d995c6a900d396e.rlib --extern libc=/Users/henrysnopek/dev/alacritty/target/release/deps/liblibc-7bd9dcf312659623.rlib --extern copypasta=/Users/henrysnopek/dev/alacritty/target/release/deps/libcopypasta-48e69032a73a3777.rlib`
error: custom derive attribute panicked
   --> src/ansi.rs:348:62
    |
348 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                              ^^^^^^^^^
    |
    = help: message: assertion failed: !p.is_null()

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib -C opt-level=3 -g --cfg feature=""default"" --cfg feature=""err-println"" -C metadata=eb43d948c3bb0977 -C extra-filename=-eb43d948c3bb0977 --out-dir /Users/henrysnopek/dev/alacritty/target/release/deps --emit=dep-info,link -L dependency=/Users/henrysnopek/dev/alacritty/target/release/deps --extern serde=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde-0c717dcae121e614.rlib --extern errno=/Users/henrysnopek/dev/alacritty/target/release/deps/liberrno-fec28fe5a5820fa1.rlib --extern glutin=/Users/henrysnopek/dev/alacritty/target/release/deps/libglutin-6889fda6d77cacdf.rlib --extern log=/Users/henrysnopek/dev/alacritty/target/release/deps/liblog-b725a1d0410e69a0.rlib --extern notify=/Users/henrysnopek/dev/alacritty/target/release/deps/libnotify-b213d1cde8e9f59d.rlib --extern bitflags=/Users/henrysnopek/dev/alacritty/target/release/deps/libbitflags-727787834281b926.rlib --extern mio=/Users/henrysnopek/dev/alacritty/target/release/deps/libmio-932f9c146210a634.rlib --extern serde_json=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_json-990edb5c3fbe8b8c.rlib --extern font=/Users/henrysnopek/dev/alacritty/target/release/deps/libfont-b41419bc3aab9324.rlib --extern xdg=/Users/henrysnopek/dev/alacritty/target/release/deps/libxdg-a598b56a9dda6295.rlib --extern serde_yaml=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_yaml-4d83207c8c7de13e.rlib --extern parking_lot=/Users/henrysnopek/dev/alacritty/target/release/deps/libparking_lot-89b1b2f5152e3d62.rlib --extern serde_derive=/Users/henrysnopek/dev/alacritty/target/release/deps/libserde_derive-db51438f57e31c20.dylib --extern vte=/Users/henrysnopek/dev/alacritty/target/release/deps/libvte-6ef1a65e6340177a.rlib --extern fnv=/Users/henrysnopek/dev/alacritty/target/release/deps/libfnv-e7331f8baa341134.rlib --extern cgmath=/Users/henrysnopek/dev/alacritty/target/release/deps/libcgmath-21ac5c70e98d7763.rlib --extern lazy_static=/Users/henrysnopek/dev/alacritty/target/release/deps/liblazy_static-7562ce08c0b12be3.rlib --extern clap=/Users/henrysnopek/dev/alacritty/target/release/deps/libclap-0d995c6a900d396e.rlib --extern libc=/Users/henrysnopek/dev/alacritty/target/release/deps/liblibc-7bd9dcf312659623.rlib --extern copypasta=/Users/henrysnopek/dev/alacritty/target/release/deps/libcopypasta-48e69032a73a3777.rlib` (exit code: 101)
```"03/12/19 09:24:26 PMStatic display notification on SIGCHLD"Ensures that the window processor wakes up upon SIGCHLD.
Otherwise, after `exit` or `logout`, the user had to trigger
a window event before alacritty closed.

Fixes #1313.
Fixes #1276.
Fixes #915.

This may not be the best solution. It's certainly not pretty. Also, my editor is forcing rustfmt on the codebase - let me know if that's annoying. 

Relevant parts: `main.rs` :  110 - 114, `tty.rs` : 43 - 64"11This should no longer be a problem in Homebrew due to https://github.com/Homebrew/homebrew-core/pull/14490.semajJames Larisch06/11/18 03:20:24 AM"Static display notification on SIGCHLD

Ensures that the window processor wakes up upon SIGCHLD.
Otherwise, after `exit` or `logout`, the user had to trigger
a window event before alacritty closed."1
137305/29/17 08:08:38 PMNoneAdd built crate and more verbose debug banner"I've put the old `build_info` into a crate of it's own that currently lives off github. RFCing.

When running alacritty with elevated verbosity, additional debug output is given:

>  ~/dev/alacritty   built  target/debug/alacritty -v
> Welcome to Alacritty.
> This is version 0.1.0 (git 62eb1e2), built for x86_64-apple-darwin by rustc 1.16.0-nightly (bf6d7b665 2017-01-15).
> device_pixel_ratio: 2
> ...

>  ~/dev/alacritty   built  target/debug/alacritty -vvvv
> Welcome to Alacritty.
> This is version 0.1.0 (git 62eb1e2), built for x86_64-apple-darwin by rustc 1.16.0-nightly (bf6d7b665 2017-01-15).
> Alacritty was built with profile ""debug"", features ""DEFAULT, ERR_PRINTLN"" on Thu, 16 Feb 2017 19:00:08 GMT using android_glue 0.2.1, ansi_term 0.9.0, bitflags 0.3.3, bitflags 0.4.0, bitflags 0.6.0, bitflags 0.7.0, block 0.1.6, built 0.1.0, byteorder 0.5.3, bytes 0.3.0, cfg-if 0.1.0, cgl 0.1.5, cgmath 0.7.0, clap 2.20.0, clippy 0.0.104, clippy_lints 0.0.104, cmake 0.1.20, cocoa 0.3.3, copypasta 0.0.1, core-foundation 0.2.3, core-foundation-sys 0.2.3, core-graphics 0.3.2, core-text 1.1.1, crossbeam 0.2.10, dlib 0.3.1, dtoa 0.2.2, dtoa 0.3.0, dwmapi-sys 0.1.0, errno 0.1.8, euclid 0.6.8, expat-sys 2.1.4, ffi-util 0.1.0, filetime 0.1.10, fnv 1.0.5, font 0.1.0, freetype-rs 0.9.0, freetype-sys 0.4.0, fs2 0.2.5, fsevent 0.2.15, fsevent-sys 0.1.5, gcc 0.3.41, gdi32-sys 0.1.1, git2 0.6.4,gl_generator 0.5.2, gleam 0.2.31, glutin 0.6.1, heapsize 0.3.8, idna 0.1.0, inotify 0.2.3, itoa 0.1.1, itoa 0.2.1, kernel32-sys 0.2.2, khronos_api 1.0.0, lazy_static 0.1.16, lazy_static 0.2.2, lazycell 0.4.0, libc 0.2.18, libgit2-sys 0.6.7, libloading 0.3.1, libz-sys 1.0.12, linked-hash-map 0.3.0, log 0.3.6, malloc_buf 0.0.6, matches 0.1.4, memmap 0.2.3, mio 0.5.1, mio 0.6.2, miow 0.1.5, net2 0.2.26, nix 0.5.1, nix 0.7.0, nom 1.2.4, notify 2.6.3, num 0.1.36, num-bigint0.1.35, num-complex 0.1.35, num-integer 0.1.32, num-iter 0.1.32, num-rational 0.1.35, num-traits 0.1.36, objc 0.2.2, objc-foundation 0.1.1, objc_id 0.1.0, osmesa-sys 0.1.2, owning_ref 0.2.4, parking_lot 0.3.6, parking_lot_core 0.2.0, phf 0.7.21, phf_codegen 0.7.21, phf_generator 0.7.21, phf_shared 0.7.21, pkg-config 0.3.8, quine-mc_cluskey 0.2.4, quote 0.3.12, rand 0.3.15, redox_syscall 0.1.16, regex-syntax 0.3.9, rustc-serialize 0.3.22, rustc_version 0.1.7, semver 0.1.20, semver 0.2.3, serde 0.7.15, serde 0.8.23, serde 0.9.3, serde_codegen_internals 0.12.0, serde_derive 0.9.2, serde_json 0.8.6, serde_json 0.9.2, serde_yaml0.6.1, servo-fontconfig 0.2.0, servo-fontconfig-sys 2.11.3, shared_library 0.1.5, shell32-sys 0.1.1, siphasher 0.2.0, slab 0.1.3, slab 0.3.0, smallvec 0.1.8,strsim 0.6.0, syn 0.11.4, target_build_utils 0.1.2, tempfile 2.1.5, term_size 0.2.1, time 0.1.36, toml 0.1.30, toml 0.2.1, unicode-bidi 0.2.5, unicode-normalization 0.1.3, unicode-segmentation 1.0.1, unicode-width 0.1.4, unicode-xid 0.0.4, url 1.4.0, user32-sys 0.1.2, utf8parse 0.1.0, vec_map 0.6.0, void 1.0.2, vte 0.2.2, walkdir 0.1.8, wayland-client 0.5.12, wayland-kbd 0.3.6, wayland-scanner 0.5.11, wayland-sys 0.5.11, wayland-window 0.2.3, winapi 0.2.8, winapi-build0.1.1, ws2_32-sys 0.2.1, x11-dl 2.12.0, xdg 2.0.0, xml-rs 0.3.5, yaml-rust 0.3.5
> device_pixel_ratio: 2
> width: 2048, height: 1536
> ..."06/17/18 09:19:31 AMMove to cargo clippy"Using clippy as a library has been deprecated, instead the `cargo
clippy` command should be used instead. To comply with this change
clippy has been removed from the `Cargo.toml` and is now installed with
cargo when building in CI.

This has also lead to a few new clippy issues to show up, this includes
everything in the `font` subdirectory. This has been fixed and `font`
should now be covered by clippy CI too.

This also upgrades all dependencies, as a result this fixes #1341 and
this fixes #1344."2The error is caused by the shallow clone does on alacritty's repo. A workaround has been committed.chrisduerrChristian Duerr06/14/18 01:56:06 AM"Revert regression caused by clippy fixes

In the `locale.rs` file used for macos there were some calls which would
cause runtime failure after fixing the existing clippy warnings. This
has been resolved by marking the issues in question using `allow`."1
137402/17/17 04:50:36 PMAndo “Thor” Nando Window resize while in vim causes weird render after quitting vim"When quitting vim after having resized the window bigger leaves a bit of the window with a square that's not the background color.

Screenshot of the effect:
<img width=""214"" alt=""screen shot 2017-02-17 at 8 07 57 am"" src=""https://cloud.githubusercontent.com/assets/36430/23041732/07c10b64-f4ea-11e6-9a59-782a8ca42210.png"">

Step to reproduce:
 1. Make sure alacritty is not in fullscreen mode
 2. open `vim`
 3. resize window bigger
 4. quit vim

Observed result is a bit of the window being differently colored. It starts the height of the window but is soon cleared to only be the height of the output which was visible before vim was opened.

This was observed in Mac OS Sierra with vim 8.0 from homebrew. 
I don't know if this is a regression or not."10/16/18 05:02:52 PMAdd support for Windows (Fixes #28)"Primarily this:
* Adds Windows support to copypasta
* Adds rusttype as a font rendering backend
* Creates an interface to abstract over how we interact with a TTY-like thing (EventedRW)
* Adds safe winpty bindings
* Adds [winpty](https://github.com/rprichard/winpty) as a TTY shim
* Adds appveyor CI support

The windows support is not perfect yet but it's good enough that I think it makes sense to merge it. Any unresolved issues are listed [here](https://github.com/zacps/alacritty/issues).

Apologies for the unrelated formatting changes, I can dig through and remove them from the pull but it might take me a little while."50`screen` does not exhibit the same bug, and it looks like it's adding a CR and and LF after the restore.zacpsZac Pullar-Strecker10/16/18 04:03:23 AMMerge remote-tracking branch 'upstream/master' into windows-linux1
138402/23/17 04:57:01 AMLordVisual Bell produces weird colors with short durations"I tried multiple duration values for the Visual Bell and i had small glitches.
I recorded [this video](https://lord.re/alacritty.webm).
Notice that the background is still too white after the animation then after a second get back to it's original color (not an effect of the encoding).

Above 1s there is no bug."06/23/18 10:13:20 AMAdd settings to ignore first click on unfocused windowImplements https://github.com/jwilm/alacritty/issues/129110Strange—I may have a chance to look into this this weekend. Very helpful video 👍 felippemrFelippe Raposo06/22/18 06:16:15 PMBind mouse input if window is focused1
138702/17/17 04:50:36 PMAndo “Thor” Nando use an empty cell as template when resizing grids"This resolves #415.

Seems to be an oversight that the cell template was the cursor block. I changed it to the empty cell and this seems to have fixed the issue."09/23/18 11:05:15 PM Implement config options for term colors 16..256 "This adds a config option which allows setting terminal colors above the
0..16 range, this is often not used so it has been added to the config
option commented out by default.

Live config reload already works for this, so it is possible to change
these colors the same way it works with the normal colors.

If a color below 16 is specified, the configuration will throw an error,
so the normal colors can't be overridden. This is just to prevent
possible complications with the settings that already exist.

I've also fixed existing clippy issues in this PR, I've chosen to do
so in a different commit to make reviews easier. All changes related
to the term colors are outside of the `Fix existing clippy issues` commit." =||= Nice work tracking this down! Thanks for your time spent debugging and for making the PR.chrisduerrChristian Duerr09/23/18 10:47:23 PMAdd changelog entry1
138902/21/17 11:57:15 PMNoneconfig file remarks are misleading"When setting up a config, you used to write ""shell: tmux"", according to remark. Now this syntax leads to an error. The proper syntax seems to be 
```
shell:
  program: tmux
```
(and maybe some way to specify arguments, I couldn't figure it out).
So easy way to build & install alacritty after reading README.md and default config doesn't work."09/27/18 12:12:50 PMFix selection start point lagging behind cursor"Since the mouse start position has been the first movement event after
the mouse button was held down, there have been some issues with the
start point lagging behind the cursor because movement events were not
reported from the initial position but there was a gap until movement
starts reporting.

To fix this whenever the mouse button is pressed, the position and cell
side is stored on the `Mouse` struct. Because of this it does not matter
anymore if the movement events are all reported and we can just start a
selection using the stored position/side whenever there currently is no
selection present.

This fixes #1366."3If you look into the sample config files you can see the actual syntax. The config file will have breaking changes until beta or v1 is released.chrisduerrChristian Duerr09/26/18 07:54:49 PMAdd changelog entry1
139202/17/17 11:28:48 PMMichel BoaventuraUpdates Glutin to proper handle dead keysResolves #211.07/01/18 04:36:16 PMUpdate the manpage to document all CLI options"The introduction of `--class` has added a flag to the CLI without adding
it to the manpage. This has been fixed by updating the manpage.

This also adds the default values of `--class` and `--title` to the CLI
options." =||= Thanks for the PRs!chrisduerrChristian Duerr06/23/18 12:30:34 PM"Update the manpage to document all CLI options

The introduction of `--class` has added a flag to the CLI without adding
it to the manpage. This has been fixed by updating the manpage.

This also adds the default values of `--class` and `--title` to the CLI
options."1
139305/18/18 11:16:40 PMDanny Dulaidisable selection?"Is there a way to disable mouse selection?

I ask because since the semantic selection stuff, alacritty mouse selection is interfering with tmux selection in strange ways :-(
"07/01/18 01:03:11 PMclippy: fix default_trait_access warnings.6"There have been a few changes to how mouse handling works, I believe this is fixed in the latest master, at least I'm not able to reproduce it.

If it should still exist for someone, please let me know and I'll re-open this issue."matthiaskrgrMatthias Krüger06/26/18 07:04:47 PMclippy: fix most of the remaining trivially_copy_pass_by_ref findings.1
139501/04/19 05:24:15 PMNoneDifferent mouse cursor"At the moment, the mouse cursor just looks like normal.  Is there any chance of making it a ""text field"" cursor when hovering over an alacritty window?  Something like [this](https://mdn.mozillademos.org/files/3809/text.gif)."06/26/18 08:35:51 PMMake compilation of binary a phony target"`binary` is already a phony target, but its dependency (alacritty) is not.
This caused an issue whereby `make binary` would not compile the latest binary
after updating the repository.

To reproduce this issue:

1. `cd <alacritty>`
1. Go back a few revisions: `git checkout HEAD^^^`
1. `make binary` (or `make app`)
1. Update the repository: `git checkout master && git pull`
1. `make binary` (or `make app`)
1. The new binary has not been buil, the old version is still present in `target`."5This seems to work fine for me on linux. For macos there's #966.craigfurmanCraig Furman06/26/18 09:32:06 AMMake compilation of binary a phony target1
139602/18/17 07:17:00 AMMichel BoaventuraControl D not exiting alacrittyThis seems to be a regression caused by https://github.com/jwilm/alacritty/pull/419. Before my PR I could type Control + D and alacritty would happily quit. Now it just hangs and waits for any event to quit. The event could be anything, like lose focus, key press, mouse click, etc.12/09/18 05:10:48 PMAllow to use alternative font on small font size"On smaller font size, it is sometimes better to switch to a bitmap font
automatically.

This change allows two fonts to be configured - one for larger sizes and
another for smaller sizes. An optional 'small_font' configuration is
possible, with an 'upper_bound' on the size which determines when to use
that font, based on currently used size.

For example, I with this commit I use Hack, a TTF antialised font for
large sizes, and Terminus, a bitmap font, for small sizes:

```
font:
  normal:
    family: Hack
  bold:
    family: Hack
  italic:
    family: Hack
  size: 13.0

small_font:
  upper_bound: 11.0
  font:
      normal:
        family: Terminus
      bold:
        family: Terminus
      italic:
        family: Terminus
      size: 16.0
```"4"Dead keys still work. Thanks!

@jwilm, is there a way to compile alacritty faster? If i change a single line of code and run ``cargo build`` it takes 147 seconds to compile!"da-xDan Aloni01/22/18 09:36:24 AM"Allow to use alternative font on small font size

On smaller font size, it is sometimes better to switch to a bitmap font
automatically.

This change allows two fonts to be configured - one for larger sizes and
another for smaller sizes. An optional 'small_font' configuration is
possible, with an 'upper_bound' on the size which determines when to use
that font, based on currently used size.

For example, I with this commit I use Hack, a TTF antialised font for
large sizes, and Terminus, a bitmap font, for small sizes:

font:
  normal:
    family: Hack
  bold:
    family: Hack
  italic:
    family: Hack
  size: 13.0

small_font:
  upper_bound: 11.0
  font:
      normal:
        family: Terminus
      bold:
        family: Terminus
      italic:
        family: Terminus
      size: 16.0"1
140312/23/17 08:12:39 PMJoseph HallettFind config file in /etc/alacritty/alacritty.yml"Adds an additional config path outside of $HOME.

This is helpful me because I use Qubes OS.  Qubes systems run many VMs each with different home folders but with most of the rest of the filesystem shared (through a template vm). Previously I had to install a config file into each VM; now I can configure it once in the template vm and have the changes picked up everywhere else.  I imagine it might be useful for systems with multiple users too.

Config path is setup as final fallback option, so it shouldn't break anyones setup (hopefully)!"11/10/18 04:08:49 PMGlutin 0.18 upgrade"Fixes #1756 
Fixes #1525
Fixes #1509
Fixes #1428
Fixes #1414 
Fixes #1382
Fixes #1358
Fixes #1345 
Fixes #1257 
Fixes #1146
Fixes #964 
Fixes #952
Fixes #210 
Fixes #71 

This compiles and after reviewing looks sane enough. However I am running into an issue where the text output of the terminal only shows up on the lower left quadrant of the whole window.

I figured I could go ahead and open this up as a work in progress to get some feedback and suggestions for what could have gone wrong."226Given that there hasn't been much other interest on this feature, a viable workaround available (command-line flag), and become out-of-date, I'm going to close this.mkeelerChristian Duerr11/10/18 02:39:05 PMAdd change log entry for F16-F24 keys1
140402/18/17 04:40:10 PMSebastian FriedelHome and End keys print raw escape sequences when using tmux+zsh as shell"When i try to use the `Home` and `End` keys it only literally prints some escape sequences. Home prints  `^[[1~` and End prints `^[[4~`.

This only happens if i use zsh inside tmux, if i use bash (inside or outside tmux) Home and End work as usual. The keys also don't work when using zsh without tmux. In that case for `Home` only the visual bell flashes and for `End` it also triggers the bell and additionally a single `~` character is printed.

I'm using the default keybindings for both keys:

```yaml
key_bindings:
  - { key: V,        mods: Control|Shift, action: Paste                        }
  - { key: C,        mods: Control|Shift, action: Copy                         }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1b[4~"",  mode: AppCursor   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Delete,                  chars: ""\x1b[3~"",  mode: AppKeypad   }
  - { key: Delete,                  chars: ""\x1b[P"",   mode: ~AppKeypad  }
```

```
~$ tmux -V
tmux 2.2
~$ zsh --version
zsh 5.2 (x86_64-ubuntu-linux-gnu)
~$ bash --version
GNU bash, version 4.3.46(1)-release (x86_64-pc-linux-gnu)
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
```"07/01/18 08:20:30 PMremove remaining clippy lint annotations"We moved to ""cargo clippy"" in 5ba34d4f9766a55a06ed5e3e44cc384af1b09f65 and
removing them did not seem to cause additional warnings."9Oh now i feel dumb, i just saw that the default `alacritty.yml` has different key bindings for Home and End. After i applied those it seems to be working nicely therefore I'm closing this issue.matthiaskrgrMatthias Krüger07/01/18 03:01:56 PMtravis: invoke clippy with --all-targets --all-features1
140506/20/17 04:13:28 PMFordIs it possible to have something similar to `black screen`?"[Black screen](https://github.com/vshatskyi/black-screen) is terminal emulator build on top of **electron** with pretty impressive 15k stars although in very early stage.

And I really like its design. The separate bottom bar for vc branch and cwd, autcomplete etc. 
But the fact it is electron based completely kills the project for me...

As I am not willing to sacrifice performance but I naturally would like to use terminal with 21st century design I have to logically ask whether it would be possible to achieve something similar in alacritty?
"07/01/18 04:31:46 PMFix clippy issuesI took out the clippy fixes from the #1387 PR, to be able to quickly merge these. This doesn't change any functionality but just fixes some newly introduced lints. =||= I don't see this happeningchrisduerrChristian Duerr07/01/18 04:18:50 PMFix clippy issues1
140703/08/19 12:53:22 AMNoneUse error-chain for error handlingIt would reduce the boilerplate code for handling errors, and it makes it easy to add additional info to errors to provide more context. This info can be printed as a chain of causes to make it easier to see what caused the error. This change would hurt the performance when errors happen, but I am not sure if this would cause any significant drop performance in non-fatal error handling.07/02/18 10:11:25 PMenable clippy in font/copypasta crates"turned out regular ""cargo clippy"" would ignore these previously."1I don't think error-chain is a good fit for Alacritty at this point. It can often complicate error handling significantly and Alacritty already doesn't really run into a lot of the problems error-chain is trying to solve.matthiaskrgrMatthias Krüger07/02/18 09:54:25 AMclippy: fix if_not_else warning in font crate.1
141110/21/17 11:40:24 PMNoneUse error-chain"Switches most manual error handling code to use `error-chain` to reduce boilerplate and enable better error messages.

Some of the new error handling code is not pretty, because of the use of absolute paths such as `::std::result::Result<T, E>`, and `shader_error::ResultExt::chain_err(error, || ""foo"")`. The latter could be solved by creating a top level error that has variants for all other error types. This has the advantage of making cases like this as simple as `error.chain_err(|| ""foo"")`, but the downside is functions that have a specific task return the top level, general error type rather than one specific to that task. I could make this change if requested.

An example of the new error message, if a fake error is added to `Window::new`:

before:

```
Alacritty encountered an unrecoverable error:

	Error creating glutin::Window; foo
```

after:

```
Alacritty encountered an unrecoverable error:

	error: failed to create display
	caused by: failed to create window
	caused by: foo
```

The causes of the error are also printed to make the context of the error clearer. I have added `.chain_err` calls in many places to take advantage of this feature.

Unfortunately I could not change `font` and `copypasta` to use `error-chain` because of `Sync` bounds in traits, and `error-chain` uses non-`Sync` types.

Fixes #426"07/03/18 04:35:14 PMREADME.md: remove old comment about NixOS1Between letting this sit too long and error-chain about to go through a complete redesign, I'd like to stick with the basic error handling approach we have for now. Thanks again for the PR!worldofpeaceworldofpeace07/03/18 10:01:14 AMREADME.md: remove old comment about NixOS1
141308/13/19 03:12:39 PMPavel KiselevNumpad PgUp,PgDn,Home,End"Tried this terminal yesterday, immediately fell in love.
One usability issue I have is that some keys residing on numpad don't work in Alacritty (normal PgUp,PgDn,Home,End keys are farther away then numpad ones on my keyboard).
As I understand there is already code for it in, for example,
https://github.com/tomaka/winit/blob/9e404f2fe6572306f0e84c3fb7102e2206e66275/src/api/x11/events.rs#L76
that just needs uncommenting (and adding to enum) for these keys to start working.
Is there some issue with why these keys would be commented out, or is it okay if I propose it there?
I apologize if it's a trivial question, I am a newbie and not yet sure how things work around here.

**Edit:** Well, I compiled and briefly tried what I said above, and it seem to not return key release events, so maybe it's not _that_ easy.
I should've pobably asked in winit repo to begin with, sorry. Should I close this, or leave it open to later use it for tracking adding these keys to config after this is resolved in winit? If there are no other issues, of course."07/05/18 04:30:50 PMUpdate Cargo.toml debug value from integer to bool"Encounter following error on MacOS:
```shell
make app
cargo build --release
error: failed to parse manifest at `/Users/work/rust_workspace/alacritty/Cargo.toml`

Caused by:
  expected a value of type `bool`, but found a value of type `integer` for the key `profile.release.debug`
make: *** [alacritty] Error 101
```"5"@Kinmarui The PageUp and PageDown buttons are bound to send escape sequences to the applications running inside of Alacritty by default. If your shell (or whatever application you're running) does not currently allow scrolling or if the escape is not supported at all, the bell will be rung.

The shift bindings however aren't bound to send any escape sequences, instead they just scroll Alacritty's scrollback directly without a roundtrip to the application running inside of Alacritty, so they'll always work assuming that you have native scrollback available (opposed to something like tmux scrollback).

So that's why you're experiencing this and it sounds like things are working exactly as they're supposed to.

@kchibisov Thanks for the update, closing this issue as resolved."ariesdevilZHAO Yijun07/04/18 05:32:32 AM"Update Cargo.toml debug value from integer to bool

Encounter following error on MacOS:
```shell
make app
cargo build --release
error: failed to parse manifest at `/Users/work/rust_workspace/alacritty/Cargo.toml`

Caused by:
  expected a value of type `bool`, but found a value of type `integer` for the key `profile.release.debug`
make: *** [alacritty] Error 101
```"1
141802/23/17 04:57:01 AMMark RobertsLazily reset `start_time` in VisualBell's `completed` method"Fixes #416. Here's what I think is happening: at short `duration`s, the VisualBell's [`completed` check](https://github.com/jwilm/alacritty/blob/3ce6e1e4b2924b0d432cbb3e62b4bbef88dd38ff/src/term/mod.rs#L377) is returning `true` before we've actually had a chance to draw the ""normal"" background color. I thought about driving this condition off of whether or not `intensity` returns 0.0, but we may still miss a draw, I think. Perhaps the best way to tackle this is to let `completed` lazily reset the VisualBell's `start_time` (something @jwilm asked about when this feature originally landed), and to only return `true` when the VisualBell's `start_time` is `None`. This should effectively delay the final draw until after the VisualBell completes.

***

@lord-re would you mind testing with these changes?

@jwilm at very short `duration`s, there now appears to be a small discrepancy between the clear color and the background color of the glyphs. Perhaps the technique you described, drawing a quad, would fix this; however, I am not entirely sure how this should work. If you can share some pointers, perhaps I could take a stab at it."07/05/18 11:05:34 PMReplace debug asserts with static_assertions"To check that transmutes will work correctly without having to rely on
error-prone runtime checking, the `static_assertions` crate has been
introduced. This allows comparing the size of types at runtime,
preventing potential silent breakage.

@jwilm do you think there are any other places where this could be introduced?
This is the only place where `mem::size_of` is used inside an assertion.
There also is no other instance of `transmute` that is unchecked outside of tests.

This fixes #1417."2This looks great; thanks for the patch @markandrus!chrisduerrChristian Duerr07/05/18 08:15:37 PM"Replace debug asserts with static_assertions

To check that transmutes will work correctly without having to rely on
error-prone runtime checking, the `static_assertions` crate has been
introduced. This allows comparing the size of types at compile time,
preventing potentially silent breakage.

This fixes #1417."1
143212/16/18 08:41:19 PMMark RobertsAddress VisualBell Feedback"@jonhoo raised some useful feedback in https://github.com/jwilm/alacritty/issues/406, namely

1. Behaviors like ""brighten text"", ""dim text"", etc., would be useful.
2. Colors should be customizable to accommodate different color schemes.
3. Non-flashing behaviors like ""pixelate"" would be useful.

This PR addresses 1 and 2 by converting VisualBellConfig into an enum representing one of three effects:

  * None: does nothing
  * FlashText: flashes the text a configurable color
  * FlashBackground: flashes the background a configurable color

Example video (warning: flashing lights): https://gfycat.com/IdealLazyDairycow


Other changes:

* Renamed VisualBellAnimation to ""VisualBellEasing"" and `animation` to `easing`.
* Moved the `cubic_bezier` code to src/config.rs and added an `ease` function to the VisualBellEasing implementation.

The VisualBellConfig enum could be expanded in the future to support a Pixelate option, e.g. something like

```yaml
visual_bell:
  Pixelate:
    size: 24 # px
    duration: 150
```

Or perhaps even a Blur could be supported; however, I think these would require adding a rendering pass, so I haven't implemented these yet."09/26/18 06:42:42 PMFix selection of empty lines"When selecting multiple lines in Alacritty, there was an issue with
empty lines not being copied. This behavior has been chanaged so empty
lines should be correctly copied now." =||= #963 should implement this.chrisduerrChristian Duerr09/26/18 03:03:23 PMFix clippy issues1
143606/19/17 02:29:02 AMAndo “Thor” Nando Keep selection mode when holding button and moving mouse"There was a bit of talk in #30 about keeping the selection mode when double or triple clicking the mouse button and dragging the selection around, so I had a bit of a try at implementing this.

This is just a rough implementation to get the ball rolling and some more input.

There's one or two more modes, that I'm thinking of implementing, which would require a major rewrite; Column mode and Multiple selections."07/16/18 11:49:16 AMfix for  #1435see https://github.com/jwilm/alacritty/issues/1435 for more details4Cool! I look forward to any more feedback you might have. :smile: elfranneElfranne07/16/18 10:55:41 AM"fix for  #1435

see https://github.com/jwilm/alacritty/issues/1435 for more details"1
143712/17/18 04:10:18 PMNiklas DusenlundSelecting and copying newline character"Hey all,

Selection still doesn't really behave like other terminals.

1. If I click on the first cell of a row and drag down I expect to also select and put the newline in the clipboard. It looks like it is doing that, the whole line is selected, but when I paste there isn't any newline. (btw, I don't want to select the first character of the second row.)
2. Selecting beyond the last character should also select all the way to the right side and put a newline character in the clipboard. Instead I can select empty cells.
"07/16/18 04:39:50 PMUpdate README.mdFix for public github link.1"This issue is actually resolved on the latest master.

@elbaro it sounds like your issue might be with gmail, since vscode works just fine."zariptzaript07/16/18 04:22:00 PMUpdate README.md1
144303/09/18 07:11:47 PMAlex SuraciMouse scrolling stops working after a while"I haven't been able to work out a repro for this, but after some amount of time scrolling just ceases to work in Alacritty. I use `tmux` + `vim` all the time. No idea what triggers this, just thought I'd open the issue early to see if anyone else is running into it or has more ideas.

/cc @krishicks"07/18/18 06:39:49 PMFix 'cargo-deb' desktop file name"The desktop file was incorrectly spelled `Alacritty...` instead of `alacritty...`,
this has been fixed and it should now be possible to build debs using the
`cargo-deb` tool.

This fixes #1442."1If this happens again, especially after #1141, please reopen this issue.chrisduerrChristian Duerr07/17/18 05:18:07 PMFix 'cargo-deb' desktop file name1
144902/21/17 11:44:37 PMTy OverbyBuilding on windows: Glutin: not all trait items are implemented"```
$ cargo build
   Compiling glutin v0.6.1 (https://github.com/jwilm/glutin?rev=cc64178d39a1fa06b2c5403117e5e0ef24deeac4#cc64178d)
error[E0046]: not all trait items implemented, missing: `clear_current`
   --> C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\api\wgl/mod.rs:156:1
    |
156 | impl GlContext for Context {
    | ^ missing `clear_current` in implementation
    |
   ::: C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\lib.rs
    |
136 |     fn clear_current(&self) -> Result<(), ContextError>;
    |     ---------------------------------------------------- `clear_current` from trait

error[E0046]: not all trait items implemented, missing: `clear_current`
   --> C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\api\win32/mod.rs:372:1
    |
372 | impl GlContext for Window {
    | ^ missing `clear_current` in implementation
    |
   ::: C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\lib.rs
    |
136 |     fn clear_current(&self) -> Result<(), ContextError>;
    |     ---------------------------------------------------- `clear_current` from trait

error[E0046]: not all trait items implemented, missing: `clear_current`
   --> C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\platform\windows/mod.rs:124:1
    |
124 | impl GlContext for HeadlessContext {
    | ^ missing `clear_current` in implementation
    |
   ::: C:\Users\tyoverby\.cargo\git\checkouts\glutin-2b5ecc80feb2e4c5\cc64178\src\lib.rs
    |
136 |     fn clear_current(&self) -> Result<(), ContextError>;
    |     ---------------------------------------------------- `clear_current` from trait

error: aborting due to 3 previous errors

error: build failed
```"07/19/18 04:47:54 PMRemove redundant dependency from deb build =||= "Thanks for filing these!

Going to continue tracking them as part of #28."chrisduerrChristian Duerr07/19/18 04:41:10 PMRemove redundant dependency from deb build1
145002/21/17 11:43:11 PMTy OverbyBuilding on windows: servo-fontconfig-sys: file not found"```
$ cargo build
   Compiling servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)
error: failed to run custom build command for `servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)`
process didn't exit successfully: `C:\Users\tyoverby\workspace\alacritty\target\debug\build\servo-fontconfig-sys-68ad2970a58a11c5\build-script-build` (exit code: 101)
```"07/20/18 06:03:37 PM Switch from deprecated `std::env::home_dir` to `dirs::home_dir` This fixes #1447.1"@jwilm if you want to avoid adding font_loader, can't we just ""lift"" (with proper attribution, of course) the GDI code from there and implement on the font crate?"chrisduerrChristian Duerr07/19/18 08:17:00 PMSwitch from deprecated `std::env::home_dir` to `dirs::home_dir`1
145102/22/17 10:49:30 PMTuomas SiipolaAdd hide cursor when typing option"By default the feature is disabled. Should it be? Other terminal emulators, at least on X11, hide the cursor when typing.

Fixes #246"04/01/19 10:41:21 PMAdd logo SVG"This adds the SVG files for the three different versions of the
Alacritty logo to the repository. The three variations are the logo with
scanlines, without scanlines and without background or scanlines.

To unclutter the root directory of the repository a bit, every file
which is just copied to the system during the build process has been
moved into the `extra` directory. This should clean things up a bit and
allowed renaming the completions a bit to make them comply with the
default naming scheme for completions for each shell by default.

This fixes #967.

This just adds the logos which were already shown off in #967.
The goal is primarily to start the process rather than having something
which is good to go the way it is right now."16This looks great. Thanks for the PR and making requested changes.chrisduerrChristian Duerr03/31/19 11:16:26 PMMove Alacritty title above icon1
145202/23/17 05:07:39 AMAndo “Thor” Nando hide mouse cursor mac osFixes #436 for mac os users07/23/18 04:48:28 PMOptional dim foreground color"Optional color for the dim foreground (`\e[2m`)
Defaults to 2/3 of the foreground color. (same as other colors)
Fixes #1448 

The option in `alacritty.yml` is in `colors.primary.dim_foreground`, to be in the same place as `bright_foreground`."12https://github.com/alacritty/alacritty/blob/master/alacritty.yml#L395enizorRémi Garde07/23/18 10:14:25 AMAdd to_bright to DimForeground for completeness1
145901/19/20 04:00:23 PMChristian GeierArrow keys not working with neo keyboard layout"Hi,
I'm using the [neo 2 keyboard layout](https://www.neo-layout.org/) and the arrow keys don't work.

Let me specify this: the ""hard"" arrow keys do work (those that actually have arrows printed on them), which makes me believe I have configured alacritty correctly (I'm using the default config file) but the ""soft"" arrow keys on neo's level 4 don't work. You get those ""soft"" arrow by pressing a modifier key and then  
one of the keys labeled l, i, a, or e.

The output of xev is the following:

```
KeyPress event, serial 35, synthetic NO, window 0x2c00001,
    root 0x4a7, subw 0x0, time 74992334, (290,558), root:(1973,586),
    state 0x0, keycode 108 (keysym 0xfe11, ISO_Level5_Shift), same_screen YES,
    XKeysymToKeycode returns keycode: 94
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyPress event, serial 35, synthetic NO, window 0x2c00001,
    root 0x4a7, subw 0x0, time 74994618, (290,558), root:(1973,586),
    state 0x20, keycode 26 (keysym 0xff52, Up), same_screen YES,
    XKeysymToKeycode returns keycode: 111
    XLookupString gives 0 bytes: 
    XmbLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 35, synthetic NO, window 0x2c00001,
    root 0x4a7, subw 0x0, time 74994809, (290,558), root:(1973,586),
    state 0x20, keycode 26 (keysym 0xff52, Up), same_screen YES,
    XKeysymToKeycode returns keycode: 111
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False

KeyRelease event, serial 35, synthetic NO, window 0x2c00001,
    root 0x4a7, subw 0x0, time 74995597, (290,558), root:(1973,586),
    state 0x20, keycode 108 (keysym 0xfe11, ISO_Level5_Shift), same_screen YES,
    XKeysymToKeycode returns keycode: 94
    XLookupString gives 0 bytes: 
    XFilterEvent returns: False
```

Do I need to/can I bind the arrow keys with ISO_Level5_Shift?

**Update**: other keys on level four seem to work, e.g. backspace and delete, tab and enter."07/25/18 09:05:50 PMIgnore errors when logger can't write to outputThis fixes #1457.7"Since this has been dead since 2017, without any other users reporting this issue, I'd assume it has been resolved.

If it should still exist, please let me know and I will re-open the issue."chrisduerrChristian Duerr07/24/18 08:48:14 PM"Override (e)print instead of (e)println

Since (e)println relies on (e)print, the (e)print macros have ben
overridden instead of the (e)println macros to make sure that if
(e)print should be used in the future, it will not cause any issues.

With this change implemented, all of logging, (e)println and (e)print
should never fail even if the stdout is not available."1
146002/24/17 03:36:11 PMYannick PÉROUXSome glyphs are not displayed properly"I've tried with a two variants of Source Code Pro with powerline support, and both cannot display some glyphs with alacritty.

My prompt with termite:
![deepinscreenshot20170224132402](https://cloud.githubusercontent.com/assets/2692721/23303524/e2bb15f2-fa94-11e6-8e72-03c56d56e7e2.png)

My prompt with alacritty:
![deepinscreenshot20170224132437](https://cloud.githubusercontent.com/assets/2692721/23303535/ec2ccbb2-fa94-11e6-9a96-c68f42846cc8.png)

Most unicode chars are displayed properly though. So far I've only identified the following broken chars:
✓ ⚠ ❌ ツ"09/19/18 07:18:52 PMAdd hidden escape sequence"This adds support for the `hidden` escape sequence `\e[8m`, which will
render the text as invisible.

This has also raised a few questions about the rendering of foreground
and background colors and their interaction with the different escape
sequences. Previously, Alacritty has oriented itself after URxvt, which
has some strange and unexpected behavior.

The new implementation of color inversion is modeled after XTerm, which
has a consistent pattern of always inverting the foreground and
background colors. This should hopefully lead to less confusion for the
user and a more consistent behavior.

A full matrix showcasing the new way Alacritty inverses text can be
found here:
https://i.imgur.com/d1XavG7.png

This fixes #1454 and fixes #1455.

@jwilm you've mentioned that things were implemented this way for a reason,
modeling Alacritty after URxvt and allowing transparency to work properly.
I'd be interested to hear what you think about the changes to color inversion,
I'd say this is a pretty clear improvement because it makes things a lot more
consistent."4"Ok great, I don't know how I've missed those ones :) .

Thanks for your work, alacritty is truly awesome!"chrisduerrChristian Duerr09/18/18 09:26:46 PMAdd changelog entry1
146302/25/17 03:55:37 PMJoe WilmChange cursor colors config to use text and cursor"This changes the cursor color config to use the `text` and `cursor` properties instead of the current `foreground` and `background` properties. The latter names stop making sense when dealing with cursors like a vertical bar or underscore. In the new system, the block, underscore, or vertical bar would always take the color of `cursor`, and the text would take the color of `text` when using a block, or keep its normal color when using the underscore or vertical bar.

A warning is now emitted on startup when the old form of cursor color config is used. This will be a hard error in the future.

cc @impowski"07/21/18 05:37:14 PMAllow specifying modifiers for mouse bindingsThis fixes #1462. =||= "Ok great, I don't know how I've missed those ones :) .

Thanks for your work, alacritty is truly awesome!"chrisduerrChristian Duerr07/21/18 05:23:53 PMAllow specifying modifiers for mouse bindings1
146402/26/17 04:01:39 AMHarlan Lieberman-Berg[WIP] Font fallback"This is a branch containing my work on font fallback.

It is still a WIP, largely untested, and doesn't even compile.  So there."07/22/18 12:44:14 AMSwitch to rustup clippy componentThis should make the nightly clippy builds a lot more consistent. =||= "Ok great, I don't know how I've missed those ones :) .

Thanks for your work, alacritty is truly awesome!"chrisduerrChristian Duerr07/22/18 12:33:25 AMSwitch to rustup clippy component1
146803/02/17 06:07:15 AMHarlan Lieberman-BergFont Fallback Support (Linux only)"This obsoletes and replaces #441.
"07/25/18 07:46:46 PMfix a couple of clippy findings and run subcrate tests on travis12This is ready for your review again, @jwilm.matthiaskrgrMatthias Krüger07/25/18 07:13:46 PM"travis: run tests of ""font"" crate explicitly

testing of copypasta crate was omitted due to problens when running on headless travis-ci environment
(x11 clipboard would fail)"1
147502/27/17 04:05:12 PMAndo “Thor” Nando Update cell to cursor template when adding a tab."references #85.

Will resolve one part of the rendering blank characters after setting background to something other than the default background."07/28/18 10:51:04 PMReplace `debug = 1` with `debug = true`"When I attempted to build for Debian stretch, I hit the following issue:

```
~/a/alacritty (master) 
$ cargo deb --install

cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```

Replacing the `1` with `true` seems to have fixed the issue!"3Thanks for the PR! I added a ref test to prevent regressions.nhunzakerNathan Hunzaker07/28/18 10:18:01 PM"Replace `debug = 1` with `debug = true`

When I attempted to build for Debian stretch, I hit the following issue:

```
~/a/alacritty (master) 
●° cargo deb --install
cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```

Replacing the `1` with `true` seems to have fixed the issue!"1
147702/27/17 04:12:43 PMZach DayImplement X-specific terminal escape codes"In many terminals in ZSH, such as `urxvt`, running `echo -ne ""\033;$TEXT\007""` sets the title of the terminal to `$TEXT`. (I'm not sure what the bash version of this would be.) This allows for useful things such as setting the terminal title to the current working directory and updating automatically."07/29/18 10:41:25 AMFix profile.release.debug key typeChanged type from integer to boolean. Faced a type mismatch while trying to install alacritty from master.3You are correct. Thanks for the tip.rdas1212Rounak Das07/29/18 10:27:37 AM"Fix profile.release.debug key type

Changed type from integer to boolean. Faced a type mismatch while trying to install alacritty from master."1
148603/05/17 11:49:29 AMAdam HuntHasklig font renders incorrectly "When I specify Hasklig as my font the glyphs are spaced incorrectly.

![screenshot from 2017-02-27 02-36-12](https://cloud.githubusercontent.com/assets/108151/23358417/b98596e0-fc96-11e6-9cf5-e848d5fb0f8f.png)

While the above screenshot includes a complex zsh prompt I see the same behavior when launching Alacritty with a default bash prompt by executing `env WAYLAND_DISPLAY= ~/devel/alacritty/target/release/alacritty -vvv -e bash`.

![screenshot from 2017-02-27 02-50-01](https://cloud.githubusercontent.com/assets/108151/23358594/77775d28-fc97-11e6-989f-c27622e60dd9.png)

Here's and example of how things are rendered in Gnome Terminal on the same machine.

![screenshot from 2017-02-27 02-37-42](https://cloud.githubusercontent.com/assets/108151/23358645/b5806b50-fc97-11e6-9c46-bd423913ba73.png)

The _exact_ font that I'm using is available here: https://github.com/i-tu/Hasklig"09/18/18 08:27:41 PMOpt-in to macOS Mojave Dark Mode"Fixes #1484

macOS 10.14 will bring a new system wide dark mode. To enable this, the [official guides][] suggest to relink using the newest OS. This approach, however, did not work for me as described in [an issue][] in the glutin repository.

As a second option, the accompanying `Info.plist` file can also overwrite the link-time check and enable dark mode rendering if the system config is set by setting `NSRequiresAquaSystemAppearance` to `YES`. This approach seems to work flawlessly no matter if a user opts into dark mode or not.

I would appreciate it if someone can test this on macOS 10.13 as well, but I suppose the key there is unused and would not break anything.

[official guides]: https://developer.apple.com/documentation/appkit/appkit_release_notes_for_macos_10.14_beta
[an issue]: https://github.com/tomaka/glutin/issues/1053#issuecomment-409315461"3I finally got back to this found that things work beautifully after installing Hasklig v1.1. Thanks @lukaslueg.philipp-spiessChristian Duerr09/18/18 08:25:02 PMAdd changelog entry1
148702/27/17 04:10:01 PMNoneChange font size by key shortcut"I'd like to change font size by a key shortcut, let's say ""ctrl++"".
I'm wondering how big this change would be.
I changed font in `alacritty.yml` and this didn't take the effect (like theme changing for example)."09/18/18 08:21:00 PMMention terminfo update is required when changing tabspaces"Changing tabspaces from the default (8) requires a corresponding
update to the `it` item in the terminfo entry used.

Some applications, like Emacs, rely on knowing the width of a tab, and
will experience unexpected behavior if the terminfo data does not
match the actual width used.

Closes #1482."1"Thanks for filing the issue! We're tracking this in #286; please subscribe to that issue for updates.

Live reload for font changes aren't yet supported, but it should arrive around the same time as font size changing."dnklDaniel Eklöf07/31/18 08:24:28 PM"Mention required terminfo update when changing tabspaces

Changing tabspaces from the default (8) requires a corresponding
update to the `it` item in the terminfo entry used.

Some applications, like Emacs, rely on knowing the width of a tab, and
will experience unexpected behavior if the terminfo data does not
match the actual width used."1
149103/01/17 11:18:53 PMRonan JouchetUnable to use Ctrl+{PageUp,PageDown} - unbound in default yml / missing documentation?"Hi,

I'm able to use alacritty with my existing tmux configuration, but some key combinations don't work.

* **Working**: `Shift+{Left, Right, Up, Down}` (which I use to switch panes), `Ctrl+B` (which I use to (un-)maximize panes, and a slew of others that work as expected.
* **Broken**: `Ctrl+{PageUp,PageDown}` don't do anything, even though I bound them in tmux to `next-window` (letting me ""switch tab"" like in a web browser), and they work as expected in gnome-terminal. Same for `Shift+{PageUp,PageDown}`, which I bound to tmux `previous-page` and `next-page`.

Then I'm unsure what to do at this point:

* Is this a bug?
* If not, is it missing configuration? I see in my `alacritty.yml` that the *working* key combinations are listed in `key_bindings` (e.g. `{ key: Left, mods: Shift, chars: ""\x1b[1;2D""}`) and indeed my *non-working* Ctrl+PgUp/Dn are not bound.
    * So I'd like to create two such bindings for Ctrl+PgUp/Down, but I have no idea what `chars` I should bind (Shift+Left was `\x1b[1;2D`, what is Ctrl+PgUp? My googling attempts were unsuccessful as I don't know how to *name* this thing I'm looking for: what is this string? A ""tty character""? a ""tty sequence""?
    * To prevent questions like mine, it would be awesome to guide users to finding `chars`. What do you think of either linking to a reference table, or suggesting some interactive unix tool capturing keystrokes and returning the equivalent tty keycode? That could be part of README.md or, better, a comment in the default YAML.

Thanks."09/24/18 07:06:12 PMStandalone terminfo definition"This replaces the current alacritty terminfo definitions with three standalone variants; `alacritty`, `alacritty-256color` and `alacritty-direct`.

They are all completely standalone, meaning they do not use any definitions from the system's terminfo database.

They are based off of the corresponding xterm definitions from ncurses 6.1. I've kept the fragments as-is. This makes it easier to compare with the xterm definitions (and to pull in future changes/fixes from xterm). It does however make the file much more verbose and perhaps unnecessarily difficult to navigate. It might make sense to merge all the basic fragments into the `alacritty` definition.

I've removed all the fragment comments, since I felt they apply to xterm but not alacritty.

`infocmp` shows no differences between the new alacritty definitions and xterm's. I'm putting it up for others to try it out. @chrisduerr .

Closes #1489 

- [x] Remove fragmentation of terminfo
- [x] Rename alacritty-256color to alacritty
- [x] Set the default $TERM used by Alacritty to alacritty
- [x] ~Remove export TERM=""alacritty"" part from README~ (couldn't find anything like this anywhere)
- [x] Update documentation of TERM in alacritty.yml
- [x] ~Clean up/remove capabilities tic complains about.~
- [x] Update README.md"51"@jwilm thanks for the fast answer :)

> If you're on a Linux system, you can run `showkey -a` to see the sequence sent by Control + PageUp in your original terminal.

Excellent! One nit: it worked for `Ctrl+PgUp/Dn` but not for `Shift+PgUp/Dn`. Nothing is outputted by `showkey -a` (I tried in both gnome-terminal and xterm, and out of tmux), I got around it starting to understand these sequences and the fact that `Shift` is the `;2` suffix.

I'm pushing a micro-pull-request one liner mentioning `showkey -a` in the default yml."dnklDaniel Eklöf09/23/18 10:10:48 AMCHANGELOG: split up 'standalone terminfo' changes1
149403/01/17 11:18:51 PMRonan JouchetFix #447 - yml: mention `showkey -a` to get x sequence from keyAm not touching the -macos yaml, as I'm not sure this works under macOS.08/05/18 10:15:11 PM"update deps via ""cargo update"" in order to fix crash in release mode: """"illegal hardware instruction (core dumped)""" =||= Looks good; thanks!matthiaskrgrMatthias Krüger08/05/18 09:30:41 PM"update deps via ""cargo update"" in order to fix crash in release mode: ""illegal hardware instruction (core dumped)"""1
149803/03/17 11:09:30 PMAaron HillImplement OSC command '1' (Set Icon Name)"Per the [Xterm control sequences](http://www.xfree86.org/4.7.0/ctlseqs.html) documentation, the OSC command '1' is used to set the ['Icon name'](https://unix.stackexchange.com/questions/234136/in-xterm-what-is-icon-name). While it may change the tab name in some terminal emulators, I haven't been able to find a working example yet.

Since alacritty doesn't support tabs anyway, I've made the '1' command set the window title, just as command '2' (Set window title and icon name) does.

For an example of a program which actually uses this command, install [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh), and launch a new `zsh` shell - no further modifications are needed. The command is issued [here](https://github.com/robbyrussell/oh-my-zsh/blob/b908feebcfb0ca8a9a80360d177e716c24c317d6/lib/termsupport.zsh#L22), which is run on every command given to zsh."08/07/18 08:03:29 PMfix -Zborrowck=migrate warnings."Found via
RUSTFLAGS=""-Zborrowck=migrate"" cargo check"4Thanks! Will be nice to get rid of this spam.matthiaskrgrMatthias Krüger08/06/18 09:11:05 AMfix -Zborrowck=migrate warnings.1
150310/18/19 12:37:05 PMPhilipp Emanuel WeidmannExtract into library/widget"Alacritty's stated intention to not support tabs and split panes for simplicity reasons is understandable, but also makes the terminal useless for many people who rely on these features (no, I'm not switching to tmux to get a poor text-mode approximation of what my window manager does so much better graphically). It would be a pity if such a promising terminal were limited to the i3/tmux niche.

A solution could be to extract the actual terminal (which is the hard part to get right for any emulator) to a library or widget in the spirit of GNOME's VTE. VTE has been very successful and is used by more than a dozen emulators, some of them minimal, others specialized (e.g. dropdown terminals), and yet others full-featured with all bells and whistles.

The current Alacritty application would be a thin wrapper around the terminal widget and construct a configuration object by just deserializing a YML file, which is about as minimal as it gets and should satisfy the soul of any purist. But another emulator based on the same widget could offer tabs and splits, and a graphical configuration dialog. It could also use platform-specific UI, e.g. header bars in GNOME, and feel more like a native application that way."09/17/18 09:37:01 PMGive zsh completion file the correct name when installing with `cargo deb --install`5"> The `alacritty` crate should show you an example of how to interact with the library. There's still some work left to be done to separate these two crates but generally you should just have to replace `alacritty` bit by bit.

This is amazing, thank you for taking the time to separate them.  Very helpful."ntninjaAlexander Schlarb08/10/18 11:06:59 PMDocument a more sensible solution for making the `alacritty-completions.zsh` available to `zsh`1
150703/02/17 05:40:05 AMvexedRequires nightly rustup and not stable to install"do 

rustup install nightly
rustup run nightly bash

to get rustup switched to the terminal tab you're running && then cargo build --release to build the binary in the alacritty folder, this is if you got compilation issues when compiling the source/(to)binary in question"09/17/18 11:34:56 PM"set_locale_environment(): use String::new() instead of String::from("""")."They behave identical except for String::new() not allocating anything. =||= Alacritty definitely builds on stable. Note that the minimum rustc version supported is 1.15.matthiaskrgrChristian Duerr09/17/18 11:23:24 PMRemove redundant closure1
150803/02/17 05:19:02 PMJoe WilmWide char supportAdds support for wide characters. Basically, an extra cell is used as space for wide characters. Also fixes an issue with OSC string parsing that I discovered while testing this feature.08/14/18 12:44:05 PMUpdate readmetrying to trigger drone =||= Alacritty definitely builds on stable. Note that the minimum rustc version supported is 1.15.jknutsonJohn M. Knutson08/14/18 12:41:00 PMupdate readme1
151404/04/17 03:54:05 AMMichel BoaventuraEnable Shift + Insert to paste"Shift + Insert is a default bind to paste selection.

I don't know if this is used on Mac, so I didn't change it."09/17/18 10:01:55 PMadded `fontconfig-devel` dependency for building on Void LinuxRunning `cargo install --git https://github.com/jwilm/alacritty.git alacritty` on my system failed before I installed `fontconfig-devel`. =||= Makes sense; thanks!nothingnessesVoidNoire08/19/18 09:34:15 PM"added `fontconfig-devel` dependency for building on Void Linux

Running `cargo install --git https://github.com/jwilm/alacritty.git alacritty` on my system failed before I installed `fontconfig-devel`."1
151807/01/17 11:11:13 PMMichel BoaventuraDel key not working on SSH"I'm having a strange behavior and couldn't figure out what is going on.

If I ssh to *some* machines from within alacritty the Del key stops working on the shell, but works on vim. Using another terminal (I've tried with qterminal and xterm) everything works fine. I've tried to diff the difference from ``stty -a`` between the two terminals but found none. Also played with ``bind`` and ``infocmp`` with no luck. Finally I ran alacritty with debug enable and find out there is no difference between pressing a key local or remote.

I'm using Gentoo locally and both Gentoo and Ubuntu remotely. What puzzles me most is that it works in some Ubunto and Gentoos, but doesn't on another.

Do you have any advice pin this down?"09/23/18 04:21:48 PMFix mesa rendering outside window borders on wayland"This PR essentially reverts https://github.com/jwilm/alacritty/commit/62eb1e293898357ee46a9ba6c4e7cf87a6af1ea2 but fixes issue https://github.com/jwilm/alacritty/issues/1517. 

Fixes #1536
Fixes #1517
Fixes #1282
Fixes #1227 "8This is because of a bad key binding in the original config. See b169459c991f4ac92d4be2ec5aeb846457157818 for a solution.trimentalLucas Timmins09/17/18 11:50:43 PMAdd changelog entry1
152103/06/17 10:42:38 PMRonan JouchetAlacritty is not associated to its .desktop-defined icon due to non-matching WM_CLASS"1. Build Alacritty under Ubuntu 16.04.2, and deploy the .desktop
2. Launch Alacritty
3. Alt-Tab

***Expected***: the icon defined in the `.desktop` file should show up in the switcher

***Actual***: the default ""missing icon"" Ubuntu-provided question mark shows up instead

## Cause

As [encountered by other apps](https://github.com/aseprite/aseprite/issues/846), this seems to be due to the fact that Alacritty's `WM_CLASS` is `Alacritty`, which totally freaks out whatever-piece-of-ubuntuware-doing-window-to-.desktop-matching, failing to match `alacritty`.

```bash
~ xprop
WM_NAME(STRING) = ""ronj""
WM_NORMAL_HINTS(WM_SIZE_HINTS):
                program specified size: 1024 by 768
WM_CLASS(STRING) = ""Alacritty"", ""Alacritty""
_NET_FRAME_EXTENTS(CARDINAL) = 0, 0, 28, 0
WM_STATE(WM_STATE):
                window state: Normal
                icon window: 0x0
...
```

## Workaround

Add `StartupWMClass=Alacritty` to the `.desktop` file. Tested, working for me.

## Better solution?

Maybe make `WM_CLASS` equal to `alacritty` ? I'm not sure; was there a strong reason for the capitalization?"09/17/18 09:44:30 PMFixed fish completions in the deb installer2"@chrisduerr yeah, I'll be able to do that, though I'm not done researching the problem yet. It's unfortunately tricky, since there are heuristics in place that make it hard to tell when we're doing something incorrectly.

I've got it working perfectly with my own application, but for some reason Alacritty's icon only wants to show up in `latte-dock` and `cairo-dock`, and not in `plank`. It's not a big deal though, so I'll submit a PR even if I don't figure that out.

Installing `.desktop` files manually seems to be a bad idea. Detection worked more reliably once I switched to using the utils:
```bash
sudo desktop-file-install alacritty.desktop
sudo update-desktop-database
```"LucretielNathan West08/24/18 11:44:39 PMFixed fish completions in the deb installer1
152212/24/17 06:17:19 PMChris PickPossible more-efficient direction for font fallback"I started playing around with Alacritty a few weeks ago and decided to poke
around with font-fallback as a way to learn a little Rust.
I got things working a bit and before kicking off this pull request fetched the
latest changes from upstream.  Lo and behold, there's already work going on in
master, really cool!

Comparing the two approaches, I think there will probably be some benefit in
combining them.  This branch stores `CharSet` data from the single, original
`font_sort()` and uses it to more-rapidly search for a suitable font-face
whenever an as-of-yet unhandled character is discovered.

I believe the master's current approach (creating a `CharSet` with the new
character and conducting a new `font_match()`) may be a better way to handle the
case where the original search turned up no faces with glyphs for the character.
This branch just punts and gives the ""main"" face to FreeType to render the
dreaded ""missing-character-rectangle"" glyph.
(I haven't explicitly tested combining the two, it's possible that the searches
done by master's technique are only yielding faces that this branch is already
testing and no further searches are beneficial.)

I'm certainly enjoying Rust and this is a cool project!"08/25/18 03:04:51 PMRemove debug from release profileThe default release profile should probably not have debug symbols in it, by default. Developers can always opt-in to it manually if needed.3Thanks for sending this PR. There's some ideas here which we can incorporate into the current fallback routine that should improve fallback performance. I'm going to file an issue to track that and close this PR since much of what's added here has a functional equivalent on master already.LucretielNathan West08/25/18 06:21:07 AMRemove debug from release profile1
152703/04/17 11:49:11 PMAaron HillHandle CSI command J3 (Clear saved lines)"Xterm supports an extension to the CSI command [Erase in Display (ED)](http://www.xfree86.org/4.7.0/ctlseqs.html), under the command number 3. This command is used to clear the scrollback buffer - e.g. anything not visible on the screen.

Since scrollback [may not be added](https://github.com/jwilm/alacritty/issues/124) to alacritty, I've made the handler for this command do nothing. If at some point scrollback is implemented, the corresponding `match` arm can be modified to properly handle this.

For an example of a program which uses this command, run the `clear` command (using ncurses 6.0). In a supported terminal such as `gnome-terminal`, this will clear anything off of the screen from the scrollback buffer. In the current alacritty `master`, this will generate an `Unhandled CSI` message."09/17/18 08:32:09 PMProposal: Set COLORTERM variable to advertise 24-bit support"Set `COLORTERM` to `truecolor` in order for applications to be able to
detect that alacritty supports 24-bit colors.

See https://gist.github.com/XVilka/8346728 for more details.

closes #1526" =||= @jwilm I've modified the commit message.sharkdpChristian Duerr09/17/18 08:05:15 PMAdd changelog entry1
153209/27/17 04:05:00 PMAnders Pitmanalacritty windows don't seem to render until focused in i3"When I switch away from a workspace containing an alacritty window and then switch back, the alacritty window sometimes (50-90% of the time) renders whatever was on the other workspace until I refocus on the alacritty window.

System:
arch with linux 4.9.11-1
i3 4.13-1
GTX950 with nvidia 378.13-2 driver"09/05/18 04:02:13 PMRemove redundant copy when selecting font_keySmall PR to stop the redundant copying of `glyph_cache.font_key` for each cell when the cell is bold or italic, probably will only make the slightest perf improvement if rendering loads of underlined or bold cells =||= seems fixed for metrimentalLucas Timmins09/02/18 01:29:17 PMRemove redundant copy when selecting font_key1
154010/09/17 05:21:00 AMJames CashAbility to disable anti-aliasing on Linux"I prefer to use a non-aliased font for my terminal; as far as I can determine, there's no way to force alacritty to use non-anti-aliased text rendering on Linux?

![screenshot-2017-03-05_21 03 55_est-05 00_1488765835](https://cloud.githubusercontent.com/assets/38405/23594343/4749e51c-01e7-11e7-91a3-11af89a2022e.png)

(Left is konsole, right is alacritty, both using the same font, but alacritty is much ""fuzzier"")"09/17/18 08:00:43 PMFix #1539."Fixes a regression on non-MacOS platforms caused by the fix for
issue #1291.  The fix is to follow platform norms for mouse click
behavior on unfocused terminals.  On MacOS, the first click (that
gives the window focus) is swallowed, and has no effect on the
terminal.  On all other platforms, the first click is passed through
to the terminal.

A new config option is added to the ""mouse"" section of the config,
called ""ignore_unfocused_click"".  If unspecified, it will follow
the default for the platform.  Very few users are likely to want
to use non-platform-standard behavior here, but the option is there."12@jwilm any news here? For me it's a showstopper (running on linux)nolanlChristian Duerr09/17/18 06:32:45 PMAdd changelog entry1
154205/18/18 11:12:45 PMRonan JouchetRunning tig within Alacritty invokes Zalgo"Running the awesome [tig](https://github.com/jonas/tig/) (2.2.1) under Alacritty (master, aa76b29) / tmux 2.3 / Ubuntu 16.04.2, everything is rainbows initially,

then after n̝͖avigat̠͖̬̹͔̩i͎̱͚̰̝͎͓n̟g̮ co̮m̼̮̖̦̰mi͉̙̮̭̙ts̪̟̫̹̼


--͠ I ̧he͢a̡r ͝it ̕brea̛thi̡n̸g beh͢iǹd͟ ͝the̵ ̨W̸A҉ĻL --,

[Z̶a͢͜͠lg̢o͞](http://knowyourmeme.com/memes/zalgo) ͟i̴̛̕s inv̢͏o̷̡͟ké̡͘d̸ ̵̕a̕͟ńd̴͘҉ ̵c͝or̷̶r͏̵up̵̨ts̛͢ ̡ţ̢h̕e͝ ̧̧͡s̵̴̕c͟r̴eè̸̀-***Ḩ̵̢E̡͢ ͠͞C҉̨O͢͡M̨͟ES͝***

![alacritty-tig-corruption](https://cloud.githubusercontent.com/assets/522085/23619255/17d573c6-0261-11e7-9b4e-fc41a1455b70.gif)

The same `tig` runs smoothly under gnome-terminal+tmux without ever invoking Zalgo."09/17/18 05:27:12 PMAdd gperf travis build dependency"Some builds were failing with an error which mentions that `gperf` needs
to be installed.

This should fix failing builds on linux by installing the required
package before anything else."1"Can not reproduce on latest master. Probably got fixed at some point in time?

If it's not fixed, please reopen, or tell me to reopen."chrisduerrChristian Duerr09/13/18 01:54:57 PMFix clippy issues1
154803/08/17 03:47:26 PMBryce Fisher-FleigOSX: Add app packing tooling - tweaks and polish"Continuation of work started in https://github.com/jwilm/alacritty/pull/301 by @cema-sp which seems to be stalled at the moment. I've just followed all the suggestions in that PR until the code worked for me.

Instructions for building an app bundle:

 1. `cargo build --release`
 2. `make app`
 3. `cp -r target/release/os/Alacritty.app /Applications/Alacritty.app`

For me, this allows me to run Alacritty from the Dock."09/17/18 07:09:40 PMadded mention of official arch linux package"Hello,
I have moved `alacritty` to the official arch linux repositories: https://www.archlinux.org/packages/community/x86_64/alacritty/

Thanks for the cool work! It would be nice to have signatures for future releases. 
"1This is fantastic! Thanks for the great work guys!shibumiChristian Duerr09/17/18 07:07:46 PMRemove duplicate newline1
155103/06/17 10:42:32 PMBryce Fisher-Fleig(fix) Associates .desktop file with running process in Linux desktop OSesAddresses #45509/18/18 03:54:41 PMSet upper limit for scrollback history size"Since the scrollback history allocates all lines in memory, it is
possible to specify a scrollback history which is big enough to freeze
the computer due to OOM.

To resolve this issue, an upper limit of `100_000` has been set for the
scrollback history. Even though this might still cause some systems to
freeze, this should provide a good balance for most users."2Thanks!chrisduerrChristian Duerr09/17/18 10:26:14 PM"Set upper limit for scrollback history size

Since the scrollback history allocates all lines in memory, it is
possible to specify a scrollback history which is big enough to freeze
the computer due to OOM.

To resolve this issue, an upper limit of `100_000` has been set for the
scrollback history. Even though this might still cause some systems to
freeze, this should provide a good balance for most users."1
155907/01/17 11:06:21 PMNoneAlacritty crashes when rendering some combining characters"Opening a file containing the character wؔ, `w\u0614` crashes alacritty.
The issue, I believe, is due to the small diacritic hugging a larger glyph, which results in a out of bound access while trying to pack the font's buffer. Fix on  #465."09/20/18 12:04:08 AMsrc/grid/storage.rs: fix 32-bit compability"Use usize instead of u64 to fix 32-bit builds.

This fixes #1552."8This should be resolved.jnbrJohannes Brechtmann09/18/18 07:11:07 PM"src/grid/storage.rs: fix 32-bit compability

Use usize instead of u64 to fix 32-bit builds."1
156705/29/17 04:52:26 PMNoneFix out of bounds access in glyph buffer.09/19/18 09:55:35 PMUpdate core-graphics, core-foundation etc."The following upstream changes needed adapting to:
- font_path() returns a PathBuf now
- get_descriptors() returns an Option<CFArray>
- get_advances_for_glyphs and get_glyphs_for_characters are now unsafe."1This has been addressed in #590 jrmuizelChristian Duerr09/19/18 09:34:27 PMUpdate dependencies1
156904/04/17 04:03:34 PMRoman ShmatovFix tabulation rendering"Hey,

I've found two problems with tabulation rendering:
1. tabulation grid is filled incorrectly, it has 8 false elements on the head of the vector. https://github.com/jwilm/alacritty/commit/7906c8125a81199b097cf74b7d156673871d8149
2. there is a case when no empty columns will be rendered for `\t`. https://github.com/jwilm/alacritty/commit/37ad49476f0aeb434557f386dedc945df28e8610

Fixes: https://github.com/jwilm/alacritty/issues/142

A couple of screenshots

Before:
<img width=""290"" alt=""echo"" src=""https://cloud.githubusercontent.com/assets/1387388/23656416/703e792c-035b-11e7-8551-e772db47ce00.png"">

After:
<img width=""290"" alt=""fixed echo"" src=""https://cloud.githubusercontent.com/assets/1387388/23656423/75f536da-035b-11e7-8108-de7ade038b77.png"">

Before:
<img width=""440"" alt=""ls"" src=""https://cloud.githubusercontent.com/assets/1387388/23656494/c5962ad2-035b-11e7-990f-27f1a1d712ca.png"">

After:
<img width=""440"" alt=""fixed ls"" src=""https://cloud.githubusercontent.com/assets/1387388/23656500/c9ca7d74-035b-11e7-89ce-5aa0dc6f3619.png"">

There is a problem with `tab_bg_highlight` test, but it seems that we just should update [grid.json](https://github.com/jwilm/alacritty/blob/master/tests/ref/tab_bg_highlight/grid.json). Is there any way to do it automatically?"09/19/18 09:37:37 PMShow hollow cursor for windows starting unfocused"Alacritty made the assumption that every window started as focused and
because of that the hollow cursor wouldn't show up for windows which are
launched without focus.

Since even the initial focus should be reported as a focus event by
winit, this could be easily fixed just setting the default window state
to unfocused instead of focused.

This fixes #1563." =||= Thanks again @shmatov chrisduerrChristian Duerr09/19/18 08:06:09 PM"Show hollow cursor for windows starting unfocused

Alacritty made the assumption that every window started as focused and
because of that the hollow cursor wouldn't show up for windows which are
launched without focus.

Since even the initial focus should be reported as a focus event by
winit, this could be easily fixed just setting the default window state
to unfocused instead of focused.

This fixes #1563."1
157004/01/17 06:34:04 PMHenry SnopekAlacritty stops responding when opening OSX emoji panel"## Description
Upon opening the OSX emoji panel, alacritty becomes non-responsive.

## Steps to reproduce
1. Open alacritty (HEAD)
2. Open emoji panel `ctrl + cmd ⌘ + space`

## Emoji Panel
![](https://cldup.com/biKjYiIE02.png)"11/19/18 07:36:42 PMAdded fullscreen option to configresolves #38 - at least for macos. Not tested with other platforms.11Closing in favor of #411.mheuserMoritz Heuser10/23/18 07:18:40 PMMerge branch 'master' of https://github.com/jwilm/alacritty into feature/fullscreen-option1
157103/09/17 02:37:07 PMAlberto SilvaAlacritty DPI on screen change"First off, this is freaking amazing, excellent work. 

The issue is when I switch monitors, say from my laptop retina to a non retina via airplay or whichever way to switch displays, the DPI does not update, is there a way to address this? Not an immediately pressing issue, but certainly nice to have. Thanks!"09/24/18 12:12:46 PMAuto copy selection to primary clipboard."With `save_to_clipboard: true` in `selection` section of
`alacritty.yml`. The selected string will automatically copy to primary
clipboard."13@blx ah correct, closing.cathay4tChristian Dürr09/24/18 09:34:18 AMImprove wording of documentation1
157303/08/17 08:00:40 PMNiklas DusenlundAdd Action to desktop file"The added Action allows the user to open new alacritty windows on
systems that support it.

https://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#extra-actions"09/20/18 02:16:27 PMUpdate snapcraft.yaml"The existing snapcraft.yaml is pointing to a file that has been renamed,
subsequently breaking the snap build. This change renames the .desktop
file to match what is in-tree."1Looks good; thanks!ChrisMacNaughtonChris MacNaughton09/20/18 06:39:53 AM"Update snapcraft.yaml

The existing snapcraft.yaml is pointing to a file that has been renamed,
subsequently breaking the snap build. This change renames the .desktop
file to match what is in-tree."1
157704/04/17 03:56:28 AMHirokazu HataUpdate README.md"#462 add OS X desktop entry Makefile.

Thanks @brycefisher "09/20/18 04:58:46 PMFix config error with missing decorations field"The latest change to window decorations
(3b46859eceea39afb8bbc760235cc15de78d3ff3) introduced a regression when
running Alacritty without the `decorations` field specified in the
configuration file. Since serde wasn't setup to fallback to the default,
the complete config deserialization would fail.

This resolves this issue by deserializing it to the default decorations
value ""Full"". To make this setting a little more forgiving, this also
introduces another change which ignores the case for the configuration
options. So both `full` and `FuLl` are now accepted." =||= "There's some issues with the desktop entry that I'd like to resolve before publicizing it too much. Going to close this, and we can look at documenting it later.

Thanks for the PR @h-michael, and sorry for the change of heart about landing it."chrisduerrChristian Duerr09/20/18 04:42:27 PMFix clippy issues1
157905/28/17 06:51:19 AMMaxim BazAlacritty does not set the $WINDOWID environment variable"Some apps expect this variable to contain a decimal number, but in alacritty this variable is not set.
From what I can tell in other terminals, this is just a large decimal number.

One ask: please make sure to make it _decimal_, not hex number, because apps like `ranger` [expect it to be a decimal number](https://bugs.launchpad.net/sakura/+bug/1625614).

Example:

- sakura terminal:

    ```
    ❯  echo $WINDOWID
    73400323
    ```

- alacritty terminal:

    ```
    ❯  echo $WINDOWID
    
    ```"09/22/18 02:46:42 AMUnify configuration file structure"Before getting into the meat of the changes introduced by this PR,
I want to provide some background information on why I propose
these changes.

Originally I just wanted to remove the notice from the mouse bindings
that modifiers are not supported, but I noticed that the available
actions were not complete either. To make future changes simpler I
wanted to reference the key binding options, however these have always
been very complicated in my opinion, so I decided to try and refactor those.

After the key bindings were refactored, I just tried to get the rest of the
configuration file in line with the changes I had made to the key and
mouse binding sections.

I don't think there's anything wrong with the current configuration file,
however I personally find it easier to make changes myself when there
is some consistent structure present which I can follow when making
new additions. My hope with these changes is that it makes reading
the configuration file easier, but also allows easily adding new stuff in the
future.

These are some guidelines used for this refactoring:
- Specify that changes require restart consistently
- Unify the specification of available field values
- Provide clear distinction between description title and body
- Try to end lines at ~80 characters

Since the main changes in this PR are the alterations to the key
configuration documentation. I'd especially appreciate feedback about
the changes to this section."4Fixed in #586 ❤chrisduerrChristian Duerr09/22/18 01:05:57 AMAdd introduction to keybindings section1
158103/10/17 06:59:29 PMJohn HopperDisplaying Certain Unicode Characters Crashes Alacritty"Ran into this while on IRC via `tmux` and `weechat`. The characters being displayed were unicode emoji code points. I saw some rumbling on the `#alacritty` freenode channel about double-width characters and figured that this might be related.

### Bug Details
**Platform:** `Linux - 4.10.0 #2 SMP - x86_64 GNU/Linux`
**Compiled with:** `rustc 1.17.0-nightly (b1e31766d 2017-03-03)`

#### Offending input
```
2017-03-09 12:32:03     GolBot  [ twitter - it's B! Cavello ✊ on Twitter: ""The ""gig economy"" is literally killing us.  Most depressing ad of the day goes to: @fiverr 🙃 https://t.co/xq0sxsL55t"" ]
```

#### Backtrace
```
got font path=""/usr/share/fonts/dejavu/DejaVuSansMono.ttf""
got font path=""/usr/share/fonts/dejavu/DejaVuSansMono-Bold.ttf""
got font path=""/usr/share/fonts/dejavu/DejaVuSansMono-Oblique.ttf""
num_cols, num_lines = 85, 36
num_cols, num_lines = 80, 24
num_cols, num_lines = 213, 65
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
thread 'main' panicked at 'index 82 out of range for slice of length 80', /checkout/src/libcore/slice.rs:578
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: core::slice::slice_index_len_fail
             at /checkout/src/libcore/slice.rs:578
   1: font::ft::FreeTypeRasterizer::get_rendered_glyph
             at /checkout/src/libcore/slice.rs:709
             at /checkout/src/libcore/slice.rs:560
             at ./rsys/packages/alacritty/master/font/src/ft/mod.rs:217
   2: font::ft::FreeTypeRasterizer::get_rendered_glyph
             at ./rsys/packages/alacritty/master/font/src/ft/mod.rs:194
   3: alacritty::renderer::GlyphCache::get
             at ./rsys/packages/alacritty/master/font/src/ft/mod.rs:85
             at /checkout/src/libstd/collections/hash/map.rs:1873
             at ./rsys/packages/alacritty/master/src/renderer/mod.rs:267
   4: alacritty::run
             at ./rsys/packages/alacritty/master/src/renderer/mod.rs:785
   5: alacritty::main
             at ./rsys/packages/alacritty/master/src/main.rs:64
```"09/22/18 02:43:50 PMHide window on shutdownI've noticed that closing terminal windows by logging out of the shell can take some time. Hiding the window immediately makes it look instantaneous.2"Thanks for the report! I think there's actually a PR up that fixes this, but I haven't had time to investigate. Maybe you'd like to try it out? #465 

Would you mind linking the other issue?"pcapriottiPaolo Capriotti09/21/18 03:01:30 PM"Hide window on shutdown

Shutting down can take some time, but the window can be closed immediately."1
158303/23/19 07:33:28 PMJonas KalderstamAlt-Left/Right and Home/End don't work and prevent alacritty from closing"Not sure what's up but  `Alt-Left`, `Alt-Right`, `Home`, and `End` do not work as expected.

For example: hitting `Alt-Left` will make the terminal flash and then type a literal `D`.

However hitting `Alt-b` works and does the config suggets `Alt-Left` should do. Issue with escaping somehow?

Even weirder is that after I try any of those ""faulty"" shortcuts typing `exit` does not quit the terminal and the entire program seems to freeze. It's not even possible to close the window by hitting the ""X"" in the corner. I have to manually kill the process.

Config is pretty much default:

```
key_bindings:
  - { key: V,        mods: Shift|Control, action: Paste                        }
  - { key: C,        mods: Shift|Control, action: Copy                         }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1b[4~"",  mode: AppCursor   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Delete,                  chars: ""\x1b[3~"",  mode: AppKeypad   }
  - { key: Delete,                  chars: ""\x1b[P"",   mode: ~AppKeypad  }
```"02/09/19 11:10:48 AM(WIP/PoC) Add wayland clipboard support"This PR is a work in progress / proof of concept for wayland clipboard integration into alacritty. 

The way this PR accesses the wayland clipboard can be seen as kind of a hack (its not explicitly bad but comes with compromises and probably isn't the intended way to access the clipboard), the reason the 'proper' way isn't used is because it would require winit to either expose internal wayland objects that would cause winit breakage and instability or winit would have to provide a clipboard api interface (I'm not too sure what winit's stance on this is).

Currently wayland is used for the clipboard backend if `.set_wayland(wayland_display: *mut c_void)` is called on the `Clipboard` object, I'll probably try to make a better way of setting wayland such as using a building pattern or something and split up linux.rs into a linux directory in src like winit and glutin does.

The way the wayland clipboard functions at the moment is that it spawns a new thread that takes the `wayland_display` and uses it to create various needed wayland objects, the thread then loops every 50ms (this can be any value and is the balance between clipboard access time and cpu usage)  and checks every loop for wayland events and/or requests from the main thread to do things like store or load data.

The code quality is pretty bad at the moment because its still a WIP but the code should show the necessary changes required for wayland clipboard support.
"11"~can confirm that it works :)~

EDIT: @kchibisov Doesn't work. 
- I reinstalled alacritty by using the cargo install method. (My version is `alacritty 0.3.3 (24651a6)`).
- `cat` and `Alt-Left`/`Alt-Down` did print out the characters you indicated.
- If I type a command (say, `echo -e ""\e[1mbold\e[0m""`), and I try to move the cursor to the previous/next work with `Alt-Left`/`Alt-Down`, the terminal prints the last letter of the ANSI Code (D, B, A, C, and so on).
- My key bindings are squeaky clean. I guess I'll have to use the alternative key bindings again!

Thanks :)"trimentalLucas Timmins12/01/18 08:37:04 AMFix copying and pasting to self1
158403/16/17 03:30:46 PMNoneVertical alignment in the row different from usual"alacritty
<img width=""79"" alt=""screen shot 2017-03-10 at 15 07 51"" src=""https://cloud.githubusercontent.com/assets/486807/23795013/725c02e2-05a4-11e7-9e9a-00d5b3c9ae7e.png"">

iterm2
<img width=""92"" alt=""screen shot 2017-03-10 at 15 08 46"" src=""https://cloud.githubusercontent.com/assets/486807/23795025/769ab164-05a4-11e7-9dfe-8e7e0b6c6824.png"">

I know this is a tiny bug but want to leave it here :)"09/24/18 06:40:10 PMDynamically initialize grid storage"Previously Alacritty has initialized all lines in the buffer as soon as
it is started. This had the effect that terminals which aren't making
use of the scrollback buffer yet, would still consume large amounts of
memory, potentially even freezing the system at startup.

To resolve this problem, the grid is now dynamically resized in chunks
of `1000` rows. The initial size is just the visible area itself, then
every time lines are written to the terminal emulator, the grid storage
is grown when required.

With the worst-case scenario of having 100_000 lines scrollback
configured, this change improves startup performance at the cost of
scrolling performance.

On my machine the startup changes from ~0.3 to ~0.2 seconds.

The scrolling performance with large throughput is not affected, however
it is slowed down when the number of lines scrolled are close to the
100_000 configured as scrollback. The most taxing benchmark I've found
for this was running `yes | dd count=500 > 500.txt` (note the relatively
small file size). This will cause a slowdown on the first run from 0.05s
to 0.15s. While this is significant, it lines up with the time saved at
startup.

This fixes #1236.

**Edit:** I have not mentioned the memory difference at startup in the
commit message, so here's the comparison for 100k lines of scrollback:

| Master | PR |
| - | - |
| 571M | 74K |"1Thanks for the follow up!chrisduerrChristian Duerr09/24/18 06:35:00 PMFix outdated documentation text1
158504/04/17 04:39:59 AMCasey RodarmorUse just instead of make"This PR:

- Changes the makefile which builds the MacOS app package into a justfile
- Changes instances of `osx` into `macos`, since that seems to be the new name
- Adds a `macos-` prefix to the recipe names so that other recipes can be added without conflicting

Just is a command runner which avoids the complexity and idiosyncrasies of make while retaining the concise syntax: https://github.com/casey/just

This introduces a dependency for building the mac app, so I'll understand if you don't want to merge it.

If you like the idea of trying out just but don't want to introduce it as a dependency for building the mac app, I can close this PR and open one which has a simple justfile and doesn't modify the current makefile.

Some advantages of just:

- Variables are single-assignment and order-independent, which makes them very easy to reason about and avoids the `=` vs `:=` duality of make
- Undefined variables generate an error instead of expanding into the empty string
- Both runtime and compile time messages are *much* better than make's. They are colored, give precise information about what went wrong, and highlight the line in question
- Close enough to makefile syntax that vim and emacs syntax highlighting work well out of the box
- Does not depend on make, so behavior is correct regardless of the system-provided make
- Is not a build system, so does not need `.PHONY` targets or other hacks
- Written in rust, installs through cargo
- Supports doc-comments, listing recipes, listing evaluated variables, and other helpful command line options
- Like git, just can be invoked in any subdirectory of the project
- Tabs or spaces both work for indentation, as long as they are consistent within a single recipe

It's very good as a place to store frequently run project-specific commands, both for yourself and collaborators. For example, different ways of running tests, different build configurations, running with a debugger, fuzz testing, running kcov, etc. Basically, anything you currently reverse search your shell history to find. See [here](https://github.com/ssokolow/rust-cli-boilerplate/blob/master/justfile) and [here](https://github.com/casey/boilerplate/blob/master/justfile) for examples."09/25/18 01:04:34 AMFix reset cursor terminfo escape"The reset cursor terminal escape sequnce specified in the terminfo file
was using xterm's `\E[2 q`. However this just resets the cursor to the
block cursor shape.

Since Alacritty supports the `\E[0 q` escape sequence for resetting the
cursor shape to the original shape specified in the configuration file,
the terminfo file has been altered to make use of this sequence instead." =||= "@casey Thanks for the PR! I had never heard of Just until reading here. Seems like it does a lot of things right where Make dropped the ball.

> This introduces a dependency for building the mac app, so I'll understand if you don't want to merge it.

Definitely not thrilled about the idea of an extra dependency that's not universally available. Having to add extra instructions for anyone building from source is a non-starter for me. Sorry :(

> Maybe it would be possible to keep both the makefile and add the justfile for those of us that would get great use from it?

Then they would both need to be maintained, and they would undoubtedly get out of sync.

Thanks again for the PR and discussion here. Going to keep the Makefile for now."chrisduerrChristian Duerr09/24/18 11:19:04 PM"Fix reset cursor terminfo escape

The reset cursor terminal escape sequnce specified in the terminfo file
was using xterm's `\E[2 q`. However this just resets the cursor to the
block cursor shape.

Since Alacritty supports the `\E[0 q` escape sequence for resetting the
cursor shape to the original shape specified in the configuration file,
the terminfo file has been altered to make use of this sequence instead."1
158706/23/17 06:36:39 PMNone[WIP] add possibility for debug and feature build from makefile"with this changes you're able to build allacritty in debug mode and/or witch a different feature set when using the makefile e.g.:
`make  binary DEBUG=true FEATURES=""""` will build allacritty in debug mode without default features

WIP since I'm on linux and can't test the changes"12/02/18 04:11:52 PMRequest user attention when bell received in macOS"We now request the user's attention in macOS when a visual bell
character is received. This manifests as the window jumping up and
down in the dock.

Depends on #1403.
Depends on tomaka/winit#664 for the changes to `WindowExt` on macOS."11"Hey @juggle-tux,

Thanks for the PR! Unfortunately, I think this feature shouldn't be included in the Makefile. The only reason we even have a Makefile is to simplify building an `Alacritty.app` on macOS. The sort of feature you've proposed here is mirroring what you can already do by using cargo, and I don't think we need an extra way to do that.

If there's some other motivation that's not clear, feel free to comment and we can reconsider."brennieChristian Duerr12/02/18 04:11:22 PMMerge branch 'master' into brennie/macos-bell-urgent1
159004/19/17 02:59:24 AMZach DayAdd capability to set working directory as a command line argument.As it stands, running `alacritty -e 'cd foo'` causes `Command::spawn()` to fail with OS error code `2`. With this feature, running `alacritty -c foo` runs alacritty from the working directory `foo` via `libc::chdir`, with the intended purpose of starting the shell from a specific directory. It mirrors the functionality of the `-cd` flag from `urxvt`.09/26/18 05:38:42 PMImplement CNL and CPL escape codesI was running some software that used CPL so I implemented these.3"@zacharied thought you might like to know that I've got a [branch] that sets `_NET_WM_PID`. You might care about this because it allows supports what your script does without relying on the window title. See the commit messages for details.

[branch]: https://github.com/jwilm/alacritty/tree/set-net-wm-pid"NickeZNiklas Claesson09/26/18 03:32:16 PMImplement CNL and CPL escape codes1
159204/04/17 04:34:07 AMLukas HolecekFix hang on exit after child process failed"Quick test (works ~50%) is to press Ctrl+C followed by Ctrl+D.

Reproducible on Arch Linux with OpenGL from NVidia.

Fixes #228 

**NOTE:** I'm not sure what the original code tried to solve but AFAIK terminal emulators exit with code 0 even if last child process exit code is non-zero (or is terminated).

Call stack when the app hangs:

```
__GI___sched_yield (__GI___sched_yield @7f4ac603a700:5)
___lldb_unnamed_symbol1397$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol1397$$libGLX_nvidia.so.0 @7f4ac1c10950:8)
___lldb_unnamed_symbol36172$$libnvidia-glcore.so.378.13 (___lldb_unnamed_symbol36172$$libnvidia-glcore.so.378.13 @7f4ac092c710:80)
___lldb_unnamed_symbol899$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol899$$libGLX_nvidia.so.0 @7f4ac1be7bd0:45)
___lldb_unnamed_symbol929$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol929$$libGLX_nvidia.so.0 @7f4ac1beb6e0:244)
___lldb_unnamed_symbol1662$$libGLX_nvidia.so.0 (___lldb_unnamed_symbol1662$$libGLX_nvidia.so.0 @7f4ac1c5c000:112)
_dl_fini (_dl_fini @7f4ac705a750:128)
__run_exit_handlers (__run_exit_handlers @7f4ac5f9c5d0:70)
__GI_exit (@7f4ac5f9c71a:3)
std::sys::imp::os::exit (/build/rust/src/rustc-1.15.1-src/src/libstd/sys/unix/os.rs:526)
std::process::exit (/build/rust/src/rustc-1.15.1-src/src/libstd/process.rs:858)
alacritty::tty::sigchld (/home/lukas/apps/alacritty/src/tty.rs:56)
___lldb_unnamed_symbol1$$libc.so.6 (__restore_rt @7f4ac5f99a90:3)
__GI___poll (__GI___poll @7f4ac6048650:15)
___lldb_unnamed_symbol4$$libxcb.so.1 (___lldb_unnamed_symbol4$$libxcb.so.1 @7f4ac388c840:39)
xcb_wait_for_event (xcb_wait_for_event @7f4ac388e630:28)
_XReadEvents (_XReadEvents @7f4ac3aeb070:88)
XPeekEvent (XPeekEvent @7f4ac3adc9c0:57)
glutin::api::x11::window::{{impl}}::next (/home/lukas/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/cc64178/src/api/x11/window.rs:297)
glutin::platform::platform::api_dispatch::{{impl}}::next (/home/lukas/.cargo/git/checkouts/glutin-2b5ecc80feb2e4c5/cc64178/src/platform/linux/api_dispatch.rs:169)
```"09/28/18 07:53:58 PMFix deserialization of old decorations values"The deprecated `window.decoration` values `true` and `false` were using
the `visit_bool` visitor for serde. However it seems like with yaml, the
str visitor is used instead.

To print the correct deprecation notice, the bool visitor has been
removed and the warning has been added for the `""true""` and `""false""`
str visitor." =||= This looks good; thanks!chrisduerrChristian Duerr09/27/18 08:42:54 PMFix recommended values in config warnings1
159704/04/17 04:30:06 AMLukas HolecekFix reading output when all child processes exited"Reproducible with e.g. `alacritty -e ls` (app panics when reading
output).

Hopefully this won't break #14."09/28/18 10:07:25 PMFix rendering of selections outside the viewport"When rendering selections with both start and end outside of the visible
area, Alacritty would assume that both start and end are either above or
below the viewport and not render the selection at all.

To fix this the `buffer_line_to_visible` method now returns a
`ViewportPosition` instead of an `Option<Line>`, this allows giving more
feedback about where outside of the visible region the line is using the
`ViewportPosition::Above` and `ViewportPosition::Below` varients.

Using these newly introduced varients, a selection spanning the whole
screen is now rendered if the selection should go from above the visible
area to below it.

This fixes #1557." =||= "Thanks for the PR!

I thought we might solve this in a little different way. The error handling in the event loop was only ever half finished, so I've gone ahead and cleaned it up in #505. Swapping the `hup` check to the front of event handling prevented either a panic or error condition from being hit in the first place."chrisduerrChristian Duerr09/27/18 07:02:55 PM"Merge methods together

The `buffer_line_to_visible` and `offset_to_line` methods have been
merged together, since the `offset_to_line` method was not used anywhere
else."1
160005/29/17 12:36:56 AMDeleted userthread 'main' panicked at 'index 50 out of range for slice of length 48', /checkout/src/libcore/slice.rs:578"```RUST_BACKTRACE=1 alacritty
thread 'main' panicked at 'index 50 out of range for slice of length 48', /checkout/src/libcore/slice.rs:578
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: <unknown>
  10: <unknown>
  11: <unknown>
  12: <unknown>
  13: <unknown>
  14: __libc_start_main
  15: <unknown>
```

Arch Linux, `alacritty-git`, happens with both rust stable and nightly from rustup."11/02/18 01:34:03 AMFix Selection While Scrolling"Properly update an active selection while scrolling the main scrollback buffer.

- [x] Standard scrolling support
- [x] Rebase down to three commits (cell_side update, standard scrolling, changelog)
- ~Faux scrolling support~ succeeded by #1644 and #1640 (possibly)

Fixes #1598."4"You've got what may be a duplicate bug here: #185 

I'll cross-post some digging I did (seems to have to do with pitch and width calculations, and perhaps width being larger than pitch?):

I've run into this issue as well (specifically the 'index 68 out of range for slice of length 64' version of the panic). Here is some gdb info at the point where the panic occurs in font/src/mod.rs:
```
(gdb) next
212             let mut packed = Vec::with_capacity((bitmap.rows() * bitmap.width()) as usize);
(gdb)
213             for i in 0..bitmap.rows() {
(gdb)
214                 let start = (i as usize) * pitch;
(gdb)
215                 let stop = start + bitmap.width() as usize;
(gdb)
216                 packed.extend_from_slice(&buf[start..stop]);
(gdb) info locals
stop = 8
start = 0
i = 0
iter = core::ops::Range<i32> {start: 1, end: 16}
packed = collections::vec::Vec<u8> {buf: alloc::raw_vec::RawVec<u8> {ptr: core::ptr::Unique<u8> {pointer: core::nonzero::NonZero<*const u8> (0x7ffff511a080 ""\000""), _marker: core::marker::PhantomData<u8>}, cap: 128}, len: 0}
pitch = 4
buf = &[u8] {data_ptr: 0x7ffff07f5b80 ""\000"", length: 64}
bitmap = freetype::bitmap::Bitmap {raw: 0x7ffff50855d8}
glyph = 0x7ffff07e1c08
index = 128
c = 127 '\x7f'
size = 10
face = 0x7ffff07e1bf8
faces = std::collections::hash::map::HashMap<font::FontKey, freetype::face::Face, std::collections::hash::map::RandomState> {hash_builder: std::collections::hash::map::RandomState {k0: 810756667983202956, k1: 9049055774554616794}, table:
std::collections::hash::table::RawTable<font::FontKey, freetype::face::Face> {capacity: 32, size: 4, hashes: std::collections::hash::table::TaggedHashUintPtr (core::ptr::Unique<usize> {pointer: core::nonzero::NonZero<*const usize> (0x7ffff07e1a00), _marker: core::marker::PhantomData<usize>}), marker: core::marker::PhantomData<(font::FontKey, freetype::face::Face)>}, resize_policy: std::collections::hash::map::DefaultResizePolicy}
self = 0x7fffffff4f78
glyph_key = 0x7fffffff3c80
have_recursed = true
```
Note that pitch = 4, while the difference between start and end (i.e. bitmap.width()) is 8. On our last iteration, we end up here (some variables omitted):
```
(gdb) info locals
stop = 68
start = 60
i = 15
iter = core::ops::Range<i32> {start: 16, end: 16}
pitch = 4
buf = &[u8] {data_ptr: 0x7ffff07f5b80 ""\000"", length: 64}
c = 127 '\x7f'
```
Not sure how best to fix it. My stopgap is to replace line 216 in mod.rs with:
```
let stop = cmp::min(buf.len() as usize, start + bitmap.width() as usize);
```
...but I'm sure there's a better way. Let me know if there is any other info from the trace you need."nixpulvisNathan Lilienthal11/02/18 12:37:06 AMRight you are good sir!1
160104/04/17 03:58:28 AMAndré Pascal BeyerAdded installation notes for MacOS.I've tried building it on MacOS. Seems to work fine.09/28/18 08:11:45 PMAdd notes about package install on FreeBSD"Hi!
Attached patch adds a note to the readme about binary package for alacritty on FreeBSD." =||= "Thanks for the PR!

`fontconfig` shouldn't be needed on macOS. Did you run into an issue that required installing it? Looking at the _Cargo.toml_ for the _font_ crate, `fontconfig` is only build when `not(target_os = ""macos"")`."zeisingNiclas Zeising09/28/18 08:03:27 PMAdd notes about package install on FreeBSD1
160205/25/17 05:36:03 PMHenry John KuptyAlacritty fails when opening neovim"This happens for master and it immediately closes after I try to open `nvim`:

```
got font path=""/usr/share/fonts/TTF/iosevka-term-medium.ttf""
got font path=""/usr/share/fonts/TTF/iosevka-term-regular.ttf""
got font path=""/usr/share/fonts/TTF/iosevka-term-mediumitalic.ttf""
num_cols, num_lines = 136, 54
[Unhandled CSI] action='q', args=[2], intermediates=[32]
[Unhandled CSI] action='h', args=[1004], intermediates=[63]
[Unhandled CSI] action='t', args=[8, 54, 136], intermediates=[]
thread 'main' panicked at 'index 61 out of range for slice of length 60', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/slice.rs:578
stack backtrace:
   1:     0x55cac5bbb14a - <unknown>
   2:     0x55cac5bba5d1 - <unknown>
   3:     0x55cac5bb9730 - <unknown>
   4:     0x55cac5bb9281 - <unknown>
   5:     0x55cac5bb91f9 - <unknown>
   6:     0x55cac5bceba6 - <unknown>
   7:     0x55cac5bce9c3 - <unknown>
   8:     0x55cac5b9a004 - <unknown>
   9:     0x55cac5b99bb0 - <unknown>
  10:     0x55cac5abb1a0 - <unknown>
  11:     0x55cac5a11ec6 - <unknown>
  12:     0x55cac5a0a016 - <unknown>
  13:     0x55cac5a18560 - <unknown>
  14:     0x7f649259e510 - __libc_start_main
  15:     0x55cac59d8a59 - <unknown>
  16:                0x0 - <unknown>
```"09/30/18 08:44:15 PMBump fontconfig dependenciesThe patch uses the Cargo.toml `patch` section to force a single downstream choice of freetype-sys instead of relying on forks of other crates. It also bumps the fontconfig/freetype dependencies in the process.2Making #515 the canonical issue for thisjonhooJon Gjengset09/29/18 09:06:15 PMReduce code bloat1
160505/02/17 06:33:32 PMYi Rongabnormal font position (always align bottom)"As you can see in the pic below, especially the airline/powerline, the fonts are like stick to the bottom, and the y-offset can only adjust the height above the font. 
It would probably be better if the font is centered in line height instead of sinked in the bottom.
![image](https://cloud.githubusercontent.com/assets/10568668/24024066/777c27dc-0a7e-11e7-903a-43bcebd24128.png)

I'm using Manjaro Linux 17.0
Installed alacritty from AUR.
The terminal font is a powerline-patched Hack font called Knack Nerd Font"10/03/18 01:38:04 AMMake the macOS bundle compatible osx 10.12"On macOS 10.12.6 (as far as I can test), running `make app` creates a
bundle that refuses to start (it complain application is only compatible
with more recent versions of macOS. The binary works great when running
it directly.

As far as I can tell this fixes the issue and the bundle works great
(despite the other issues reported for login shell, but I guess that's
another story).

I'm going to _assume_ that targeting 10.11 or lower would also work.
I don't know what effect this have on the final binary and whether this
removed  some optimisation. Maybe that could be conditionally setup
depending on the version of macOS this is built on?"8"A little note on this, while I tried to align the fonts here.
1. You'll need to restart alacritty for `glyph_offset` changes to take effect
2. Keep the glyph_offset as half of the offset is my rule of thumb. My offset y was: 15 hence a glyph_offset y of 8 just worked out for me.

Hope this helps."CarreauMatthias Bussonnier09/29/18 07:02:57 PM"Set macOS target in Makefile.

This attempt to extract the current macos target in the makefile, and
should allow the bundle to work on the machine this was build on.

One of the advantage is that it will work on old os, by still allowing
further optimisation on recent ones.

This has one big drawback vs build.rs. Make will _not_ detect that
cargo-build need to be re-ran if it has been ran before.
That is to say the two command in sequence will lead to a broken bundle.
 - cargo build --release
 - make app"1
160703/26/19 04:53:04 PMPavelFont is blurry on MacOS"Fonts look considerably more blurry if compare them with iTerm. It is especially noticeable for blod variant.

![screen shot 2017-03-17 at 12 02 27](https://cloud.githubusercontent.com/assets/281294/24042420/c4dc62ea-0b09-11e7-8b34-8d4545f216dc.png)"09/30/18 09:54:09 PMStore grid cells in renderer and drop terminal lock before rendering"This PR stores grid cells in the renderer when `fn draw()` is called and then releases the terminal lock so that rendering can be done without the terminal locked.

This also creates a new function `fn render_grid()` which is almost the exact same as `fn render_cells()` but uses the reference to the grid passed by the renderer to the render api, I think this might be the only way to do it without copying the entire grid to turn it into an iterator.

`RenderableCell` derives debug so it can be stored in the renderer

These changes give me about a 400ms speedup when rendering a 500mb alt-screen-random-write file with cat.

Fixes https://github.com/jwilm/alacritty/issues/1535
Hopefully fixes https://github.com/jwilm/alacritty/issues/1529 (can't test on macos)"4Thanks!trimentalLucas Timmins09/29/18 02:31:50 PMStore renderable cells locally instead of `QuadRenderer`1
160807/10/20 01:58:49 PMOliver UvmanAdd option to respect font hints"In urxvt, I can set my fonts as follows:
```
URxvt*font: xft:Inconsolata:style=Medium:bold:pixelsize=18:antialias=true:hinting=true:hintstyle=hintfull
URxvt*boldFont: xft:robotomono:style=Medium:italic:pixelsize=18:antialias=true:hinting=true:hintstyle=hintfull
```

The hinting ensures that the font renders beautifully. I can achieve similar (or maybe the same?) results by setting the x and y offsets in alacritty, but if I ever change font size, I have to re-adjust these offsets.

I understand that this might be an enormous amount of work to ask for, but I think future users of the font library would appreciate it a lot."09/29/18 08:48:25 PMFix failing test with `bench` feature"Using the `bench` feature, `cargo test` was failing since one of the
benchmarks was running into a debug assertion for attempting to access a
line with an index beyond the grid length.

Since this issue was caused by the `len` property not being serialized
and deserialized, the `#[serde(skip)]` attribute has been changed to
`#[serde(default)]`. The ref-test has been edited to include the correct
grid length for proper deserialization.

This fixes #1604." =||= We do respect Fontconfig's hinting settings.chrisduerrChristian Duerr09/29/18 08:16:08 PM"Fix failing test with `bench` feature

Using the `bench` feature, `cargo test` was failing since one of the
benchmarks was running into a debug assertion for attempting to access a
line with an index beyond the grid length.

Since this issue was caused by the `len` property not being serialized
and deserialized, the `#[serde(skip)]` attribute has been changed to
`#[serde(default)]`. The ref-test has been edited to include the correct
grid length for proper deserialization.

This fixes #1604."1
160903/23/17 09:08:52 PMTimoshiCan't see the speed benefits with tmux"I know your main use case is alacritty with tmux however once launching tmux all the speed benefits of alacritty become bottlenecked by tmux itself.

Perhaps this is just a bug in my setup and this is not intended behavior.  I have run tests on arch linux using both intel open drivers and nvidia proprietary drivers. 

Without tmux alacritty does a 'time find /' in 3s with intel and 1s with nvidia.  When I launch tmux that becomes 10s regardless of driver, which is virtually the same as the 'st' terminal I normally use."09/29/18 09:00:01 PMtravis: make sure #1604 would fail travis in the future1I just did some experimenting with the latest tmux master and it seems the situation has improved drastically. I am getting nearly identical results now with and without tmux. seems this issue can be closed.matthiaskrgrMatthias Krüger09/29/18 08:57:14 PMtravis: make sure #1604 would fail travis in the future1
161703/21/17 01:17:00 PMAlberto SilvaOperator Mono and VIM"## Update: Solved
See below.

Trying to figure out how to render italics properly using operator mono and vim. Book Italic is the correct weight, if I set it as the normal font face, it renders perfectly but using it as the italic, and in combination with the Vimrc settings is no good. Any insights?

In alacritty config:
```
font:
  normal:
    family: OperatorMonoSSm
    style: Book

 italic:
    family: OperatorMonoSSm
    style: Book Italic

```

In my vimrc.
```
highlight Comment gui=italic cterm=italic
highlight htmlArg gui=italic cterm=italic
```"10/22/18 07:39:27 PMAdd option to open URLs on click"This adds the option to automatically launch URLs with a specified
program when clicking on them.

The config option `mouse.url_launcher` has been added to specify which
program should be used to open the URL. The URL is always passed as the
last parameter to the specified command.

This fixes #113."25Thanks this helped a lot!chrisduerrChristian Duerr10/21/18 10:28:29 PMFix tests1
161904/01/17 06:24:48 PMTiziano Santorobackground colour does not fill empty lines"I have the following setting in my `.tmux.conf`:

```
set -g window-style 'bg=colour0'
set -g window-active-style 'bg=colour8'
```

The expectation is that the active pane will have a different background colour, but in practice it looks like the following screenshot:

![screenshot from 2017-03-21 10 55 38](https://cloud.githubusercontent.com/assets/387628/24144401/fd0962e4-0e24-11e7-8528-e75bd40819c9.png)"10/03/18 11:29:38 AM"Add information about ""background_opacity"" option"In order to avoid mistakes like in https://github.com/jwilm/alacritty/issues/1612 =||= Closing in favor of #85.gnumokshaChristian Duerr10/03/18 11:27:39 AMRemove useless comma1
162203/22/17 03:06:44 PMJørn Lode`-e` flag doesn't appear to work with nvim"Edit: (Original comment had too much pebcak)

The -e flag doesn't work with nvim here. [Here's what it looks like when I try.](https://gfycat.com/UnlinedAthleticAbalone)

Update: Looks like a plugin issue in nvim. My bad. :) Works fine if I just remove syntastic.

Original comment:

The `-e` flag appears to be quite broken.

When running `ls`, the new terminal closes instantly after being created, and alacritty doesn't seem to be happy about it.

```
# alacritty -e ls
num_cols, num_lines = 213, 62
thread 'pty reader' panicked at 'unexpected read err: Error { repr: Os { code: 5, message: ""Input/output error"" } }', src/event_loop.rs:252
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```"10/14/18 09:01:10 PMExtract manual installation instructions"Alacritty's manual installation instructions take up a lot of space in
the README and they are hard to navigate because there's a lot of
information for specific distros which are irrelevant to most users.

To improve this situation, the manual installation section has been
moved to the `INSTALL.md` file. This allows keeping the readme to a
minimum which just includes the straight-forward instructions required
to install it on systems which provide packages for it.

Having a separate file also makes it possible to add a full index just
for the installation instructions, which makes it possible to skip
sections which are irrelevant."4The panic is probably because the child process dies and alacritty tries to read from the child afterwards. I'm going to assume that there is a race condition when the child process dies.chrisduerrChristian Duerr10/05/18 10:27:31 PMRemove dedicated manual install instructions1
162706/23/17 05:53:15 PMJake MerdichAdd dim color support"Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config,
it will default to 2/3 the previous (not a spec, but the value
other terminals seem to use). 

The actual dimming behavior brings bright colors to normal and
regular colors to the new dim ones. Custom RGB values are not
changed, nor are non-named indexed colors.

Old behavior:
![Old Behavior](https://i.imgur.com/CYwY4Nr.png)

New behavior:
![New Defaults](https://i.imgur.com/JKwdnao.png)

New behavior with (odd-looking) custom colors:
![New w/ Custom Colors](https://i.imgur.com/ngKLRH9.png)

The colors from the config file are roughly Tomorrow Night Eighties."10/28/18 12:47:16 PMAdd /Applications link to .dmg"For easier installation.

I can swear I've seen some .dmg's to automatically copy the .app into /Applications. Or maybe it asked when you started the .app. Can't find any information about it now though = /"5"Haven't heard back from you at all, so I went ahead and landed this in a separate commit. You're still tagged as the author so you'll show up in the contributors page.

Thanks again for the PR!"simmelSimon Lundström10/05/18 12:32:51 PM"Add /Applications link to .dmg

For easier installation"1
162905/01/17 04:56:43 PMNone[Regression] broken `htop` display"currently affected master: 715d4f8

working revision: 82c9235

![spectacle qq8577](https://cloud.githubusercontent.com/assets/3148759/24270236/4009e116-100c-11e7-9a1a-c3ce0ffb343c.png)

Steps to reproduce:

1. `htop`
2. wait a few seconds

bisect:

96a1503040787006a45a69dc55916d983d96421e is the first bad commit
```
commit 96a1503040787006a45a69dc55916d983d96421e
Author: Anders Rasmussen <divinegod@gmail.com>
Date:   Mon Feb 27 19:12:04 2017 +1100

    Update cell to cursor template when adding a tab.

:040000 040000 3eccbe6686773a3c4a7af2d9f1b392be20697b0e 6c49e2ea7f92f46bdcdd40f594624e54af9b631b M	src
```"10/07/18 09:10:59 PMfix erroneous indexed_color results"First off thanks for Alacritty, I've been loving it!

Since v0.2.1 I attempted to set custom indexed_colors and noticed that I was getting erroneous results.

If set to a color value of 200, nothing would get set:
`- { index: 200, color: '0x2ec6c6' }`

If set to a color value of 20, 20 would be set along with other indexed numbers (random from 25-160):
`- { index: 20, color: '0x2ec6c6' }`

20 20: Rgb { r: 46, g: 198, b: 198 }
25 20: Rgb { r: 46, g: 198, b: 198 }
30 20: Rgb { r: 46, g: 198, b: 198 }
35 20: Rgb { r: 46, g: 198, b: 198 }
40 20: Rgb { r: 46, g: 198, b: 198 }
55 20: Rgb { r: 46, g: 198, b: 198 }
60 20: Rgb { r: 46, g: 198, b: 198 }
65 20: Rgb { r: 46, g: 198, b: 198 }
70 20: Rgb { r: 46, g: 198, b: 198 }
90 20: Rgb { r: 46, g: 198, b: 198 }
95 20: Rgb { r: 46, g: 198, b: 198 }
100 20: Rgb { r: 46, g: 198, b: 198 }
125 20: Rgb { r: 46, g: 198, b: 198 }
130 20: Rgb { r: 46, g: 198, b: 198 }
160 20: Rgb { r: 46, g: 198, b: 198 }

This PR compares the ic.index value to the full_cube mutable index variable instead of 16 + r + g + b. Using this method I was able to get consistent and accurate indexed_color results."1"I guess not. Did some digging ([this](https://unix.stackexchange.com/a/118903/44909) SO answer was pretty helpful), and it turns out that the right thing to do is to have `alacritty-256color` set as your `TERM` outside of tmux, and then have tmux announce itself to the ""inner"" terminal as `tmux-256color` with the following entry in `.tmux.conf`:
```
set -g default-terminal ""tmux-256color""
```
Since alacritty also supports true-color mode, you can also add:
```
set -ga terminal-overrides "",tmux-256color:Tc""
```"shizyRobert Winterstein10/06/18 09:24:45 PMupdate changelog with indexed_color fix1
163405/01/17 04:56:43 PMNone"Revert ""Update cell to cursor template when adding a tab.""""Reverted commit introduced a regression that caused `htop` to have
~broken display (misplaced/missing characters).

Fixes #493.

This reverts commit 96a1503040787006a45a69dc55916d983d96421e."10/07/18 06:40:58 PMFix invalid default config"Serde has problems deserializing yaml files which contain sections
without any values. Since the `TERM` setting has been removed recently,
the `env` section was completely empty leading to deserialization
errors.

To resolve this the `env` section has been commented-out by default, if
the user wants to set a variable, it is now necessary to uncomment that
section.

Some minor tweaks have also been made to the existing `TERM` comments,
to clearly indicate these are value examples instead of comments." =||= Ok, cool. Thanks for doing the bisect and identifying this. Since only part of that patch is causing the issue, I'm opting not to revert the entire commit. This will get closed in a separate PR shortly.chrisduerrChristian Duerr10/07/18 06:25:53 PM"Fix invalid default config

Serde has problems deserializing yaml files which contain sections
without any values. Since the `TERM` setting has been removed recently,
the `env` section was completely empty leading to deserialization
errors.

To resolve this the `env` section has been commented-out by default, if
the user wants to set a variable, it is now necessary to uncomment that
section.

Some minor tweaks have also been made to the existing `TERM` comments,
to clearly indicate these are value examples instead of comments."1
164211/24/18 12:55:53 PMMatthew ScharleyHomebrew formula"Just wanted to mention that I've made a homebrew formula.

Installation instructions:

```
$ brew tap mscharley/homebrew
$ brew install alacritty
```

If you want to cache the rust installation along with cargo libraries across builds then you can append `--with-cache` to the `brew install` command.

Lets keep this thread to discussions of the package itself, issues using it to my issue queue please: https://github.com/mscharley/homebrew-homebrew/issues"10/14/18 10:23:55 PMAdd statusline capabilities to Terminfo"Closes #1636 

@chrisduerr, @dnkl: Is it alright to just put the new capabilities at the bottom of the file or do you want it formatted a certain way?"2Since the homebrew installation method is now part of the official documentation, this issue seems resolved.RunningDroidRunningDroid10/11/18 12:53:23 AMAdd statusline capabilities to Terminfo1
165106/20/17 10:11:34 AMMatthew ScharleyFix the ability to pin the app to the dock"After installing Alacritty, I found I couldn't pin the application to the dock (in mac os) for easy launching. This change fixes that.

According to the Apple documentation, this property is an identifier in reverse domain form, similar to Java package namespaces.

https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070"10/14/18 08:10:43 PMAdds fullscreen config and keybinding feature (Fixes #38)2"Thanks for following up!

cc #628 "martskinsmartskins10/13/18 05:30:32 AMUpdate config.rs1
165305/16/17 10:35:50 PMKenny WooSlow start up when using fzf --height"When using `fzf` with `--height` option, fzf is slow to start up. This issue is not occurring with termite.

alacritty config: default
fzf version: 0.16.6

It takes a noticeable ~1 second for `fzf --height 40%` to start up.

Still trying to figure out how fzf creates this window. It may be ncurses, as that is used for the full screen window.
Anyone else experiencing this or know where I can start?"04/14/19 02:38:04 AMSetup automated benchmarks"To make sure that performance in Alacritty is consistent,
it has been requested in #221 to add automated benchmarks which
can catch performance regressions with pull requests.

This makes use of Travis' webhooks to automatically start the
benchmarking process on a webserver I've hosted on my personal
VPS for now. The benchmarking code can be found here:
https://github.com/chrisduerr/alacritty-perf

All Alacritty tests have been moved to criterion, which is also what
is used in the server to test the performance of Alacritty. Any test
added to Alacritty will be automatically added to the automated
benchmarks without any additional setup required.

I've gone through a bunch of testing trying out different variations
to automate Alacritty's benchmarks. That includes using xvfb,
Rust's native benchmarks and criterion.rs and I've tested all of these
both on Travis directly and my VPS.

The conclusion of my tests was that xvfb with software rendering using
the `vtebench` tool is infeasible because the rendering is so slow that
it becomes the sole performance bottleneck and other code changes are
completely ignored. Using Rust's built-in benchmarks was successful on
my VPS, however they're lacking dedicated setup methods. While
criterion.rs was far more inconsistent in the beginning, with some slight
tweaks it was possible to get closer to Rust's built-in benchmarks while
still providing a setup method.

As an example the results of my testing can be found here:
https://perf.christianduerr.com

Note that the big performance spike was an intentional regression
introduced to test the process. The code changed can be found
here:
https://github.com/jwilm/alacritty/pull/1369/files#diff-1130fcb67aac96a3d3e47407ca7a49f1R200

Currently this is still using a patched version of criterion, but I'll try
to send a PR to upstream these changes.

This fixes https://github.com/jwilm/alacritty/issues/221."1Thanks @siiptuo. Closing issue.chrisduerrChristian Duerr10/14/18 02:50:56 PM"Revert ""Intentional regression""

This reverts commit e07fdac3d5817738d1a32de83f71d4be808fc82f."1
165603/27/17 04:09:48 PMNoneRemap `Copy` and `Paste` to use `Shift + Control` instead of `Command`Closes #307.10/16/18 07:16:13 PMFix appveyor badge linkThis fixes #1655. =||= This looks great. Thanks!chrisduerrChristian Duerr10/16/18 07:13:49 PMFix appveyor badge link1
165805/29/17 04:24:21 PMPreston Carpentercat /dev/urandom crashes alacritty (again)"While testing alacritty on Way Cooler, I ran into this issue after running the simple stress test of `cat /dev/urandom`. This was on the latest master, downloaded from the AUR package.

Error output:

```
num_cols, num_lines = 135, 64
[unhandled] esc_dispatch params=[], ints=[], byte='4' (34)
[unhandled] esc_dispatch params=[], ints=[], byte='9' (39)
[unhandled] esc_dispatch params=[], ints=[], byte='j' (6a)
[unhandled] esc_dispatch params=[], ints=[], byte='m' (6d)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='N' (4e)
[unhandled] esc_dispatch params=[], ints=[], byte='f' (66)
[Unhandled CSI] action='}', args=[], intermediates=[]
[unhandled] esc_dispatch params=[], ints=[], byte='a' (61)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='q' (71)
[unhandled] esc_dispatch params=[], ints=[], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[], byte='R' (52)
[unhandled] esc_dispatch params=[], ints=[], byte='x' (78)
[unhandled] esc_dispatch params=[], ints=[], byte='4' (34)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='p' (70)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='A' (41)
[unhandled] esc_dispatch params=[], ints=[], byte='F' (46)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[32], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
thread 'main' panicked at 'index 61 out of range for slice of length 60', /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libcore/slice.rs:578
stack backtrace:
   1:     0x557f968bec8a - <unknown>
   2:     0x557f968be111 - <unknown>
   3:     0x557f968bd270 - <unknown>
   4:     0x557f968bcdc1 - <unknown>
   5:     0x557f968bcd39 - <unknown>
   6:     0x557f968d2606 - <unknown>
   7:     0x557f968d2423 - <unknown>
   8:     0x557f9689daf4 - <unknown>
   9:     0x557f9689d6a0 - <unknown>
  10:     0x557f967bc760 - <unknown>
  11:     0x557f96713366 - <unknown>
  12:     0x557f9670b4d6 - <unknown>
  13:     0x557f96719a80 - <unknown>
  14:     0x7fc8646c3510 - __libc_start_main
  15:     0x557f966d9b09 - <unknown>
  16:                0x0 - <unknown>
[unhandled] esc_dispatch params=[], ints=[], byte='R' (52)
[unhandled] esc_dispatch params=[], ints=[], byte='m' (6d)
[unhandled] esc_dispatch params=[], ints=[], byte='@' (40)
[unhandled] esc_dispatch params=[], ints=[], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[], byte='r' (72)
[unhandled] esc_dispatch params=[], ints=[], byte='u' (75)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='U' (55)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='~' (7e)
[unhandled] esc_dispatch params=[], ints=[], byte='R' (52)
[unhandled] esc_dispatch params=[], ints=[], byte='|' (7c)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[], byte='v' (76)
[unhandled] esc_dispatch params=[], ints=[], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[], byte='N' (4e)
[unhandled] esc_dispatch params=[], ints=[], byte='h' (68)
[unhandled] esc_dispatch params=[], ints=[], byte='p' (70)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='q' (71)
[unhandled] esc_dispatch params=[], ints=[], byte='|' (7c)
[unhandled] esc_dispatch params=[], ints=[], byte='F' (46)
[unhandled] esc_dispatch params=[], ints=[], byte='n' (6e)
[unhandled] esc_dispatch params=[], ints=[], byte='h' (68)
[unhandled] esc_dispatch params=[], ints=[35], byte='m' (6d)
[unhandled] esc_dispatch params=[], ints=[], byte='l' (6c)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[40], byte='_' (5f)
[unhandled] esc_dispatch params=[], ints=[40, 44], byte='V' (56)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[], byte='L' (4c)
[unhandled] esc_dispatch params=[], ints=[], byte='O' (4f)
[unhandled] esc_dispatch params=[], ints=[], byte='u' (75)
[unhandled] esc_dispatch params=[], ints=[], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='y' (79)
[unhandled] esc_dispatch params=[], ints=[], byte='i' (69)
[unhandled] esc_dispatch params=[], ints=[], byte='f' (66)
[unhandled] esc_dispatch params=[], ints=[], byte='C' (43)
[unhandled] esc_dispatch params=[], ints=[], byte='u' (75)
[unhandled] esc_dispatch params=[], ints=[41], byte='y' (79)
[unhandled] esc_dispatch params=[], ints=[], byte='Q' (51)
[unhandled] esc_dispatch params=[], ints=[], byte='d' (64)
[unhandled] esc_dispatch params=[], ints=[], byte='r' (72)
[unhandled] esc_dispatch params=[], ints=[45, 39], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[], byte='W' (57)
[unhandled] esc_dispatch params=[], ints=[], byte='{' (7b)
[unhandled] esc_dispatch params=[], ints=[], byte='K' (4b)
[unhandled] esc_dispatch params=[], ints=[], byte='4' (34)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[40], byte='b' (62)
[unhandled] esc_dispatch params=[], ints=[], byte='n' (6e)
[unhandled] esc_dispatch params=[], ints=[], byte='C' (43)
[unhandled] esc_dispatch params=[], ints=[41], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[34, 41], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[37], byte='x' (78)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='a' (61)
[unhandled] esc_dispatch params=[], ints=[], byte='t' (74)
[unhandled] esc_dispatch params=[], ints=[45], byte='L' (4c)
[unhandled] esc_dispatch params=[], ints=[44], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='p' (70)
[unhandled] esc_dispatch params=[], ints=[], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='9' (39)
[unhandled] esc_dispatch params=[], ints=[44], byte='g' (67)
[unhandled] esc_dispatch params=[], ints=[35], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[42], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='~' (7e)
[unhandled] esc_dispatch params=[], ints=[], byte='3' (33)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[33], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='e' (65)
[unhandled] esc_dispatch params=[], ints=[45], byte='g' (67)
[unhandled] esc_dispatch params=[], ints=[], byte=':' (3a)
[unhandled] esc_dispatch params=[], ints=[], byte='b' (62)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[], byte='6' (36)
[unhandled] esc_dispatch params=[], ints=[47], byte='z' (7a)
[unhandled] esc_dispatch params=[], ints=[], byte='G' (47)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[40], byte='x' (78)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[], byte='l' (6c)
[unhandled] esc_dispatch params=[], ints=[36], byte='L' (4c)
[unhandled osc_dispatch]: [['ò','|','s',',','K','<','þ','`','1','+','4','!','¸','\u{87}','Ø','\u{81}','l',' ','U','5','Ó','<','Ô','×','d','÷','ÿ','ß','ý','\u{9e}','ú','º','à','¥','É','½','Ó','v','<','X','a','G','b','ÿ','ÿ','ü','¢','¸','C','Ò','Ë','9','µ','r','Û','Ó','\u{98}','\u{8e}','\u{8e}','§','¡','5','ê','\u{9c}','ê','½','e','\u{87}','\'','\\','#','ä','\u{8c}','\u{99}','}','ë','\u{9e}','µ','\u{88}','+','Â','p','ö','a','ç','\u{87}','&','´','ú','Å','þ','Ã','\\','g','\u{9b}','»','$','î','Î','\u{97}','\u{a0}','\u{92}','\u{94}','©','^','Ó','Õ','Ú','\""','\u{88}','\u{8b}','¨','\u{80}','Ó','¸','p','r','x','\u{83}','\u{99}','¸','\u{92}','T','ø','H','C','É','Ø','%','b','\u{80}','\u{89}','Ñ','$','4','{','a','ù','Ú','¾','ù',],] at line 644
[unhandled] esc_dispatch params=[], ints=[35], byte='N' (4e)
[unhandled] esc_dispatch params=[], ints=[47], byte='Y' (59)
[unhandled] esc_dispatch params=[], ints=[], byte='U' (55)
[unhandled] esc_dispatch params=[], ints=[], byte='r' (72)
[unhandled] esc_dispatch params=[], ints=[], byte='Y' (59)
[unhandled] esc_dispatch params=[], ints=[43], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='w' (77)
[unhandled] esc_dispatch params=[], ints=[], byte='O' (4f)
[unhandled] esc_dispatch params=[], ints=[37, 39], byte='^' (5e)
[unhandled] esc_dispatch params=[], ints=[42], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='n' (6e)
[unhandled] esc_dispatch params=[], ints=[], byte='m' (6d)
[unhandled] esc_dispatch params=[], ints=[], byte='{' (7b)
[unhandled] esc_dispatch params=[], ints=[], byte='L' (4c)
[unhandled] esc_dispatch params=[], ints=[], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='`' (60)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[], byte='e' (65)
[unhandled] esc_dispatch params=[], ints=[], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='}' (7d)
[unhandled] esc_dispatch params=[], ints=[], byte='W' (57)
[unhandled] esc_dispatch params=[], ints=[], byte='6' (36)
[unhandled] esc_dispatch params=[], ints=[34], byte='0' (30)
[unhandled] esc_dispatch params=[], ints=[], byte='{' (7b)
[unhandled] esc_dispatch params=[], ints=[], byte='a' (61)
[unhandled] esc_dispatch params=[], ints=[], byte='C' (43)
[unhandled] esc_dispatch params=[], ints=[], byte='K' (4b)
[unhandled] esc_dispatch params=[], ints=[], byte='b' (62)
[unhandled] esc_dispatch params=[], ints=[], byte='W' (57)
[unhandled] esc_dispatch params=[], ints=[32], byte='K' (4b)
[unhandled] esc_dispatch params=[], ints=[], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='o' (6f)
[unhandled] esc_dispatch params=[], ints=[], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[33], byte='_' (5f)
[unhandled] esc_dispatch params=[], ints=[], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='2' (32)
[unhandled] esc_dispatch params=[], ints=[], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='W' (57)
[unhandled] esc_dispatch params=[], ints=[], byte='p' (70)
[unhandled] esc_dispatch params=[], ints=[40], byte='F' (46)
[unhandled] esc_dispatch params=[], ints=[44], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='h' (68)
[unhandled] esc_dispatch params=[], ints=[43], byte='l' (6c)
[unhandled] esc_dispatch params=[], ints=[38, 36], byte='t' (74)
[unhandled] esc_dispatch params=[], ints=[], byte='a' (61)
[unhandled] esc_dispatch params=[], ints=[], byte='3' (33)
[unhandled] esc_dispatch params=[], ints=[], byte='{' (7b)
[unhandled] esc_dispatch params=[], ints=[], byte='3' (33)
[unhandled] esc_dispatch params=[], ints=[], byte='6' (36)
[unhandled] esc_dispatch params=[], ints=[], byte='T' (54)
[unhandled] esc_dispatch params=[], ints=[], byte='5' (35)
[unhandled] esc_dispatch params=[], ints=[], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='C' (43)
[unhandled] esc_dispatch params=[], ints=[45], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[47], byte='K' (4b)
[unhandled] esc_dispatch params=[], ints=[46], byte='~' (7e)
[unhandled] esc_dispatch params=[], ints=[42, 46], byte=';' (3b)
[unhandled] esc_dispatch params=[], ints=[], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='f' (66)
[unhandled] esc_dispatch params=[], ints=[], byte='q' (71)
[unhandled] esc_dispatch params=[], ints=[], byte='u' (75)
[unhandled] esc_dispatch params=[], ints=[], byte='3' (33)
[unhandled] esc_dispatch params=[], ints=[36], byte='J' (4a)
[unhandled] esc_dispatch params=[], ints=[40], byte='4' (34)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[], byte='W' (57)
[unhandled] esc_dispatch params=[], ints=[44], byte='1' (31)
[unhandled] esc_dispatch params=[], ints=[], byte='i' (69)
[unhandled] esc_dispatch params=[], ints=[], byte='q' (71)
[unhandled] esc_dispatch params=[], ints=[], byte='|' (7c)
[unhandled] esc_dispatch params=[], ints=[], byte='`' (60)
[unhandled] esc_dispatch params=[], ints=[40], byte='I' (49)
[unhandled] esc_dispatch params=[], ints=[], byte='3' (33)
[unhandled] esc_dispatch params=[], ints=[], byte='L' (4c)
[unhandled] esc_dispatch params=[], ints=[], byte='i' (69)
[unhandled] esc_dispatch params=[], ints=[], byte='a' (61)
[unhandled] esc_dispatch params=[], ints=[], byte='{' (7b)
[unhandled] esc_dispatch params=[], ints=[], byte='V' (56)
[unhandled] esc_dispatch params=[], ints=[46], byte='0' (30)
[unhandled] esc_dispatch params=[], ints=[42, 34], byte='Y' (59)
[unhandled] esc_dispatch params=[], ints=[], byte='U' (55)
[unhandled] esc_dispatch params=[], ints=[], byte='w' (77)
[unhandled] esc_dispatch params=[], ints=[46], byte='@' (40)
[unhandled] esc_dispatch params=[], ints=[], byte='Q' (51)
[unhandled] esc_dispatch params=[], ints=[], byte='<' (3c)
[unhandled] esc_dispatch params=[], ints=[], byte='x' (78)
[unhandled] esc_dispatch params=[], ints=[45], byte='g' (67)
[unhandled] esc_dispatch params=[], ints=[], byte='N' (4e)
[unhandled] esc_dispatch params=[], ints=[42], byte='k' (6b)
[unhandled] esc_dispatch params=[], ints=[], byte='h' (68)
[unhandled] esc_dispatch params=[], ints=[], byte='C' (43)
[unhandled] esc_dispatch params=[], ints=[], byte='?' (3f)
[unhandled] esc_dispatch params=[], ints=[], byte='@' (40)
```"10/20/18 10:31:00 PMFix rotation of selection below 0"Whenever the viewport is scrolled, the selection is rotated to make sure
that it moves with the viewport. However this did not correctly handle
the underflow that happens when the selection goes below 0.

This resolves that problem for the selection by moving the internal line
representation to an isize, thus correctly keeping track of the
selection start/end points even when they have a negative index. Once
the selection is converted to a span, the lines are clamped to the
visible region.

This fixes #1640 and fixes #1643.

Note that this currently breaks semantic and line selection because
the necessary adjustments to handle `isize`s haven't been made in their
span methods yet. This should be fairly simple, however opening a
temporary PR here should prevent unnecessary duplicated effort."3Fixed in #590 chrisduerrChristian Duerr10/20/18 12:55:44 AMFix remaining clippy issues1
166604/04/17 03:46:09 AMJustin C.--command option overrides shell instead of only running command"#176 mentions

> `term -e command` is the standard way to override the default shell on Unix.

but this is not quite true.  `term -e command` is a standard way to execute a command in the terminal immediately within `term`.  overriding the default shell also overrides the `$SHELL` environment variable which wreaks havoc when `command` is a program with an integrated terminal relying on `$SHELL`.

The expected behavior is, when `alacritty` starts, it first runs `command`, but leaves `$SHELL` alone.

Steps to reproduce:

1. Install neovim
2. Run `alacritty -e nvim`
3. In neovim, type `:terminal`
4. Watch app freeze.  Neovim's terminal is running neovim instead of a shell inside and IO appears to be blocked.  In other terminals, I get an interactive shell as set in `/etc/passwd`.

Notes:
`gnome-terminal -e command` does not override `$SHELL`, neither does `xterm`, nor `st`."10/17/18 05:38:34 AMbuild(package): acquire latest winpty"- closes https://github.com/jwilm/alacritty/issues/1659

This is most naïve approach to resolve issue, just replacing endpoint. It could be bit more fancy to query release api to grab latest version always, but winpty-agent is relatively not frequently updated so thought hardcoded path would be ok.

One thing I also updated in here is https://github.com/jwilm/alacritty/compare/master...kwonoj:feat-wpty-agent?expand=1#diff-a7b0a2dee0126cddf994326e705a91eaR84 part - afaik `i386` would point ia32 but current logic matches in opposite way? not sure if it's intended though."1Fixed in #590 kwonojOJ Kwon10/17/18 04:52:28 AMbuild(package): acquire latest winpty1
167704/04/17 03:46:09 AMJustin C.Do not replace $SHELL with --command option"Fixes #501

Continue to allow user to override default shell in yaml config, but `--command` option is not guaranteed to be a shell command, and should not override `$SHELL`."10/18/18 04:01:52 AMAttach to the console of the parent process on windowsThis fixes not seeing console output on windows release builds. =||= My pleasure.  Cheers!zacpsZac Pullar-Strecker10/18/18 02:58:58 AM"Attach to the console of the parent process on windows

This fixes not seeing console output on windows release builds."1
167805/28/17 03:02:46 AMBrandur LeachGrays don't seem to show up properly"I've noticed while using Alacritty that programs that make use of gray colors don't seem to work properly. Here's Alacritty:

<img width=""557"" alt=""screenshot 2017-04-02 09 12 52"" src=""https://cloud.githubusercontent.com/assets/96890/24588836/0507e31c-1785-11e7-88ee-dd47fdbf8717.png"">

(Note the nearly invisible ""reply arrows"" close to the right side of the screen.)

And here's iTerm2 for comparison:

<img width=""632"" alt=""screenshot 2017-04-02 09 12 59"" src=""https://cloud.githubusercontent.com/assets/96890/24588839/1470fbc2-1785-11e7-9346-7c61ea7a7189.png"">

I assume that these are the `Gray` and `Darkgray` codes, but I haven't confirmed yet. And while these appear to be widespread colors, I guess maybe they're not in the original set of ANSI escape codes? (And thus don't appear in Alacritty's source.) I don't have a good understanding of this, but I figured I'd open an issue while investigating in case it's obvious to someone else."10/20/18 08:16:27 PMAdd support for rendering cursors to rusttype"This implements the alternative cursors for the rusttype backend which were missed in the initial implementation.

I was going to change the way these are generated to make it more obvious but:
* I'm lazy
* Font-kit should invalidate most of this work anyway

Fixes https://github.com/jwilm/alacritty/issues/1676"2"> @brandur definitely happy to update the default color scheme. The iTerm version of this color scheme (Tomorrow Night Bright) has white and bright white as ffffff. Other than that, I don't think other changes are needed.

Cool, thanks! I opened a PR with some colors from iTerm2's default color scheme over in #536. We can talk about particular colors over there."zacpsZac Pullar-Strecker10/19/18 09:19:43 PMFix bad match arm and changelog puncuation1
168304/03/17 04:14:53 PMBrandur LeachBackgrounds should extend across the whole terminal"Background colors should stretch across the entire terminal rather than be constrained to the last character.

Here's Alacritty:

<img width=""557"" alt=""screenshot 2017-04-02 09 18 14"" src=""https://cloud.githubusercontent.com/assets/96890/24588886/c47cf73c-1785-11e7-93a9-b2c451754049.png"">

And here's iTerm2 for comparison:

<img width=""635"" alt=""screen shot 2017-04-02 at 9 22 07 am"" src=""https://cloud.githubusercontent.com/assets/96890/24588891/e4692afc-1785-11e7-83db-1cad00b0adde.png"">"10/18/18 07:52:14 PMAdjust font sizes for changing device pixel ratios"This fixes an issue if you move an Alacritty terminal from an external (non-""retina"") monitor plugged into a MacBook to its main display, which has double the pixel density. It uses an event from glutin to respond to this change.

To make it work, I removed any references to device pixel ratio from the font handling code (GlyphCache / Rasterizer) and I simply multiply the font size by the new device ratio. This is because originally, glyphs rendered at 2x pixel density would be cached under their original font size. I feel like this makes those font classes a little more honest about what they're caching."2Oh nice. Thanks!detzgkEli Green10/18/18 05:18:48 PMFix RustTypeRasterizer1
168604/04/17 04:34:22 AMJoe WilmBetter error handling in event loop"Also checks hup first since if the terminal is either not readable or
writable there's nothing for Alacritty to do.

Closes #480."10/29/18 07:52:15 AMAdd cargo workspace, add winpty tests to CI"This adds the local dependencies (`font`, `copypasta`, `winpty`) to a workspace (required for winpty's test deps), and runs those tests in CI.

I also had to ignore the `console_process_list` test because of https://github.com/rprichard/winpty/issues/135. The function isn't actually used in Alacritty proper so it's not a big issue."2Oh nice. Thanks!zacpsZac Pullar-Strecker10/19/18 05:08:45 AMAdd cargo workspace, add winpty tests to CI1
169603/13/18 06:21:20 AMJan HolthuisRight Mouse Click does not work in ncmpcpp"In [ncmpcpp](https://rybczak.net/ncmpcpp/) you can use the right mouse button to play a track directly. This works in `urxvt` and `gnome-terminal`, but not in `alacritty` - nothing happens if I right-click on a track.

Left clicking (select a track) and scrolling using the mouse wheel works though.

```
$ cat /etc/issue
Arch Linux \r (\l)

$ alacritty -V
alacritty 0.1.0

$ ncmpcpp -v
ncmpcpp 0.7.7
optional screens compiled-in:
 - tag editor
 - tiny tag editor
 - artist info
 - outputs
 - visualizer
 - clock
encoding detection: enabled
built with support for: curl fftw ncurses taglib unicode

$ pacman -Qi ncurses | head -n 4
Name            : ncurses
Version         : 6.0+20170128-1
Description     : System V Release 4.0 curses emulation library
Architecture    : x86_64
```"02/09/19 07:04:07 PMChange font size only when new metrics are validThis fixes #1693 9"Same thing in Vim: `<RightMouse>` binds aren't triggered. Same thing with `<MiddleMouse>` even when it's not defined in `mouse_bindings`. `<LeftMouse>` works fine.

Please make it possible to have Alacritty just pass these mouse events down the line. 👍 "martin-suchaChristian Duerr02/09/19 12:14:21 AMAdd change log entry1
169904/19/17 02:33:24 AMJan HolthuisFix delete key bindingResolves jwilm/alacritty#192.10/27/18 02:15:09 PMRelax matching of URL modifiers"To click on links in the alternate screen buffer, it is necessary that
the `shift` button is held down, otherwise mouse events are captured by
the application. However this would also require that `Shift` is added
to the `mouse.url.modifiers` option. Thus it is not possible anymore to
click on URLs unless the shift button is always held down.

To resolve this issue, the matching od modifiers has been relaxed. If a
modifier is specified in the config, it is always required to be held
down. However if a modifier is held down which is not specified, it is
still accpeted. This one-way relaxed matching allows clicking on links
with or without shift held down without having to make use of the
`mouse.url.modifiers` setting at all.

I'll leave this issue open for a bit just in case any other problems
should come up while testing URL selection. Until then just changing
the configuration file to include `Shift` should work."6"Thanks for the PR @Holzhaus!

This is the same config I've settled on myself; glad that someone else came to the same conclusion.

Would you mind updating the _alacritty_macos.yml_ config file as well?"chrisduerrChristian Duerr10/22/18 08:32:45 PM"Relax matching of URL modifiers

To click on links in the alternate screen buffer, it is necessary that
the `shift` button is held down, otherwise mouse events are captured by
the application. However this would also require that `Shift` is added
to the `mouse.url.modifiers` option. Thus it is not possible anymore to
click on URLs unless the shift button is always held down.

To resolve this issue, the matching od modifiers has been relaxed. If a
modifier is specified in the config, it is always required to be held
down. However if a modifier is held down which is not specified, it is
still accpeted. This one-way relaxed matching allows clicking on links
with or without shift held down without having to make use of the
`mouse.url.modifiers` setting at all."1
170705/25/17 05:47:02 PMThomas[OSX] Typing ~ freeze alacritty"As the title says. When I type a ~, alacritty freeze. 
The symbol does not appear thought.

I don't have any logs. OSX's version is 10.12.4"10/27/18 02:58:52 AMReadme, INSTALL.md fixesFixes https://github.com/jwilm/alacritty/issues/1706 =||= Should be fixedzacpsZac Pullar-Strecker10/27/18 12:49:55 AMMove gentoo install instructions, add windows to table of contents1
170804/23/17 04:23:28 PMMarko MijalkovicAdd glyph offset - Take 2Fix #317 for all glyphs. This PR also updates #317 to merge in the master branch.02/22/19 10:57:00 PMWIP: Reenable dynamic title support on windows"It turns out there were no issues with dynamic title support on windows,
I simply had an issue with my configuration which made me think it was
broken.

Fixes https://github.com/jwilm/alacritty/issues/1695"7"Closing this in favor of #317 since the original author is still available. If there are any issues with that branch, please follow up there.

@overdrivenpotato thanks for your time trying to push this forward. I'll try and land #317 asap."zacpsZac Pullar-Strecker10/27/18 04:36:11 AM"Reenable dynamic title support on windows

It turns out there were no issues with dynamic title support on windows,
I simply had an issue with my configuration which made me think it was
broken."1
170912/24/17 05:33:04 PMStephen SolkaExtract dpr based vars into method. Rebuild on resize"Fix for #71 atleast resizing seems to still work.

~~**DO NOT MERGE**: have to wait until I get to work to try it on retina monitor. Will update with result.~~

Note: I have no idea what I am doing in rust. Im a node/ruby guy. I'll change anything you want me to change!"10/27/18 09:53:03 PMExplicitly detach from the console on exit"Without this cmd won't redraw it's prompt when alacritty exits

Fixes https://github.com/jwilm/alacritty/issues/1698"1The core functionality added here is on master due to dynamic font resize support. Additionally, _winit_ is adding an event for DPI change events which will be much cheaper than regenerating the font cache on every resize. I'll file an issue for using that new event type once it's available.zacpsZac Pullar-Strecker10/27/18 04:47:01 AM"Explicitly detach from the console on exit

Without this cmd won't redraw it's prompt when alacritty exits"1
171001/27/20 12:54:36 AMStephen SolkaPerformance issue with unicode"If you hook alacritty to a profiler and `cat /dev/urandom`. Asking the width of the character happens to be the most expensive operation. I think we should consider adding a cache for this because its not like unicode widths change wildly in fact they are hardcoded inside the library.

Every time we ask the width of character unicode width is doing a binary search over the vector they have for a matching character.

----
Follow up. When piping out unicode characters in the lower sets `base64 /dev/urandom` this hot spot never appears because it doesnt cause unicode-code width to do a binary search. I suspect this performance issue is low priority."10/27/18 11:14:13 AMalacritty is now in main gentoo repository"great terminal!
https://github.com/gentoo/gentoo/commit/5a7134c8a0b27a93f07bdf8c6f0b44de89fac8ee
" =||= This issue should be dramatically improved on Linux/BSD however I've opened a new one about macOS here #3254, since it's likely has similar problems.gyakovlevGeorgy Yakovlev10/27/18 05:10:45 AM"alacritty is now in main gentoo repository.

Update README.md accordingly."1
171105/01/17 04:56:43 PMMichal 'vorner' VanerBroken htop layout"When I launch `alacritty` and run `htop` inside it (it doesn't matter if the htop is inside tmux or not), the htop's layout starts to fall apart after few refreshes. Other terminals (urxvt, konsole) don't do this.

I think the screenshot explains it better than words what I mean ‒ see the gauges at the top and the 6th-7th processes from the top.
![htop](https://cloud.githubusercontent.com/assets/11783500/24948010/33d9d40c-1f69-11e7-9fc2-84121cc2d948.png)"10/27/18 06:54:29 PMRefactor platform-specific codeThis is just a minor style issue I've noticed while reviewing #1709. =||= Thanks!chrisduerrChristian Duerr10/27/18 12:46:05 PM"Refactor platform-specific code

This is just a minor style issue I've noticed while reviewing #1709."1
171404/14/17 05:19:13 PMStephen SolkaBumping winit to 0.6.3 to get fix for macos dpr event change"Looking to bring in:
https://github.com/tomaka/winit/commit/cccc48b84d403b6957b31c5172db1367ed42762d"10/29/18 03:54:46 PMUpdate INSTALL.md5@jwilm Oh! that explains why I still wasn't seeing the resize event firing after doing this. Thanks for the info. schrepflerSrepfler Srdan10/29/18 12:21:25 AMUpdate INSTALL.md1
171504/19/17 02:30:48 AMStephen Solkause xxhash for faster glyph caching"[twox-hash](https://libraries.io/cargo/twox-hash) is a rust implementation of the [xxhash](https://github.com/Cyan4973/xxHash) algorithm.
>xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the SMHasher test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical on all platforms (little / big endian).

When doing my `base64 /dev/urandom` test tonight I found a good chunk of time was spent in the fnv hasher inside GlyphCache. I researched hashing algorithms available in rust and thought xxhash would be be a good fit. 
# Before FNV
<img width=""874"" alt=""screen shot 2017-04-14 at 10 35 32 pm"" src=""https://cloud.githubusercontent.com/assets/177491/25060139/1f921372-2164-11e7-8c47-79c902bdf2b7.png"">

# After XXHASH
<img width=""863"" alt=""screen shot 2017-04-14 at 10 37 23 pm"" src=""https://cloud.githubusercontent.com/assets/177491/25060141/29b583d4-2164-11e7-9f94-c727a4e8ef6c.png"">

# Summary
Both benchmarks ran for about two seconds of base64 output. Fnv hashing was about 25% of the weight in the first run. XXhash was about 5.9% of the second run. Seems like an easy win."11/24/18 09:08:03 PMFix for an underflow on some type conversions"This changes the winpty resize logic to ensure we'll back out in the bindings if we get passed an invalid value rather than passing it on.

It also fixes the cause of the underflow in the logic for converting calculating the `lines`, `cols` from `SizeInfo`. I'm not sure if it was like that intentionally but I haven't observed any breakage from this change.

Fixes https://github.com/jwilm/alacritty/issues/1669" =||= "Thanks for putting the PR together! This was an interesting experiment, and I hadn't heard of XxHash.

I agree with your disposition to close. Looking at the XxHash benchmarks, it looks like it's actually slower than Fnv for small keys (we have 8 byte keys)."zacpsZac Pullar-Strecker11/23/18 11:53:54 PMChanges from code review1
171805/29/17 12:36:56 AMMÓZES Ádám István3-byte crash "alacritty crashes when I issue the following command:
```bash
echo 6KWe | base64 -d
```

Found by `cat`ting the `/dev/urandom` again. (Might be related to #499 .)

Backtrace:
```
thread 'main' panicked at 'index 25 out of range for slice of length 24', /checkout/src/libcore/slice/mod.rs:672

stack backtrace:
stack backtrace:
   0:     0x55f7c9786e23 - std::sys::imp::backtrace::tracing::imp::unwind_backtrace::hab274209b3900f9c
                               at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x55f7c9783034 - std::sys_common::backtrace::_print::h8f655fc4b25b9b70
                               at /checkout/src/libstd/sys_common/backtrace.rs:71
   2:     0x55f7c978cc37 - std::panicking::default_hook::{{closure}}::hd0f0fde26cdd4a91
                               at /checkout/src/libstd/sys_common/backtrace.rs:60
                               at /checkout/src/libstd/panicking.rs:355
   3:     0x55f7c978c7fc - std::panicking::default_hook::h123df66825ae8c79
                               at /checkout/src/libstd/panicking.rs:371
   4:     0x55f7c978d10b - std::panicking::rust_panic_with_hook::h3635757261b59272
                               at /checkout/src/libstd/panicking.rs:549
   5:     0x55f7c978cfe4 - std::panicking::begin_panic::he3b450c9ca51fd2b
                               at /checkout/src/libstd/panicking.rs:511
   6:     0x55f7c978cf19 - std::panicking::begin_panic_fmt::hf44dbae7fe247adf
                               at /checkout/src/libstd/panicking.rs:495
   7:     0x55f7c978cea7 - rust_begin_unwind
                               at /checkout/src/libstd/panicking.rs:471
   8:     0x55f7c97b7ded - core::panicking::panic_fmt::hde6a1a29c4abc8e6
                               at /checkout/src/libcore/panicking.rs:69
   9:     0x55f7c97b7ee9 - core::slice::slice_index_len_fail::h8d6a353e66085a31
                               at /checkout/src/libcore/slice/mod.rs:672
  10:     0x55f7c9737e47 - <core::ops::Range<usize> as core::slice::SliceIndex<[T]>>::index::ha12f7058d2f2ddad
                               at /checkout/src/libcore/slice/mod.rs:803
  11:     0x55f7c972aace - core::slice::<impl core::ops::Index<I> for [T]>::index::h19b918c17299cb0b
                               at /checkout/src/libcore/slice/mod.rs:654
  12:     0x55f7c973b4d2 - font::ft::FreeTypeRasterizer::get_rendered_glyph::ha10889efce849e32
                               at /home/amozes/workspace/github/alacritty/font/src/ft/mod.rs:217
  13:     0x55f7c973b029 - font::ft::FreeTypeRasterizer::get_rendered_glyph::ha10889efce849e32
                               at /home/amozes/workspace/github/alacritty/font/src/ft/mod.rs:194
  14:     0x55f7c973992d - <font::ft::FreeTypeRasterizer as font::Rasterize>::get_glyph::h865be892ed938886
                               at /home/amozes/workspace/github/alacritty/font/src/ft/mod.rs:85
  15:     0x55f7c92e8ed6 - alacritty::renderer::GlyphCache::get::{{closure}}::h25eb2135d53f0bf2
                               at /home/amozes/workspace/github/alacritty/src/renderer/mod.rs:270
  16:     0x55f7c92a286a - <std::collections::hash::map::Entry<'a, K, V>>::or_insert_with::h64977a0049ce1560
                               at /checkout/src/libstd/collections/hash/map.rs:1936
  17:     0x55f7c92e8dd6 - alacritty::renderer::GlyphCache::get::h533abf2b25792cdc
                               at /home/amozes/workspace/github/alacritty/src/renderer/mod.rs:267
  18:     0x55f7c92ec19c - alacritty::renderer::RenderApi::render_cells::h709352b1c43cc71b
                               at /home/amozes/workspace/github/alacritty/src/renderer/mod.rs:785
  19:     0x55f7c92e4b1e - alacritty::display::Display::draw::{{closure}}::hf31aab8dbf3ee1a0
                               at /home/amozes/workspace/github/alacritty/src/display.rs:299
  20:     0x55f7c92ea775 - alacritty::renderer::QuadRenderer::with_api::h6adcf7ff439417bb
                               at /home/amozes/workspace/github/alacritty/src/renderer/mod.rs:610
  21:     0x55f7c92e4734 - alacritty::display::Display::draw::h86ecf4d9d58d2ac0
                               at /home/amozes/workspace/github/alacritty/src/display.rs:297
  22:     0x55f7c915bcdd - alacritty::run::h1531f576730b74a1
                               at /home/amozes/workspace/github/alacritty/src/main.rs:172
  23:     0x55f7c915a57c - alacritty::main::hb27efce3c2542868
                               at /home/amozes/workspace/github/alacritty/src/main.rs:64
  24:     0x55f7c979405a - __rust_maybe_catch_panic
                               at /checkout/src/libpanic_unwind/lib.rs:98
  25:     0x55f7c978d8aa - std::rt::lang_start::ha5350a26f8f175ab
                               at /checkout/src/libstd/panicking.rs:433
                               at /checkout/src/libstd/panic.rs:361
                               at /checkout/src/libstd/rt.rs:57
  26:     0x55f7c915c322 - main
  27:     0x7fbd4fc78290 - __libc_start_main
  28:     0x55f7c90b47a9 - _start
  29:                0x0 - <unknown>
```
"10/29/18 07:47:42 PMUpdate Windows configuration file"The Windows configuration file was outdated compared to the other
configuration files, since there were some major changes to the config
during the development of the Windows PR.

All changes between the Linux and Windows configuration file have been
removed, preserving platform-specific configuration defaults that were
intentionally changed.

Some minor changes have also been made to the Linux and macOS
configuration files, since there were some inconsistencies left.

This fixes #1692." =||= @jwilm Sorry, should've done that right away. What's even worse (or good, depends on how look at it): I cannot reproduce it. When I cancel `cat`-ing from `/dev/urandom` everything's fine again.chrisduerrChristian Duerr10/29/18 07:14:07 PM"Update Windows configuration file

The Windows configuration file was outdated compared to the other
configuration files, since there were some major changes to the config
during the development of the Windows PR.

All changes between the Linux and Windows configuration file have been
removed, preserving platform-specific configuration defaults that were
intentionally changed.

Some minor changes have also been made to the Linux and macOS
configuration files, since there were some inconsistencies left.

This fixes #1692."1
172007/01/17 10:57:09 PMElizabeth MarstonSpurrious  (and awesome) GL glitchout upon laptop close/reopen"Lenovo TP T450, Ubuntu 16.04.2. Alacritty 0.1.0. I have not seen this one very often, but when it happens, it's spectacular. The screencap doesn't even do it justice; it transforms in 3D-ish ways as I type. 
![image](https://cloud.githubusercontent.com/assets/315987/25154682/83a49094-2446-11e7-9a9b-e9189425b79a.png).

THESE ARE THE FAILURE MODES OF THE FUTURE WHICH WE WERE PROMISED IN BLADERUNNER"07/19/20 09:43:18 PMAdd fontkit as a render backend"Currently this just re-implements the `Rasterizer` trait that the existing backends use, but it might make more sense to refactor this to properly take advantage of more advanced features (like ligatures).

~~It also has some windows specific code, but that should be simple to remove.~~

Fixes https://github.com/jwilm/alacritty/issues/1568"13We need a config option to enable this bug to affect all of us 😁zacpsZac Pullar-Strecker01/13/19 02:16:19 AMMake better on windows1
172106/20/17 02:56:31 PMChris MacNaughtonAdding snapcraft.yaml"[Snapcraft](https://snapcraft.io/) makes Linux packaging very simple in a cross-distro
way. This adds the snapcraft.yaml file to setup a snap of
alacritty."10/31/18 07:48:05 PMSync .app bundle timestamp during buildFixes #17172"`sudo snap install --edge --classic alacritty`

The --edge flag can be removed, I was publishing it to the edge channel because it's not ""done"" yet. Also, I'd love to pass ownership of the snap to you and help setup auto-building on Canonical's build farm ;-)"dnweDominic Evans10/29/18 09:42:21 PM"Sync .app bundle timestamp during build

Fixes #1717"1
172304/21/17 07:21:25 PMNoneWrong colors when running tmux inside alacritty"Hi.
I changed the colors in the alacritty config and I found an issue:
the colors are different when running tmux inside alacritty.
Here are screenshots to show the issue:
![inside-tmux](https://cloud.githubusercontent.com/assets/584972/25246286/2c930156-25d5-11e7-959e-e0a162d5b141.png)
![outside-tmux](https://cloud.githubusercontent.com/assets/584972/25246295/353fc294-25d5-11e7-9446-265919aa896b.png)
Thanks to fix this issue."10/30/18 04:05:26 AM"Revert ""Update Windows configuration file""""Reverts jwilm/alacritty#1718 because of https://github.com/jwilm/alacritty/issues/1722

The appveyor build also failed tests (See [the job](https://ci.appveyor.com/project/jwilm/alacritty/builds/19890599/job/4igu6ldspih2bohw)) but didn't report a failed build."2"This had nothing to do with `alacritty`.
I added this line in `~/.tmux.conf` to fix this issue:
```
set -g default-terminal ""tmux-256color""
```"zacpsZac Pullar-Strecker10/30/18 03:31:30 AM"Revert ""Update Windows configuration file""

This reverts commit a9e03f1ae0b79353b78ac9e2e6503b42b12c7fb2."1
172604/23/17 04:18:38 PMNoneCategories mispelt in Alacritty.desktop"I am running Lubuntu 16.10. I followed the installation instructions for adding the desktop entry:

```bash
cp Alacritty.desktop ~/.local/share/applications
```

With the result that alacritty ends up in the ""Other"" section of the menu:

![image](https://cloud.githubusercontent.com/assets/7500539/25302689/a781bb0c-273b-11e7-9a6f-5a522a82d279.png)

Using `desktop-file-install` instead of simply copying reveals the cause:

```
maurice@maurice-laptop:~/alacritty$ desktop-file-install --dir=$HOME/.local/share/applications Alacritty.desktop
Alacritty.desktop: warning: key ""Actions"" is a list and does not have a semicolon as trailing character, fixing
/home/maurice/.local/share/applications/Alacritty.desktop: error: file contains key ""Catagories"" in group ""Desktop Entry"", but keys extending the format should start with ""X-""
Error on file ""Alacritty.desktop"": Failed to validate the created desktop file
```

If I fix the spelling of Categories and re-run the command:

```
maurice@maurice-laptop:~/alacritty$ desktop-file-install --dir=$HOME/.local/share/applications Alacritty.desktop
Alacritty.desktop: warning: key ""Categories"" is a list and does not have a semicolon as trailing character, fixing
Alacritty.desktop: warning: key ""Actions"" is a list and does not have a semicolon as trailing character, fixing
```

It installs, with warnings, and the entry ends up in the ""System Tools"" section of the menu as expected.

Suggested changes:

1) Fix spelling of Categories
2) Add trailing semicolons to Categories and Actions
3) Modify installation instructions to use `desktop-file-install` instead of `cp`

The last one I'm not sure about because I don't know if `desktop-file-install` can be expected to be available."10/30/18 07:04:05 PMFix windows config"The Windows configuration file was outdated compared to the other
configuration files, since there were some major changes to the config
during the development of the Windows PR.

All changes between the Linux and Windows configuration file have been
removed, preserving platform-specific configuration defaults that were
intentionally changed.

Some minor changes have also been made to the Linux and macOS
configuration files, since there were some inconsistencies left.

This fixes #1692."2"This had nothing to do with `alacritty`.
I added this line in `~/.tmux.conf` to fix this issue:
```
set -g default-terminal ""tmux-256color""
```"chrisduerrChristian Duerr10/30/18 03:31:33 PMFix windows config1
172904/23/17 04:18:38 PMNoneDesktop file fixes"Resolves #519 "10/31/18 07:47:22 PMFix deb build"Since cargo-deb builds all members of the workspace by default, it is
necessary that the winpty subcrate can be built on all operating
systems, since it's not possible to have OS-specific workspace members.

To achieve this the crate has been changed to be empty by default on
non-windows systems. It might make sense to do something similar with
winpty-sys, but it's not strictly necessary at this point since we don't
directly depend on it.

This fixes #1716." =||= Thanks!chrisduerrChristian Duerr10/30/18 09:16:39 PMFix fmt import1
173104/23/17 04:19:26 PMPavel KiselevFix typo in Alacritty.desktopDesktop entry wouldn't show up in menus, so I looked through a file in search of any errors. Now everything shows up correctly.11/01/18 11:45:21 AMUpdate serde_yaml to 0.8"Fixed jwilm/alacritty#1730 .

A breaking change was introduced in serde_yaml 0.8:

> Reduce compile time of Deserialize impls by instantiating fewer Visitor methods when we know the type of data expected (#96)
> This is potentially a breaking change for some handwritten Deserialize impls. For example a Deserialize impl that invokes Deserializer::deserialize_string would no longer deserialize successfully from anything but a string in the input data, even if the Visitor impl otherwise supports types other than string. Deserialize impls that support deserializing from multiple different Serde data types need to use Deserializer::deserialize_any instead.

More details about the breaking change in serde-rs/serde#1125 ." =||= No worries :). Even so, I still appreciate the PR!juchiastChristian Duerr11/01/18 10:48:54 AMApply all non-breaking dep updates1
173402/09/19 11:16:58 AMquininerImplement copypaste/x11 using x11-clipboardfix #510/31/18 10:20:00 PM Add change log entry for #1634See https://github.com/jwilm/alacritty/issues/1732. =||= "@quininer I'd like to thank you a lot for your work on the x11-clipboard crate. Based on my testing this all worked great, however I'm not sure if I want to keep maintaining the `copypasta` crate now that `clipboard`'s licensing issues have been resolved. I think it would make sense to try and make use of one clipboard library for Rust instead of duplicating the effort.

I'll keep https://github.com/jwilm/alacritty/issues/5 updated with progress made on this effort, hopefully this will enable us to finally achieve native clipboard support on all platforms."chrisduerrChristian Duerr10/31/18 09:50:15 PM Add change log entry for #16341
173705/18/18 10:55:06 PMStephen SolkaCursor is being put in the wrong place when running screen"Master -- HEAD a99a69cfcb983b923cb89c6faf5ace3b89d786a5
# Alacritty
![screen shot 2017-04-24 at 8 52 16 am](https://cloud.githubusercontent.com/assets/177491/25338005/c59f3420-28cb-11e7-8ada-71e44b7c48ff.png)
# iterm2
![screen shot 2017-04-24 at 8 52 33 am](https://cloud.githubusercontent.com/assets/177491/25338011/cba0e030-28cb-11e7-989c-15da2bc2e79d.png)
# screenrc
```
hardstatus alwayslastline
hardstatus string '%{= Kd} %{= Kd}%-w%{= Kr}[%{= KW}%n %t%{= Kr}]%{= Kd}%+w %-= %{KG} %H%{KW}|%{KY}%101`%{KW}|%D %M %d %Y%{= Kc} %C%A%{-}'
maptimeout 0
defc1 off
```
# zshrc
```
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME=""avit""
plugins=(emoji)
source $ZSH/oh-my-zsh.sh
```"11/01/18 08:09:20 PMInstructions for installing on FreeBSD"Readd instructions for how to install pre-compiled alacritty packages on
FreeBSD.  This was accidentaly removed in cb6e065." =||= Closing because no response after 10 months, if this still is an issue, it should be no problem to re-open it.zeisingNiclas Zeising11/01/18 07:59:40 PM"Instructions for installing on FreeBSD

Readd instructions for how to install pre-compiled alacritty packages on
FreeBSD.  This was accidentaly removed in cb6e065."1
173805/28/17 02:58:15 AMTrevor JoynsonAdd script to apply a tilix colorscheme file.None11/01/18 08:50:33 PMFix default hollow cursor behavior with empty conf"The `2c37da48b580237ff48f5e841015134dd459b41d` change introduced some
changes to the way cursor configuration is handled. However it did not
properly handle the default behavior of the hollow cursor when the
`cursor` field was not specified at all.

By implementing the `Default` trait for the `Cursor` struct in
`config.rs` manually, the default value of the `unfocused_hollow` field
has been corrected back to `true` when the `cursor` struct isn't present
at all." =||= Thanks!chrisduerrChristian Duerr11/01/18 08:00:23 PM"Fix default hollow cursor behavior with empty conf

The 2c37da48b580237ff48f5e841015134dd459b41d change introduced some
changes to the way cursor configuration is handled. However it did not
properly handle the default behavior of the hollow cursor when the
`cursor` field was not specified at all.

By implementing the `Default` trait for the `Cursor` struct in
`config.rs` manually, the default value of the `unfocused_hollow` field
has been corrected back to `true` when the `cursor` struct isn't present
at all."1
174307/01/17 10:56:17 PMAaron Muir HamiltonDragging double click selection should select words.Currently, when I double click drag in Alacritty, the selection mode is switched to per-character, this is inconsistent with most terminals and other applications these days.11/03/18 06:46:27 PMFix windows tagged builds"The windows tagged builds currently fail some tests since the
winpty-agent.exe is inside the release directory instead of the debug
directory with tagged builds." =||= This feature has been added.chrisduerrChristian Duerr11/03/18 05:29:11 PM"Fix windows tagged builds

The windows tagged builds currently fail some tests since the
winpty-agent.exe is inside the release directory instead of the debug
directory with tagged builds."1
174406/20/19 03:56:10 PMAaron Muir HamiltonRectangle selectionMost terminals support rectangular region selection. In Terminal.app this is done by holding alt, and on most X11 terminals (mostly VTE) this is done by holding ctrl.11/04/18 12:11:52 AMFix clippy issues"This resolves all existing clippy issues and removes some old `allow`
annotations which aren't neccesary anymore." =||= I've already got a semi-working implementation of this. I'll probably wait until scrolling lands until I'm actually gonna work on changing selection though.chrisduerrChristian Duerr11/03/18 08:48:19 PM"Fix clippy issues

This resolves all existing clippy issues and removes some old `allow`
annotations which aren't neccesary anymore."1
174506/22/17 02:15:05 AMAaron Muir HamiltonRerender on mouse move when there is a selection, even after release.Even after you release your mouse from a drag, if there's a selection on screen then Alacritty will render a frame.11/04/18 12:13:18 AMUpdate readme to link to the github releases =||= This was fixed recentlychrisduerrChristian Duerr11/03/18 08:53:57 PMUpdate readme to link to the github releases1
174605/01/17 04:56:43 PMTravis Wellposition of cursor and text screw up in emacs"Easy to reproduce on my system, just open a new file in emacs ```emacs /tmp/tmp.sh```, and type ```if true```, enter for line feed, ```then``` and wait literally a second. Your screen should look like this now:

![screenshot from 2017-04-27 16-50-52](https://cloud.githubusercontent.com/assets/655987/25508922/10c2e3fc-2b6a-11e7-8b71-1770b15002fe.png)

I haven't figured out exactly how to reproduce it, but similar rendering issues happen when simply moving the cursor through text, making no edits at all.

I'm on Fedora 25 /wayland /Gnome Shell 3.22.3, and commit a99a69cfcb983b923cb89c6faf5ace3b89d786a5
My config: https://gist.github.com/travisfw/6b022c1ca6aaa1197e12d1dfe011ba84"11/06/18 12:40:30 AMAdd automated i386 docker builds to travis"I'm not able to test this myself, so if anyone has access to a 32 bit linux system, please let me know if this binary works:
[alacritty.tar.gz](https://github.com/jwilm/alacritty/files/2546395/alacritty.tar.gz)"5Thank you! 👍 chrisduerrChristian Duerr11/05/18 11:27:37 PMRemove old Dockerfile1
175705/04/17 02:43:57 PMNoneGLSL / Intel Integrated Graphics / Shader compile fail"I installed Alacritty onto my Arch machine through the pacman/yaourt manager and receive an error when I try to run Alacritty:

> There was an error initializing the shaders: failed compiling shader: 0:14(10): error: GLSL 3.30 is not supported. Supported versions are: 1.10, 1.20, and 1.00 ES

I couldn't find a relevant ticket on this Alacritty Git; but I found a corresponding error on a different Git: https://github.com/c42f/displaz/issues/89

I'm not an expert of any sort but I expect (from the displaz git ticket) that the error I'm receiving is from the integrated Intel graphics chip itself not supporting GLSL versions higher than 1.20. 

Here is lspci for my VGA:

> [johnd@aa8440]: ~>$ sudo lspci -vnn | grep VGA -A 12
[sudo] password for johnd: 
00:02.0 VGA compatible controller [0300]: Intel Corporation Core Processor Integrated Graphics Controller [8086:0046] (rev 02) (prog-if 00 [VGA controller])
	Subsystem: Hewlett-Packard Company Device [103c:172a]
	Flags: bus master, fast devsel, latency 0, IRQ 32
	Memory at d0000000 (64-bit, non-prefetchable) [size=4M]
	Memory at c0000000 (64-bit, prefetchable) [size=256M]
	I/O ports at 5058 [size=8]
	[virtual] Expansion ROM at 000c0000 [disabled] [size=128K]
	Capabilities: [90] MSI: Enable+ Count=1/1 Maskable- 64bit-
	Capabilities: [d0] Power Management version 2
	Capabilities: [a4] PCI Advanced Features
	Kernel driver in use: i915
	Kernel modules: i915

Edit: Some more info...

> [johnd@aa8440]: ~>$ lshw -numeric -C display
WARNING: you should run this program as super-user.
  *-display                 
       description: VGA compatible controller
       product: Core Processor Integrated Graphics Controller [8086:46]
       vendor: Intel Corporation [8086]
       physical id: 2
       bus info: pci@0000:00:02.0
       version: 02
       width: 64 bits
       clock: 33MHz
       capabilities: vga_controller bus_master cap_list rom
       configuration: driver=i915 latency=0
       resources: irq:32 memory:d0000000-d03fffff memory:c0000000-cfffffff ioport:5058(size=8) memory:c0000-dffff

Inxi and glxinfo...

> [johnd@aa8440]: ~>$ inxi -M
Machine:   Device: laptop System: Hewlett-Packard product: HP EliteBook 8440p
           Mobo: Hewlett-Packard model: 172A v: KBC Version 30.35
           BIOS: Hewlett-Packard v: 68CCU Ver. F.60 date: 11/11/2015
Battery    BAT0: charge: 24.1 Wh 69.0% condition: 34.9/34.9 Wh (100%)
[johnd@aa8440]: ~>$ glxinfo | grep OpenGL
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) Ironlake Mobile 
OpenGL version string: 2.1 Mesa 17.0.5
OpenGL shading language version string: 1.20
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 2.0 Mesa 17.0.5
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 1.0.16
OpenGL ES profile extensions:


Let me know if there is anymore info I can provide! Thanks! :)"11/07/18 05:49:14 PMCapitalization changes in changelog1"Thanks for the reports @nantronic2 and @lilianmoraru.

This looks like a dupe of #128. Please subscribe to that issue for further updates."atouchetAlex Touchet11/07/18 03:21:25 PMCapitalization changes1
175805/01/17 03:21:43 PMJoe WilmMore vttest passing"Now passes

* tab stop manipulation
* insert mode

Also has adds a limit check for scrolling logic (was panicking)."11/07/18 08:04:42 PMReadme update =||= "Thanks for the reports @nantronic2 and @lilianmoraru.

This looks like a dupe of #128. Please subscribe to that issue for further updates."atouchetAlex Touchet11/07/18 07:57:10 PM"Change ""release"" to ""releases"""1
176005/01/17 03:36:10 PMJoe WilmSet _NET_WM_PIDSets `_NET_WM_PID` window property in x11 environments.12/02/18 04:06:25 PMRequest OSX privacy permissionsFixing privacy issue #1733 related to the new macOS Mojave update. Whenever an app needs special permissions (e.g. camera, microphone, etc., etc.) the user is prompted to grant or deny the request. 1"Thanks for the reports @nantronic2 and @lilianmoraru.

This looks like a dupe of #128. Please subscribe to that issue for further updates."jonaylor89John Naylor11/09/18 05:18:05 PMImprove wording1
176205/01/17 04:21:09 PMJoe WilmPSA: FreeType font metrics fix + config changes"We recently landed #317 which, among other things, fixed how we are using FreeType's font metrics. There's no longer a need for wacky font offsets. Unfortunately, many people currently have extreme offsets in their config because of the original implementation.

This PSA is to reduce the surprise at font offsets looking very different after building the latest master. The fix is to restore offsets to `x: 0, y: 0` and make any adjustments needed from there. Additionally, there's a new parameter `glyph_offset` which changes the position of glyphs within cells instead of changing the size of the cells. Here's an excerpt from the default config:

```yaml
  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0.0
    y: 0.0
```

If anyone has a suggestion on how to release changes like this in the future with lower friction, please comment here."12/28/18 04:01:59 PMAdd support for Windows ConPTY API"The support is added behind a config flag `enable_experimental_conpty_backend`, defaulted to `false`. When set to `true` then before the WinPty initialisation alacritty will try to spawn a Pseudoconsole process, and use that instead.

I can confirm #1662 is fixed by this (and possibly others, I haven't searched too extensively). However there's a couple of pain points which is why I wanted to mark this experimental:

- The ConPTY API only support synchronous pipes (rather than the asynchronous `Evented ""NamedPipe""` from `mio_named_pipes`). So `windows.rs` has to change to dispatch over the two possible pipe types, and I added a local crate `mio_anonymous_pipes` to make these things `Evented` (using worker thread + intermediate buffer). Performance on those can likely be improved, tbh I'm hoping the problem goes away and we can move everything to `NamedPipe` if Microsoft lands https://github.com/Microsoft/console/issues/262 soon.

- Sometimes the last column has characters from other lines ""ghosting"" after scrolls or other writes to the buffer. I haven't used Alacritty in WinPty mode much so I'm not sure if the problem is also present there. I suspect it's an issue where the ConPTY api is treating the cursor position as having moved to the next line already when alacritty thinks it's in the last column, but I want to investigate this further after we have some other user experience.

Fixes #1661.
Fixes https://github.com/jwilm/alacritty/issues/1926."34"Thanks for the reports @nantronic2 and @lilianmoraru.

This looks like a dupe of #128. Please subscribe to that issue for further updates."davidhewittChristian Duerr12/28/18 03:59:13 PMFix config file field name1
176405/01/17 04:56:43 PMJoe WilmFix bug with tab rendering"Closes #494.
Resolves #529.
Resolves #512.
Resolves #493."01/03/19 08:50:18 PMImprove URL detection"Since the initial version of URL detection had some issues with being a
bit over-eager to mark things as URLs, a different approach has been
taken instead.

To make parsing easier, instead of trying to detect the URL by using a
streaming parser to the left and right of the click position, the
complete buffer is now converted to a string and then searched for
links.

With this change, it was made possible to use the `linkify` library
which handles locating the URLs in the terminal buffer text. Since it
now automatically finds all present URLs, this also brings us a step
closer to #1618.

Fixes #1903.
Fixes #1753.
Fixes #1727."6"Thanks for the reports @nantronic2 and @lilianmoraru.

This looks like a dupe of #128. Please subscribe to that issue for further updates."chrisduerrChristian Duerr11/09/18 04:59:44 PMFix tests1
176605/01/17 07:02:32 PMNone[Regression] with non-default settings spacing of characters is wrong"on 715d4f8:
![spectacle hv6295](https://cloud.githubusercontent.com/assets/3148759/25589542/eb947e9a-2ea4-11e7-8fcb-40db4478a5e2.png)

regression on current master (f298e04):
![spectacle bc6295](https://cloud.githubusercontent.com/assets/3148759/25589484/b9e2e3f0-2ea4-11e7-8f12-1fec4bdf4fc9.png)


bisect:
7fc50f669056dc9a3a601b3f0248926384abb570 is the first bad commit
```
commit 7fc50f669056dc9a3a601b3f0248926384abb570
Author: Aaron Williamson <guitarfanman@gmail.com>
Date:   Sat Jan 28 19:30:47 2017 -0700

    Improve freetype metric usage
    
    The font metrics function was using freetype metrics in an ineffective
    way, improve the use of those metrics and remove the now unnecessary
    separate default values for font offset in linux.

:100644 100644 b6ad6a3d74e484b454fbf3d7ff21c93c2bf0447f c064dbcfe64ad72c81e85221ca8c59e911f1c29b M	alacritty.yml
:040000 040000 cc846101654b0de8a4b3821635559fe8744e81c4 06c84dbabc7b58f4d74dfe45981d50ddb8b50e46 M	font
:040000 040000 59a6f247d87eab8c89844cbeaa98453f2ed5042d 985250712c92e1dd43487048f050881760f6b7aa M	src
```


my `alacritty.yml`:

```yml
# Configuration for Alacritty, the GPU enhanced terminal emulator


# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

# Window dimensions in character columns and lines
# (changes require restart)
dimensions:
  columns: 80
  lines: 24

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 103.0
  y: 103.0

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Hack
    #family: monospace # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Hack
    #family: monospace # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Hack
    #family: monospace # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 11.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 4.0
    y: -7.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false


# Colors (Solarized Dark)
colors:
  # Default colors
  primary:
    background: '0x002b36'
    #foreground: '0x839496'
    foreground: '0x839496'

  # Normal colors
  normal:
    black:   '0x073642'
    red:     '0xdc322f'
    green:   '0x859900'
    yellow:  '0xb58900'
    blue:    '0x268bd2'
    magenta: '0xd33682'
    cyan:    '0x2aa198'
    white:   '0xeee8d5'

  # Bright colors
  bright:
    black:   '0x015A71'
    red:     '0xcb4b16'
    green:   '0x586e75'
    yellow:  '0x657b83'
    blue:    '0x839496'
    magenta: '0x6c71c4'
    cyan:    '0x93a1a1'
    white:   '0xfdf6e3'

# Visual Bell
#
# Any time the BEL code is received, Alacritty ""rings"" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
#
# Want to add a binding (e.g. ""PageUp"") but are unsure what the X sequence
# (e.g. ""\x1b[5~"") is? Open another terminal (like xterm) without tmux,
# then run `showkey -a` to get the sequence associated to a key combination.
key_bindings:
  - { key: V,        mods: Control|Shift,    action: Paste               }
  - { key: C,        mods: Control|Shift,    action: Copy                }
  - { key: N, mods: Control|Shift, chars: ""setsid systemd-cat alacritty &\n"" }
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[4~"",  mode: ~AppCursor  }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Back,     mods: Alt,     chars: ""\x1b\x7f""                    }
  - { key: Insert,                  chars: ""\x1b[2~""                     }
  - { key: Delete,                  chars: ""\x1b[3~""                     }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: "",│`|:\""' ()[]{}<>""

hide_cursor_when_typing: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#shell:
#  program: /bin/bash
#  args:
#    - --login
```

cc: @aaron-williamson"11/10/18 05:04:26 PMRemove re-export of glutin size types"This is a follow-up to #1403, since it seems like I've only pushed to my local version instead of also pushing to mkeeler's branch.

This is only a code-style improvement regarding the re-exports of glutin types in Alacritty's src/lib.rs." =||= "I had a default config and observed this. I didn't event know that alacritty wrote a config to `~/.config/alacritty/alacritty.yml` on startup, but I just deleted the file and it regenerated a new config with 0 offsets that didn't exhibit this behavior anymore.

In general, if the serialization fields mean something different in a new version, usually you should rename the fields. Optionally, if the new fields aren't given, you can try to interpret the old fields. That way a configuration can be compatible with the new and old version (i.e. forwards and backwards compatibility)."chrisduerrChristian Duerr11/10/18 04:10:43 PMRemove re-export of glutin size types1
176705/28/17 03:04:22 AMBrandur LeachTreat white and bright black as grays"See #503 for background, but this starts treating white as a light gray
and bright black as a light gray. This is a commonly found idiom and
makes programs that use gray more readable.

I took the new prooposed colors from the default iTerm2 color scheme.

Fixes #503."11/11/18 10:16:54 PMBump version number to v0.2.2"Since the last version bump has been a while ago. The glutin PR merge seems like an appropriate time to bump the version number again.

I also want to give https://github.com/jwilm/alacritty/pull/1188 a bit more time and testing before merging it. So I'd advise bumping the version number first.

Fixes https://github.com/jwilm/alacritty/issues/1732." =||= many thanks!chrisduerrChristian Duerr11/11/18 03:10:40 AMBump version number to v0.2.21
176905/02/17 10:00:27 PMJoe Moonbuild failing on macos"```bash
$ system_profiler SPSoftwareDataType
Software:

    System Software Overview:

      System Version: macOS 10.12.4 (16E195)
      Kernel Version: Darwin 16.5.0

$ cargo --version
cargo 0.18.0-dev (fe7b0cd 2017-04-24)

$ rustc --version
rustc 1.17.0

$ git remote -v
origin  https://github.com/jwilm/alacritty (fetch)
origin  https://github.com/jwilm/alacritty (push)

$ git pull
Already up-to-date.

$ rustup override set stable
info: using existing install for 'stable-x86_64-apple-darwin'
info: override toolchain for '/Users/jmoon/play/alacritty' set to 'stable-x86_64-apple-darwin'

  stable-x86_64-apple-darwin unchanged - rustc 1.17.0 (56124baa9 2017-04-24)

$ rustup update stable
info: syncing channel updates for 'stable-x86_64-apple-darwin'

  stable-x86_64-apple-darwin unchanged - rustc 1.17.0 (56124baa9 2017-04-24)

$ cargo build --release
   Compiling alacritty v0.1.0 (file:///Users/jmoon/play/alacritty)
error: proc-macro derive panicked
   --> src/ansi.rs:381:73
    |
381 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                                         ^^^^^^^^^^^
    |
    = help: message: proc_macro::__internal::with_parse_sess() called before set_parse_sess()!

error: Could not compile `alacritty`.

To learn more, run the command again with --verbose.
```

<details>
<pre><code>
cargo build --release --verbose
       Fresh semver v0.1.20
       Fresh linked-hash-map v0.3.0
       Fresh ffi-util v0.1.0 (file:///Users/jmoon/play/alacritty/ffi-util)
       Fresh cfg-if v0.1.0
       Fresh libc v0.2.18
       Fresh pkg-config v0.3.8
       Fresh bitflags v0.4.0
       Fresh rustc-serialize v0.3.22
       Fresh strsim v0.6.0
       Fresh fnv v1.0.5
       Fresh vec_map v0.6.0
       Fresh serde v0.9.8
       Fresh log v0.3.6
       Fresh fsevent-sys v0.1.5
       Fresh rand v0.3.15
       Fresh heapsize v0.3.8
       Fresh fsevent v0.2.15
       Fresh smallvec v0.1.8
       Fresh winapi v0.2.8
       Fresh quote v0.3.12
       Fresh parking_lot_core v0.2.0
       Fresh errno v0.1.8
       Fresh core-foundation-sys v0.2.3
       Fresh unicode-segmentation v1.0.1
       Fresh lazycell v0.4.0
       Fresh itoa v0.2.1
       Fresh serde v0.7.15
       Fresh core-foundation v0.2.3
       Fresh yaml-rust v0.3.5
       Fresh rustc_version v0.1.7
       Fresh lazy_static v0.2.2
       Fresh dtoa v0.3.0
       Fresh serde_yaml v0.6.1
       Fresh slab v0.3.0
       Fresh shared_library v0.1.5
       Fresh unicode-width v0.1.4
       Fresh filetime v0.1.10
       Fresh malloc_buf v0.0.6
       Fresh void v1.0.2
       Fresh num-traits v0.1.36
       Fresh objc v0.2.2
       Fresh block v0.1.6
       Fresh euclid v0.6.8
       Fresh objc_id v0.1.0
       Fresh num-complex v0.1.35
       Fresh nix v0.7.0
       Fresh serde_json v0.9.2
       Fresh objc-foundation v0.1.1
       Fresh ansi_term v0.9.0
       Fresh net2 v0.2.26
       Fresh utf8parse v0.1.0
       Fresh copypasta v0.0.1 (file:///Users/jmoon/play/alacritty/copypasta)
       Fresh winapi-build v0.1.1
       Fresh mio v0.6.2
       Fresh vte v0.3.0
       Fresh term_size v0.2.1
       Fresh khronos_api v1.0.0
       Fresh bitflags v0.7.0
       Fresh core-graphics v0.3.2
       Fresh owning_ref v0.2.4
       Fresh clap v2.20.0
       Fresh core-text v1.1.1
       Fresh parking_lot v0.3.6
       Fresh xml-rs v0.3.5
       Fresh font v0.1.0 (file:///Users/jmoon/play/alacritty/font)
       Fresh time v0.1.36
       Fresh unicode-xid v0.0.4
       Fresh gl_generator v0.5.2
       Fresh num-integer v0.1.32
       Fresh bitflags v0.3.3
       Fresh syn v0.11.4
       Fresh num-iter v0.1.32
       Fresh serde_codegen_internals v0.14.0
       Fresh num-bigint v0.1.35
       Fresh serde_derive v0.9.8
       Fresh num-rational v0.1.35
       Fresh cocoa v0.3.3
       Fresh num v0.1.36
       Fresh xdg v2.0.0
       Fresh kernel32-sys v0.2.2
       Fresh cgmath v0.7.0
       Fresh walkdir v0.1.8
       Fresh gleam v0.2.31
       Fresh notify v2.6.3
       Fresh cgl v0.1.5
       Fresh glutin v0.6.1 (https://github.com/jwilm/glutin?rev=cc64178d39a1fa06b2c5403117e5e0ef24deeac4#cc64178d)
   Compiling alacritty v0.1.0 (file:///Users/jmoon/play/alacritty)
     Running `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg 'feature=""default""' --cfg 'feature=""err-println""' -C metadata=d49e65ee8acde8fa -C extra-filename=-d49e65ee8acde8fa --out-dir /Users/jmoon/play/alacritty/target/release/deps -L dependency=/Users/jmoon/play/alacritty/target/release/deps --extern notify=/Users/jmoon/play/alacritty/target/release/deps/libnotify-254fa238b4fb97b7.rlib --extern glutin=/Users/jmoon/play/alacritty/target/release/deps/libglutin-5f9089a313273330.rlib --extern lazy_static=/Users/jmoon/play/alacritty/target/release/deps/liblazy_static-3b2d015b4349e676.rlib --extern copypasta=/Users/jmoon/play/alacritty/target/release/deps/libcopypasta-c668851012aabc1e.rlib --extern mio=/Users/jmoon/play/alacritty/target/release/deps/libmio-878a6eff7e53a112.rlib --extern vte=/Users/jmoon/play/alacritty/target/release/deps/libvte-dcc5c4db56c47787.rlib --extern parking_lot=/Users/jmoon/play/alacritty/target/release/deps/libparking_lot-e18848dc5f4be263.rlib --extern cgmath=/Users/jmoon/play/alacritty/target/release/deps/libcgmath-7964b7acee178b01.rlib --extern serde_yaml=/Users/jmoon/play/alacritty/target/release/deps/libserde_yaml-0f0135443de6ae4a.rlib --extern serde=/Users/jmoon/play/alacritty/target/release/deps/libserde-9f43c5f76d4539b5.rlib --extern serde_derive=/Users/jmoon/play/alacritty/target/release/deps/libserde_derive-363230a9a44ba6e5.dylib --extern libc=/Users/jmoon/play/alacritty/target/release/deps/liblibc-8d751f39a7380bf8.rlib --extern unicode_width=/Users/jmoon/play/alacritty/target/release/deps/libunicode_width-fa365370873b727b.rlib --extern serde_json=/Users/jmoon/play/alacritty/target/release/deps/libserde_json-eea150fe898f260b.rlib --extern bitflags=/Users/jmoon/play/alacritty/target/release/deps/libbitflags-75fc9619122ee22e.rlib --extern errno=/Users/jmoon/play/alacritty/target/release/deps/liberrno-bd87a5b2fb49c6b0.rlib --extern fnv=/Users/jmoon/play/alacritty/target/release/deps/libfnv-557bfb60b466380f.rlib --extern log=/Users/jmoon/play/alacritty/target/release/deps/liblog-63006d84b4444419.rlib --extern xdg=/Users/jmoon/play/alacritty/target/release/deps/libxdg-7b6286b4c94e9a36.rlib --extern clap=/Users/jmoon/play/alacritty/target/release/deps/libclap-393e575a2885d525.rlib --extern font=/Users/jmoon/play/alacritty/target/release/deps/libfont-8cc2447b5812b713.rlib`
error: proc-macro derive panicked
   --> src/ansi.rs:381:73
    |
381 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                                         ^^^^^^^^^^^
    |
    = help: message: proc_macro::__internal::with_parse_sess() called before set_parse_sess()!

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg feature=""default"" --cfg feature=""err-println"" -C metadata=d49e65ee8acde8fa -C extra-filename=-d49e65ee8acde8fa --out-dir /Users/jmoon/play/alacritty/target/release/deps -L dependency=/Users/jmoon/play/alacritty/target/release/deps --extern notify=/Users/jmoon/play/alacritty/target/release/deps/libnotify-254fa238b4fb97b7.rlib --extern glutin=/Users/jmoon/play/alacritty/target/release/deps/libglutin-5f9089a313273330.rlib --extern lazy_static=/Users/jmoon/play/alacritty/target/release/deps/liblazy_static-3b2d015b4349e676.rlib --extern copypasta=/Users/jmoon/play/alacritty/target/release/deps/libcopypasta-c668851012aabc1e.rlib --extern mio=/Users/jmoon/play/alacritty/target/release/deps/libmio-878a6eff7e53a112.rlib --extern vte=/Users/jmoon/play/alacritty/target/release/deps/libvte-dcc5c4db56c47787.rlib --extern parking_lot=/Users/jmoon/play/alacritty/target/release/deps/libparking_lot-e18848dc5f4be263.rlib --extern cgmath=/Users/jmoon/play/alacritty/target/release/deps/libcgmath-7964b7acee178b01.rlib --extern serde_yaml=/Users/jmoon/play/alacritty/target/release/deps/libserde_yaml-0f0135443de6ae4a.rlib --extern serde=/Users/jmoon/play/alacritty/target/release/deps/libserde-9f43c5f76d4539b5.rlib --extern serde_derive=/Users/jmoon/play/alacritty/target/release/deps/libserde_derive-363230a9a44ba6e5.dylib --extern libc=/Users/jmoon/play/alacritty/target/release/deps/liblibc-8d751f39a7380bf8.rlib --extern unicode_width=/Users/jmoon/play/alacritty/target/release/deps/libunicode_width-fa365370873b727b.rlib --extern serde_json=/Users/jmoon/play/alacritty/target/release/deps/libserde_json-eea150fe898f260b.rlib --extern bitflags=/Users/jmoon/play/alacritty/target/release/deps/libbitflags-75fc9619122ee22e.rlib --extern errno=/Users/jmoon/play/alacritty/target/release/deps/liberrno-bd87a5b2fb49c6b0.rlib --extern fnv=/Users/jmoon/play/alacritty/target/release/deps/libfnv-557bfb60b466380f.rlib --extern log=/Users/jmoon/play/alacritty/target/release/deps/liblog-63006d84b4444419.rlib --extern xdg=/Users/jmoon/play/alacritty/target/release/deps/libxdg-7b6286b4c94e9a36.rlib --extern clap=/Users/jmoon/play/alacritty/target/release/deps/libclap-393e575a2885d525.rlib --extern font=/Users/jmoon/play/alacritty/target/release/deps/libfont-8cc2447b5812b713.rlib` (exit code: 101)
</code></pre>
</details>"11/11/18 12:55:29 PMSet env variables before window start"The environment variables specified in the configuration file are now
all set before the window is created. As a result, this makes it
possible to add the `WINIT_HIDPI_FACTOR` env variable directly to the
Alacritty configuration.

This fixes https://github.com/jwilm/alacritty/issues/1768." =||= This is a known issue with the Rust compiler from Homebrew. Please try again using a Rust compiler from `rustup` or [rust-lang.org](https://www.rust-lang.org).chrisduerrChristian Duerr11/11/18 11:00:25 AMFix macos build1
177205/04/17 08:53:52 AMPauCursor disappears when going to the beggining of the line "Hello, alacritty is lovely, but i found annoying bug? with cursor movement. It disappears when user go to start of line, and it reappears if you go to end of line again.

This video shows it: https://asciinema.org/a/edvwg4ti2p5f4sxiqbx6gu3j6

environment : shell -> zsh

keys pressed:
bindkey '^A' beginning-of-line (CTRL-A)
bindkey '^E' end-of-line (CTRL-E)
 
Thanks for this great software "11/24/18 04:14:12 AMCreate an installer for Windows"This PR uses Squirrel.Windows to make a basic installer for Alacritty. This also sets us up for doing automatic updates, but that can be done in a future PR

## TODO:

- [x] Get the installer creating a Setup.exe
- [ ] Figure out how to get embed-resource to allow us to make a Version Block, so that we can enable [Squirrel Events](https://github.com/Squirrel/Squirrel.Windows/blob/master/docs/using/custom-squirrel-events-non-cs.md)
- [ ] Implement Squirrel Events in main.rs
- [ ] Cross some i's and dot some t's (setup icon, make sure strings are correct, etc etc)"3"Leaving this here for anyone else encountering this issue. For me, it was triggered because I enabled `cursor` in: [`zsh-users/zsh-syntax-highlighting`](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md#how-to-activate-highlighters).
> ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern **cursor**)

By default it only contains `main`. When you disable `cursor` again you can prevent the bug from occurring."anaisbettsPaul Betts11/12/18 05:49:12 AMEnable building in AppVeyor1
177505/07/17 06:11:54 AMHenry SnopekOptimize OSX glyph_offset for Menlo"I've optimized the glyph offset on Mac OSX for Menlo.
![Glyph Offset](https://cldup.com/4wEZUsPLcW.png)"11/12/18 06:23:24 PMFix incorrect padding calculations"The extra window padding was calculated in the renderer which lead to
problems with the paddings calculated in the `src/display.rs` and
`src/term/mod.rs`.

As a solution, every instance of `config.padding().x/y` has been removed
from the renderer (`src/renderer/mod.rs`), instead the padding is always
passed through from the `src/display.rs`.

The initial calculations during display creation and after resize then
are scaled appropriately and then the extra padding is calculated. As a
result every other location can just make use of the correctly
calculated `size_info.padding_x` and `size_info.padding_y`.

This fixes #1773."14@jwilm 💥 working perfectly, thank you!chrisduerrChristian Duerr11/12/18 02:44:20 PMFix remaining style issues1
177604/09/20 03:01:46 AMMaxim BazSometimes alacritty doesn't fully render output"Quite often alacritty doesn't finish rendering the output, it is reproducible even after executing the same command over and over again. When it's stuck, if I hit Enter, this will cause it to refresh window, but until I do anything inside the window, it will remain like that.

It's best described with a gif:

![alacritty](https://cloud.githubusercontent.com/assets/1177900/25645462/9866ced4-2fae-11e7-987f-1389363ae17d.gif)

It's not the same as #459, as here window is always focused.

System info: Arch, i3, https://github.com/jwilm/alacritty/commit/f298e0455ab549aac1835ba59467ce06111b9bc9 installed via AUR."11/12/18 02:46:36 PMFix failing github releases"The manpage was incorrectly zipped up with the `-z` option, which
doesn't exist and created a 0-size file. Since Github does not accept
0-size files, this lead to the complete release deployment failing.

Changing this to use the `-c` option should fix this problem by creating
a proper non-zero size gzip file." =||= Closing as a duplicate of #824. I'm not sure why this has been kept around for so long since it seems very clearly to be the same issue. I believe I originally thought that the output was partially incorrect, but it seems like it's just freezing the redraw just like the other issue.chrisduerrChristian Dürr11/12/18 11:35:06 AM"Fix failing github releases

The manpage was incorrectly zipped up with the `-z` option, which
doesn't exist and created a 0-size file. Since Github does not accept
0-size files, this lead to the complete release deployment failing.

Changing this to use the `-c` option should fix this problem by creating
a proper non-zero size gzip file."1
177705/03/17 04:32:25 PMChris LeeCannot build alacritty on OS X (10.11.6), Rust stable v1.17.0"Alacritty fails to build with:

```
error: proc-macro derive panicked
   --> src/ansi.rs:381:73
    |
381 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                                         ^^^^^^^^^^^
    |
    = help: message: proc_macro::__internal::with_parse_sess() called before set_parse_sess()!

error: Could not compile `alacritty`.
```"11/12/18 03:20:45 PMCorrect config commentIt was mismatched only in config for macOS. =||= Just figured that out. (I was using `homebrew` and just installed via `rustup` instead.) Closing this.mihyaeru21Mihyaeru11/12/18 02:30:05 PMCorrect config comment1
177907/22/18 12:38:54 AMMartin Algesten[Feature] Hide window"On macOS the standard is that Command-H hides the window. Creating a brand new coca app in xcode will always give you the ""standard menu"" with hide in it already mapped up.

Alacritty should on macOS support some way of providing the standard hiding.

It appears glutin provides hooks for showing/hiding. https://github.com/PistonDevelopers/glutin_window/blob/11ccf57045af0bb84c79086ea7baf44e87bad6f1/src/lib.rs#L347-L348

So I could envisage a new action `Hide` with something like:

```
  - { key: H,        mods: Command, action: Hide  }
```

Is this something you think alacritty should do? Should I try putting a PR together?"11/13/18 04:06:34 PMBump version to 0.2.3"Since the version 0.2.2 had some significant breakage which affects a
large number of users, this 0.2.3 release aims at providing a stable
release which works for everyone without any major regressions."1It's not possible to hide all windows.chrisduerrChristian Duerr11/12/18 06:24:19 PM"Bump version to 0.2.3

Since the version 0.2.2 had some significant breakage which affects a
large number of users, this 0.2.3 release aims at providing a stable
release which works for everyone without any major regressions."1
178005/06/17 07:53:55 PMJoe WilmFix cell layout, add cell padding"* Fixes some old logic which caused text to appear outside of the window in some situations
* Adds window padding option to config"11/15/18 07:57:16 PMAdd option for dynamic padding"This adds the `window.dynamic_padding` option which allows disabling the
dynamic spread of additional padding around the grid's content.

This fixes #1778.

I'm not quite sure yet if this should be `true` or `false` by default. If someone
has an opinion on this, please leave a comment here."20Nice one, glyph offset are no longer needed to be overridden after this one was merged.chrisduerrChristian Duerr11/15/18 06:42:24 PMFix incurrect default value in WindowConfig struct1
178205/07/17 12:44:06 AMTim LopezCrash on mouseover when using padding_x"*Steps to reproduce*:

1. Run the app (I'm using Ubuntu 16.04 -- suspect it will happen in many more configurations).
2. Move mouse over past the edge

App crashes.

*Possible cause*:

See commit 9316771f64842533181cfb04a27aa9ae809cc435.

        let col = Column((x - self.padding_x as usize) / (self.cell_width as usize));
        let line = Line((y - self.padding_y as usize) / (self.cell_height as usize));

if `self.padding_x` >  `x` then an error `attempt to subtract with overflow` will be raised.

Should `contains_point` be using && instead of || on the check? 

n.b. I know nothing about Rust, so apologies if the cause is not correct."11/13/18 06:32:41 AMFix specifying 0 lines/columns in config fileThis fixes #1781.1Oops, I totally broke that while refactoring. Thanks for the report! Should be fixed on master.chrisduerrChristian Duerr11/12/18 10:35:54 PMAdd additional documentation1
178305/07/17 06:10:18 AMRafi KhanCursor position is off"Platform: OSX

![](https://i.imgur.com/LCisuqe.png)

This is a direct clone of master."11/13/18 08:43:20 AMUse jemallocator"Since jemalloc has been removed from nightly, we need to manually use jemallocator for performance reasons.

Another benefit of using jemallocator is that it allows us to dynamically link jemalloc using the `JEMALLOC_OVERRIDE` environment variable."4Thanks for the report; should be fixed.quininerquininer11/13/18 03:16:27 AMfix ci1
178812/10/17 10:43:21 PMKen SwensonSome characters are skipped when alacritty is forced to redraw quickly"Alacritty sometimes misses drawing characters, and sometimes as the incorrect color.

Steps to reproduce:

1. launch ncmpcpp and play a track.
2. switch to the visualizer ""frequency spectrum""

Video: https://my.mixtape.moe/yktkrn.webm
Top term is alacritty, bottom xfce4-terminal

alacritty also appears to incorrectly draw the seek bar."11/14/18 11:47:14 PMFix i386 CI releases"The i386 CI releases were still using x86_64 platforms for building the
output binaries, as a result the produced binaries did not work properly
on i386 systems.

This fixes #1786."4I gave it a try a few days ago, and it's almost perfect.chrisduerrChristian Duerr11/14/18 12:04:42 PM"Fix build timeout

The maximum time of 50 minutes is exceeded when Alacritty tries to build
for all Linux platforms, this is because it was effectively compiling
Alacritty from scratch four times.

By making use of the previous build artifacts, it's possible to cut this
down to two compiles using the `--no-build` option of `cargo-deb`."1
179305/13/17 12:52:28 AMSimon WalkerIncremental release build broken"This is more a FYI but I recently had trouble compiling on stable rust (1.17.0) with incremental builds (CARGO_INCREMENTAL=1). I get the error pasted below.

I'm on OSX 10.12.4 with rustc 1.17.0. The build succeeds with a debug build but performance is reduced. The build also succeeds without CARGO_INCREMENTAL set (`CARGO_INCREMENTAL= cargo build --release`).

This issue also occurs with the current nightly compiler (rustc 1.19.0-nightly (2d4ed8e0c 2017-05-03)), so presumably it's some unfortunate interaction with `alacritty` and incremental builds.

In summary: build with `CARGO_INCREMENTAL= cargo build --release`

```
   Compiling alacritty v0.1.0 (file:///Users/simon/Documents/Development/forks/alacritty)
warning: the option `Z` is unstable and should only be used on the nightly compiler, but it is currently accepted for backwards compatibility; this will soon change, see issue #31847 for more details

warning: the option `Z` is unstable and should only be used on the nightly compiler, but it is currently accepted for backwards compatibility; this will soon change, see issue #31847 for more details

error: linking with `cc` failed: exit code: 1
  |
  = note: ""cc"" ""-m64"" ""-L"" ""/Users/simon/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-ansi.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-config.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-display.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-event.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-event_loop.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-grid.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-index.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-input.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-sync.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-term-cell.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-term.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-tty.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-util-fmt.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-util-thread.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty-util.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alacritty.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alloc-arc.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alloc-boxed.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.alloc-raw_vec.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-borrow.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-slice-hack.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-slice.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-string.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-vec.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.collections-vec_deque.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.copypasta-macos.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-any.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-convert.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-fmt-builders.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-fmt.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-iter.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-ops.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-option.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-ptr.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-result.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.core-slice.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.dtoa-diyfp.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.dtoa.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.glutin-events.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.glutin-window.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.itoa.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.log.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.mio-channel.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.mio-poll.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.notify-fsevent.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.serde-ser.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.serde_json-error.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.serde_json-ser.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-collections-hash-map.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-collections-hash-table.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-fs.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-io-error.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-panic.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-panicking.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-path.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-process.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-mpsc_queue.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-oneshot.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-shared.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-spsc_queue.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-stream.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc-sync.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mpsc.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sync-mutex.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sys_common-poison.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-sys_common-remutex.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.std-thread.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.utf8parse.volatile.o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674.vte.volatile.o"" ""-o"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps/alacritty-5f759f91eed80674"" ""-Wl,-dead_strip"" ""-nodefaultlibs"" ""-L"" ""/Users/simon/Documents/Development/forks/alacritty/target/release/deps"" ""-L"" ""/Users/simon/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libalacritty-015380678d6fdd2b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcgmath-7964b7acee178b01.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libfont-a16e9ff136289846.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libeuclid-c371a97314e3c8bb.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libserde_yaml-0f0135443de6ae4a.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libfnv-557bfb60b466380f.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnotify-254fa238b4fb97b7.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libfiletime-d39edc245044c62f.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libxdg-7b6286b4c94e9a36.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcopypasta-ddea575134a5bc0e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liberrno-bd87a5b2fb49c6b0.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libparking_lot-e18848dc5f4be263.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libparking_lot_core-1ba154618d4e3267.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libsmallvec-27b1609a55656b41.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libowning_ref-cff426d51c112da4.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libglutin-5f9089a313273330.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcgl-0f66b08e4bd0946d.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libgleam-5f39ae9b2da9657c.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libshared_library-695c4945e77ba703.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liblazy_static-3b2d015b4349e676.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libmio-878a6eff7e53a112.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liblog-63006d84b4444419.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnet2-b9a4fd6fdb00550e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liblazycell-72a893ba7686291a.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libwalkdir-b78c33176874cea4.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libserde_json-eea150fe898f260b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libdtoa-45dec47a3fd56f2b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libitoa-c7a99536044acb26.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libclap-393e575a2885d525.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libunicode_segmentation-1e8141c7f7df5aed.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libunicode_width-fa365370873b727b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libansi_term-347e6b8ef746ea62.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libstrsim-aeeeecec407bea2e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libvte-dcc5c4db56c47787.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libutf8parse-1975f0f2aaf4869b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libterm_size-0e8b1b826919e9b9.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libobjc_foundation-014c2bc523b5cae8.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libblock-aa3e2a80ef73cd58.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libffi_util-c3e9cd2c90c79d7c.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnix-269f80780caf3f7a.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libvoid-04343e1a6de985ad.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcfg_if-bf5248a8c9bf9021.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libfsevent-74821b1c8e77f8b5.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libfsevent_sys-dca722b9ea2dfc93.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libbitflags-94a27f4e8ae7115f.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libserde-9f43c5f76d4539b5.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libbitflags-75fc9619122ee22e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libyaml_rust-11638f6f05e5eb7e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liblinked_hash_map-c931f7571d7a4145.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libvec_map-e3fd3c47da30be8e.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum-05812d9826db4f0c.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_rational-85ba535a3cd2672f.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_complex-fae2d43b4c95bbf7.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_iter-e661d04c49c262c1.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_bigint-5e17cd98fb669a05.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_integer-ce1cfd8f42c64454.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libnum_traits-27480f32ccc44222.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/librustc_serialize-cce066e04585630b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/librand-c51db30caea04fa0.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libobjc_id-841ac2e8f91d6520.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcore_text-00a577bcbd179829.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libheapsize-3a71f9d515bb9a0d.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcocoa-3cf1fee776942670.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libobjc-81c3110c95ab26ed.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libmalloc_buf-2d99085ec4502bb9.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcore_graphics-fe349d1280b76bca.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libserde-06fa8c1db3a93550.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcore_foundation-a8d7334d5f762b5b.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcore_foundation_sys-df39c3e833946918.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liblibc-8d751f39a7380bf8.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libbitflags-391a0dd8b771a2a0.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libslab-fb429b45099894b8.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/liballoc_jemalloc-ea49ffd3fee5264c.rlib"" ""/var/folders/xs/y_f1c_r570v6hmwc7mdj208h0000gn/T/rustc.rJJDPVyI8UQl/libcompiler_builtins-1afcf087346e8edb.rlib"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""AppKit"" ""-framework"" ""OpenGL"" ""-framework"" ""OpenGL"" ""-framework"" ""Foundation"" ""-l"" ""System"" ""-framework"" ""CoreServices"" ""-framework"" ""CoreServices"" ""-l"" ""objc"" ""-l"" ""objc"" ""-framework"" ""ApplicationServices"" ""-framework"" ""AppKit"" ""-framework"" ""Foundation"" ""-l"" ""objc"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""ApplicationServices"" ""-framework"" ""CoreFoundation"" ""-l"" ""System"" ""-l"" ""pthread"" ""-l"" ""c"" ""-l"" ""m""
  = note: Undefined symbols for architecture x86_64:
            ""_$LT$core..fmt..Formatter$LT$$u27$a$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h6b26151e641e4a27"", referenced from:
                _vtable.0 in libansi_term-347e6b8ef746ea62.rlib(ansi_term-347e6b8ef746ea62.ansi_term.o)
            ""std::io::error::Error::last_os_error::h5de5e38745c68440"", referenced from:
                rand::os::imp::getrandom_fill_bytes::h30b31950c8118d64 in librand-c51db30caea04fa0.rlib(rand-c51db30caea04fa0.rand-os-imp.o)
            ""_$LT$std..ffi..os_str..OsStr$u20$as$u20$std..sys..imp..ext..ffi..OsStrExt$GT$::as_bytes::h2c6aff030f3c6422"", referenced from:
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::starts_with::h83f55c3dc7e4dc09 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::is_empty_::h57e10b6e72fb2a1b in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::contains_byte::h47e572270b039092 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::split_at_byte::he1fa9d6dede9c185 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::trim_left_matches::h70dc917930ccad6e in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::split_at::hc97f183081cd4dd4 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                _$LT$std..ffi..os_str..OsStr$u20$as$u20$clap..osstringext..OsStrExt2$GT$::len_::h520d9cbfa746b7e7 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.std-ffi-os_str.o)
                ...
            ""_$LT$f64$u20$as$u20$core..num..dec2flt..rawfp..RawFloat$GT$::from_int::h7d00f2010b4317c5"", referenced from:
                core::num::dec2flt::algorithm::fast_path::h29917a557aadaf08 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::fast_path::hb67036772e663269 in libserde_yaml-0f0135443de6ae4a.rlib(serde_yaml-0f0135443de6ae4a.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::fast_path::h20cc39afac371883 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.core-num-dec2flt-algorithm.volatile.o)
            ""_$LT$f64$u20$as$u20$core..num..dec2flt..rawfp..RawFloat$GT$::short_fast_pow10::heb519e875929a31c"", referenced from:
                core::num::dec2flt::algorithm::fast_path::h29917a557aadaf08 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::fast_path::hb67036772e663269 in libserde_yaml-0f0135443de6ae4a.rlib(serde_yaml-0f0135443de6ae4a.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::fast_path::h20cc39afac371883 in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.core-num-dec2flt-algorithm.volatile.o)
            ""core::num::bignum::Big32x40::bit_length::h68e7038d95bdf6d5"", referenced from:
                core::num::dec2flt::algorithm::quick_start::hb7ef13b977f12794 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::quick_start::hbe03f3dbc6719de6 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::underflow::h9e0e34bb38b5649d in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::underflow::he906160b0fb6c7ba in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::quick_start::h24de5df87be1ef87 in libserde_yaml-0f0135443de6ae4a.rlib(serde_yaml-0f0135443de6ae4a.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::underflow::hd2109b3506180d04 in libserde_yaml-0f0135443de6ae4a.rlib(serde_yaml-0f0135443de6ae4a.core-num-dec2flt-algorithm.volatile.o)
                core::num::dec2flt::algorithm::quick_start::ha532eef864b6000d in libclap-393e575a2885d525.rlib(clap-393e575a2885d525.core-num-dec2flt-algorithm.volatile.o)

                # many more lines

            ""std::env::home_dir::h320fa63442792c38"", referenced from:
                xdg::BaseDirectories::with_env_impl::he11da2a9136e8f78 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.xdg.volatile.o)
                xdg::BaseDirectories::with_env_impl::h62863bed84ee4903 in libxdg-7b6286b4c94e9a36.rlib(xdg-7b6286b4c94e9a36.xdg.volatile.o)
            ""_$LT$std..sync..mpsc..shared..Packet$LT$T$GT$$GT$::decrement::__STATIC_FMTSTR::h02078e1efa84cb63"", referenced from:
                _$LT$std..sync..mpsc..shared..Packet$LT$T$GT$$GT$::decrement::h0566c7450f269293 in alacritty-5f759f91eed80674.std-sync-mpsc-shared.volatile.o
                _$LT$std..sync..mpsc..shared..Packet$LT$T$GT$$GT$::decrement::h0201d4884d08797f in libnotify-254fa238b4fb97b7.rlib(notify-254fa238b4fb97b7.std-sync-mpsc-shared.volatile.o)
                _$LT$std..sync..mpsc..shared..Packet$LT$T$GT$$GT$::decrement::he8b897cec29cb56c in libnotify-254fa238b4fb97b7.rlib(notify-254fa238b4fb97b7.std-sync-mpsc-shared.volatile.o)
            ""std::process::exit::h30368c66cf0b5fe2"", referenced from:
                alacritty::main::h909f323cbaf2d153 in alacritty-5f759f91eed80674.alacritty.o
                _$LT$alacritty..event..Processor$LT$N$GT$$GT$::handle_event::hb366befeb81d1425 in alacritty-5f759f91eed80674.alacritty-event.volatile.o
                alacritty::input::Action::execute::h66948a64e4871648 in alacritty-5f759f91eed80674.alacritty-input.volatile.o
                alacritty::tty::Pty::resize::hd907fe09a9f2932e in alacritty-5f759f91eed80674.alacritty-tty.volatile.o
                alacritty::tty::new::hf24f2fdf6c6f4ea2 in alacritty-5f759f91eed80674.alacritty-tty.volatile.o
                alacritty::tty::new::_$u7b$$u7b$closure$u7d$$u7d$::h6ad87ac26f83cf49 in alacritty-5f759f91eed80674.std-process.volatile.o
                alacritty::tty::sigchld::hb9771ed2221beaa5 in libalacritty-015380678d6fdd2b.rlib(alacritty-015380678d6fdd2b.alacritty-tty.o)
                ...
          ld: symbol(s) not found for architecture x86_64
          clang: error: linker command failed with exit code 1 (use -v to see invocation)
          

error: aborting due to previous error

error: Could not compile `alacritty`.

To learn more, run the command again with --verbose.

```"11/14/18 08:37:55 PMAdd change log entry for `scale_with_dpi` settingThis fixes https://github.com/jwilm/alacritty/issues/1791. =||= I filed an issue on the rust project about this. Closing it here since there's nothing to be done.chrisduerrChristian Duerr11/14/18 08:32:12 PMAdd change log entry for `scale_with_dpi` setting1
179405/08/17 03:12:17 AMRiccardo Attilio GalliConfig watcher crashes for No Space Left on Device"Alacritty starts but the thread supposed to watch the config file for changes dies for no space left on device. The device has space left.

```
$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/dm-0       368G   31G    336G   9% /
/dev/dm-0       368G   31G    336G   9% /home
tmpfs           9,7G  7,5M    9,7G   1% /tmp
```

```
# Partial `mount` output
/ type btrfs (rw,relatime,seclabel,ssd,space_cache,subvolid=257,subvol=/root)
/home type btrfs (rw,relatime,seclabel,ssd,space_cache,subvolid=258,subvol=/home)
```

```
$ lsb_release -a
LSB Version:	:core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
Distributor ID:	Fedora
Description:	Fedora release 25 (Twenty Five)
Release:	25
Codename:	TwentyFive
```

```
$ rustup --version
rustup 1.2.0 (70faf07 2017-04-08)
$ rustc --version
rustc 1.17.0 (56124baa9 2017-04-24)
```

```
# alacritty ""version""
$  git log --oneline | head -n 1
573c503 Fix sign error in CoreText font rasterizer
```

```
# Output of ` RUST_BACKTRACE=1 ./target/release/alacritty`
thread 'config watcher' panicked at 'watch alacritty yml: Io(Error { repr: Os { code: 28, message: ""No space left on device"" } })', /checkout/src/libcore/result.rs:859
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:71
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:355
   2: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:371
             at /checkout/src/libstd/panicking.rs:549
   3: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:511
   4: std::panicking::begin_panic_fmt
             at /checkout/src/libstd/panicking.rs:495
   5: core::panicking::panic_fmt
             at /checkout/src/libstd/panicking.rs:471
   6: core::result::unwrap_failed
             at /checkout/src/libcore/macros.rs:29
   7: alacritty::config::Monitor::new::{{closure}}
             at /checkout/src/libcore/result.rs:761
             at ./src/config.rs:1374
   8: <F as alloc::boxed::FnBox<A>>::call_box
             at /checkout/src/libstd/panic.rs:296
             at /checkout/src/libstd/panicking.rs:454
             at /checkout/src/libpanic_unwind/lib.rs:98
             at /checkout/src/libstd/panic.rs:361
             at /checkout/src/libstd/thread/mod.rs:360
             at /checkout/src/liballoc/boxed.rs:640
   9: std::sys::imp::thread::Thread::new::thread_start
             at /checkout/src/liballoc/boxed.rs:650
             at /checkout/src/libstd/sys_common/thread.rs:21
             at /checkout/src/libstd/sys/unix/thread.rs:84
  10: start_thread
  11: clone
```"11/14/18 09:49:35 PMMove .deb building instructions to INSTALL.mdThis fixes #1541. =||= "@passcod thanks for the tip!

@riquito We just watch the config file (and optionally shader files when building with `live-reload-shaders` feature). Going to close this. Thanks for the report!"Th3FanbusAngel Pons11/14/18 09:30:56 PM"Move .deb building instructions to INSTALL.md

This fixes #1541.

Signed-off-by: Angel Pons <th3fanbus@gmail.com>"1
179505/07/17 10:14:23 PMDominik MiedzińskiAdd support for Query Device Status"Alacritty was responding with device code when queried for device status. Now it responds that terminal is OK.

Fixes #72."11/19/18 09:24:23 AMChanged path to standard /usr/bin/..., registered as an x-terminal-emulator alternative"1. `/usr/local` is for non-`.deb` installs.
2. Registering `alacritty` as an `x-terminal-emulator` alternative to use it as a default terminal app."7Thanks for the fix!ilya-epifanovChristian Duerr11/19/18 08:38:05 AMAdd change log entry1
179612/22/17 10:00:18 PMPaulBGDImplement faux scrolling"Well my example uses two examples. I can use the mouse wheel to scroll inside of Vim, but scrolling inside of `htop` or `man` doesn't work. 

Let me know if you need any more information."11/14/18 11:44:54 PMUpdate all dependenciesThis applies all breaking and non-breaking dependency updates. =||= Since it seems to be standard behavior in other emulators, we should probably add it.chrisduerrChristian Duerr11/14/18 10:42:40 PM"Update all dependencies

This applies all breaking and non-breaking dependency updates."1
179905/08/17 03:38:03 PMDominik MiedzińskiFix Device Status reportsFollowup to #549. Status report was lacking `[` (it wasn't CSI). Additionally, when asked for cursor position (both queries end with `n`), we were responding with device status. Now it's implemented properly - it passes vttest's DSR test and behaves like other terminal emulators I use.11/15/18 01:58:25 PMAdd homebrew option for macOS installation."There is a [maintained Homebrew formula](https://github.com/Homebrew/homebrew-cask/blob/master/Casks/alacritty.rb) that should be a preferred method of installation for macOS users. 

I did not include details about the Homebrew package manager, as this is a resource that I would imagine most macOS users interested in Alacritty would already know about, but a dependency link would be an easy addition."15Thanks again! Glad to hear it passes vttest DSR.badfilmsFintan Horan11/15/18 01:55:14 PMReword post-Cask installation recommendations.1
180705/28/17 02:52:59 AMNiklas DusenlundRemove incorrect close"Ownership of the slave file descriptor is passed to the process::Stdio
structs and will be closed when they are dropped. If the slave fd is
closed explicitly then the next fd that is opened during the same scope
will get silently closed by the Stdio structs when they are dropped.

I had issues with race conditions in another software project so I think it affects this project to. Luckily no fds are opened between `close(slave)` and the end of that scope.

Do you need more details for accepting this?

https://doc.rust-lang.org/std/os/unix/io/trait.FromRawFd.html#tymethod.from_raw_fd"11/16/18 09:28:50 PMFix blurry fonts without dynamic padding"There were some minor rounding issues in the padding codepath without
dynamic padding. These have been fixed, which should resolve issues with
blurry fonts on monitors with a fractional DPR.

This fixes https://github.com/jwilm/alacritty/issues/1806."2"Here you have a small test as well =) Notice that `/dev/pts` is missing in the second listing.

```diff
iff --git a/src/main.rs b/src/main.rs
index 5126b09..c3f8107 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -104,6 +104,7 @@ fn run(mut config: Config, options: cli::Options) -> Result<(), Box<Error>> {
     // pseudoterminal. A file descriptor for the master side is retained for
     // reading/writing to the shell.
     let mut pty = tty::new(&config, &options, display.size());
+    tty::printfds(""dropped"");
     // Create the pseudoterminal I/O loop
     //
diff --git a/src/tty.rs b/src/tty.rs
index bd291b1..fd69ddd 100644
--- a/src/tty.rs
+++ b/src/tty.rs
@@ -63,6 +63,16 @@ fn errno() -> c_int {
     ::errno::errno().0
 }
+pub fn printfds(prefix: &str) {
+    for entry in ::std::fs::read_dir(""/proc/self/fd"").unwrap() {
+        let entry = entry.unwrap();
+        if let Ok(canon_path) = ::std::fs::canonicalize(entry.path()) {
+            let path = entry.path();
+            debug!(""{}: {:?} {:?}"", prefix, path, canon_path);
+        }
+    }
+}
+
 /// Get raw fds for master/slave ends of a new pty
 #[cfg(target_os = ""linux"")]
 fn openpty(rows: u8, cols: u8) -> (c_int, c_int) {
@@ -181,6 +191,8 @@ pub fn new<T: ToWinsize>(config: &Config, options: &Options, size: T) -> Pty {
     let (master, slave) = openpty(win.ws_row as _, win.ws_col as _);
+    printfds(""created"");
+
     let default_shell = &Shell::new(pw.shell);
     let shell = config.shell()
         .unwrap_or(&default_shell);
```

```
 ./target/debug/alacritty -vv -e bash
Welcome to Alacritty.
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.067738777
set_inner_size: 640px × 360px
width: 644, height: 644
Cell Size: (8 x 15)
PTY Dimensions: Line(42) x Column(80)
created: ""/proc/self/fd/0"" ""/dev/pts/1""
created: ""/proc/self/fd/1"" ""/dev/pts/1""
created: ""/proc/self/fd/2"" ""/dev/pts/1""
created: ""/proc/self/fd/4"" ""/dev/dri/card1""
created: ""/proc/self/fd/5"" ""/dev/ptmx""
created: ""/proc/self/fd/6"" ""/dev/pts/20""
created: ""/proc/self/fd/7"" ""/proc/11159/fd""
dropped: ""/proc/self/fd/0"" ""/dev/pts/1""
dropped: ""/proc/self/fd/1"" ""/dev/pts/1""
dropped: ""/proc/self/fd/2"" ""/dev/pts/1""
dropped: ""/proc/self/fd/4"" ""/dev/dri/card1""
dropped: ""/proc/self/fd/5"" ""/dev/ptmx""
dropped: ""/proc/self/fd/6"" ""/proc/11159/fd""
Term::resize
```"chrisduerrChristian Duerr11/16/18 08:21:38 PM"Fix blurry fonts without dynamic padding

There were some minor rounding issues in the padding codepath without
dynamic padding. These have been fixed, which should resolve issues with
blurry fonts on monitors with a fractional DPR.

This fixes https://github.com/jwilm/alacritty/issues/1806."1
180805/09/17 03:40:43 PMMatthew ScharleyIssues displaying at least some UTF-8 characters."Terminal (OSX):

<img width=""1082"" alt=""screen shot 2017-05-09 at 8 54 18 pm"" src=""https://cloud.githubusercontent.com/assets/336509/25847479/b7344468-34f9-11e7-8d6c-b18453aafbd5.png"">

Alacritty:

<img width=""1014"" alt=""screen shot 2017-05-09 at 8 54 26 pm"" src=""https://cloud.githubusercontent.com/assets/336509/25847488/be704e16-34f9-11e7-9175-3262c676660a.png"">

You'll notice that the Japanese text is conspicuously missing in the output in Alacritty. Otherwise, the text is laid out correctly. Both terminals are using the same base font (Monaco)."11/17/18 06:29:09 PMAdd NixOS install instructions to README.md =||= "Hey @mscharley,

Thanks for the report! We've still got a TODO for implementing fallback fonts on macOS. Please subscribe to #45 updates."rmoreyRyan Morey11/17/18 06:25:31 PMAdd NixOS install instructions to README.md1
181007/04/17 04:18:17 AMJoe WilmUpdates to the latest Glutin version"Alacritty is now using the latest Glutin/winit. We are temporarily on a
fork while a couple of patches get upstreamed. This branch won't be
merged until the fork is not needed.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/554)
<!-- Reviewable:end -->"11/18/18 01:48:11 PMLower log level of warnings in ansi.rs"Since ansi.rs is mostly about control sequences sent by applications,
displaying all issues during parsing to the user can be annoying since
Alacritty might not actually do anything wrong.

To resolve this problem, all `warn!` logs in `src/ansi.rs` have been
decreased to the `debug!` level.

This fixes #1809." =||= This is on an older, broken version of Glutin/winit at this point. Will follow up soon with a new attempt.chrisduerrChristian Duerr11/18/18 12:13:07 PM"Lower log level of warnings in ansi.rs

Since ansi.rs is mostly about control sequences sent by applications,
displaying all issues during parsing to the user can be annoying since
Alacritty might not actually do anything wrong.

To resolve this problem, all `warn!` logs in `src/ansi.rs` have been
decreased to the `debug!` level.

This fixes #1809."1
181207/03/17 04:20:01 PMRaphael H RibasPerformance issues on macos"I tried alacritty a few months ago and tried again today. But both times the terminal performance was way bellow iterm2.

I just cloned from commit 5c6b7dd244e309067141a206c2e2518580068d9e and the config is copied from the one in the repo but replacing font with Menlo.

It was particularly slow switching panes in tmux, it takes a full second for all lines in the screen to be updated. Scrolling in vim is not very fast either and half of the screen flashes on page down.

Other opengl applications are working just fine, I have a pre touch bar 15in macbook, I also have an external monitor attached to it."11/18/18 03:49:17 PMUpdate filetime to v0.2.4"filetime v0.2.3 fails to build on OpenBSD.

This fixes #1784 ." =||= Thanks @rahenri!thendiscardAndrei-Marius Radu11/18/18 03:23:02 PM"Update filetime to v0.2.4

filetime v0.2.3 fails to build on OpenBSD.

This fixes #1784 ."1
181405/10/17 03:09:03 PMNoneAlacritty ignores lines configuration"```
...
env:
  # TERM env customization. Default is xterm-256color
  # Note: the default TERM value `xterm-256color` does not
  # specify all features alacritty supports. This does pose
  # a few issues with programs relying on terminfo and the
  # `tput` command
  TERM: xterm-256color
# Window dimensions in character columns and lines
# (changes require restart)
dimensions:
  columns: 132
  lines: 34
# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0
...
```

It always boots with this output (without me resizing it):
```
num_cols, num_lines = 170, 63
num_cols, num_lines = 132, 66
```"11/19/18 08:33:49 AMAdd keybinding action for clearing warns/errors"Since running `clear` inside of tmux doesn't actually clear any part of
the screen, but just resets the scrolling region, the warning and error
notices can't be removed without quitting tmux or Alacritty.

As a solution, a new action `ClearLogNotice` has been added which has
been bound to Ctrl+L by default. As a result, Ctrl+L can be used inside
of tmux to remove the messages, even though tmux doesn't clear the
screen.

This fixes #1811."1Thanks @rahenri!chrisduerrChristian Duerr11/18/18 11:07:23 PMFix change log entry1
181505/10/17 03:09:03 PMVladyslav M.Fix viewport_size.height calculationCloses #55611/18/18 11:05:39 PMRemove `scale_with_dpi` setting from config"Since the `scale_with_dpi` setting has been deprecated, but it hasn't
been removed from the config, Alacritty would print an error every time
it is started.

To resolve this problem, the option is removed from the default
configuration file." =||= yeah i got that from the scrollback issue. I3 is my go to for small screens but sometimes i  just want compiz :P chrisduerrChristian Duerr11/18/18 10:13:31 PM"Remove `scale_with_dpi` setting from config

Since the `scale_with_dpi` setting has been deprecated, but it hasn't
been removed from the config, Alacritty would print an error every time
it is started.

To resolve this problem, the option is removed from the default
configuration file."1
182305/10/17 03:10:05 PMMaxim BazAdd Ctrl+PageUp and Ctrl+PageDown to default key bindings"I was comparing the output of `showkey -a` with the sakura terminal and I noticed that Alacritty does not react on <kbd>Ctrl+PageUp</kbd> and <kbd>Ctrl+PageDown</kbd>. I personally use these keys in vim, I'm adding them to the default config because think I'm not the only one 🙂 

I also added them to macos config, although I didn't test on Mac."11/19/18 09:23:48 PMMaximized"Rebased version of #1273.

This fixes #38.

Only tested on macOS 10.14.1"14"@jwilm done, PR https://github.com/jwilm/alacritty/pull/559 ""Add Shift+PageUp and Shift+PageDown to default key bindings""

> *If you are confident that these are the correct `chars`, I would be happy to see your PR 👍*

@maximbaz yup, have been using them with tmux for months."jedahanJonathan Dahan11/19/18 08:12:39 PMadd changelog entry1
182805/10/17 06:02:46 PMRonan JouchetAdd Shift+PageUp and Shift+PageDown to default key bindings"Followup to PR #558 ""Add Ctrl+PageUp and Ctrl+PageDown to default key bindings"", but with ***Shift***. Have been working for me with tmux under Linux."12/08/18 08:17:34 PMDeduplicated font faces with yaml anchorsFor all the font faces, deduplicated the different font face families by using a YAML anchor (example on [wikipedia](https://en.wikipedia.org/wiki/YAML#Advanced_components)). I haven't rerun the tests but it Works On My Machine™, which implies that it's being correctly handled by the (presumably cross platform) yaml parser. This change makes it easier to change your font face, since you only have to change it in one place.5Thanks for the PR!LucretielNathan West11/21/18 12:42:58 AMRenamed anchor to font_family1
183112/23/17 01:39:12 AMAndré AlbuquerqueAnti-alias controlled by `use_anti_alias` boolean flagThe font I use on my current development machine ([Envy Code R](https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released)) looks way better without any anti-alias. I needed to deactivate anti-alias, and it's better to do it without having to recompile Alacritty again.12/08/18 08:51:36 PMChange missing config log level to infoFixes #1829.1@amalbuquerque  Any patch for newer alacritty 0.7.2 I use the same font , tnxTezkerekChristian Duerr12/08/18 08:12:51 PM"Reword change log message

The change log should not include any technical terms like Rust macro
names, since it's meant for the enduser, not an Alacritty developer.

Because of that, the `info!` and `error!` macros have been replaced by
`info message` and `error message`."1
183407/01/17 10:04:21 PMRyleeSpastic Font Spacing"![image](https://cloud.githubusercontent.com/assets/7827846/25946834/1ab2c112-3690-11e7-9862-c1de46e977eb.png)
This is with completely default settings, on arch linux from the AUR package..."12/23/18 10:36:07 PMfeature: report Windows panics through MessageBox."Please go easy on me.  I am very new to Rust and haven't touched Win32 in —
let me check — 15 years.  Happy for whatever feedback you have.

This commit introduces a new module called `platform`, which provides
operating system and platform-level integration capability.  For now, it
targets Windows only.  It provides a panic handler that exposes such
events through the classical Win32 MessageBox facility, whereupon a user
can easily copy-and-paste the error for later forensic analysis and bug
reporting..

Why is this proposed?  In Issue #1818, I remarked that Alacritty in
Windows crashed unexpectedly since winpty was unable to find
`winpty-agent.exe`.  This error message was opaque and invisible, for I
had not started Alacritty itself from another terminal.  I reason that
few users of Alacritty on Windows would ever start a terminal from
another terminal, so it would be best to take a platform-idiomatic
approach of exposing the dialog box."15"For anyone stumbling on this, this issue shows a fix that worked for me:
https://github.com/alacritty/alacritty/issues/1881

(issue was that I was setting the font name to, e.g., ""Fira Mono Regular"" when it should have been just ""Fira Code"")"matttproudMatt T. Proud11/22/18 10:43:02 PM"feature: report Windows panics through MessageBox.

This commit introduces a new module called `platform`, which provides
operating system and platform-level integration capability.  For now, it
targets Windows only.  It provides a panic handler that exposes such
events through the classical Win32 MessageBox facility, whereupon a user
can easily copy-and-paste the error for later forensic analysis and bug
reporting..

Why is this proposed?  In Issue #1818, I remarked that Alacritty in
Windows crashed unexpectedly since winpty was unable to find
`winpty-agent.exe`.  This error message was opaque and invisible, for I
had not started Alacritty itself from another terminal.  I reason that
few users of Alacritty on Windows would ever start a terminal from
another terminal, so it would be best to take a platform-idiomatic
approach of exposing the dialog box."1
183505/12/17 03:58:41 PMDominik MiedzińskiUse debug! instead of println!As title says.11/23/18 11:41:07 PMIgnore initial size if the window is maximized on startcloses #1826 =||= "Looks good; thanks. :smile: 
"dm1trydm1try11/23/18 12:41:37 AM"Ignore initial size if the window is maximized on start
closes #1826"1
183705/13/17 12:51:59 AMSuzumiyaCrash when displaying CJK char"alacritty crash when
```
cat trial
```
file `trial` with content
```
JKたりやき
```
```
$ alacritty -vv
Welcome to Alacritty.
device_pixel_ratio: 1
width: 952, height: 1046
Initializing glyph cache
got font path=""/usr/share/fonts/OTF/Meslo LG M DZ Regular for Powerline.otf""
got font path=""/usr/share/fonts/OTF/Meslo LG M DZ Regular for Powerline.otf""
got font path=""/usr/share/fonts/OTF/Meslo LG M DZ Regular for Powerline.otf""
Finished initializing glyph cache in 0.04593804
set_inner_size: 960px × 648px
width: 964, height: 652
Cell Size: (12 x 27)
PTY Dimensions: Line(24) x Column(80)
Term::resize
num_cols, num_lines = 79, 38
width: 952, height: 1046
[unhandled osc_dispatch]: [['7',],['f','i','l','e',':','/','/','S','u','z','u','/','h','o','m','e','/','s','u','z','u','m','i','y','a','/','t','m','p',],] at line 678
Term got unhandled attr: Dim
thread 'main' panicked at 'index 38 out of range for slice of length 36', /checkout/src/libcore/slice.rs:578
note: Run with `RUST_BACKTRACE=1` for a backtrace.
Term got unhandled attr: Dim
```
"11/24/18 06:44:15 AMAdd commandline flag --start-maximized, -m"This lets you pass in `--start-maximized` or `-m` as commandline flags.

1. Is this unnecessary clutter?
2. Should I wait until #1835 lands?
3. Is passing `start_maximized` into `get_platform_window` the cleanest way to do things?"1"There's an issue we haven't quite been able to figure out with FreeType (or the bindings) that is causing this problem. It occasionally returns data suggesting the buffer is larger than it is.

In any case, this is a dupe of #515."jedahanJonathan Dahan11/24/18 06:41:15 AMUse closure to avoid unnecessary function call1
183805/12/17 10:58:01 PMAda LovecraftMissing Prompt Character"<img width=""330"" alt=""screen shot 2017-05-12 at 17 27 46"" src=""https://cloud.githubusercontent.com/assets/3170885/26019073/6c117848-3738-11e7-81bb-4bd00450dd21.png"">

Such a knitpicky thing, but I wanted to be part of history, so I thought I'd complain about someone else's hard work on the internet.

Already just a fantastic piece of software... Thank you <3"11/23/18 11:02:12 PMMove winpty-sys dep to crates.ioFor https://github.com/jwilm/alacritty/issues/357 =||= "Thanks for the report! 

This is due to the lack of font fallback on macOS. Will get to implementing it at some point.. hopefully sooner than later :smile:

Please follow #45 for updates."zacpsZac Pullar-Strecker11/23/18 08:36:43 PMMove winpty-sys dep to crates.io1
183907/01/17 10:47:31 PMOliver Leitnersupport for background images"hi

id love to see background image support...

something like ""rxvt*pixmap: /path/to/image.jpg""

is this in the plannings?

anyways, thanks for this great approach to a new generation of terminals=)"01/07/19 12:06:58 AMNormalize Log Message Strings"The general proposed style for errors, warnings and info messages is to start with a capitalized letter and end without a period. The main exception is when dealing with nouns that are clearer with special case handling, e.g. ""macOS failed to work"" or ""ioctl is borked"".

Generally speaking log messages should be present tense (e.g. ""Setting value"", not ""Set value"") and should be full english."6Please add this feature, it's very valuable for some people.nixpulvisChristian Duerr01/06/19 11:31:41 PMFix remaining issues1
184005/25/17 04:19:00 PMDominik MiedzińskiAdd support for running commands on key press"Based on option `command` in key binding section in config, e.g.

```
  - { key: N,        mods: Control|Shift,    command: alacritty          }
  # or
  - {
      key: N,
      mods: Control|Shift,
      command: {
        program: ""alacritty"",
        args: [""-e"", ""vttest""],
  }}
```

specified command will be run in the background on key press. Alacritty doesn't wait for its result nor block IO.

Fixes #334."02/02/19 12:00:29 PMDocument that alacritty requires winpty-agent on windows"I'm not sure this is the best place to put this information because it's only supposed to be for *from-source* builds, but this affects binary releases as well. I don't know if there's a better place to put it though.

Fixes https://github.com/jwilm/alacritty/issues/1818"3Thanks for the fixes and sorry for the delay on getting back to it. Looks good to me!zacpsChristian Duerr01/24/19 08:38:11 PM"Zip windows files for releases

This bundles the windows agent and exe together in a zip file to make
distribution for windows easier on the user."1
185609/28/18 08:54:59 PMOliver Leitnerintel gpu support"is there any plans for supporting intel gpu's at this point?

it lets me compile it on my laptop with intellinux driver, but it doesnt run, missing ES, no support for GSLS 3.x...

`drm:intel_pipe_update_end [i915]] *ERROR* Atomic update failure on pipe A (start=9620131 end=9620132) time 618 us, min 763, max 767, scanline start 760, end 9`"12/03/18 10:27:00 PMLaunch a login shell by default on macOS" If the `shell:` key is not specified in alacritty.yml, default to a login shell on macOS, following the behavior of Terminal.app and iTerm2.

This fix is a big ugly hack, as we need to use bash to set argv[0]. Still, @chrisduerr and I compromised on it as the least awful thing we can do, until std allows overriding argv[0],

Closes #1071."9Based on the report by zachliu this issue seems to be resolved in the latest Alacritty. For issues with unsupported OpenGL versions, please see #128.neersightedBjorn Neergaard12/03/18 08:54:16 PMFix incorrect $SHELL on macOS1
185705/17/17 01:19:46 PMMartin Algestensomewhat DRYer code for font loadingI want to contribute so getting my head around the code. This is just a slight cleanup of some repeated code.12/27/18 02:16:32 PMMake windows config location more sensible"Contrary to my initial idea this does *not* remove platform specific code, mostly because after dealing with fallbacks and supporting the old windows location it's not worth it.

This changes the configuration file location from (in fallback order):

* `%HOME%\alacritty.yml`
* `%USERPROFILE%\alacritty.yml`
* `GetUserProfileDirectory()\alacritty.yml`

To:

* `%APPDATA%\Roaming\alacritty\alacritty.yml`

If a configuration file is found in the old location a warning is emitted pointing to the new location.

Fixes https://github.com/jwilm/alacritty/issues/1660"1This is rolled into #575 zacpsChristian Duerr12/27/18 12:15:46 PM"Fix creation of config directories

The current behavior incorrectly created the `alacritty/alacritty.yml`
directory, instead of making `alacritty.yml` a file. This has been fixed
by creating all directories for the parent of the target file, instead
of the file itself."1
185806/28/17 02:33:12 PMNeo_Chen"""6c"" Appear at prompt end (unexcepted input) on Arch Linux""The problem is like this: http://imgur.com/a/3aAsY

Arch Linux 
Kernel 4.10.13-1-ARCH
community/rust 1:1.17.0-1
local/alacritty-git 0.1.0.503.g3224847-1
extra/freetype2 2.7.1-2
extra/fontconfig 2.12.1-4
extra/xclip 0.13-1

CPU: Intel i5-4210Y
Intel Xorg Driver"12/06/18 09:38:34 PMFix-#1833:Detach Child process to avoid zombie processesAttempts to fix #1833. While I am new to learning rust(Very new). I intend to use alacritty for a long time my attempt to give something back. So if I have done something wrong or something you would like to see added please let me know.10Thanks!vsag96Christian Duerr12/06/18 05:24:00 PM"Wait for forked process

Instead of just spawning the process as a daemon, it now waits for the
spawned process to make sure the first fork is not made into a zombie
either."1
186603/29/18 08:17:15 PMHugo BarreraRunning from master fails"I'm getting

    Error creating glutin::Window; GL context creation failed

I'd guess that all required OpenGL-related deps are installed, since I frequently run lots of games on this host."12/06/18 09:55:03 PM[macos] [doc] add instructions to enable font smoothingDoc changes as discussed in #18601Whoops! It works fine now, thanks.talalMuhammad Talal Anwar12/06/18 04:33:19 AMmacos: add instructions to enable font smoothing1
186705/25/17 06:07:11 PMAdrian PistolBuild failure on FreeBSD 11-RELEASE."`rustc --version`: `rustc 1.18.0-nightly (94e884b63 2017-04-27)`
```
   Compiling alacritty v0.1.0 (file:///usr/home/vifino/src/alacritty)
error[E0432]: unresolved import `libc::TIOCSCTTY`
  --> src/tty.rs:24:59
   |
24 | use libc::{self, winsize, c_int, pid_t, WNOHANG, SIGCHLD, TIOCSCTTY};
   |                                                           ^^^^^^^^^ no `TIOCSCTTY` in the root

error: aborting due to previous error

error: Could not compile `alacritty`.
```

Always reproducable. "12/06/18 02:17:55 PM[travis] remove sudo keyword`sudo` keyword is obsolete, [reference](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration). =||= Fixed by f051e68, much cleaner. My PR was working around a bug in the libc crate.talalMuhammad Talal Anwar12/06/18 04:49:08 AM"travis: remove sudo keyword

See: https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration"1
186905/29/17 04:51:50 PMMaxim BazNeovim's FocusGained event is not fired in Alacritty"I have a very neat autocommand in my nvim's config:

```
autocmd BufEnter,FocusGained * checktime
```

Thanks to it, if I have two terminals side by side and I happen to have the same file opened in neovim in both terminals, after changing something in one terminal, saving the file and moving focus to the other terminal, the file gets automatically refreshed.

I'll try to explain with the gif below:

- I open neovim with no custom config in two terminals (not alacritty)
- On the right side I add this autocommand to monitor focus change and reload the file
- I modify the file on the left (delete a line), save it and move focus to the right
- And immediately the line is also deleted on the right side.

![alacritty](https://cloud.githubusercontent.com/assets/1177900/26037709/6a42a696-38f9-11e7-84bf-f110713db6d8.gif)

However, this does not work in Alacritty, the file on the right is not getting refreshed.

I can only guess that perhaps some kind of `focused` event is not being fired and/or propagated to neovim."12/10/18 05:53:57 PMRust 2018, NLL fixesThis updates Alacritty to Rust 2018 while fixing old workarounds for lack of NLLs. Almost all `// borrowck` commens have been resolved except for two instances of overlapping mutable borrows not quite covered by the initial NLL support.10this is embarrassing :confused:...It wasn't alacritty, I tested with urxvt. sorry guysjwilmChristian Duerr12/10/18 04:28:25 PM"Remove macro use extern crates

Since the Rust 2018 edition allows importing macros directly, all uses
of `#[macro_use] extern crate` have been removed from the linux build.

The `log` and `serde` crate have been excluded from that right now,
since they are so frequently used in the codebase."1
187105/24/17 04:10:17 PMEvgenii MorozovFreezes if pasting nothing"**Steps**:
- Execute `pbcopy </dev/null`
- Paste with cmd-v

**Actual result**:
The app freezes

**Expected result**:
Nothing is pasted; app isn't freezed

**Env**:
OSX: 10.11.6 (15G1510)
App version: alacritty 0.1.0"12/07/18 01:58:12 PMuse tool lints for clippy allow/deny lint attributes1"Also here with an empty clipboard
openSUSE Tumbleweed 20170505
KDE Plasma 5.9.5

Here's an strace
```
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
poll([{fd=3, events=POLLIN}], 1, -1)    = 1 ([{fd=3, revents=POLLIN}])
recvmsg(3, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base=""\2%]\0\21\253\365\t\273\0\0\0\2\0 \5\0\0\0\0\243\1\10\1k\1\323\0\20\0\1\0"", iov_len=4096}], msg_iovlen=1, msg_controllen=0, msg_flags=0},
 0) = 32
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
poll([{fd=3, events=POLLIN}], 1, -1)    = 1 ([{fd=3, revents=POLLIN}])
recvmsg(3, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base=""\0022]\0\26\253\365\t\273\0\0\0\2\0 \5\0\0\0\0\243\1\10\1k\1\323\0\24\0\1\0"", iov_len=4096}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 32
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
poll([{fd=3, events=POLLIN}], 1, -1)    = 1 ([{fd=3, revents=POLLIN}])
recvmsg(3, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base=""\0027]\0(\254\365\t\273\0\0\0\2\0 \5\0\0\0\0\243\1\10\1k\1\323\0\25\0\1\0"", iov_len=4096}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 32
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
open(""/dev/null"", O_RDONLY|O_CLOEXEC)   = 13
ioctl(13, FIOCLEX)                      = 0
pipe2([14, 15], O_CLOEXEC)              = 0
pipe2([16, 17], O_CLOEXEC)              = 0
pipe2([18, 19], O_CLOEXEC)              = 0
clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fc4093aac50) = 30555
close(19)                               = 0
read(18, """", 8)                         = 0
close(18)                               = 0
close(13)                               = 0
close(15)                               = 0
close(17)                               = 0
fcntl(14, F_GETFL)                      = 0 (flags O_RDONLY)
fcntl(14, F_SETFL, O_RDONLY|O_NONBLOCK) = 0
fcntl(16, F_GETFL)                      = 0 (flags O_RDONLY)
fcntl(16, F_SETFL, O_RDONLY|O_NONBLOCK) = 0
select(17, [14 16], NULL, NULL, NULL)   = 2 (in [14 16])
read(14, """", 16)                        = 0
fcntl(16, F_GETFL)                      = 0x800 (flags O_RDONLY|O_NONBLOCK)
fcntl(16, F_SETFL, O_RDONLY)            = 0
read(16, """", 16)                        = 0
close(16)                               = 0
close(14)                               = 0
wait4(30555, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 30555
write(8, ""\1"", 1)                       = 1
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
poll([{fd=3, events=POLLIN}], 1, -1)    = 1 ([{fd=3, revents=POLLIN}])
recvmsg(3, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base=""\0037]\0\215\254\365\t\273\0\0\0\2\0 \5\0\0\0\0\243\1\10\1k\1\323\0\25\0\1\0"", iov_len=4096}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 32
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
recvmsg(3, {msg_namelen=0}, 0)          = -1 EAGAIN (Resource temporarily unavailable)
```"matthiaskrgrZac Pullar-Strecker12/06/18 09:48:07 PMRemove cfg_attr from winpty lint config1
187705/17/17 04:47:15 PMAlberto SilvaFontsize hotkeyPerhaps this is better handled with Vim/Neovim or Tmux, but I figured I would try here first. Is there a way to map the font size to hotkeys? Namely `+` and `-`. Thanks!12/07/18 02:17:13 PMAdd -x flag to tic command"Fixes #1876 

Adding `-x` flag fixes the issue. With this flag, unknown terminfo capabilities are treated as user-defined."3Oh yeah, #121 is the right place. Thanks for the correction.talalMuhammad Talal Anwar12/07/18 05:18:39 AMAdd -x flag to tic command1
187805/31/17 08:32:08 AMMartin AlgestenUser fonts, macOS font fallback and refactoring"1. Config change so `alacritty.yml` have lists of fonts that works as fallbacks.
2. Moved some shared logic to `font/src/lib.rs` so that user fallbacks can work in a similar way regardless of platform.
3. Supports two different fallback strategies depending on platform:
  - macOS adds on system defined font fallbacks at the end of the user font lists.
  - freetype/fontconfig attempts to get a fontconfig fallback per rendered glyph when needed.
4. Tidy up in `darwin` to split out some core-graphics stuff.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/575)
<!-- Reviewable:end -->"12/09/18 01:46:10 AMAdd a contributing.md file"It contains a few rules for making a PR. @chrisduerr you can add the formatting or style changes that you want to see the folks do before opening a PR. I think the point 6 can be done with a fewer commands. Any thing you would like to be removed or added?

Attempts to fix #1870 "2Made a ticket for this: #606 vsag96Christian Duerr12/09/18 12:05:14 AMAdd link to `help wanted` and `easy` issue label1
187905/29/17 12:42:37 AMNiklas DusenlundAdd config file as cli option"I wanted to be able to test different versions of alacritty that had different configuration file syntaxes and then this was useful.

Intended use is `--config-file alacritty.yml`.

This also allows you to use the built-in defaults with `--config-file /dev/null`.

Please review =)"12/08/18 01:50:02 AMFix recording of ref tests"Due to the lazy initialization of lines in the Alacritty history, the
recording of ref tests was broken. Because a WM would often resize the
ref test window after it was spawned, some additional lines were
initialized in the stored ref test.

To make sure lazy initialization does not play any role in the recording
and replaying of reftests, before recording and replaying the tests, the
complete grid is initialized and then truncated. This should make sure
that only the relevant lines are kept." =||= Thanks @NickeZ!chrisduerrChristian Duerr12/08/18 01:20:22 AM"Fix recording of ref tests

Due to the lazy initialization of lines in the Alacritty history, the
recording of ref tests was broken. Because a WM would often resize the
ref test window after it was spawned, some additional lines were
initialized in the stored ref test.

To make sure lazy initialization does not play any role in the recording
and replaying of reftests, before recording and replaying the tests, the
complete grid is initialized and then truncated. This should make sure
that only the relevant lines are kept."1
188005/19/17 05:26:47 PMPeter Lacey-BordeauxWarn on closeJust accidentally closed out an alacritty terminal with some unsaved work in it. It'd be nice to have the warn on close option available. 12/09/18 03:28:23 PMFix rendering of zero-width characters"Instead of rendering zero-width characters as full characters, they are
now properly rendered without advancing the cursor.

Because of performance limitations, this implementation only supports up
to 5 zero-width characters per cell. However, as a result of this
limitation there should not be any performance impact.

![tmp](https://user-images.githubusercontent.com/8886672/49680690-551c8580-fa8f-11e8-9263-9839cb890b2d.png)

This fixes #1317, fixes #696 and closes #1318." =||= Thanks for the request! However, this isn't something I intend to address, at least not as requested. In the future, we may support transparently using tmux for session persistence.chrisduerrChristian Duerr12/08/18 06:58:00 PM"Extract max zerowidth characters into variable

The maximum amount of zerowidth characters per cell have been extracted
into the `MAX_ZEROWIDTH_CHARS` constant in the `src/term/cell.rs` file.

This should not only make it easier to change the maximum amount of
zerowidth characters in the future, but also provide an easy way to test
Alacritty's behavior with different amounts of zerowidth characters."1
188705/28/17 02:55:44 AMCharles CollicuttAdd a terminfo file declaring TrueColor support"Alacritty supports true color (24bit) escape codes. There isn't an official terminfo entry for this (yet?) but tmux has an unofficial one: _Tc_

This is used by others, e.g. [st](http://git.suckless.org/st/commit/?id=06f8cf8ca87a81db15816658c40b2afcd1ad5332)"12/09/18 11:28:30 PMBump version to 0.2.4"This bumps the version number to 0.2.4 and prepares everything for a next versioned release.

It seems like this is a fitting time, making it possible to merge https://github.com/jwilm/alacritty/pull/1869 after the new release has been published and giving it plenty of time for testing.

This fixes #1822." =||= "@jdebp Thank you very much for that (and sorry for taking so long to comment, non-hobby-life interjected).

Just to clarify, I derived from `xterm-256color` in this case because `alacritty` was already declaring itself to be `xterm-256color`. So, even if this is not quite correct, it is no worse than the pre-existing situation (and, I think, better because it allows TrueColor to work). I completely agree that this needs more work."chrisduerrChristian Duerr12/09/18 05:22:16 PMBump version to 0.2.41
189005/24/17 05:56:51 PMAaron HillEnsure that the event loop thread cleanly exits on shutdown"Background:

If a shell process exits with children still alive (typically due to the
`disown` shell builtin), POLLHUP will not be sent to the master PTY file
descriptor. This is due to the fact that the disowned process still has
the slave PTY open as its STDIN, STDOUT, and STDERR.

If a disowned process never reads or writes from its file descriptors
(which is often the case for graphical applications), the event loop
will end up blocking on poll()/select() when not handling user input
received over the mio channel. When Alacritty shuts down and joins on the
event loop thread, there can never be any more input on the mio channel -
the main thread is no longer handling user keystrokes from the window. Unless
a disowned process happens to access its slave PTY file descriptors, the
event loop will never get the chance to deetect that it should exit.

This commit extends the `Msg` enum to include an explicit `Shutdown`
message, which ensures a clean shutdown (e.g. closing the 'recording'
file). This allows the select()/poll() call to remain blocking, instead
of needing to periodically check the shutdown state in between
timed-out calls.

Fixes #339"12/12/18 02:13:00 PMFix alacritty.info color pairs to improve color support in certain ncurses programsCloses issue #1862, by updating the colors pairs in alacritty.info to use 0x7FFF instead of 0x10000. 0x7FFF is aligned with xterm-256color and solves coloring issues for htop and certain other known ncurses programs. 1"Big thanks to @Aaron1011 for this PR.

Thanks to @algesten for review.

Merged :smile: "zaayerKyle Rooker12/12/18 12:13:09 AMChange CHANGELOG.md to version unreleased instead of 0.2.51
189805/24/17 04:10:12 PMMartin AlgestenFix #573. Ensure we don't write 0 bytes to pty"On macOS, pasting 0 bytes from the clipboard hangs the terminal.
I.e. `pbcopy </dev/null` followed by ctrl-v. This ensures
we never send 0 bytes."12/14/18 03:54:06 AMIgnore result on deregistering pty"to prevent the panic on `unwrap` if fd is not found
closes #1897" =||= Thanks @algesten!dm1tryChristian Duerr12/14/18 03:52:30 AM"Fix change log message

Slight rewording of the message to make it clearer what was changed."1
189905/21/17 07:02:55 PMPatrikShift + mouse select not working in tmux"When I try to select some text in tmux, while holding the shift key it doesn't work.

Running on VoidLinux with the default config"12/14/18 10:00:51 AMAdd install instructions via scoop =||= I'm putting the duplicate issue here for future reference: #146. I guess you closed it because you found the original one.rasaRoss Smith II12/14/18 06:46:22 AMUpdate README.md1
190410/09/17 05:21:00 AMOswaldo CaprilesProblem loading fonts"Hello, I am trying to use this font: [ypn envypn](https://ywstd.fr/p/pj/#envypn)

My configuration looks like this:

```yml
font:
  normal:
    family: ypn envypn 
  bold:
    family: ypn envypn 
  italic:
    family: ypn envypn 
  size: 9.0
  offset:
    x: 0.0
    y: 0.0
  use_thin_strokes: false
```

But i get the following error:

```bash
thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', src/libcollections/vec.rs:1431
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```

Did i miss something? I tried to adjust the size and the offset to see if there would be any difference but it's the same, is this a bug?"12/15/18 12:10:27 PMUpdate dependenciesThis fixes #1674. =||= I've managed to fix this problem in pull request #776, more testers are welcomed.chrisduerrChristian Duerr12/15/18 01:38:44 AM"Update dependencies

This fixes #1674."1
191107/01/17 10:44:27 PMKarl D. AsmussenXCompose input not detected as utf-8."OS distro: Xubuntu 16.04  
Compiled with: rustc 1.17.0  
Applications affected: zsh, neovim

In using XCompose, when I try to use a compose sequence to input unicode characters like “SUBSCRIPT ONE U+2081 `₁`” instead the terminal receives the three component bytes; interprets them as ASCII-charset characters; and translates them to unicode once more yielding the sequence U+00E2 U+0082 U+0081 which results in mojibake."12/20/18 12:33:43 AMSend alt key with actual key in one flush"The delay between the alt key and the actual received key might cause
certain key sequences to be missed, ex. when tmux has its escape-time
set to 0." =||= Isn't this the same as   #148?skliewskliew12/19/18 11:52:34 PM"Send alt key with actual key in one flush

The delay between the alt key and the actual received key might cause
certain key sequences to be missed, ex. when tmux has its escape-time
set to 0."1
191206/07/17 01:07:38 PMNoneQuestion: how to start alacritty from spotlight in osx?"I can see alacritty app, but I can't start it. I see some flickering but terminal does not start.
<img width=""687"" alt=""screen shot 2017-05-23 at 6 55 05 pm"" src=""https://cloud.githubusercontent.com/assets/10185058/26363362/78a0dacc-3fe9-11e7-9d5c-190aedced8e2.png"">
"12/18/18 09:41:18 PMUpdate README.md with information about MageiaREADME.me is now updated to include information about installing on Mageia 7 =||= "I'm on macOS Mojave 10.14.2 and also faced this issue when I _symlinked_ the installation into `/Applications/Alacritty.app` instead of actually _copying_. When I removed the symlink `/Applications/Alacritty.app` and just copy the files directly, Spotlight works fine.

The homebrew formula actually instructs to use a symlink instead since a newly compiled build would replace the old one in the same location and thus the symlink would just use the new build, but it seems that symlinking into `/Applications` causes some breakage for the likes of Spotlight at least.

```plain
• ~ ❯ brew info alacritty
mscharley/homebrew/alacritty: stable 0.2.3, HEAD
A cross-platform, GPU-accelerated terminal emulator
https://github.com/jwilm/alacritty
/usr/local/Cellar/alacritty/HEAD-6b61e96 (12 files, 12.4MB) *
  Built from source on 2018-12-08 at 17:59:33
From: https://github.com/mscharley/homebrew-homebrew/blob/master/alacritty.rb
==> Dependencies
Build: cmake ✔
Required: fontconfig ✔
==> Options
--with-cache
        Use a cargo cache in /usr/local/var/cache during the build.
--HEAD
        Install HEAD version
==> Caveats
Although it is possible that the default configuration will work on your
system, you will probably end up wanting to customize it anyhow. You can
find a copy of the default configuration at:

  /usr/local/share/alacritty/alacritty_macos.yml

You can copy this file to ~/.alacritty.yml and edit as you please.

For the best experience, you should install/update alacritty's terminfo
file after each update. You can do so by running the following command:

  sudo tic -e alacritty,alacritty-direct /usr/local/share/alacritty/alacritty.info

WARNING: This formula can't install into /Applications, the application
has been installed to:

  /usr/local/Cellar/alacritty/0.2.3/Applications/Alacritty.app

This path is stable across upgrades, you can create your own symlink in
the global /Applications folder as follows:

  ln -s /usr/local/Cellar/alacritty/0.2.3/Applications/Alacritty.app /Applications/
```

So at the bottom here is the broken `ln -s` instruction. It would probably be better to clean up and just copy a new version by using `rm -rf /Applications/Alacritty.app` and then `cp -R /usr/local/Cellar/alacritty/[VERSION]/Applications/Alacritty.app /Applications/`.

In addition, what I always do before I open it using Spotlight is to actually go to the `/Applications` folder in _finder_ and launch the application from there once first.

Just my 2c for anyone who might run into this today :)"kekePowerChristian Duerr12/18/18 09:39:44 PM"Change Mageia version number

To make it clear that all versions after Mageia 7 are also supported,
the distribution label has been changed to `Mageia 7+`."1
191601/19/20 04:27:59 PMLokathorMake the rendering/window system not depend on an actual Term"As it stands, as I understand it, the rendering code itself just needs an Iterator of glyphs and their info. However, the window management portion of the code relies on having a Term value connected, and the rendering isn't nearly as much use without the window management with it.

It would be extremely helpful if the rendering and window management could stand entirely on their own and that they could be hooked in to any sort of application that can provide an Iterator of glyphs. Having a ""terminal like"" ability without actually going through a shell would be very slick."12/20/18 12:49:27 AMExpand description; remove unnecessary commentsThis commit removes the boilerplate comments that come with the template `snapcraft.yaml`. It also expands the description to match the project's README. =||= I'm not sure how this issue maps to the current alacritty, since our rendering and terminal is separated right now. also all opengl/windowing stuff lives in its own crate. So if you still have some suggestions on improving actual Term API/more separation, then open a new issue.timClicksTim McNamara12/20/18 12:45:11 AM"Expand description; remove unnecessary comments

This commit removes the boilerplate comments that come with the template snapcraft.yaml. It also expand the description to match the project's README."1
192105/28/17 03:08:29 AMNoneFind and set $WINDOWID to X11 window ID"Closes issue #471.

The window ID is retrieved from Display (from Window) in `run` and passed to `tty::new`, which uses `builder.env` to set it.

```
ns ~> echo $WINDOWID
62914562
ns ~> xdotool getactivewindow
62914562
```"12/31/18 05:01:07 PMFix line metrics"The height of the line drawing for underline and strikethrough has been
incorrectly substracted from the Y position instead of adding it.
Leading to an incorrect Y position for underline and strikeout by
exactly the width of the line.

By simply adding half of the height instead of substracting it, the
position should be corrected and the distanace between the underline and
the baseline should be increased."26Thanks @portify!chrisduerrChristian Duerr12/30/18 07:01:57 PM"Refine underline and strikeout metrics

The rusttype and bitmap fallback metrics have incorrectly offset the
underline by the underline height. Since the position is already defined
as the center point, that is not necessary.

All rounding and clamping has also been removed from the font library,
so that the raw values are reported now. The clamping and rounding is
now done in the line renderer."1
192205/18/18 10:53:52 PMDaniel BrooksUnspecific error messages"I just upgraded alacritty, and merged the new config file into my existing one. I'm getting this error message:

    problem with config: Custom(""Invalid value: invalid value for Action"")

I'm presuming that this has something to do with a keybinding (not that I've modified any of them), but it's not very clear, and it doesn't specify even so much as a line number. There are so many ways to improve this that I don't feel that I need to list them all."01/05/19 06:38:43 AMSet min osx deployment target to 10.11"to get maximum coverage for pre-built binaries

closes #1853

in addition, `MACOSX_DEPLOYMENT_TARGET` can be overridden

BTW
I was able to reproduce the referenced issue by providing not existing version(`MACOSX_DEPLOYMENT_TARGET=10.14.3 make app`):
<img width=""532"" alt=""screen shot 2018-12-25 at 00 40 49"" src=""https://user-images.githubusercontent.com/486807/50407071-1c93e000-07e1-11e9-85bd-4003244d246c.png"">
"19I believe this should be fixed. Errors in the keyboard shortcuts should be more descriptive on the latest master.dm1trydm1try01/05/19 04:13:31 AM"Set min osx deployment target to 10.11 on CI
to get maximum coverage for pre-built binaries

closes #1853"1
192905/25/17 06:04:51 PMAdrian PistolMake alacritty compile on FreeBSD 11-CURRENT"Fixes #571.

While it does compile (and run) now, there are still a handful of bugs, like ^C handling, resizing and job control(?)."12/27/18 07:49:30 PMUse mio-extras instead of mio-more"The latter isn't maintained anymore and this removes a bunch of outdated
dependencies" =||= "Lovely that the libc crate implements that now.

It works! Everything does! :)

Guess this can be closed now. Thank you!"EijebongBastien Orivel12/27/18 07:33:24 PM"Use mio-extras instead of mio-more

The latter isn't maintained anymore and this removes a bunch of outdated
dependencies"1
193005/29/17 04:51:50 PMAaron HillImplement FocusIn/FocusOut reports"Implements sending FocusIn/FocusOut events, as defined at
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-FocusIn_FocusOut

I've duplicated a small amount of code between `match` arms in `handle_event`, but this seemed like the cleanest way to handle `glutin::Event::Focused`.

This should resolve https://github.com/jwilm/alacritty/issues/572

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/589)
<!-- Reviewable:end -->"12/27/18 08:43:56 PMUpdate reqwest to 0.9 =||= This looks great; thanks again @Aaron1011! Love your PRs :)EijebongChristian Duerr12/27/18 07:53:49 PMUpdate lockfile1
193105/29/17 12:36:56 AMJoe WilmFixes font raster for mono, gray bitmaps"As it turns out, FreeType does not always provide glyph data in LCD mode
as we requested. We now correctly handle several common modes returned
from FreeType including Lcd, Mono, and Gray.

Note that we don't check number of grays at this time since it's

1. Almost always 256, according to FreeType docs
2. Not available in the Rust FreeType bindings being used

Resolves #515
Resolves #185
Resolves #482"12/27/18 09:02:41 PMClearify create_rect CommentBoth me and @chrisduerr seem to agree this comment was a little confusing. Hopefully this is better. =||= This looks great; thanks again @Aaron1011! Love your PRs :)nixpulvisNathan Lilienthal12/27/18 08:36:31 PMLess confusing comment.1
193503/13/19 06:55:19 PMAaron HillReflow on resize"If the Alacritty window is resized horizontally to a smaller size, and then resized to its original size, the restored cells will be black instead of displaying their proper contents.

It's best shown in an image:

![](https://i.imgur.com/kf4xXUz.png)

The fact that the last line displays properly after resizing appears to have something to do with zsh - it seems to re-print the prompt during a resize."12/28/18 03:26:59 PMFix Windows config location documontationThe path `%APPDATA%` already includes the `Roaming` folder. =||= Yeah, these two issues are completely separate. #390 was actually implemented already, but this one still needs a resolution.chrisduerrChristian Duerr12/28/18 03:21:49 PM"Fix Windows config location documontation

The path `%APPDATA%` already includes the `Roaming` folder."1
195906/27/17 04:10:42 PMNoneCorrect info in README.md about scrollback according to #12401/02/19 09:40:33 PMChange default Windows shell to PowerShellFix #19288Yeah, these two issues are completely separate. #390 was actually implemented already, but this one still needs a resolution.lzybkrJason Shirk01/02/19 06:17:24 PMAttempt to update PR on github1
196105/31/17 04:30:55 PMMartin AlgestenPreparatory changes for macOS font fallback12/31/18 04:52:30 PMFix underline interruption with empty cells"Since completely empty cells are not reported by the renderable cells
iterator, the line renderer has incorrectly assumed that these cells did
not cause any change in cell state, leading to underlines spanning empty
cells.

Instead of assuming that the line state is unchanged, the line
calculation now correctly interprets a jump in the renderable cells
column as an interruption of the line.

This fixes #1960."2Thanks!chrisduerrChristian Duerr12/31/18 11:47:24 AM"Fix underline interruption with empty cells

Since completely empty cells are not reported by the renderable cells
iterator, the line renderer has incorrectly assumed that these cells did
not cause any change in cell state, leading to underlines spanning empty
cells.

Instead of assuming that the line state is unchanged, the line
calculation now correctly interprets a jump in the renderable cells
column as an interruption of the line.

This fixes #1960."1
196206/06/17 04:47:33 PMMartin AlgestenmacOS use system font fallbackGiven feedback in #575, this is a rewrite intended to be minimally invasive in terms of architectural changes. The PR needs #593 to land in master first to get the required dependencies.01/02/19 01:04:54 PMChange mouse mode cursor to the default cursor"On my linux machine, the `Arrow` cursor is this very rarely used Xorg cursor:
![arrow](https://user-images.githubusercontent.com/312503/50563480-80586480-0d1d-11e9-82da-b89b862b56ce.png)

However, changing the cursor to `Default` gives me the default mouse cursor I'm used to:
![default](https://user-images.githubusercontent.com/312503/50563502-a0882380-0d1d-11e9-8099-9f65dd987226.png)

@zacps, @dm1try and @sodiumjoe could you guys check to that this doesn't mess it up on Windows/Mac?"2🎉 wohoo!DarkDefenderSebastian Parborg12/31/18 03:56:01 PMChange mouse mode cursor to the default cursor1
196506/01/17 06:09:47 PMNoneUnable to build alacritty after #593"After #593 had been merged, I am unable to build alacritty without errors. I get the following error message:

```
error: struct field shorthands are unstable (see issue #37340)
   --> src/renderer/mod.rs:188:43
    |
188 |                 font::Style::Description {slant, weight}
    |                                           ^^^^^

error: struct field shorthands are unstable (see issue #37340)
   --> src/renderer/mod.rs:188:50
    |
188 |                 font::Style::Description {slant, weight}
    |                                                  ^^^^^^

error: aborting due to 2 previous errors

error: Could not compile `alacritty`.
```

OS: Gentoo linux
Rust version: 1.16.0"01/02/19 09:56:37 PMProcess Mouse Binding Actions EarlierAs reported in #1963, mouse binding actions are being processed too late to allow copying the selection. This is the fix for this issue, assuming there's no other actions the depend on the opposite order. =||= I'll close this because the fix is now in master.nixpulvisNathan Lilienthal01/02/19 12:50:30 AMUpdate CHANGELOG1
196806/01/17 04:47:59 PMMartin Algestentwo things01/03/19 01:56:29 AMFix double-triggering of mouse bindings"The 2d9afb9b395ea0cc71432613e0df104aefcf24c1 commit lead to mouse
actions being triggered on both press and release of mouse buttons.

This reverts the mouse binding behavior back to the previous state where
they are only triggered when the button is pressed, not when it's
released."2Looks good!chrisduerrChristian Duerr01/03/19 01:24:26 AM"Refactor mouse_input method

The `mouse_input` method's structure was overly complicated and did not
accurately represent the logic which should be implemented by it. This
is likely what caused the regression in 2d9afb9b395ea0cc71432613e0df104aefcf24c1.

To prevent similar issues from popping up in the future, the method has
been cleaned up and the structure should now represent the logic
required more logically."1
197006/04/17 04:46:43 PMNiklas DusenlundTest old stableDue to #595 I propose that we build for old stable versions as well.01/05/19 08:49:40 PMImprove URL detection v2 =||= Thanks!chrisduerrChristian Duerr01/04/19 03:47:20 PM"Improve URL detection with special characters

Various special characters and character combinations were not handled
correctly with URL detection. All these instances have been resolved and
covered by various tests to prevent future regressions.

Notable fixes include single quotes working more properly now (like
`'https://example.org'`) and IPv6 URL support.

Since URL detection is now more than just a few lines of code and it's
mostly unrelated to the `Term`, it has also been extracted into the
`src/url.rs` file together with all URL-related tests."1
197102/24/21 04:16:38 PMŁukasz NeumannSynchronize updates with terminal clients"Whenever I use `<C-d>` or `<C-f>` in vim while scrolling through a large file the screen flickers - it looks like for a moment the screen goes black and then the new content is redrawn, but it takes enough time to be noticeable and annoying. What's perhaps more interesting is that when I scroll half of the page via `<C-d>` only the bottom part of the window flickers, while top one does not. This issue is observed both inside and outside of tmux. Other terminal emulators don't have this issue.

* My `alacritty` is built with `cargo` from sources, repo at commit d5ab4183c69e37e8d309acf7b38c2071106bceb7.
* OS: Arch linux with kernel `4.10.13-1-ARCH`
* Graphics:
  * drivers: `intel (unloaded: modesetting)`
  * GLX Renderer: `Mesa DRI Intel Ivybridge Mobile`
  * GLX Version: `3.0 Mesa 17.1.0`

I have also reproduced it on a different machine, with nvidia's GPU, alas low in terms of performance:

* The same repository commit (d5ab4183c69e37e8d309acf7b38c2071106bceb7)
* OS: Arch linux kernel `4.11.2-1-ARCH`
* Graphics:  
  * driver: `nvidia`
  * GLX Renderer: `Quadro 600/PCIe/SSE2`
  * GLX Version: `4.5.0 NVIDIA 381.22`
  * Direct Rendering: `Yes`

Do you have any idea what could be a problem here? This issue prevents me from using `alacritty` on a daily basis, because said flashing constantly distracts me.

This problem is also mentioned in #555"01/05/19 08:47:12 PMAdd action to create new instance of alacritty within the current working directory"Other terminals allow you to spawn a new instance of the terminal with the same working directory. This pull request adds this feature.

Tested on: 
- Linux Xorg
- Linux Wayland ( Sway )

Notes:
- It will probably crash on windows and mac.
- I changed the shell PID variable on tty::unix::PID to public. Don't know if that is allowed. 
- I didn't write any tests 😅. 

This fixes https://github.com/jwilm/alacritty/issues/808."13"Chiming in here, please do tell if you wan't me to provide any sorts of information! It's still happening for me (running alacritty 0.5 on Windows)

Same behavior with scrolling in fzf as in https://github.com/alacritty/alacritty/issues/3819 (with and without tmux, doesn't matter) but it also happens when typing (filtering) in fzf. Highlighting things in vim with * causes the cursor to disappear completely and generally just moving with hjkl causes ghost cursors to appear (for me) both in bottom bar and in buffer/tab bar.

Another interesting problem occurs when running tmux with 2 windows, one containing vim and one just a terminal running `yes`. This causes cursor flickering in vim (cause yes is spamming the other window with `y` ?) and whenever you type in vim cursor flickering also occurs in the window running `yes`. This is a minor annoyance (similar to the fzf issue), but even more annoying is that vim is _extremely_ slow during this time, compared to a traditional terminal emulator which runs fine without flickering. Now, of course i don't sit in vim all day with `yes` running in another tmux window, but the same behavior for applications producing any kind of output (e.g. logs or compilations etc.)

This, unfortunately, makes the terminal emulator borderline to unusable, as a daily driver, to me :-(

I'm not sure if the disappearing cursor on highlight is related, or if it's a separate issue (let me know and i'll create one with more info)"CamotubiChristian Duerr01/05/19 08:43:14 PMRemove default binding1
197506/01/17 05:10:39 PMMichel BoaventuraProblem with mouse selection with alacritty + tmux"Using xterm and tmux if I want to copy a text I can't just select it with the mouse, since this will trigger a tmux selection, which doesn't copy to clipboard. So, instead, I just hold shift, which seems to bypass tmux and use xterm copy.

On alacritty holding shift does nothing and I can't easily copy a text within tmux, so I end up having to open vim, paste with tmux and copying it from there with :""+y.

Is there a way to do this on alacritty? If not, I would like to implement it, if you can give me a starting point :)"01/06/19 07:12:30 PMSet minimum macOS version to 10.11"To make sure that CI builds produced by Travis work on all supported
versions of macOS and building Alacritty works on all supported
versions, the minimum macOS version has been set in the Makefile.

This sets the minimum macOS version to `10.11` as a reasonable
estimation based on other applications. If the exact version chosen
turns out to cause some issues, it can be changed in the future.

Fixes #1853." =||= You are right @maximbaz, I'm close this one since is the same issue. Thanks!chrisduerrChristian Duerr01/06/19 05:10:41 PMAdd change log entry1
198006/06/17 03:26:37 PMTuomas SiipolaFix selection when padding is presentWhen making a selection, the selection jumps between adjacent cells under the cursor. This happens only when padding is used.01/08/19 07:37:59 AMFix selection with right and middle mouse"Since there was no check for the button state for semantic and line
selection, it was possible to trigger selection using the middle and
right mouse button. This has been resolved by explicitly checking for
the pressed button before starting these selections.

To further ensure that double and triple clicks are only triggered when
the same button is pressed multiple times, the last pressed button is
stored.

This fixes #1915." =||= Thanks for the patch! This one has been bugging me as well.chrisduerrChristian Duerr01/07/19 09:50:00 AM"Fix selection with right and middle mouse

Since there was no check for the button state for semantic and line
selection, it was possible to trigger selection using the middle and
right mouse button. This has been resolved by explicitly checking for
the pressed button before starting these selections.

To further ensure that double and triple clicks are only triggered when
the same button is pressed multiple times, the last pressed button is
stored.

This fixes #1915."1
198309/28/18 08:24:12 PMash leaBlank screen when switching between virtual consoles"I use multiple virtual consoles for my workflow, and when I switch between them alacritty is blank until I move the mouse over it or type or do something to cause it to redraw.

Steps to reproduce:
- log in on tty1
- start an X session
- start alacritty
- switch to tty2 (ctrl+alt+f2)
- switch back to tty1 (ctrl+alt+f1)
- alacritty is blank"01/07/19 12:15:55 PMAdd tabs on Windows to FAQ per #19818"It seems like this issue is resolved, since I can't reproduce it anymore.

If it should still be present, please comment and I will re-open."mikemaccanaMike MacCana01/07/19 12:09:47 PMAdd tabs on Windows to FAQ per #19811
198406/07/17 03:59:22 AMNonechanges osx fallback symbol font style"Previously, the fallback symbol font copied the style of the font from
the config. However, the only available style for the fallback symbol
font is Normal slant, Normal weight."01/07/19 03:17:37 PMAdd tabs on Windows to FAQ per #1981Don't mention specific apps.2Well done! I suspected this was the case but forgot to investigate. mikemaccanaMike MacCana01/07/19 02:24:52 PMUpdate 'tabs' FAQ - remove mentions of specific app1
198506/09/17 02:55:32 PMKenny WooZSH autosuggestions hidden when using Dracula theme from wiki"ZSH auto-suggestions do not show properly when using the Dracula theme provided in the wiki.

### Dracula theme from wiki

![dracula_suggest_not_work](https://user-images.githubusercontent.com/5219476/26965436-96b900de-4caa-11e7-9bb3-a90c7d581a02.png)

### Dracula theme alternative -- [source](https://www.ur-ban.com/2017/01/07/alacritty-dracula-theme/)

![dracula_suggest_works](https://user-images.githubusercontent.com/5219476/26965467-b2740c92-4caa-11e7-8522-54b402ced77e.png)

### Diff of wiki version vs alternative version

```diff
@@ -11,18 +11,18 @@ colors:
     red:     '0xff5555'
     green:   '0x50fa7b'
     yellow:  '0xf1fa8c'
-    blue:    '0xcaa9fa'
+    blue:    '0xbd93f9'
     magenta: '0xff79c6'
     cyan:    '0x8be9fd'
-    white:   '0xbfbfbf'
+    white:   '0xbbbbbb'
   # Bright colors
   bright:
-    black:   '0x282a35'
-    red:     '0xff6e67'
-    green:   '0x5af78e'
-    yellow:  '0xf4f99d'
+    black:   '0x555555'
+    red:     '0xff5555'
+    green:   '0x50fa7b'
+    yellow:  '0xf1fa8c'
     blue:    '0xcaa9fa'
-    magenta: '0xff92d0'
-    cyan:    '0x9aedfe'
-    white:   '0xe6e6e6'
+    magenta: '0xff79c6'
+    cyan:    '0x8be9fd'
+    white:   '0xffffff'
```"01/07/19 05:36:17 PMBump version to 0.2.5"This bumps the version number to 0.2.5 and prepares everything for the
next versioned release." =||= Have you compared either values with the theme spec? You're welcome to update the wiki for correctness.chrisduerrChristian Duerr01/07/19 04:49:15 PM"Bump version to 0.2.5

This bumps the version number to 0.2.5 and prepares everything for the
next versioned release."1
198607/01/17 10:36:13 PMNoah RosamiliaHide cursor when typingTitle pretty much sums it up, would it be possible to hide the cursor when typing?01/07/19 09:56:55 PMFix minor issues in the config documentation =||= Add or change `hide_cursor_when_typing: true` in your configuration.chrisduerrChristian Duerr01/07/19 09:40:57 PMFix minor issues in the config documentation1
198703/29/18 07:10:58 AMJoe MoonAdd support for user-provided font fallbacks"tracking issue for work that was backed out of #575 
"01/08/19 12:16:17 AMFix macOS CI deployment script =||= closing in favor of #957chrisduerrChristian Duerr01/07/19 10:12:27 PMFix macOS CI deployment script1
199006/11/17 08:21:14 PMJoe WilmAdd support for Beam, Underline cursors"Notable about this implementation is it takes a different approach for
managing cursor cells that previously. The terminal Grid is now
borrowed *immutably*. Instead of mutating Cells in the Grid, a list is
managed within the RenderableCellsIter. The cell at the cursor location
is skipped over, and instead cells are popped off a list of cursor
cells.

It would be good in the future to share some more code between the
different cursor style implementations for populating the cursor cells
list.

Supercedes #349.
Resolves #171."01/19/19 01:45:46 PM[WIP] Fix crash on macOS and BSD for spawn_new_instance action"Currently spawn new instance action is crashing on macOS and BSD systems. This pull request tries to fix the crash and implement a way to get the current working directory of the child shell for this 2 systems. See #1988

This was implemented blindly. I'm not sure if it works since I have no macOs or BSD machine to test it.  ```libproc-rs ``` was used to get the current working directory for macOS.
For BSD, it parses the output from ```procstat -f $PID ```command. 

I would like macOS and BSD to test this changes.

This fixes https://github.com/jwilm/alacritty/issues/1988.
"12"I had trouble with this using vim8, Alacritty and Tmux.

Fixed by removing all related settings in tmux/vim/alacritty and just installing this plugin: https://github.com/jszakmeister/vim-togglecursor"CamotubiChristian Duerr01/18/19 11:49:12 PMFix windows build1
199107/01/17 10:34:32 PMSiva MahadevanNot able to compile HEAD with clean install of FreeBSD 12 current"my rustc version is `rustc 1.18.0 (03fc9d622 2017-06-06)`
```
Compiling expat-sys v2.1.4
error: failed to run custom build command for `expat-sys v2.1.4`
process didn't exit successfully: `/usr/home/siva/alacritty/target/release/build/expat-sys-c888713e640dc4c7/build-script-build` (signal: 11, SIGSEGV: invalid memory reference)
Build failed, waiting for other jobs to finish...
error: build failed
```

I have followed the FreeBSD specific install guide (installed the extra packages), so there shouldn't be a problem there. Am I missing something?"01/09/19 08:27:14 PMFix crash when starting Alacritty on full drives"Since the Alacritty configuration file is written to the filesystem at
startup, this could create issues when the system does not have any free
space left.

To circumvent this problem, the default configuration is now returned
even when the configuration file could not be created. Instead of
crashing Alacritty, an error is now emitted.

Fixes #1936."1Sounds like this has been resolved.chrisduerrChristian Duerr01/09/19 08:41:04 AMFix log message1
199312/23/17 01:34:08 AMMartin Algestenrefactored osx fallbacks to include menlo"When basing the fallbacks on fonts like ""Source Code Pro"", we
miss out glyphs like ""❯"". We refactor the fallback font loading
to cleanly provide a modified fallback list that always is
based on (and includes) ""Menlo""."01/17/19 09:17:27 AMMake all configuration fields optional"This adds a default implementation for the
`selection.semantic_escape_chars` option to make sure that the specified
default configuration value matches the fallback value when it is not
specified.

TODO:
 - [x] Key bindings
 - [x] Mouse bindings
 - [x] Ensure there are no fields that have default, but they aren't matching between source and config

This fixes https://github.com/jwilm/alacritty/issues/1923."1Closing in favor of #841chrisduerrChristian Duerr01/16/19 10:04:37 PMFix typo1
199406/19/17 12:04:17 AMNone[Ranger] Bright colors do not get transferred correctly to bg color"![ranger](https://user-images.githubusercontent.com/312503/27095152-fdadcb06-506c-11e7-9460-d11924b360f2.png)

Urxvt top, alacritty bottom.

When using ranger with alacritty I noticed that the colors do not match with the ones I get with urxvt. It seems like ranger uses the current color of the file type to draw the background. However in alacritty it doesn't seem to take into account that the bold text changed the color and instead uses the non bright color to draw the bg strip."01/13/19 09:54:37 PMFix tabs overwriting cells during movement"When compiling ncurses with the `--enable-hard-tabs` option, it will
make use of tabs to speed up cursor movement. These tabs can be set at
positions which will overwrite existing characters.

Since these are only for movement and not supposed to write anything to
the terminal, it is now checked that a cell does not contain any
character before writing a tab to it.

This fixes #1933." =||= "@jwilm It seems like the problem is the ""invert"" color terminal code:
```
echo -e ""\e[32mNormal \e[7mInverted\e[27m \e[1mBold \e[7mInverted Bold\e[27m""
```

Paste that into your terminal and you will see that the inverted bold is not correctly handled. I did take a look at where the bright color computation happens and I think that it happens too late in the pipeline to be able to handle this.

Because as it is now, the fg and bg colors are split of long before the bright check happens. So it is impossible to know if the bg color should be bright or not."chrisduerrChristian Duerr01/09/19 11:43:09 AM"Fix tabs overwriting cells during movement

When compiling ncurses with the `--enable-hard-tabs` option, it will
make use of tabs to speed up cursor movement. These tabs can be set at
positions which will overwrite existing characters.

Since these are only for movement and not supposed to write anything to
the terminal, it is now checked that a cell does not contain any
character before writing a tab to it.

This fixes #1933."1
199506/14/17 05:43:43 PMNoneIn some terminal programs, bg color changes do not get applied to the whole line"In mocp and mutt, I've notived that alacritty does not render bg color changes correctly.
Take this example from mocp (urxvt top, alacritty bottom):
![mocp](https://user-images.githubusercontent.com/312503/27095567-786bcfc2-506e-11e7-948f-742fa1a6653f.png)"01/09/19 10:51:05 PMFix CPU load when moving windows between monitorsThis fixes https://github.com/jwilm/alacritty/issues/1790. =||= Seems to be fixed now. Thank you so much @jwilm and @Aaron1011 !chrisduerrChristian Duerr01/09/19 08:25:13 PMAdd change log entry1
199807/10/20 01:57:45 PMTed YinSupport for different size of fallback fonts."Although the current master still hasn't supported fallback fonts in config file on Linux, as a CJK font user, it would great if I could specify different size for fallback fonts, like as follows in urxvt:
```
URxvt.font: \
    xft:Inconsolata-12, \
    xft:PowerlineSymbols-12, \
    xft:Source Han Sans TC Normal-11
```
The current alacritty typography:
![2017-06-14-012051_558x174_scrot](https://user-images.githubusercontent.com/1221635/27116532-d500c0fe-509f-11e7-97df-0b71bebac8f1.png)

My urxvt typography:
![2017-06-14-012106_560x173_scrot](https://user-images.githubusercontent.com/1221635/27116533-d6e003f8-509f-11e7-8d1b-461617367025.png)

This is due to fact that sometimes the monospace terminal font does not suit well with CJK font for the same size, so there could be some minor adjustment.

This project is very promising and I'm looking forward to proper display of wide char fonts (including emojis) which urxvt cannot handle very well (urxvt is notoriously bad at such wide char typography, so there are patches that only partially fix the problem). I'm also willing to help with either testing or coding."01/11/19 05:35:45 AMFix spelling in config files =||= Closing, since it's covered by #957 mortonfoxMorton Fox01/10/19 04:22:24 PMFix spelling1
200106/14/17 05:40:11 PMAlberto SilvaOption to hide title bar?Would really love an option in the config to hide the title bar if possible, totally an aesthetic thing, but would be nice. I haven't seen an issue for this, thus decided to make one.01/12/19 07:55:04 PMAdd Solus install instructions to README.md"Alacritty is now available in the Solus package repository:
https://dev.getsol.us/source/alacritty" =||= @hhsnopek sweet, closing thanks!robertgzrRobert Günzler01/12/19 06:13:38 PMAdd Solus install instructions to README.md1
201506/14/17 05:43:43 PMAaron HillUse cursor cell template when handling 'CSI X' escape sequence"This ensures that the cleared cells are set to the proper background
color, which is the main usage of this escape sequence.

Fixes #612"01/21/19 09:59:11 PMFix off-by-one error in erase_chars"I had an issue with last characters on the line remaining on the screen even after line they belonged to moved up or down. Easy repro: open any text file with long lines (alacritty.yml for example around line 100) in an editor of your choice, and then move around so the editor scrolls up or down. Last char of the line will not be erased.

Here is the example:
<img width=""487"" alt=""alacritty_bug"" src=""https://user-images.githubusercontent.com/3798402/51405719-00206480-1b4f-11e9-9580-7068747d2b5f.png"">

It looked like off-by-one kind of error from the start, so it was just a matter of seeing what kind of events are happening when bug is present.

According to rust docs, slicing with [..N] doesn't include N-th element, so we don't have to subtract 1 from num_cols().

On a side note, for some reason the issue doesn't manifest itself with winpty on Windows, only with conpty."5"Thanks for the PR @Aaron1011! I continue to appreciate all of the patches you send. 😄 

LGTM; just waiting on travis."abulimovChristian Duerr01/20/19 01:56:13 PMTweak change log message1
201806/14/17 06:33:45 PMAaron HillMake Travis test alacritty on nightly Rust, but allow failures"This allows us to notice and report any regressions that have occured on
nightly, without requiring tests to pass on nightly for the entire build
to succeed.

The `fast_finish` flag will cause Travis to mark the build as successful
if the only builds still running are allowed to fail (e.g. `nightly`).
This allows us to manually inspect builds (or implement some form of
notifications) to see if any nightly regressions have occured, without
slowing down the overall build time."01/19/19 04:00:09 PMBump version to 0.2.6Relatively quick version bump to fix the issue with high resource usage on some systems when the DPI changes =||= Sounds great; thanks again!chrisduerrChristian Duerr01/19/19 03:13:52 PMFix windows build failure1
201906/19/17 12:05:12 AMSiva MahadevanAdd dependency to FreeBSD-specific setupFixes problem I had with issue #609 and should be better documented.01/19/19 10:41:24 PMRemove Appveyor CI builds"This completely removes all Appveyor CI build jobs to move Alacritty to
a singular CI provider for all platforms.

To ensure that Windows is still properly tested, the allowed failure for
the stable Windows build job on travis has been removed.

This fixes #1679." =||= Thanks for the doc fix! Sorry for the trouble; hopefully this will allow others to avoid in the future.chrisduerrChristian Duerr01/14/19 11:43:59 AM"Remove Appveyor CI builds

This completely removes all Appveyor CI build jobs to move Alacritty to
a singular CI provider for all platforms.

To ensure that Windows is still properly tested, the allowed failure for
the stable Windows build job on travis has been removed.

This fixes #1679."1
202103/09/18 07:02:28 PMSiva MahadevanNewly built release binary segfaults on FreeBSD 12 current"output on running `target/release/alacritty`: `terminated by signal SIGSEGV (Address boundary error)`

my rustc version: `rustc 1.18.0 (03fc9d622 2017-06-06)`"01/20/19 05:39:16 PMFix crash on Windows"The rusttype backend did not properly support manually specifying font
styles, but instead chose to panic when they are specified.

The rusttype implementation now provides a proper implementation for
handling `bold`, `italic` and `regular` font styles.

This fixes #2020."2Upstream has updated, this can be closed.chrisduerrChristian Duerr01/20/19 03:51:43 PMDisable font styles by default1
202206/14/17 10:40:17 PMÖmer Sinan Ağacan"""Invalid pixel size"" when using xos4 Terminus font""I'm using the default config with only this change:

```yaml
font:
  # The normal (roman) font face to use.
  normal:
    family: xos4 Terminus
```

When I run alacritty with this change I get:

```
Alacritty encountered an unrecoverable error:

        Invalid pixel size

```

I tried different pixel sizes but got the same error every time."05/11/19 04:15:33 PMAdd support for double-click bracket-pair selection"closes #2014

This functionality is a direct copy of the same implementation in Apple's Terminal.app. See the original issue for an example of how it works in that terminal.

Selection logic now behaves as follows (all using the left mouse button):

| click state  | button state | character under cursor | selection type |
|--------------|--------------|------------------------|----------------|
| single click | pressed      | `*`                    | simple         |
| double click | pressed      | `*`                    | semantic       |
| double click | released     | `()[]{}<>`             | bracket-pair   |
| triple click | pressed      | `*`                    | line           |

Example:

![alacritty](https://user-images.githubusercontent.com/383250/51438302-e1cf7b80-1caa-11e9-8e92-6879a70ae04d.gif)


Since this is my first contribution to Alacritty, and I'm still fairly new at Rust, I'd welcome any and all feedback on how this implementation could be further optimised.

I'm still looking into adding more tests (the current selection tests all assume selection based on mouse drag behaviour), and perhaps a benchmark to prevent performance regressions when working with large buffers.

I did test this locally, including with a _somewhat_ large JSON blob, and saw no performance regression in the selection actions, and no unexpected cross-over situations between the different selection types."8"Hey, thanks for filing the issue, and sorry about that. There's another discussion about this already in #582. Basically, we want to update that error message to include the valid pixel sizes.

Please subscribe to the other issue for updates."JeanMertzJean Mertz05/11/19 03:00:56 PM"Merge pull request #1 from chrisduerr/pair-selection

Switch bracket expansion to semantic selection"1
202406/19/17 12:03:14 AMAaron HillImplement 'backwards tab'"This escape sequence isn't officially documented anywhere, but is
supported by xterm and gnome-vte."01/21/19 04:39:25 PMBump version to 0.2.7This fixes a major regression on Windows which would cause a crash on startup.1Looks good; thanks for the PR!chrisduerrChristian Duerr01/20/19 05:49:17 PMBump version to 0.2.71
202506/19/17 12:04:17 AMNoneFix bright inverse colors"Fixes https://github.com/jwilm/alacritty/issues/611

First time coding in Rust so I'm sure that this could potentially be solved in a better way..."01/23/19 10:04:45 PM Move clippy tests to stable"The clippy tests had to be run on nightly previously since it wasn't
available with the stable compiler yet, however this had the potential
to fail a lot since not all nightly builds offer clippy.

Since clippy is now available for stable rust, moving clippy to a stable
build should make sure that the failure rate of the CI job is cut down
to a minimum.

This fixes #2007." =||= Thanks for the changes! Looks great; landed.chrisduerrChristian Duerr01/23/19 10:03:42 PMUpdate comment1
202807/01/17 10:16:00 PMTheodore DuboisAllow customizing the scroll sensitivity01/21/19 10:12:10 PMChanged explicit script shebangs to use environmentChanged shebangs from /bin/bash to /usr/bin/env bash. Some distributions do not have have bash in the standard path. =||= "Forgot to reply, thank you, that helped. That’s what I was looking for.
"praetorgpraetorg01/21/19 09:28:51 PM"Change spawn-alacritty-cwd shebang

replace explicit shebang to /bin/bash with /usr/bin/env bash"1
203507/01/17 10:31:45 PMAlberto SilvaAlacritty website@jwilm not sure if there are any plans for this, dev and design, but I would certainly love to join forces with anyone interested.01/23/19 10:05:47 PMUpdate dependencies"This resolves an issue with notify that caused excessive wake-ups when
waiting for config updates.

Fixes #2029." =||= https://github.com/jwilm/alacritty.iochrisduerrChristian Duerr01/23/19 08:38:36 PM"Update dependencies

This resolves an issue with notify that caused excessive wake-ups when
waiting for config updates.

Fixes #2029."1
203610/14/17 05:35:56 PMDan AloniImplement user actions for font resize01/27/19 09:06:28 PMImprove touchpad scrolling"Premultiply pixel change with `scrolling_multiplier`.
This makes scrolling smoother and more responsive (scroll line by line instead of N lines at once)."10There's `mouse_bindings` which takes an `action` value as well. It probably does just as well with the `FontSize` actions.ray851107ray85110701/26/19 03:29:33 PMAdd changlog entry1
203706/20/17 04:31:51 AMJoe WilmImplement semantic and line selection dragging01/28/19 06:28:52 PMFix URL detection i.c.w. unicode characters"Properly detect a URL that is right next to a tmux pane border (see screenshot)

![image](https://user-images.githubusercontent.com/4171547/51748596-33ae4200-20ad-11e9-9048-0734f8d379ea.png)"2"Thanks for the feedback! Agree that those problems are separate. I'm not in a huge rush to solve them either... Would like to get some other issues resolved first.

Going to go ahead and merge this."svanharmelenChristian Duerr01/28/19 04:52:16 PMFix clippy issues1
204509/17/17 08:36:34 PMRodrigo StevauxLine missing in NVIM"![image](https://user-images.githubusercontent.com/21047691/27310019-b0600e84-552d-11e7-98b8-b1ef22d52f85.png)

I use alacritty + tmux + nvim.

When this happens I have to quit nvim and get back.

Don't know how to reproduce, but it happens fairly often!"02/07/19 10:36:46 PMDynamically resize terminal for errors/warnings"The warning and error messages now don't overwrite other terminal
content anymore but instead resize the terminal to make sure that text
can always be read.

Fixes #1996.

The following tasks should be made possible:
 - [x] Display message to the user at the ~~top~~ bottom of the screen
 - [x] Shrink the terminal height by one line (possibly even more than one, calculating the required height automatically)
 - [x] Allow interacting with the message, using either click interactions or allow for selection (useful for copying the path to the logfile)
 - [x] (Optional) Make it possible to remove outdated errors (if the config has been fixed, it would be nice if the popup wouldn't need to be removed from all Alacritty instances, though this might be a job for something like AlacrittyD)

![preview](https://giant.gfycat.com/IckyMindlessClam.gif)

Things still left to implement/investigate:
 - [x] Clicking the space to the left of the `[X]` will also close the message
 - [x] ~~Changing the mouse cursor shape to a pointer when over the `[X]` button~~ out of scope for now 
 - [x] Remove duplicate messages"4Thanks for the additional feedback @Libbum.chrisduerrChristian Duerr02/06/19 10:04:34 PMUpdate lockfile1
204603/29/18 01:33:10 PMMatthew ScharleyIssues with pinned Dock icon in OSXI've been having issues with Alacritty pinned to the Dock in OSX. Some of the time it will open a second icon instead of using the pinned icon. It seems to be pretty non-deterministic so I think there's a timing issue here. Based on the animations it seems it may be going through the loading sequence twice for each launch (the icon does half a bounce then starts again).01/28/19 04:46:08 PMDebian needs pkg-configI just went through these instructions on my Debian 9.7 machine, and pkg-config wasn't already installed. =||= Closing it for now because @sodiumjoe says it should be fixed. If it's still an issue, feel free to reopen this.feuGeneAF. Eugene Aumson01/28/19 04:14:44 PM"Debian needs pkg-config

I just went through these instructions on my Debian 9.7 machine, and pkg-config wasn't already installed."1
204701/04/19 05:04:28 PMMatthew ScharleyNo support for alternative HID-style inputs."Some keyboard inputs on OSX use a HID-aided input and don't rely entirely on the keyboard.

For example, this is the expected view as per Terminal:
<img width=""971"" alt=""screen shot 2017-06-20 at 8 18 55 pm"" src=""https://user-images.githubusercontent.com/336509/27328540-d365b6c2-55f5-11e7-90de-4b61a73d5d11.png"">

What happens in Alacritty:
<img width=""1014"" alt=""screen shot 2017-06-20 at 8 19 39 pm"" src=""https://user-images.githubusercontent.com/336509/27328571-eaaa031a-55f5-11e7-91c7-4631ce3751b3.png"">

I'm not sure exactly what is needed to support this. A+ job on getting the display of foreign characters working though!"03/14/20 02:55:07 AMAdd wayland dark themed client decorations option"Adds the option to set the wayland client side decorations theme to a dark one. The colors in the theme are changeable but I chose colors that in my opinion look good on the ConceptFrame. Once a new winit and SCTK version has been released then this PR can be considered merge-able. 

I don't really know that much about alacritty's configuration process so please tell me if I missed something. 

![image](https://user-images.githubusercontent.com/40879396/51912350-11028d00-240f-11e9-9bfa-aa56c06e26ca.png)

Fixes https://github.com/jwilm/alacritty/issues/2092."19From what I've seen, this issue has been resolved by winit/glutin a while ago. Though there are some issues like Alacritty not duplicating the current input, though this is already covered in separate issues.trimentalLucas Timmins02/03/19 04:00:00 AMAdd custom Wayland window decorations1
205406/20/17 03:43:37 PMTed YinSupport for input methods"For CJK users, an input method is everyday's need for editing. :)
It looks like alacritty currently does not have this important support (such as basic X input method support, and on-the-spot preediting).
If nobody is currently working on this, could I do some investigation and start implementing it?"02/02/19 12:03:03 PMFix reloading with empty config"When loading an empty configuration file, Alacritty only prints an info
message and then proceeds to load the default config. However when
reloading the configuration file it would throw a hard error.

This has been fixed and a hard error is now only thrown when an error is
returned during reload which isn't the empty file error."3Thanks for filing this! We've got an issue from way back in the day that's tracking this already; let's move the conversation there. #44.chrisduerrChristian Duerr02/01/19 03:15:16 PMAdd change log entry1
205909/24/19 05:43:56 PMTaupiqueurXEmbed support02/03/19 04:44:39 PM Fix regression in the URL launcher config "Due to the merging of configuration files on all platforms, it has been
made impossible to completely disable URL launching without still
executing some kind of program like `true`.

Setting the launcher to `None` in the config, will now disable it
completely.

This fixes #2058." =||= I believe I figured this out, and it doesn't seem too invasive.  I submitted a pull request for it: https://github.com/jwilm/alacritty/pull/2786chrisduerrChristian Duerr02/02/19 12:23:01 PMFix error fallback message1
206312/23/18 11:14:11 PMXiangrong Haohow to send command/super modifier"with the follow screenshot, I know set `chats: ""\x69""` to send `i`, and `chats: ""\x09""` to send `^i`, could you please help me how to send `⌘i`?
![image](https://user-images.githubusercontent.com/184053/27421987-796d9df0-56e1-11e7-95b6-a8b4b6eef7ea.png)

Thanks!"02/03/19 04:45:09 PMRemove unused coordinate from rect shaderTo test, verify that strikeout, underline, and visual bell behave as before. =||= @falood So this has been opened a long time ago, but does this actually work in a different terminal emulator? I'm asking because usually terminal emulators know only about ctrl + shift and alt. Running `showkey -a` does not report super on linux for example.mstoecklM Stoeckl02/02/19 05:03:38 AMRemove unused coordinate from rect shader1
206506/23/17 06:27:16 PMJoe WilmAdd dim color support"Add support for the VTE 'dim' flag, with additional support for
custom-themed dim colors. If no color is specified in the config, it
will default to 2/3 the previous (not a spec, but the value other
terminals seem to use).

The actual dimming behavior brings bright colors to normal and regular
colors to the new dim ones. Custom RGB values are not changed, nor are
non-named indexed colors.

Closes #492 "02/05/19 10:33:08 PMScale IME position by hidpi_factor.Fixes #20561@falood So this has been opened a long time ago, but does this actually work in a different terminal emulator? I'm asking because usually terminal emulators know only about ctrl + shift and alt. Running `showkey -a` does not report super on linux for example.awusedChristian Duerr02/05/19 10:29:02 PMFix minor style issues1
206608/11/17 03:30:00 PMjD91mZM2Terminal alternate mode is toggled, not set."Try running `tput smcup` or `tput rmcup`. Both do the same thing. **Toggle** alternate mode.

`smcup` is supposed to activate, and `rmcup` disable."02/04/19 07:03:26 PMSimplify text shader"This should be orthogonal to #2063. I do not observe any performance improvement or regression, but assume that reducing the total amount of work done cannot hurt.

This PR:
* Replaces the `projection` 4x4 matrix uniform with a single vec4 ; the former contained mostly zeros.
* Specializes the text vertex shader to act on instances of rectangles. [I am unsure about the utility of this change. Keep or drop?]
* Moves most of the y-flipping logic out of the vertex shader, getting rid of a uniform in the process.
* Disables updates to the depth buffer. I haven't figured out how to make OpenGL not allocate it (or the stencil buffer) in the first place. [I guessed at the correct place to put the `gl::DepthMask` call; is there a better spot?]"5@falood So this has been opened a long time ago, but does this actually work in a different terminal emulator? I'm asking because usually terminal emulators know only about ctrl + shift and alt. Running `showkey -a` does not report super on linux for example.mstoecklChristian Duerr02/04/19 07:02:12 PMAdd newline1
207006/27/17 11:11:18 PMMichael AlexanderSharing code to implement terminal multiplexer"Apologies for creating an issue for this, but was interested to see what thoughts are and there's potential for some abstraction if it's feasible.

I've been thinking for a few months now about creating a terminal multiplexer in Rust. My initial motivation was that tmux doesn't support the ""clear to end of line"" ANSI control code and the author doesn't appear interested to include it, but that got me thinking that it'd be cool to have a Rust multiplexer, particularly a very high performance one which might pair well with alacritty.

There'd be an argument that some multiplexing functionality could be built directly into alacritty, but it'd be really cool to have something which could work across terminal emulators.

I'm quite interested to hear thoughts on whether there might be some parts of alacritty which would be useful for implementing a multiplexer, which parts they might be, and whether they'd be high value enough to abstract out into a separate crate or crates.

Cheers, and fantastic terminal emulator, I'm now using it as my daily driver!"02/04/19 12:17:58 AMFix macOS config decorations doc =||= @aeosynth I think you're right 👍 chrisduerrChristian Duerr02/03/19 11:30:13 PMFix macOS config decorations doc1
207306/27/17 04:10:42 PMOdin DuttonUpdate README regarding alpha-readiness"> This initial release should be considered to be pre-alpha software--it will have issues. Once Alacritty reaches an alpha level of readiness, precompiled binaries will be provided for supported operating systems.

Love where this project is going but as stated in the readme it's not quite ready yet. Can we have an issue to track when Alacritty is going to be considered Alpha? That way people (me) can subscribe to a single issue that will be updated when Alacritty is ready for alpha. Could be this issue. I suggest locking it to prevent noise.

Cheers!"02/04/19 11:12:57 PMReplace deprecated ATOMIC_USIZE_INIT =||= "Oh cool, I guess this issue has served it's place! I'll give it another go. Thanks @jwilm :)

I'll leave this open as it's tracking the README change now."chrisduerrChristian Duerr02/04/19 07:16:36 PM"Remove subcrate lockfiles from repo

This fixes #2040."1
207706/27/17 05:38:08 PMTheodore DuboisUpdate readme to indicate that scrollback is waiting for contributors02/06/19 09:10:46 PMSet window title on Wayland"Fixes #1582.
Fixes #1875."2An idea I had for that: Replace the grid, a vector of lines with the bottom line first, with a circular buffer that stores all the scrollback, with the bottom screen line last. Then change the renderer to draw lines starting at the end of the circular buffer minus the number of lines we're currently scrolled up, and moving backwards. When a new line appears, it can be added at the end of the buffer. Not sure how the alternate screen would work though. Thoughts?chrisduerrChristian Duerr02/06/19 08:06:39 PM"Improve constant naming

Since `DEFAULT_TITLE` applies to both window class and title, it has
been changed to `DEFAULT_NAME` to better represent what it's used for."1
208106/28/17 04:56:34 PMBryce Fisher-FleigKeystrokes dropped after nohup"## Steps to repro:

 1. Open alacritty
 2. `nohup $(ssh -L <remote IP:remote port>:<local IP:local Port>) &`
 3. Roughly half of all keystrokes are lost 

## Expected behavior:

all keystrokes would be handled by the terminal.

## Additonal Info:

 * OSX 10.12.4
 * Commit: b4a839aee9784a2d281be1bec87ac6f2ae4a79f0
 * rustc --version: rustc 1.18.0 (03fc9d622 2017-06-06)
"02/05/19 11:00:14 PMDisable incremental for release buildsThis fixes #1115. =||= Ah, yes! you're right, I want to `ssh -f ...` not `nohup $(ssh ...)`. Thanks!!chrisduerrChristian Duerr02/05/19 10:03:23 PM"Disable incremental for release builds

This fixes #1115."1
208307/01/17 01:12:36 AMThomas de Zeeuwcharacters missing on macOS"The following characters don't work on macOS:

- ~
- `
- ""
- '

I have found some of the required configuration, but not all:

```
  - { key: Apostrophe,              chars: ""\x27""                        }
#  - { key: "",              chars: ""\x22""                        }
#  - { key: ~,              chars: ""\x7e""                        }
  - { key: Grave,                   chars: ""\x60""                        }
```

I can't seem to find `""` and `~` in https://docs.rs/glutin/0.8.1/glutin/enum.VirtualKeyCode.html. Anyone has any luck finding them?"02/07/19 12:55:19 AMScrolled url clicking1"Ah I misunderstood. I got it to work, thanks guys!

For future reference adding the following to the `key_bindings` settings worked for me:
```
  - { key: Apostrophe,              chars: ""\x27""                        }
  - { key: Apostrophe, mods: Shift, chars: ""\x22""                        }
  - { key: Grave,                   chars: ""\x60""                        }
  - { key: Grave,      mods: Shift, chars: ""\x7e""                        }
```"chrisduerrChristian Duerr02/06/19 11:23:57 PMFix clippy issues1
208906/29/17 07:12:53 PMOliver FordFails to launch with 'no such file or directory'"Trying to run in arch:

```sh
$ alacritty
Command::spawn() failed: No such file or directory (os error 2)
```

I thought it might be my config file, but that certainly exists. Looking at [the code](https://github.com/jwilm/alacritty/blob/b9ec141c927b333bfea5d8a285deedd164181dd8/src/tty.rs#L245-L249), it seems that the only file/directory involved would be the working directory argument, if supplied; I get the same error if I do supply one though."02/08/19 01:46:58 AM Change shift+pgup/pgdown to scroll history"The default shift+pgup/pgdown buttons were sending the escape sequences
specified by the official standard, however most terminal emulators like
XTerm, URxvt and VTE make an exception for this special case and instead
scroll the native history buffer.

Both XTerm and URxvt do never send the escapes for Shift+PgUp/PgDown,
however VTE does send them in the alternate screen.

Since Alacritty already supports keybindings based on terminal mode and
the binding to scroll the history is useless when in the alternate
screen buffer, Alacritty is now following VTEs behavior here, allowing
applications in the alt screen (like vim) to handle this escape.

Fixes #1989."3"Bah, sorry for wasting your time - I thought I was going to be able to say It's the default except DPI and font, but while checking I noticed a suspicious path to my shell program.

I removed the (correct on another machine, but not this) absolute path, since it's always going to be `$PATH` anyway, and it works great.

Sorry about that."chrisduerrChristian Duerr02/08/19 12:28:34 AM"Send escapes when in alt screen

Both XTerm and URxvt do never send the escapes for Shift+PgUp/PgDown,
however VTE does send them in the alternate screen.

Since Alacritty already supports keybindings based on terminal mode and
the binding to scroll the history is useless when in the alternate
screen buffer, Alacritty is now following VTEs behavior here, allowing
applications in the alt screen (like vim) to handle this escape."1
209011/14/18 09:04:31 PMTrevor JoynsonSpecific glyphs render incorrectly since recent update"Not sure why, but my ZSH prompt renders incorrectly now, while others are fine:

![2017-06-30-030225_1915x1063_scrot](https://user-images.githubusercontent.com/1312290/27731099-94863e84-5d40-11e7-982d-10064b922c1c.png)"02/08/19 04:49:45 AMRemove selections when clearing screen partially"Automatically remove all selections when part of the screen is cleared.
This fixes issues in applications like `less -S` where a selection would
stay around after scrolling horizontally.

XTerm and URxvt both choose to always remove the selection, even if it's
outside of the cleared area, however VTE only clears the selection if
any part of it is inside the cleared area.

To keep things simple, Alacritty has adopted the behavior of XTerm and
URxvt to always clear selections.

This fixes #1644." =||= This hasn't been updated in a while, but it's likely either an issue with fontconfig or with rendering emojis. Both issues are explicitly tracked in https://github.com/jwilm/alacritty/issues/1560 and https://github.com/jwilm/alacritty/issues/153. Closing this issue as a duplicate of one of these/both. If someone things this is unrelated to those problems, please let me know and I'll re-open, it seems unlikely though.chrisduerrChristian Duerr02/08/19 02:32:44 AM"Remove selections when clearing screen partially

Automatically remove all selections when part of the screen is cleared.
This fixes issues in applications like `less -S` where a selection would
stay around after scrolling horizontally.

XTerm and URxvt both choose to always remove the selection, even if it's
outside of the cleared area, however VTE only clears the selection if
any part of it is inside the cleared area.

To keep things simple, Alacritty has adopted the behavior of XTerm and
URxvt to always clear selections.

This fixes #1644."1
209107/01/17 06:13:14 AMDimas CyriacoAdd Solus instructionsAdded some instructions for Solus.02/18/19 07:54:47 PMSmall Updates to the README"Here I've taken the liberty of changing things about as dramatically as I could imagine being reasonable. Please feel free to push back on anything I've changed, or suggest a different set of changes.

- Call Alacritty ""beta"" tier software (I think it's time).
- Add ""most"" to the sentence about GPU terminals (others might be catching on)
- Generalize section about performance measurements, mostly removing the claim we're always faster in every way. Latency is an issue we care about, and will be improved
- Small formatting updates

Partially inspired by #2087, among others."11Thanks!nixpulvisNathan Lilienthal02/17/19 08:40:22 PMUpdate the snapcraft file, why not.1
209407/01/17 05:24:51 PMJoe WilmReduce InstanceData footprint"The InstanceData type in the rendering subsystem was previously 16
floats which occupied a total of 64 bytes per instance. This meant that
for every character or background cell drawn, 64 bytes were sent to the
GPU. In the case of a 400x100 cell grid, a total of 2.5MB would be sent.

This patch reduces InstanceData's size to 26 bytes, a 60% improvement!
Using the above example for comparison, a worst case of 1MB would be
transferred.

The motivation for this patch comes from macOS. Once the terminal grid
would reach a certain size, performance experienced a sharp and dramatic
drop (render times would go from ~3ms to ~16ms). I don't want to
speculate too much on the underlying issue, but suffice it to say that
this patch alleviates the problem in my testing."02/10/19 08:14:53 PMBump version to 0.2.8 =||= Tested on X11 now as well. Seems to improve render times a bit in general.chrisduerrChristian Duerr02/10/19 05:24:46 PMBump version to 0.2.81
209507/01/17 08:20:19 PMOliver FordColour profile inversion toggle?"An issue I'm having at the moment is that for minutes at a time I can barely read the text in alacritty, due to sudden bursts of unexpected (British) sun, and my usual favour for a dark colourscheme.

I think it would be great to have a 'user action' (to be assigned a keyboard shortcut) for toggling colour schemes, and I'd like to have a go at implementing it, if it sounds acceptable in principle.

In keeping with the general minimalism of alacritty, I imagine this would be just a straight toggle that wouldn't even need further parameters in config: just switch `background` and `foreground`, `white` and `black`, et al."02/10/19 06:42:57 PMFix dimensions CLI/manpage docs =||= "Ahah! Thank you, I didn't realise `command` existed.

In case there's any other interest in this, I've achieved it by:
```yml
key_bindings:
  - { key: C, mods: Control, command: {program: ""alacritty-invert-colours"", args: [] }
```

```sh
#!/bin/sh
set -e

config=""$XDG_CONFIG_HOME/alacritty/alacritty.yml""

switch_colours() {
    sed -i ""s/$1/__TMP__/g ; s/$2/$1/g ; s/__TMP__/$2/g"" ""$config""
}

switch_colours foreground background
switch_colours white black
switch_colours cyan red
switch_colours magenta green
switch_colours blue yellow
```

Note that there presently isn't an example of using `command` in the sample config files (or in the readme) - since it's pretty simple to implement like this I'm less in favour of my own proposal - it might be worth featuring `command` a bit more prominently though, so that users like me see it before we nag for feature bloat. :slightly_smiling_face: "chrisduerrChristian Duerr02/10/19 06:30:51 PMFix dimensions CLI/manpage docs1
209610/28/18 01:20:13 PMAhmed El Gabri[macOS bundle] locale & $PATH issues"When I launch alacritty using the [MacOS application bundle](https://github.com/jwilm/alacritty/wiki/MacOS-application-bundle) I have two problems:

### locale issue:

<img width=""437"" alt=""screen shot 2017-07-01 at 20 17 13"" src=""https://user-images.githubusercontent.com/63876/27764481-bd535ea4-5e9a-11e7-883c-4969366cd449.png"">

I have [`$LANG` & `$LC_ALL ` set to `en_US.UTF-8`](https://github.com/ahmedelgabri/dotfiles/blob/master/zsh/.zprofile#L42-L45)

But `alacritty` is querying the [OS instead](https://github.com/jwilm/alacritty/blob/master/assets/osx/Alacritty.app/Contents/MacOS/launcher#L7)

---

### `$PATH` issue:

For some reason the bundle also misses a couple of entries from my [`$PATH`](https://github.com/ahmedelgabri/dotfiles/blob/master/zsh/.zprofile#L73-L81)

Using the app bundle:

<img width=""345"" alt=""screen shot 2017-07-01 at 20 32 18"" src=""https://user-images.githubusercontent.com/63876/27764559-9fae0190-5e9c-11e7-8ade-b8543c2a32d0.png"">

Using the excutable directly from `target/release/alacritty`:

<img width=""340"" alt=""screen shot 2017-07-01 at 20 32 44"" src=""https://user-images.githubusercontent.com/63876/27764561-b0370b42-5e9c-11e7-8e9a-6ed7a912af7f.png"">



There are no issues when I use the executable directly `target/release/alacritty`, they only happened when I use the macOS bundled app. 

System info:
macOS: 10.12.5
shell: zsh 5.3.1 (x86_64-apple-darwin16.6.0)"02/10/19 11:15:01 PMRemove deployment script from clippy builds =||= The `--login` issue is tracked in https://github.com/jwilm/alacritty/issues/1071 and the #1087 branch has been merged a while ago. So this issue is not necessary anymore, please use #1071 for further discussions about the `$PATH` issue.chrisduerrChristian Duerr02/10/19 08:33:29 PMRemove deployment script from clippy builds1
209907/02/17 03:38:14 AMJoe WilmDocument Action::Command"Provide an example in the config for `Action::Command`.

cc #644 "02/13/19 12:31:19 PMAdd Control+Back, Control+Delete bindings to default configBound to delete-to-word-begin, delete-to-word-end as for example in VS Code.3Just to note, since it confused me briefly in the other issue, it's not actually an action variant, but rather it's own 'key' in the `key_bindings` map. (c.f. [`CommandWrapper`](https://github.com/jwilm/alacritty/blob/b4a839aee9784a2d281be1bec87ac6f2ae4a79f0/src/config.rs#L383-L390), #566)jplatteJonas Platte02/11/19 12:19:40 PM"Add Control+Back, Control+Delete bindings to default config

Bound to delete-to-word-begin, delete-to-word-end as for example in VS Code."1
210107/02/17 03:38:14 AMOliver FordDocument binding keys to a `command`"The ability for `key_bindings` to trigger a `command` was added in #566.
This PR documents their use, and gives a simple example.

Resolves #646."02/11/19 09:33:38 PM Fix font spacing error Fixes #2098.1thanks!chrisduerrChristian Duerr02/11/19 07:56:23 PMFix clamping1
210508/05/20 12:29:37 AMWayne Ashley BerryPerformance regression"I just did a fresh build of Alacritty on macOS and noticed a massive performance regression. Whereas before everything was [buttery smooth](https://www.youtube.com/watch?v=vlmDm9REV2I) - after getting the latest commits things have [slowed down terribly](https://youtu.be/DwoifCWceGo).

I can confirm that checking out 63787d0bf0bcf18422b97aa7f8dea2024948c176 and re-building fixes the issue, so the regression must've been introduced between [63787d0...HEAD](https://github.com/jwilm/alacritty/compare/63787d0bf0bcf18422b97aa7f8dea2024948c176...HEAD).

These are the steps I used to build

```sh
$ git pull
Updating 63787d0..32dfddb
Fast-forward
 Cargo.lock          |   7 ++++++
 Cargo.toml          |   1 +
 README.md           |  10 ++++++++
 alacritty.yml       |  12 ++++++----
 alacritty_macos.yml |  12 ++++++----
 src/lib.rs          |   1 +
 src/renderer/mod.rs | 115 ++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------------------------
 7 files changed, 100 insertions(+), 58 deletions(-)
```

```sh
cargo build --release
```

```sh
make app
```

---

Here's my system info

```sh
rustc 1.18.0
```

```sh
cargo 0.19.0-dev (28d1d60 2017-05-16)
```

```sh
                -/+:.           wayne@Waynes-MacBook-Pro.local
               :++++.           ------------------------------
              /+++/.            OS: macOS Sierra 10.12.5 16F73 x86_64
      .:-::- .+/:-``.::-        Model: MacBookPro13,3
   .:/++++++/::::/++++++/:`     Kernel: 16.6.0
 .:///////////////////////:`    Uptime: 1 day, 8 hours, 24 mins
 ////////////////////////`      Packages: 164
-+++++++++++++++++++++++`       Shell: zsh 5.3.1
/++++++++++++++++++++++/        Resolution: 1920x1200@2x
/sssssssssssssssssssssss.       DE: Aqua
:ssssssssssssssssssssssss-      WM: Quartz Compositor
 osssssssssssssssssssssssso/`   WM Theme: Blue
 `syyyyyyyyyyyyyyyyyyyyyyyy+`   Terminal: iTerm2
  `ossssssssssssssssssssss/     Terminal Font: Menlo-Regular 13
    :ooooooooooooooooooo+.      CPU: Intel i7-6700HQ (8) @ 2.60GHz
     `:+oo+/:-..-:/+o+/-        GPU: Intel HD Graphics 530, AMD Radeon Pro 450
                                Memory: 2550MiB / 16384MiB

```

```yaml
# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization. Default is xterm-256color
  # Note: the default TERM value `xterm-256color` does not
  # specify all features alacritty supports. This does pose
  # a few issues with programs relying on terminfo and the
  # `tput` command
  TERM: xterm-256color

# Window dimensions in character columns and lines
# (changes require restart)
dimensions:
  columns: 160
  lines: 48

padding:
  x: 0
  y: 0

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
tabspaces: 2

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Meslo LG M DZ
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Meslo LG M DZ
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Meslo LG M DZ
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 13.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0.0
    y: 0.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false

# Colors (Gruvbox dark)
colors:
  # Default colors
  primary:
    # hard contrast: background = '0x1d2021'
    background: '0x282828'
    # soft contrast: background = '0x32302f'
    foreground: '0xebdbb2'

  # Normal colors
  normal:
    black:   '0x282828'
    red:     '0xcc241d'
    green:   '0x98971a'
    yellow:  '0xd79921'
    blue:    '0x458588'
    magenta: '0xb16286'
    cyan:    '0x689d6a'
    white:   '0xa89984'

  # Bright colors
  bright:
    black:   '0x928374'
    red:     '0xfb4934'
    green:   '0xb8bb26'
    yellow:  '0xfabd2f'
    blue:    '0x83a598'
    magenta: '0xd3869b'
    cyan:    '0x8ec07c'
    white:   '0xebdbb2'

# Visual Bell
#
# Any time the BEL code is received, Alacritty ""rings"" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  # Defaults
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[4~"",  mode: ~AppCursor  }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Back,     mods: Alt,     chars: ""\x1b\x7f""                    }
  - { key: Insert,                  chars: ""\x1b[2~""                     }
  - { key: Delete,                  chars: ""\x1b[3~"",  mode: AppKeypad   }
  - { key: Delete,                  chars: ""\x1b[P"",   mode: ~AppKeypad  }
  # Custom
  - { key: H,        mods: Alt,     chars: ""\x1bh""                       }
  - { key: J,        mods: Alt,     chars: ""\x1bj""                       }
  - { key: K,        mods: Alt,     chars: ""\x1bk""                       }
  - { key: L,        mods: Alt,     chars: ""\x1bl""                       }


# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: "",‚îÇ`|:\""' ()[]{}<>""

hide_cursor_when_typing: false

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /usr/local/bin/zsh
#  args:
#    - --login
```"02/11/19 11:59:22 PMBump version to 0.2.9 =||= Since #652 was reiterated and merged, closing this issue.chrisduerrChristian Duerr02/11/19 10:54:09 PMBump version to 0.2.91
211007/02/17 10:37:59 PMIgnacio ChavezSwitching from/to screen to external monitor resolution problem"If I load Alacritty from my retina laptop and then later on I connect it to an external monitor and I move the window to said monitor. The font/resolution will be out of proportion (big). Same thing happens backwards. If I open Alacritty on the monitor and pass the laptop window, the font will be very very small. If I open and close it, that fixes this, but its not ideal.
Is there a way to reload the config so a re-render fixes this without actually closing Alacritty?"02/13/19 10:15:31 PMUpdate fish completion installation1Duplicate of #71. chrisduerrChristian Duerr02/13/19 08:45:33 PMUpdate fish completion installation1
211307/31/17 07:57:18 PMJoe WilmRead more from pty"Resolves an issue with partial draws where programs like vim would send
data, but only part of it would be drawn.

The logic for escaping when a write is pending has been removed in favor
of limiting bytes processed during a pty_read call.

The value of MAX_READ may not be ideal.

cc #598"02/14/19 11:21:45 PMAdd inherited configuration file support."Adds two methods for including another yaml file inside of the config
file that is referenced by alacritty: `include PATH` and `include!  PATH`.

`include!` will throw an error if the path is not found while `include`
will only throw a warning.

It also substitutes environment variables which are referenced in the
file path to allow for a greater degree of customization via scripting.

Addresses #779"5@jwilm this is great, feels faster toonorcalliAshkan Kiani02/14/19 10:45:59 PM"Add inherited configuration file support.

Adds two methods for including another yaml file inside of the config
file that is referenced by alacritty: `include PATH` and `include!  PATH`.

`include!` will throw an error if the path is not found while `include`
will only throw a warning.

It also substitutes environment variables which are referenced in the
file path to allow for a greater degree of customization via scripting."1
211412/25/17 01:15:00 AMJoe WilmBlinking Cursor"This is very much a WIP for blinking cursor. I'm not very fond of the implementation at the moment, and I may end up scrapping this and taking a different approach.

## Implementation Status

- [x] Cursor blinks
- [ ] Cursor blinks only when window is focused
- [ ] Cursor blink should be disabled for a second after keyboard input"03/12/19 07:44:48 PMFix lingering window after child process exit on unix"This is a crack at handing `SIGCHLD` (and conceivably others) safely and correctly, taking a different approach to #1367 by using the well-known ""self-pipe trick"". This should allay concerns about non- _async-signal-safe_ functions in signal handlers.

The signal handler writes received `SIG*` numbers into a pipe, which wakes up the existing I/O event loop. The loop then delegates handling back to the `Pty`, which reads the pipe, and reacts appropriately.

I'm not 100% certain on the finer points of this design, though, so I'd appreciate some feedback.

- Fixes #915
- Fixes #1276
- Fixes #1313"23"@cata0309 If you're interested about updates, please subscribe to https://github.com/alacritty/alacritty/issues/302.

As long as that issue isn't updated, there has not been any progress."rkanatiRachel K03/10/19 01:38:04 AM"Use signal-hook to replace DIY signal handling

This removes the the signal handling machinery in tty::unix, and
replaces it with functionality from signal-hook, which should be more
robust. Signals caught by signal-hook wake up the existing I/O event
loop, which then delegates back to the PTY to handle them.

In particular, this allows `SIGCHLD` (i.e. child process exits) to shut
down the terminal promptly, instead of sometimes leaving the window
lingering:

fixes #915
fixes #1276
fixes #1313

As a side effect, this fixes a very rare bug on Linux, where a `read`
from the PTY on the master side would sometimes ""fail"" with `EIO` if the
child closed the client side at a particular moment. This was subject to
a race condition, and was very difficult to trigger in practice; to my
knowledge, this has never been reported."1
211508/05/20 12:24:52 AMJoe WilmReduce InstanceData footprint"The InstanceData type in the rendering subsystem was previously 16
floats which occupied a total of 64 bytes per instance. This meant that
for every character or background cell drawn, 64 bytes were sent to the
GPU. In the case of a 400x100 cell grid, a total of 2.5MB would be sent.

This patch reduces InstanceData's size to 26 bytes, a 60% improvement!
Using the above example for comparison, a worst case of 1MB would be
transferred.

The motivation for this patch comes from macOS. Once the terminal grid
would reach a certain size, performance experienced a sharp and dramatic
drop (render times would go from ~3ms to ~16ms). I don't want to
speculate too much on the underlying issue, but suffice it to say that
this patch alleviates the problem in my testing.

If this patch looks familiar, it's because it was just landed a few days ago in #643! It ended up being reverted due to #648. There's clearly some more work needed in order to land this properly, so it has returned in a new PR to continue development."02/16/19 02:06:52 PMrustfmt src/{event,input,selection}.rs"I was picking up work on https://github.com/jwilm/alacritty/pull/2022, and had to disable my editor's rustfmt.

I noticed that the [contributing guidelines](https://github.com/jwilm/alacritty/blob/master/CONTRIBUTING.md#style) mention:

> Alacritty currently does not have any automatically enforced style guidelines. As a result of that, it is not possible to run `rustfmt` on existing files. New code should however follow the default ruleset of `rustfmt` and for newly created files it is possible to run the `rustfmt` tool directly.

This runs `rustfmt +stable` (without any custom configurations) on these files:

* src/event.rs
* src/input.rs
* src/selection.rs

I checked the existing 14 open PRs and there are only a couple of them that touch these files, so I figured I'd try to get this formatting PR through.

* https://github.com/jwilm/alacritty/pull/1398 – marked as ""This will need a complete rework since it's not clean at all""
* https://github.com/jwilm/alacritty/pull/1512 - will have most breakage, but it should be relatively easy to solve the merge conflicts (I can do it, if requested)
* https://github.com/jwilm/alacritty/pull/1589 - marked as ""I would like to pick this back up at some point, but not sure when that will be at this point""
* https://github.com/jwilm/alacritty/pull/2114 - only 6 lines are affected"5"> In general it looks fine, however I'm curios about one thing. What if you make textColor a vec4 instead of vec3, make everything the same as backgroundColor, but pass multicolor bit in alpha. So you'll remove colorGlyph and logically it should work, since backgroundColor works.
>
> Would you mind trying something like that on macOS?

I've changed things up a bit, let me know what you think."JeanMertzJean Mertz02/16/19 08:58:13 AMrustfmt src/selection.rs1
211607/04/17 08:21:54 PMJakub HlusičkaMake alacritty available from `cargo install`"The current alacritty version on crates.io is very outdated. Currently, if installed via `cargo install alacritty`, it just displays ""Hello, world!"".
It would simplify the process of installing alacritty significantly for Rust developers.
I would like to install alacritty automatically via a script from my dotfiles; the difference between cloning, building and copying the binary vs running a single command is significant."02/16/19 07:20:30 PMremove misleading commentThe function signature clearly does not have a bool return type - this seems to be copied from process_key_bindings and accidentally left in. =||= "@kchibisov Indeed, I was running it from cargo all the time, don't know how can that be:

```
~
❯ alacritty 
bash: /home/user/.cargo/bin/alacritty: No such file or directory

~
❯ which alacritty
/usr/bin/alacritty
```

It works fine if I run it from `/usr/bin/alacritty` directly. Thank you."expectocodeexpectocode02/16/19 06:57:18 PMremove misleading comment1
211707/08/17 05:33:18 PMNoneFix typo in rustdoc02/16/19 08:23:23 PMmove if check to return earlyThis allows the main body of the function to be indented one level less. =||= Thanks!expectocodeexpectocode02/16/19 07:02:43 PMmove if check to return early1
211807/08/17 05:32:57 PMNoneAdd a long option for the command flag (-e)These changes introduce `--command` as long version of the `-e` flag.02/16/19 07:22:02 PMfix Pull Requests linkSeems like this was caused be an edit to the section title that wasn't reflected in the link. =||= Thanks for the PR! I think `--command` is a good choice for the long form of `-e`. `gnome-terminal`, for example, does the same.expectocodeexpectocode02/16/19 07:14:07 PMfix Pull Requests link1
212007/28/17 10:14:19 PMdylanAdd support for color changing escape sequences."These escape sequences manipulate the open terminal's colorscheme and allow you to change your terminal's colorscheme on the fly. These escape sequences are supported by all of the terminal emulators I've tried with the exception of `konsole` which ignores them.

Two of my projects use these escape sequences for their main purpose and they currently don't work in Alacritty since the sequences aren't yet supported. 

- https://github.com/dylanaraps/wal
- https://github.com/dylanaraps/pywal

Issue on my repo: https://github.com/dylanaraps/pywal/issues/37

I fully understand if you don't want to implement this feature, there are a lot of really weird escape sequences in the Xterm/Rxvt specs and I understand that you want to keep Alacritty simple. \^\^

The sequences are as follows:

```
# Manipulate colors 0-256
# \033]4;{index};{color}\007

# Change color 7 to #FFFFFF
\033]4;7;#FFFFFF\007

# Change color 14 to #333333
\033]4;14;#333333\007

# Manipulate special colors.
# 10 = foreground, 11 = background, 12 = cursor foregound
# 13 = mouse foreground, 708 = terminal border background
# \033]{index};{color}\007

# Change the terminal foreground to #FFFFFF
\033]10;#FFFFFF\007

# Change the terminal background to #000000
\033]11;#000000\007

# Change the terminal cursor to #FFFFFF
\033]12;#FFFFFF\007

# Change the terminal border background to #000000
\033]708;#000000\007
```

Source:

- http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.7.pod#XTerm_Operating_System_Commands"03/13/19 06:55:19 PMText reflow"Reflow functionality should now be done.

The following things still need to be done:
 - [x] Code cleanup
 - [x] Add log entry
 - [x] Config option should be considered
 - [x] Crashes in the alt screen buffer
 - [x] Fix remaining bugs in alt screen (seems like we rotate here even though we shouldn't)
 - [x] Sometimes there's a prompt floating to the right after growing cols (is this fixable?)
 - [x] Fix new rows not being completely empty

The following behavior is expected:
 - No crashes, no matter what combination of resizes are performed
 - No buggy behavior unless the prompt is reflown (this is in line with most other terminal emulators)

Fixes #591.

**Edit:** I've decided *against* adding a config option for this since it should be an improvement for everyone and based on the people I've asked it didn't seem like there's any desire to disable something like this.

If there should be some good reasons to disable this and people wish for this option, it can of course be added in a follow-up.

**Edit:** After painfully going through all edge cases and making sure every possible combination of resize and alternate screen buffer makes sense, I think this PR should finally be in a good shape regarding functionality. If there's anything odd left, please let me know so I can take a look at it. Otherwise I will focus on resolving the remaining style issues and merging this PR.

The remaining TODO seems to be caused by https://github.com/jwilm/alacritty/issues/1616, thus it shouldn't be relevant for this PR.

**Edit:** Turns out there are still a few more issues with lines not getting cleared completely. I will look into this again to hopefully provide a solution that always works properly. If you find any other issues, please let me know."42"Wow, i didn't knew it was possible to change the terminal background on the fly. That's just awesome.
A good way to differentiate local sessions and ssh ones !"chrisduerrChristian Duerr03/13/19 11:49:39 AM"Add text reflow

Alacritty will now automatically reflow lines and shrink them when they
would usually exceed the new width of the terminal instead of
truncation.

If a line had to be truncated, it will also be reflown into the previous
line after growing the terminal width.

The reflow behavior when not at the bottom of the history is similar to
that of VTE and aims to keep the viewport stationary whenever possible.

Opposed to VTE, reflow will also be performed in the alternate screen
buffer.

There will be bugs when resizing the terminal emulator to a size smaller
than the prompt, though these issues were present in all terminal
emulators with reflow support.

This fixes #591."1
212309/17/18 03:15:21 PMChris ChamberlainImplementation of scrollback"The `Grid<T>` is now a view into a region (I called it the 'active region') of a `VecDeque`. When new lines are added, they are pushed onto the back of the queue, and once the scrollback buffer is considered 'full', then old lines are popped off the front of the queue. This seems to work rather well since, unlike a `Vec`, elements don't need to be reshuffled around very often.

Of course, as discussed in #124 there are a few things that need to be fixed before I'd consider this 'ready':

- [x] configurable max scrollback length
- [ ] write new tests
- [x] fix existing `ref` tests
- [ ] measure performance impact (it seems fine but some numbers would be more reassuring)
- [x] fix out of bounds errors on resize"02/21/19 09:28:33 AMWindows: Remove undefined assertion on return value of ClosePseudoConsole"Windows: ClosePseudoConsole has no return value, but `impl Drop for ConPty` was mistakenly trying to assert the return value was ""OK"".

When I wrote the ConPty implementation I'd been working from this document: https://github.com/MicrosoftDocs/Console-Docs/blob/master/docs/closepseudoconsole.md, and as you will see there the documentation states the function has **no return value**.

If you check the history of that file you'll see the docs used to state that it had an HRESULT return type. I wrote the assertion based on that erroneous doc.

I've removed the usage of the return value."1@chetgurevitch Compiled your rebased PR on Arch without any problem and using it for about 2 weeks without any issue. Much love :heart: davidhewittDavid Hewitt02/18/19 05:09:28 PM"Remove assertion using void return value

Windows: ClosePseudoConsole has no return value, but impl Drop
for ConPty was mistakenly using it."1
212707/24/17 03:34:24 AMTed Yinadd support for XIMThis provides with a tentative implementation to add support for XIM. The major modifications are made to winit so that the alacritty side is minimal. Temporarily redirect the glutin repo to my branch because we want glutin to use my current version of winit (https://github.com/tomaka/winit/pull/223). This directly addresses issue https://github.com/jwilm/alacritty/issues/44. It would be better to open another PR to change @jwilm own  glutin repo to aggregate the changes.03/07/19 08:37:12 PMAdd dynamic title support for Windows"As discussed previously in #1708 I have successfully restored support for dynamic title for Windows, but only for the Conpty backend.

From what I can tell, winpty support would require us to fork the `winpty-agent.exe` binary. This would be incompatible with the current approach of downloading prebuilt versions of it. Perhaps worth closing #1708 PR and opening a new issue for winpty support to remember it for the future?

Fixes #1695."7@jwilm Must be drunk at the time of writing last comment (misread your comment), Lol. Working on the PR against master now.davidhewittDavid Hewitt03/03/19 10:58:39 AMMinor tweak to winpty dynamic title behaviour1
212907/20/17 05:54:41 PMNoneImplement and use ansi attribute CancelBoldWhile playing around with ansi.rs I noticed that CancelBold was not implemented, so I would like to fix that upstream as well.03/02/19 06:31:15 PMAdd initial installer"Work in progress for #1900 

- [x] Copy alaritty.exe and winpty-agent.exe to Program Files
- [x] Copy the default config file to `%APPDATA%`
- [x] Add the Program Files folder to `$PATH`
- [x] Add right click context menu"10looks good; thanks!eberkundErik Berkun-Drevnig02/26/19 11:19:41 PMDistinguish between installer and portable1
213008/10/17 05:16:38 PMIlya LesikovScreen tearing with vim/tmux and blank/duplicated lines."Hi, I have tearing screen problem using neovim (or vim, doesn't matter) in tmux in alacritty. Mostly when I scroll up/down (especially when i open empty buffer with :enew and trying up/down, when there is only 1 empty line in a file), but it happens when i use command/insert mode too. Tearing mostly happens in the bottom part of the screen. 

- Can't capture it on video with obs, etc... (strange thing it is gone completely for some time (even on my screen) when i starting to record in obs, but not in the other tools).
- Disabling colorscheme in vim (or looks like at least using the one that doesn't change background color from the terminal default bg color) fixes it.
- Commenting this line in one of my themes (onedark.vim) makes it work:
`call s:h(""Normal"", { ""fg"": s:white, ""bg"": s:black }) "" normal text`
(looks like the function sets :highlight for Normal group - I believe just changes basic bg and fg colors)
- Vsync, etc doesn't help (ATI mesa drivers)
- Sometimes tearing disappears completely, but it happens randomly. This thing drives me crazy.
- No tearing with urxvt.
- No tearing when I unmaximize the window to about 3/4 height (Awesome WM).
- No tearing when scrolling through files with at least ~100 lines of text, but there is the second problem.

The second problem is that sometimes lines disappear or make duplicates or just mess up partially. I'm using 24-bit colorschemes everywhere btw, though at least tearing problem is independent from it (tested). When I tried the latest neovim from their repo the second issue became much worse so I downgraded for now to the old one. That's how it looks in latest neovim:
[
![screenshot_2017-07-13_02-28-43](https://user-images.githubusercontent.com/16485581/28145982-224712be-677f-11e7-983b-07af432d9ae8.png)
](url)

It would be great if you have any ideas what can be the cause, because i'm lost.
Thank you for your hard work, besides these occasional bugs the software is awesome, don't even want to think about switching back to urxvt or something.

Software:
> arch-linux 4.11.9-1
> awesome-wm 4.1-1
> alacritty-git 0.1.0.549.ge11ff42-1
> alacritty-terminfo-git 0.1.0.550.g94849c4-1
> neovim 0.2.0-2
> python-neovim 0.1.13-2
> python2-neovim 0.1.13-2
> tmux 2.5-3
> vim-runtime 8.0.0628-1
> xf86-input-libinput 0.25.1-1
> xf86-video-ati 1:7.9.0-1
> xf86dgaproto 2.1-3
> xf86vidmodeproto 2.3.1-3
> xorg-server 1.19.3-2
> mesa 17.1.4-1
> mesa-vdpau 17.1.4-1"02/25/19 11:45:17 PMChocolatey on Windows is now a supported method of installation"The Alacritty package on Chocolatey is now fully maintained and is up to date with the current version of this software as of writing this. This PR is to make aware that Alacritty can be installed from Chocolatey as an alternative installation method.

Package: https://chocolatey.org/packages/alacritty/" =||= Tried #720 branch, works great, thanks :thumbsup:Starz0rStarz0r02/25/19 11:33:51 PMChocolatey on Windows is now a supported method of installation1
213410/30/17 04:48:19 PMTheodore DuboisRemove the launcher and set the locale/current directory in alacrittyThis fixes all the weirdness where opening the app bundle would start one copy which immediately disappeared and then start another copy, etc. The code to get the locale probably should be reorganized.03/03/19 08:25:29 PMFix terminfo support for extended capabilities"To make sure all extended capabilities can be queried correctly, it is
necessary to compile the terminfo file using the `-x` flag.

Since Alacritty specified support for the XTerm mouse mode (XM/xm),
using the `-x` flag was not possible until now without breaking programs
like `htop`. By removing this flag, these issues should be resolved.

This fixes https://github.com/jwilm/alacritty/issues/2131."2Moving this to a new PR so that I can do more interesting stuff on my master branch. #879chrisduerrChristian Duerr02/26/19 01:28:59 PM"Fix terminfo support for extended capabilities

To make sure all extended capabilities can be queried correctly, it is
necessary to compile the terminfo file using the `-x` flag.

Since Alacritty specified support for the XTerm mouse mode (XM/xm),
using the `-x` flag was not possible until now without breaking programs
like `htop`. By removing this flag, these issues should be resolved.

This fixes https://github.com/jwilm/alacritty/issues/2131."1
213907/28/17 10:14:19 PMTuomas SiipolaSupport background and foreground color escape codesFixes #65603/02/19 06:57:08 PMAdd Alt+Home, Alt+End, Alt+PageUp and Alt+PageDown to default key bindings"These key bindings worked for me in xterm and urxvt but seemed to be missing in alacritty's defaults.

They're used for example in [WeeChat's default key bindings](https://weechat.org/files/doc/stable/weechat_user.en.html#key_bindings_buffers_windows) to scroll to the top of the buffer, the bottom, a few lines up or a few lines down.

Cheers!"1Following up on this, here's how I set up my terminal to [change background color based on ssh host](https://github.com/maximbaz/dotfiles/blob/71bd24e13c48a44777cc7aa83aa3dd304d239c6f/.zsh/ssh.zsh). Maybe someone will find this useful. I use tmux so I used its methods to manipulate colors, but it should be trivial to replace with escape codes as shown above.stfnmstfn02/28/19 09:26:00 PMAdd Alt+Home, Alt+End, Alt+PageUp and Alt+PageDown to default key bindings1
214007/16/17 10:15:16 AMHeath KimI can't resize tmux pane."I know that alacritty don't have tabbed interface and recommend use `tmux`.

I'm trying to learn `tmux` but stuck in resizing pane.

I can resize pane on iterm2.

Is there a way to resize pane on `alacritty`?

Thanks in advance."03/04/19 10:58:04 PMMake start_daemon behaviour on Windows consistent with Unix"Closes #2128.

As agreed in that thread, I have modified the `start_daemon` function on Windows to make behaviour as close to Unix as possible.

At the same time I have also fixed a crash where new Alacritty windows opened with `SpawnNewInstance` keybind would close instantly with the ConPTY backend. This was due to invalid stdio handles being passed to the conpty child process.

If you think this all looks reasonable I'll create a ChangeLog entry and add it to the PR."2"Thanks, @asilvadesigns, @benoit-pierre.

It seems not related with `alacritty`. Sorry!"davidhewittDavid Hewitt03/03/19 10:50:29 PMRemove redundant documentation1
214601/19/20 04:24:35 PMBenoit Pierreselection rectangle is not cleared when entering copy-mode in tmux"When using xterm, the selection rectangle is correctly cleared when entering copy-mode in tmux. That's not the case with alacritty: this result in the selection rectangle staying in the same place, highlighting whatever text is at the same position.

I'm using the latest master (94849c4)."03/02/19 09:30:30 PMFix alt screen bugs"This fixes two bugs with the alternate screen buffer.

When resetting while in the alt screen, Alacritty would not swap out
the grids leading to scrollback getting disabled. By swapping out the
grids again when resetting in the alternate screen buffer, scrollback is
now unaffected from a reset.

There was another issue with the cursor jumping around when leaving the
alt screen even though it was not active, this was fixed by skipping all
alt screen swap routines unless the current state matches the expected
state.

This fixes #2145." =||= "> I'm not sure that it could be reproduced on the latest release.

It's not an issue with the latest release as far as I know. Tmux copy mode should clear the selection."chrisduerrChristian Duerr03/02/19 02:49:52 PM"Fix alt screen bugs

This fixes two bugs with the alternate screen buffer.

When resetting while in the alt screen, Alacritty would not swap out
the grids leading to scrollback getting disabled. By swapping out the
grids again when resetting in the alternate screen buffer, scrollback is
now unaffected from a reset.

There was another issue with the cursor jumping around when leaving the
alt screen even though it was not active, this was fixed by skipping all
alt screen swap routines unless the current state matches the expected
state.

This fixes #2145."1
214808/09/17 05:03:44 PMRafi KhanCommand-H hide not working on MaOSCommand-H doesn't hide the application.03/02/19 06:32:49 PMFix scrollback live reloading"This fixes two issues with live reloading the `scrolling.history`
property.

It is now possible to increase the scrollback history without restarting
Alacritty.

When decreasing the scrollback history while scrolled beyond the new
history limit, Alacritty will reset the viewport position to the new
limit instead of crashing.

This fixes #2147." =||= Duplicate of #542chrisduerrChristian Duerr03/02/19 03:17:43 PM"Fix scrollback live reloading

This fixes two issues with live reloading the `scrolling.history`
property.

It is now possible to increase the scrollback history without restarting
Alacritty.

When decreasing the scrollback history while scrolled beyond the new
history limit, Alacritty will reset the viewport position to the new
limit instead of crashing.

This fixes #2147."1
215107/17/17 04:22:24 PMHeath Kim`Meta` key is not working on macOS."I found [this](https://github.com/syl20bnr/spacemacs/issues/6470) solution for `iTerm2` and default `terminal` app.

And some discussions on here #62 #93 

But I can't figure out how to make it works on Alacritty.
Defending on #93, it seems I need to add every key combination to `config` file, that's fine but I want more like `iTerm2` or `terminal` way.

I want to know how `Meta` key works on `Alacritty` too.

Thanks in advance."03/04/19 04:20:16 PMFix mouse events ignored by padding"SizeInfo ctx with padding was being used to determine if the last mouse location was valid, however the padding doesn't need to be applied to mouse locations. Mouse x,y is updated by CursorMoved events which only send events if the mouse is inside of the alacritty window bounds.

Instead, use usize::max_value() as a marker for invalid mouse positions and set to that value on CursorLeft events to ensure that mouse_coords() returns None when the mouse position is invalid. This should allow any mouse location inside the alacritty window to return a proper row/col coord.

This fixes #2109"6I don't think anyone is working on it at the moment; a common work-around is to add keybindings as you've mentioned.ladotoniaLado Tonia03/03/19 11:28:15 PMrevise changelog1
215207/17/17 09:01:07 PMHeath KimIssue with `CFBundleIdentifier` on macOS"I want to give `CFBundleIdentifier` to `alacritty`.

It worked for the first time, but after once quit it launches but doesn't show up the terminal screen.
I mean, I can see `alacritty` on the menu bar, but no screen shows up.

`CFBundleIdentifier` is already commented out on `info.plist`.

I think there's a reason for it like my issue.

Please let me know if you know something about it.

Thanks."03/19/19 07:14:17 PMAdd URL Highlighting"This PR adds URL highlighting to give better feedback to the user about
which text strings are recognized as an URL.

This includes changing the cursor to indicate that it is possible to
click URLs and underlining the URLs to show which cells are part of the
URL.

This fixes #1618.

Currently this is only an initial draft, there's still some things that need to be done:
 - [X] Change cursor when hovering over URLs
 - [x] Underline URLs
 - [x] Fix style/performance issues"1"@benoit-pierre I cleared launch services cache accrding to @tbodt s comment on #661 but doesn't work at all.

Aditionally, did more complicated [one](https://www.tekrevue.com/tip/rebuild-launchservices-fix-duplicate-entries-os-xs-open-menu/), it made some difference but doesn't work too.

"chrisduerrChristian Duerr03/19/19 06:28:42 PMFix remaining style issues1
215410/17/17 10:36:46 AMLordA way to disable Config Watcher"An option to completely disable the config watcher would be interesting.

Editing alacritty's config is very rare. So it's quite pointless to have a config watcher.
As I use i3 with lots of terms open i find myself with tens of config watchers."03/04/19 04:23:20 PMRemove appveyor badge from readme =||= thx :)chrisduerrChristian Duerr03/04/19 04:22:22 PMRemove appveyor badge from readme1
215707/20/17 05:50:51 PMJoe WilmUpdate to latest Glutin/winit"This *finally* gets us off the fork of Glutin we've been on for so long
and will unblock a number of other items. Functionality should be the
same as before.

Resolves #234 "04/22/19 04:10:16 PMFeature/mac os fullscreen"Judging by the latest comments on #34 seems I'm not the only one irritated by the fact that Alacritty does not start in _fullscreen_ mode. 

This changes the `start_maximized` config behaviour to start the app in full-screen on the current primary monitor (macos : where the mouse is located and spotlight bar is displayed).

I guess an additional configuration can be added for this. For now, I rather keep this simple.

I've tested this on latest macOs Mojave version and it works as expected.

Can't test how this change behaves on Windows but I will update this PR once tested."3Yup, works fine without incremental.drew7721Alex Ghiban03/06/19 06:54:17 PMFix multiple screens issue. Fixed on all OS.1
215907/19/17 07:26:46 PMJoe WilmCanonicalize the config watching path"This should resolve an issue where config behind a symlink was not being
properly reloaded when edited."03/12/19 11:11:32 PMAdded the ability to change the selection color."Now selection color and selection text color can be specified in config.

Implements [#2069](https://github.com/jwilm/alacritty/issues/2069)"5Yup, works fine without incremental.kchibisovChristian Duerr03/12/19 07:49:44 PMFix minor doc style issues1
216207/15/20 01:54:55 AMJoe WilmImprove input latency"First, for background, please see https://danluu.com/term-latency/

In the case of Alacritty, we have a worst-case latency (assuming reasonable draw times) of 3 VBLANK intervals. Here's the scenario:

1. Input arrives *just after* a VBI, and **a latency of VBI - draw_time is added**
2. After swapping buffers, input is handled. The key press event is sent to the program running within Alacritty, but a response won't be available until after the next VBI. **One more VBI of latency is added.**
3. After swapping buffers again, the shell (for example) would have told the terminal to display a character. After drawing, we must wait **one more VBI** to see the result.

In total, that's `3 * VBI - draw_time`. In a perfect world, draw_time is zero, and our worst case input latency is 3 VBI.

This can be resolved by moving the rendering to a separate thread. Certain windowing APIs require input processing to occur on the main thread, so input processing must stay in place. In the same scenario as described above, we can reduce the worst case to 2 VBLANK intervals. With input processing on its own thread, it no longer needs to wait for `swap_buffers` to return. Key press events can be sent to the terminal immediately, which means any drawing the child program does will be available to draw on the very next frame."03/08/19 04:36:24 PMUse /compat/linux/proc in SpawnNewInstance on FreeBSD"This fixes opening a new instance in the shell's current working
directory.  The code currently assumes that there is a Linux
compatible procfs mounted on /proc which is not the case on FreeBSD.
However linprocfs(5) is often mounted on /compat/linux/proc so we
can use that here for the time being.

A proper solution would look up the kern.proc.cwd.<pid> sysctl
instead, but that is not currently easily doable due to missing
KERN_PROC_CWD and struct kinfo_file definitions in the libc crate."4"> I bring measurements! Of **output** latency!
> 
> (Using https://github.com/mstoeckl/latencytool, a 187Hz camera, 60Hz QHD display, and uncomposited X11. This may not be a _realistic_ benchmark, but it is very easy to perform. _Expect ±10 ms uncertainty for the 99% percentile, and ±3 ms on averages._)
> 
> With a small (400x400px window), some timings between `\e[47m\e[2J` (or `\e[40m\e[2J`) and the time it takes for the screen to cross a specific brightness threshold:
> 
> Terminal	Average	99th %ile
> Alacritty	26 ms	44 ms
> Kitty	43 ms	60 ms
> Konsole	42 ms	46 ms
> st	27 ms	47 ms
> Termite	55 ms	63 ms
> xterm	25 ms	28 ms
> With a full screen (2560x1401) window, same environment/lighting as above:
> 
> Terminal	Average	99th %ile
> Alacritty	53 ms	81 ms
> Slightly modified full screen testing environment, (2560x1401):
> 
> Terminal	Average	99th %ile
> Alacritty	46 ms	63 ms
> Kitty	43 ms	64 ms
> Konsole	68 ms	80 ms
> st	33 ms	48 ms
> Termite	67 ms	75 ms
> xterm	25 ms	32 ms
> On sway, full screen, there is no significant difference relative to X11:
> 
> Terminal	Average	99th %ile
> Alacritty	44 ms	56 ms
> With an [unoptimized + debuginfo] build:
> 
> Terminal	Average	99th %ile
> Alacritty	76 ms	110 ms
> Why this performance reduction? ~Just to guess, [the](https://github.com/jwilm/alacritty/blob/master/res/text.v.glsl) [shaders](https://github.com/jwilm/alacritty/blob/master/res/text.f.glsl) are too [complicated](https://github.com/kovidgoyal/kitty/blob/master/kitty/cell_vertex.glsl), and my underclocked GPU can't keep up. (Compare with a fragment shader that only `color = mix(bg, fg, texture(mask, texcoords))`, and a vertex shader that only passes through flat `fg`, `bg`, and precalculated `texcoords`. )~ _Edit 4: This was a bad guess, parsing is CPU limited; rendering doesn't seem to take more than 5 msec of GPU time, even at full screen._
> 
> Edit: Updated with more fullscreen measurements. Font size choices can make a big difference, and some terminal emulators may have optimized clear screen (`\e[2J`) operations. If the results seem counterintuitive, then keep in mind the uncertainty of these measurements.
> 
> Edit 2: The unoptimized build is surprisingly slow. On clear screen, it calls a function per grid cell; for comparison, xterm's clear screen operation is almost a memset, and can perform ~1200 full screen clears per second. (2300 fps is the theoretical maximum, at a 25.6 GB/s data transfer rate.)
> 
> Edit 3: For alacritty, the dark->light transitions of the test take slightly longer than the light->dark transitions. After looking with [apitrace](https://github.com/apitrace/apitrace), it turns out since my background color is black, almost all `Cell`s have `is_empty` yield true, and are not drawn.
> 
> Edit 5: In the test above, Kitty was run with the default double buffering, 10ms output delay, and 3ms input delay. (A power-saving policy.) Switching to single buffering, and 0 ms input/output delay, I observe 27-30ms full screen average render times, with a 99th %ile of ~45ms. It remains unexplained why alacritty requires so long to render with full screens, in comparison.

Mind you there's a patch for st to improve that:
https://st.suckless.org/patches/sync/

Have you re-run the test lately? How verify hz/fps in alacritty? This is a standard browser test:
https://www.testufo.com/"t6Christian Duerr03/08/19 01:14:59 PMFormat change log message1
216307/19/17 06:02:37 PMChris WalkerOSX App Multiple Window instances fail"Trying to open multiple instances of the macOS App fails.

I wanted more than one instance - i.e. more than one terminal window (I usually have at least 4). The core program can definitely do this as I can run the binary directly many times with no problem.

But launching the App...

With spotlight:
 - if not running: fine
 - when app running:  error `The application “Alacritty.app” is not open anymore.`

From another terminal with `open /path/to/Alacritty.app`:
 - if not running: fine 
 - when app running: error `LSOpenURLsWithRole() failed with error -600 for the file /path/to/Alacritty.app.`"03/11/19 12:35:50 PMConfigurable window position"Adds the ability to specify window position through either a config option or
command line flag. Position is set early to avoid ""teleporting"" the window from
its initial position (typically 0x0) to its configured position.

(Somewhat) resolves #41 -- Ideally, at some point this should become POSIX compliant à la `COLUMNSxROWS+X+Y`. For now, a combination of `dimensions` and `position` is a somewhat competent workaround.

-----

This is my first ""substantial"" contribution to this project and I'm new to the code base, so I would appreciate any feedback on style and the like. I tested this on my local machine and nothing seemed out of the ordinary. I mostly copied the code present for setting the dimensions of the window and modified it as necessary.

-----

Current problems:

- [x] FIXED: Terminal now spawns at absolute 0x0, as opposed to 0x0 of the current screen.
- [x] FIXED: Terminal does not respect DPI settings set via `WINIT_HIDPI_FACTOR` env var"2"thanks @dominiklohmann - that is useful (and I should have thought of reading the manual...)

However while that means I can create some alias to launch a new alacritty window easily, we still cannot:

 1. use spotlight to bring a running version of alacritty to the front - which I guess should be the default behaviour.
 2. open a new alacritty window without dropping to a shell first - maybe the macOS app should have a ""new window"" menu item, seems like it might be a common usage.

These two things are surmountable, but would greatly improve the UX on macOS (I have no idea the difficulty of implementation however)

edit: this appears to be a duplicate of #607 so I'll close this."cole-hChristian Duerr03/10/19 11:02:52 PMFix yaml field comments1
216507/19/17 09:52:50 PMPaul Siegmannbuild error on 'cargo build --release'"Hi All,

I pulled the latest version of alacritty and did a 'cargo build --release'.
This resulted in:

```   Compiling tempfile v2.1.5
   Compiling num-traits v0.1.37
   Compiling lazy_static v0.1.16
   Compiling linked-hash-map v0.3.0
   Compiling phf_codegen v0.7.21
   Compiling yaml-rust v0.3.5
   Compiling serde_derive v0.9.15
error[E0523]: found two different crates with name `std` that are not distinguished by differing `-C metadata`. This will result in symbol conflicts between the two.
  --> /home/paul/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-0.9.15/src/lib.rs:13:1
   |
13 | extern crate proc_macro;
   | ^^^^^^^^^^^^^^^^^^^^^^^^

error: Could not compile `serde_derive`.
Build failed, waiting for other jobs to finish...
error: build failed
```

Alacritty revision: c8e4f366e740b98377bf6faf157af358b3bc70d2

```
$ uname -a
Linux flash 4.10.0-28-generic #32-Ubuntu SMP Fri Jun 30 05:32:18 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
$ cargo --version
cargo-0.17.0 (built 2017-03-24)
$ rustc --version
rustc 1.16.0
```


Let me know if you need more info.

regards,

Paul"03/15/19 08:41:49 PMAdds keybinding for 'de' layout keyboards #2010"This closes #2010  by implementing the suggestion made by @chrisduerr to include the IncreaseFontSize keybinding for the 'Add' key by default.

I tested this on MacOS and Arch Linux, and it seems to work. All of the cargo tests pass as well.

Also, I realize there's not a lot going on in this PR, but it's my first 'real' one so any suggestions or critiques about the code or the message would be most welcome! Thanks :) "5Thanks; I updated the README.amgoodfellowAaron Goodfellow03/15/19 01:21:24 PMAddresses related issue brought up by @dnkl - #20101
216807/23/17 04:33:06 PMNoneBuild Error compiling Font"```
rustc --version
rustc 1.15.0-nightly (8f02c429a 2016-12-15)
```

```
   Compiling font v0.1.0 (file:///Users/odeits/alacritty/font)
error: use of unstable library feature 'unicode': pending decision about Iterator/Writer/Reader (see issue #27784)
   --> font/src/darwin/mod.rs:543:40
    |
543 |         let encoded:&[u16] = character.encode_utf16(&mut buf);
    |                                        ^^^^^^^^^^^^
    |
    = help: add #![feature(unicode)] to the crate attributes to enable

error: aborting due to previous error

Build failed, waiting for other jobs to finish...
error: Could not compile `font`.
```"03/10/19 04:57:54 PMconfig and term: introduce explicit selection color."This commit introduces a new feature for Alacritty wherein the user may
request explicit text and background colors for selection ranges.  If
no color is specified, the behavior falls back on the Alacritty factory
original of using the inverted fore- and background colors for the
current context.

This had been something I was pining for in the last two years of using
Alacritty.  Looked into how hard it would be to implement and seemed
easy enough.  Please let me know what your feedback is.

![Screenshot_20190310_125724](https://user-images.githubusercontent.com/46149/54084709-72821980-4334-11e9-9391-6e4bda62eeec.png)"1We've updated the README to require the latest stable Rust. Sorry for the trouble!matttproudMatt T. Proud03/10/19 08:41:52 AM"config and term: introduce explicit selection color.

This commit introduces a new feature for Alacritty wherein the user may
request explicit text and background colors for selection ranges.  If
no color is specified, the behavior falls back on the Alacritty factory
original of using the inverted fore- and background colors for the
current context."1
217210/27/17 02:33:18 PMLIU WeiRendering issue on Debian Stretch"I've got an issue when using Alacritty + Tmux with NeoMutt running. Sometimes NeoMutt interface is completely garbled. It would only come back to normal after I press Ctrl-L (refresh).

I'm using 94849c4f2a.

Here are two screenshots to show the effects.

![bad](https://user-images.githubusercontent.com/138514/28427906-85280af0-6d6f-11e7-9308-5d2286d5e463.png)

![good](https://user-images.githubusercontent.com/138514/28427912-8c19a0f8-6d6f-11e7-8c5f-b951737e4361.png)"03/20/19 09:04:00 PMIgnore clicks on unfocused windows on WindowsThis fixes #2170.1"Sorry for the late reply.

I just tried 7c4e84c695cc54ca1d7089a91a97ce2617010205. The problem appears to be fixed."chrisduerrChristian Duerr03/12/19 08:04:11 PM"Ignore clicks on unfocused windows on Windows

This fixes #2170."1
217507/21/17 08:35:23 PMAdrià ArrufatMouse scrolling in tmux is reversed"Hi! I've been using alacritty for a while and it works perfectly.
However, I've updated it today, and now the mouse scroll is reversed in tmux.
It worked fine in revision https://github.com/jwilm/alacritty/commit/c8e4f366e740b98377bf6faf157af358b3bc70d2
So my guess is that this commit might have broken it https://github.com/jwilm/alacritty/commit/8e7dd009a4335e6d6673c1aabb2b92d27f86155c

Thanks in advance!"03/14/19 08:06:39 PMUpdate glutin to version 0.20"Fixes https://github.com/jwilm/alacritty/issues/458.
Fixes https://github.com/jwilm/alacritty/issues/1681."2@jwilm thank you! :DchrisduerrChristian Duerr03/14/19 05:41:18 PMUpdate image crate1
217603/09/18 05:54:47 PMOkan EsenKey (circumflex) isn't recognized"I'm not entirely sure if this is related to #392 and maybe alacritty isn't the issue here but rather https://github.com/tomaka/glutin. I'm using a German keyboard and had to manually bind some keys, because they weren't recognized. So far everything works, but if I try to bind keys to the circumflex key, I get following output:

```
glutin event: WindowEvent { window_id: WindowId(Id(140574848048336)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 10, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
```

Keys I had to manually bind:
```
  - { key: Key5,     mods: Alt,           chars: ""\x5b""                        }
  - { key: Key6,     mods: Alt,           chars: ""\x5d""                        }
  - { key: Key7,     mods: Alt,           chars: ""\x7c""                        }
  - { key: Key7,     mods: Shift|Alt,     chars: ""\x5c""                        }
  - { key: Key8,     mods: Alt,           chars: ""\x7b""                        }
  - { key: Key9,     mods: Alt,           chars: ""\x7d""                        }
  - { key: Equals,                        chars: ""\xb4""                        }
  - { key: Equals,   mods: Shift,         chars: ""\x60""                        }
  - { key: N,        mods: Alt,           chars: ""\x7e""                        }
  - { key: L,        mods: Alt,           chars: ""\x40""                        }
```

So it seems like the key isn't attached to any virtual key? Is there something I'm missing or is this a bug?"03/14/19 08:27:19 PMFix invalid working-directory ptr for ConPTY"Hi, thought I'd make pr for this rather than an issue since it's such a small change.

Currently passing an argument with --working-directory and ConPTY enabled causes a panic:

`panicked at 'assertion failed: success', src\tty\windows\conpty.rs:243:9`

The results of `Error::last_os_error()` reveals a bit more:

`
{ code: 123, kind: Other, message: ""The filename, directory name, or volume label syntax is incorrect."" }
`
I believe the current code code: `cwd.map_or_else(ptr::null, |s| s.as_ptr())` returns a dangling pointer - looks like the value is moved and then immediately dropped IIUC." =||= To finally get some closure: https://github.com/jwilm/alacritty/pull/1155aspurdyAlex Purdy03/14/19 03:38:16 AMFix invalid working-dir string ptr for ConPTY1
217911/07/17 04:15:15 PMAndreas FuchsKey rebinding assumes QWERTY"I use the Colemak keyboard layout, and I was very very confused why my key bindings weren't correct - turns out that you have to specify the bindings using the location of the QWERTY key, not via their actual place in the layout. This seems like a semi-known issue (see [this comment](https://github.com/jwilm/alacritty/issues/93#issuecomment-306788447)), but it is pretty confusing.

The main pain point here is that I can't share my config files with people who use other layouts (be it QWERTY, AZERTY, QWERTZ or Dworak!).

I would love if alacritty would let us specify key bindings by what real key they send, not by what their location on a QWERTY layout is."03/15/19 12:11:45 AMUpdate Cargo.lockrelated with #2175 =||= Closing in favor of #458.h-michaelHirokazu Hata03/15/19 12:03:36 AM"Update Cargo.lock

related with #2175"1
218007/28/17 04:02:57 PMTuomas SiipolaDon't panic when setting cursor visibility failsCurrently setting cursor visibility always fails on Wayland. It shouldn't be a critical error on any platform.03/15/19 08:48:52 PMAdd change log entry for Wayland title fixFixes #2104. =||= Beautiful; thanks for the PR!chrisduerrChristian Duerr03/15/19 08:46:32 PM"Add change log entry for Wayland title fix

Fixes #2104."1
218107/23/17 04:30:35 PMRodrigo StevauxFunny bug on NeoVIM"Hi, I have a funny bug.

When I change the colorscheme on NVIM and scroll the screen down, the background color gets messed up. But this does NOT happen if the screen is small enough.

Interestingly enough, when I record the session using ASCII cinema, it looks correct.

![image](https://user-images.githubusercontent.com/21047691/28486781-887081cc-6e5c-11e7-8944-b11a35866df1.png)"07/26/19 11:14:27 AM[WIP] Basic text shaping and rendering using HarfBuzz"Doesn't render properly yet, though.
I'd like it if someone could figure out why it's not rendering the proper glyphs!

edit for using:
Compile Alacritty with the feature `hb-ft`. This will enable FreeType on all platforms, and use HarfBuzz.

Closes #50 (I think)"6"@DivineGod I thought there was a ticket already but couldn't find it; thanks for the comment!

Duplicate of #123."anirudhbAnirudh Balaji03/31/19 01:39:34 AMBreak everything1
218607/28/17 04:00:58 PMqbCould not compile `core-text` (rustc 1.20.0-nightly)"Hi,

OS version :

```
Mac OS 10.11.6
```

Alacritty version :
```
commit 49c73f6d55e5a681a0e0f836cd3e9fe6af30788f (HEAD -> master, origin/master, origin/HEAD)
Author: Joe Wilm <joe@jwilm.com>
Date:   Fri Jul 21 13:34:52 2017 -0700

    Use latest winit

    Resolves #679
```

Rust version :

```
rustc 1.20.0-nightly (15aa15b03 2017-07-21)
```

Build log :

```
cargo build --release
   Compiling semver v0.1.20
   Compiling linked-hash-map v0.3.0
   Compiling unicode-segmentation v1.2.0
   Compiling bitflags v0.4.0
   Compiling itoa v0.3.1
   Compiling khronos_api v1.0.1
   Compiling odds v0.2.25
   Compiling rustc-serialize v0.3.24
   Compiling unicode-xid v0.0.4
   Compiling foreign-types v0.2.0
   Compiling cfg-if v0.1.0
   Compiling ansi_term v0.9.0
   Compiling block v0.1.6
   Compiling bitflags v0.7.0
   Compiling core-foundation-sys v0.3.1
   Compiling heapsize v0.3.9
   Compiling log v0.3.8
   Compiling core-foundation-sys v0.4.1
   Compiling void v1.0.2
   Compiling unicode-width v0.1.4
   Compiling fnv v1.0.5
   Compiling bitflags v0.9.1
   Compiling num-traits v0.1.37
   Compiling smallvec v0.4.0
   Compiling serde v0.9.15
   Compiling dtoa v0.4.1
   Compiling bitflags v0.8.2
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.23
   Compiling owning_ref v0.2.4
   Compiling pkg-config v0.3.9
   Compiling lazy_static v0.2.8
   Compiling winapi v0.2.8
   Compiling slab v0.3.0
   Compiling utf8parse v0.1.0
   Compiling xdg v2.1.0
   Compiling quote v0.3.15
   Compiling lazycell v0.4.0
   Compiling vec_map v0.8.0
   Compiling strsim v0.6.0
   Compiling yaml-rust v0.3.5
   Compiling synom v0.11.3
   Compiling nodrop v0.1.9
   Compiling xml-rs v0.3.6
   Compiling rustc_version v0.1.7
   Compiling num-integer v0.1.34
   Compiling kernel32-sys v0.2.2
   Compiling atty v0.2.2
   Compiling term_size v0.3.0
   Compiling time v0.1.37
   Compiling net2 v0.2.29
   Compiling errno v0.2.3
   Compiling filetime v0.1.10
   Compiling malloc_buf v0.0.6
   Compiling rand v0.3.15
   Compiling thread-id v3.1.0
   Compiling fsevent-sys v0.1.6
   Compiling shared_library v0.1.5
   Compiling vte v0.3.1
   Compiling serde_json v0.9.10
   Compiling arraydeque v0.2.3
   Compiling num-complex v0.1.37
   Compiling syn v0.11.11
   Compiling num-iter v0.1.33
   Compiling clap v2.24.2
   Compiling nix v0.7.0
   Compiling objc v0.2.2
   Compiling fsevent v0.2.16
   Compiling parking_lot_core v0.2.2
   Compiling num-bigint v0.1.37
   Compiling serde_yaml v0.6.2
   Compiling core-foundation v0.3.0
   Compiling euclid v0.12.0
   Compiling gl_generator v0.5.3
   Compiling core-foundation v0.4.1
   Compiling objc_id v0.1.0
   Compiling parking_lot v0.3.8
   Compiling num-rational v0.1.36
   Compiling core-graphics v0.8.1
   Compiling walkdir v0.1.8
   Compiling objc-foundation v0.1.1
   Compiling serde_codegen_internals v0.14.2
   Compiling num v0.1.37
   Compiling cocoa v0.9.2
   Compiling core-text v5.0.0
error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:138:53
    |
138 |                                                     ptr::null());
    |                                                     ^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:135:24
    |
135 |         let font_ref = CTFontCreateWithGraphicsFont(cgfont.as_concrete_TypeRef(),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:145:55
    |
145 |         let font_ref = CTFontCreateWithFontDescriptor(desc.as_concrete_TypeRef(),
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:145:24
    |
145 |         let font_ref = CTFontCreateWithFontDescriptor(desc.as_concrete_TypeRef(),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:179:63
    |
179 |             let cgfont_ref = CTFontCopyGraphicsFont(self.obj, ptr::null_mut());
    |                                                               ^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:179:30
    |
179 |             let cgfont_ref = CTFontCopyGraphicsFont(self.obj, ptr::null_mut());
    |                              ^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:189:59
    |
189 |                                                           ptr::null());
    |                                                           ^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:186:28
    |
186 |             let font_ref = CTFontCreateCopyWithAttributes(self.obj,
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:440:5
    |
440 | /     fn CTFontCreateWithFontDescriptor(descriptor: CTFontDescriptorRef, size: CGFloat,
441 | |                                       matrix: *const CGAffineTransform) -> CTFontRef;
    | |_____________________________________________________________________________________^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:444:5
    |
444 | /     fn CTFontCreateCopyWithAttributes(font: CTFontRef, size: CGFloat, matrix: *const CGAffineTransform,
445 | |                                       attributes: CTFontDescriptorRef) -> CTFontRef;
    | |____________________________________________________________________________________^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:517:5
    |
517 |     fn CTFontCopyGraphicsFont(font: CTFontRef, attributes: *mut CTFontDescriptorRef) -> CGFontRef;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font.rs:518:5
    |
518 | /     fn CTFontCreateWithGraphicsFont(graphicsFont: CGFontRef, size: CGFloat,
519 | |                                     matrix: *const CGAffineTransform,
520 | |                                     attributes: CTFontDescriptorRef) -> CTFontRef;
    | |__________________________________________________________________________________^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font_collection.rs:123:17
    |
123 |                 wildcard_desc.as_concrete_TypeRef(),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: type `font_descriptor::__CTFontDescriptor` is private
   --> /Users/qb/.cargo/registry/src/github.com-1ecc6299db9ec823/core-text-5.0.0/src/font_collection.rs:122:29
    |
122 |         let matched_descs = CTFontDescriptorCreateMatchingFontDescriptors(
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 14 previous errors

error: Could not compile `core-text`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```

I hope this report is useful, tell me if you need more info :)"04/08/19 07:50:07 PMAdd ScrollLineUp and ScrollLineDown actions for scrolling line by lineIt was mentioned in #923 that there is currently no way to scroll line by line using the keyboard.  This PR adds two actions, `ScrollLineUp` and `ScrollLineDown`, which can be optionally bound to keyboard keys by the user. =||= Pretty sure we can resolve this by updating core text. There's a commit in there about fixing nightly builds.enjmiahJerry Yin03/16/19 01:43:24 AMAdd ScrollLineUp and ScrollLineDown actions for scrolling line by line1
218709/20/18 03:24:27 PMDominik LohmannAllow changing window title bar color in macOS "Recent iTerm2 versions allow selecting a color for the title bar on macOS to make it blend in with the terminal background. It doesn't hide the title bar, but makes it look a lot better. 

Is there any chance of getting this for alacritty? Or, can someone point me in the right direction towards implementing this myself? 

![lmbchxs](https://user-images.githubusercontent.com/4488655/28492796-2c6a02e6-6f0a-11e7-917e-aec4cd3fc4a3.png)

This can be achieved by using the following flags on NSWindow, assuming the window background color is set accordingly (example in Swift). 

```swift
window.titlebarAppearsTransparent = true
window.titleVisibility = .hidden
window.styleMask.insert(NSWindowStyleMask.fullSizeContentView)
```"03/17/19 09:09:27 PMRemove inclusive range"This removes all inclusive range code since it has been recently
stabilized in the standard lib." =||= "VSCode's ""custom"" title bars on both macOS, Windows & Linux should be good inspiration: https://code.visualstudio.com/updates/v1_28#_custom-title-and-menu-bar-on-windows-by-default"chrisduerrChristian Duerr03/17/19 02:49:19 PM"Remove inclusive range

This removes all inclusive range code since it has been recently
stabilized in the standard lib."1
219207/28/17 04:02:05 PMMike HartingtonQuestion: Setting up Mac App"Hi, this is more of a question than an actual issue, but could probably end up being a PR in the form of docs. 

I have Alacritty built successfully and it launches by calling the binary, but Im a bit lost/confused on how to set up the mac app portion of things.

Does any path need to be modified at all? 
Copy/Pasting the mac app to the applications folder does not seem to be the correct way as it will just quit upon start up."03/19/19 10:32:41 PMFix URLs getting incorrectly extended to next line"If a URL ends right at the end of the terminal, it would sometimes
incorrectly include the characters from the following line when
launching the URL.

Similar to the semantic search function, the URL parsing iterator will
now stop if it encounters a cell at the end of the line which does not
contain the `WRAPLINE` flag.

This fixes #1906." =||= smh wow... I was using automator to call the binary #fail #noob.chrisduerrChristian Duerr03/19/19 08:06:57 PMImprove change log entry1
219307/28/17 04:02:05 PMMike Hartingtondocs(): add instructions for mac appsCloses https://github.com/jwilm/alacritty/issues/68703/21/19 07:55:20 PMRemove deprecated libc::daemon call"Since version 10.5 of macOS the libc::daemon call has been deprecated.
While it is recommended by macOS to use launchd instead, this is not
easily available on other unix platforms.

However since we just spawn a daemon process to prevent Alacritty from
spawning zombies, we can manually invoke `fork` in the child process to
cause a double-fork and re-parent the child process under init so it can
be reaped automatically." =||= Thanks for the PR!chrisduerrChristian Duerr03/19/19 08:10:41 PM"Remove deprecated libc::daemon call

Since version 10.5 of macOS the libc::daemon call has been deprecated.
While it is recommended by macOS to use launchd instead, this is not
easily available on other unix platforms.

However since we just spawn a daemon process to prevent Alacritty from
spawning zombies, we can manually invoke `fork` in the child process to
cause a double-fork and re-parent the child process under init so it can
be reaped automatically."1
219508/29/17 04:32:09 PMLIU WeiImplement an option to not start the config_monitor thread"I normally have a lot of terminals open and don't really care if they can reload the latest configuration or not.

It seems that I'm not alone on this, hence this PR.

CC: #670 "03/24/19 05:37:31 PMFix URL highlight crash"The URL highlight stores the state of the last URL highlight with the
position of the URL start position. However when resizing, it's possible
that the indices of this point change which will cause a crash if the
old positions are not within the grid anymore.

This has been resolved by resetting the URL highlight state whenever the
terminal is resized.

This fixes #2194."11Thanks for the work on this feature @liuw!chrisduerrChristian Duerr03/24/19 03:50:10 PMFix crash during resize1
220110/20/17 02:59:29 PMNoneAlacritty does not send Modifier+FK sequencesI use [Byobu](http://byobu.co/) as my multiplexer. It's command sequences all use the function keys to control it. Alacritty does not send any of those sequences. It will send just the function key, but I can't use any modifiers.03/25/19 12:27:38 AMMaximize window after mappingBecause Alacritty's window starts out unmapped with `with_visibility(false)`, adding `with_maximized()` makes Winit try to maximize the window before it's mapped. Compliant window managers ignore the request, so when `show()` is called, it's not maximized. This pull request explicitly maximizes the window after it's mapped, and fixes #1902.1"These should be the rest of the key bindings

```yaml
  - { key: F1,       mods: Shift,   chars: ""\x1b[1;2P""                   }
  - { key: F2,       mods: Shift,   chars: ""\x1b[1;2Q""                   }
  - { key: F3,       mods: Shift,   chars: ""\x1b[1;2R""                   }
  - { key: F4,       mods: Shift,   chars: ""\x1b[1;2S""                   }
  - { key: F5,       mods: Shift,   chars: ""\x1b[15;2~""                  }
  - { key: F6,       mods: Shift,   chars: ""\x1b[17;2~""                  }
  - { key: F7,       mods: Shift,   chars: ""\x1b[18;2~""                  }
  - { key: F8,       mods: Shift,   chars: ""\x1b[19;2~""                  }
  - { key: F9,       mods: Shift,   chars: ""\x1b[20;2~""                  }
  - { key: F10,      mods: Shift,   chars: ""\x1b[21;2~""                  }
  - { key: F11,      mods: Shift,   chars: ""\x1b[23;2~""                  }
  - { key: F12,      mods: Shift,   chars: ""\x1b[24;2~""                  }
  - { key: F1,       mods: Control, chars: ""\x1b[1;5P""                   }
  - { key: F2,       mods: Control, chars: ""\x1b[1;5Q""                   }
  - { key: F3,       mods: Control, chars: ""\x1b[1;5R""                   }
  - { key: F4,       mods: Control, chars: ""\x1b[1;5S""                   }
  - { key: F5,       mods: Control, chars: ""\x1b[15;5~""                  }
  - { key: F6,       mods: Control, chars: ""\x1b[17;5~""                  }
  - { key: F7,       mods: Control, chars: ""\x1b[18;5~""                  }
  - { key: F8,       mods: Control, chars: ""\x1b[19;5~""                  }
  - { key: F9,       mods: Control, chars: ""\x1b[20;5~""                  }
  - { key: F10,      mods: Control, chars: ""\x1b[21;5~""                  }
  - { key: F11,      mods: Control, chars: ""\x1b[23;5~""                  }
  - { key: F12,      mods: Control, chars: ""\x1b[24;5~""                  }
  - { key: F1,       mods: Alt,     chars: ""\x1b[1;6P""                   }
  - { key: F2,       mods: Alt,     chars: ""\x1b[1;6Q""                   }
  - { key: F3,       mods: Alt,     chars: ""\x1b[1;6R""                   }
  - { key: F4,       mods: Alt,     chars: ""\x1b[1;6S""                   }
  - { key: F5,       mods: Alt,     chars: ""\x1b[15;6~""                  }
  - { key: F6,       mods: Alt,     chars: ""\x1b[17;6~""                  }
  - { key: F7,       mods: Alt,     chars: ""\x1b[18;6~""                  }
  - { key: F8,       mods: Alt,     chars: ""\x1b[19;6~""                  }
  - { key: F9,       mods: Alt,     chars: ""\x1b[20;6~""                  }
  - { key: F10,      mods: Alt,     chars: ""\x1b[21;6~""                  }
  - { key: F11,      mods: Alt,     chars: ""\x1b[23;6~""                  }
  - { key: F12,      mods: Alt,     chars: ""\x1b[24;6~""                  }
  - { key: F1,       mods: Super,   chars: ""\x1b[1;3P""                   }
  - { key: F2,       mods: Super,   chars: ""\x1b[1;3Q""                   }
  - { key: F3,       mods: Super,   chars: ""\x1b[1;3R""                   }
  - { key: F4,       mods: Super,   chars: ""\x1b[1;3S""                   }
  - { key: F5,       mods: Super,   chars: ""\x1b[15;3~""                  }
  - { key: F6,       mods: Super,   chars: ""\x1b[17;3~""                  }
  - { key: F7,       mods: Super,   chars: ""\x1b[18;3~""                  }
  - { key: F8,       mods: Super,   chars: ""\x1b[19;3~""                  }
  - { key: F9,       mods: Super,   chars: ""\x1b[20;3~""                  }
  - { key: F10,      mods: Super,   chars: ""\x1b[21;3~""                  }
  - { key: F11,      mods: Super,   chars: ""\x1b[23;3~""                  }
  - { key: F12,      mods: Super,   chars: ""\x1b[24;3~""                  }
```"CrackedP0tElaina Martineau03/24/19 11:46:02 PMOnly call `window.set_maximized()` if necessary1
220207/25/17 12:54:07 AMTed Yinadd support for X input methodReapply the changes to the latest master (https://github.com/jwilm/alacritty/pull/658).03/21/19 10:45:04 PMUpdate extended-description =||= Thanks for the changes; waiting for CIatouchetAlex Touchet03/21/19 10:35:58 PMUpdate wording1
220307/28/17 04:00:56 PMMartin Lindhefont: update macOS core-text dependency to 6.1.0, fixes #68503/23/19 11:56:47 AMFix URL parsing with double-width characters"Since double-width characters are followed by an empty cell containing
only the `WIDE_CELL_SPACER` flag, the URL parser would stop once
encountering the cell after a double-width character.

By skipping cells that contain the `WIDE_CELL_SPACER` flag and
incrementing the URL length by unicode width of the character instead of
cell count, this can be resolved for both URL launching and URL
highlighting.

Fixes #2158." =||= Yep, definitely interested. Thanks for the PR; big time saver :)chrisduerrChristian Duerr03/23/19 01:11:17 AMAdd back ignored tests1
220704/28/20 11:24:50 PMJordi ArandaWeird behavior of number sign key (#) on Mac OS"I have the following binding in my alacritty config file (using Spanish keyboard layout):

```text
  - { key: F3,      mods: Alt,      chars: ""\x23""}
```

It appears to do the job since the number sign (#) is displayed in the terminal but I am not sure it is working properly. When I type it within the shell a new endline is somehow introduced:

```bash
$ # (I am pressing Alt + F3 here)
$ (automatically a new line is introduced, the above line can't be continued)
```

Within vim I also get weird errors whenever I try to enter number sign for python commands:
```text
E348: No string under cursor
```
I have observed vim actually exits insert mode and switches back to normal mode whenever typing the number sign key (#). This makes me think the above mentioned binding might be wrong or something else is happening behind the scenes."04/28/19 08:21:40 PMClipboard rework"This switches our own `copypasta` crate with the more standardized
`clipboard` library, which allows us to get rid of the `xclip`
dependency on X11.

Additionally, this lays the foundation for native Wayland clipboard
support once the clipboard crate is updated (or a fork is created).

Fixes https://github.com/jwilm/alacritty/issues/5."18"Closing as duplicate of #458 and https://github.com/alacritty/alacritty/pull/890. I believe those combined should cover the macOS keyboard problems.

Let me know if you think this doesn't fit."chrisduerrChristian Duerr04/28/19 06:10:28 PMFix macos build failures1
221207/28/17 04:00:04 PMJörg ThalheimREADME.md: add NixOS instructions03/30/19 04:48:37 PMAdd rustfmt style guide =||= Thanks!chrisduerrChristian Duerr03/30/19 09:29:43 AMFormat all files1
221807/25/17 04:24:17 PMDavid LewisSpecify a color for bold text"Just a question for config options - am I able to specify a color for bold text? I'm coming from iTerm2 where this was an option, so I'm wondering if it's possible.

Here's iTerm2 with a bold color specified:
![iterm2 example](https://user-images.githubusercontent.com/6754950/28582277-b3988a88-7119-11e7-87b3-0e0976424921.jpg)

And now Alacritty with the same colorscheme minus a bold font:
![alacritty example](https://user-images.githubusercontent.com/6754950/28582290-be26a778-7119-11e7-9bce-341beb6692fe.jpg)
"03/28/19 02:35:02 PMFix prompt jumping during reflow"If the window is resized while lines are longer than the visible area,
Alacritty will no longer move down the prompt and pull from history when
possible but instead keep the prompt in place and move the additional
lines into the scrollback buffer.

This fixes #2213." =||= Glad it works out for you @davidarmstronglewis, hopefully @jwilm can find the time and merge this soon, so you don't have to go through the trouble of using my branch.chrisduerrChristian Duerr03/26/19 06:17:46 PM"Fix prompt jumping during reflow

If the window is resized while lines are longer than the visible area,
Alacritty will no longer move down the prompt and pull from history when
possible but instead keep the prompt in place and move the additional
lines into the scrollback buffer.

This fixes #2213."1
222212/09/18 03:28:23 PMTed YinGhost characters when scrolling text in unicode."In weechat, there is a noticeable rendering problem that the screen is not properly refreshed/redrawn. This problem only appears when there exist some unicode characters (such as Chinese characters, emoji, etc). The problem does not exist in other terminal emulators.

Pay attention to the repeated glyphs on the right while scrolling.

![peek 2017-07-27 18-40](https://user-images.githubusercontent.com/1221635/28695160-9c5c6bd0-72fb-11e7-9964-12fffc5f8a30.gif)"03/28/19 07:02:45 AMDisable URL highlight with URL launcher disabled =||= "Seems like this also happens for zero-width characters. It will not help there to just use the system's unicode width function (#1295), but it will also be required to render zero-width characters without progressing the cursor position.

To keep this issue as narrow as possible and allow for closing it once #1294 is fixed, I've created a separate issue for tracking this problem: #1317"chrisduerrChristian Duerr03/27/19 07:26:42 PMDisable URL highlight with URL launcher disabled1
222405/05/18 03:18:41 PMTed YinCursor does not extend to the full width of a wide character."The cursor uses the same width for wide characters as it for normal ones, so the right half of a wide character is clipped.

![peek 2017-07-27 18-56](https://user-images.githubusercontent.com/1221635/28695534-a7bd0ac8-72fd-11e7-8fe2-31bdb8a14219.gif)"04/23/19 05:41:22 PMAdd DirectWrite font rasterizer"This adds a DirectWrite font rasterizer for Windows. This enables subpixel rendering and hinting on Windows, resolving #1673 . I have stuck this behind a feature flag, directwrite, for now, I'm not sure what would be desirable going forward. I was not confident enough to outright replace rusttype.

I have tested this at 100% DPI, 150% DPI and 200% DPI and it appears to behave correctly. There are no test regressions though I haven't checked to see if there are any tests that would catch a renderer bug! I have run rustfmt with the rustfmt config in #2212 on the presumption that PR will be merged in the future, I wanted to minimise any future required changes.

I did try to run vtebench but it seems that it doesn't work on Windows, is there something I'm missing? For example, am I meant to run vtebench in WSL to check Windows performance or is Windows perf something that hasn't been looked at yet?

Whilst not a regression when compared to the rusttype, this rasterizer currently does not attempt to fallback if the font isn't found. The DirectWrite APIs for fallbacks appear pretty complex (https://docs.microsoft.com/en-gb/windows/desktop/api/dwrite_2/nf-dwrite_2-idwritefontfallback-mapcharacters) and are not exposed in dwrote. Perhaps it would be sufficient to hardcode some fallback familes as Windows ships with a well known set of fonts, it seems to me that Consolas should be a safe fallback but perhaps we should look for Lucida Console too.

Apologies if I've made any silly mistakes, this is the most Rust I've ever written, I think I like it though!

Fixes https://github.com/jwilm/alacritty/issues/2316."21@yuanyelele If this is working outside of (n)vim, but not inside it, this is probably a different issue. If that is the case, please open a separate issue to track that. Otherwise let me know and I can re-open this one.benpyeChristian Duerr04/23/19 05:04:44 PMAdd change log entry1
222901/06/18 07:57:40 PMTyler HalladaMouse wheel scroll doesn't work past around 200 columnsIf I open vim and create two vertical splits and then drag the separator between the two far enough to the right that the left split is about 200 columns wide, the mouse wheel scrolling in the right split stops working. I can set up the same scenario with tmux panes instead and the right pane won't scroll if it starts past around 200 columns.03/29/19 01:21:56 PMUpdate --class docs"Since the `--class` flag has been changed to take effect on Wayland too,
the documentation has been updated to reflect that.

The original change was made in #2077." =||= "I had a look through the code and spotted that [this block of code](https://github.com/jwilm/alacritty/blob/228400a6c24bf651ecd74996d1fa68c3d92c9ff9/src/input.rs#L427) calls `normal_mouse_report` instead of `mouse_report`, which seems to be the method which delegates to either `sgr_mouse_report` or `normal_mouse_report` depending upon how the terminal mode is setup.

Could changing it to `mouse_report` be all that is necessary to get this working?"chrisduerrChristian Duerr03/29/19 10:37:20 AM"Update --class docs

Since the `--class` flag has been changed to take effect on Wayland too,
the documentation has been updated to reflect that.

The original change was made in #2077."1
223006/28/19 04:41:49 PMOnurRedrawing Issue with a Maximized Window on Ubuntu 16.04"When Alacritty window is maximized, changes in display will consistently lag until the next key press. For example, when editing a file in Vim with Alacritty window maximized, switching to the next tab in Vim will *not* immediately display the next tab's contents until a key is pressed.

This issue is not present when the window is not maximized or when resized into a maximized size."03/30/19 09:23:49 AMRework URL highlighting "This completely reworks URL highlighting to fix two issues which were
caused by the original approach.

The primary issues that were not straight-forward to resolve with the
previous implementation were about handling the URL highlighted content
moving while the highlight is active.

This lead to issues with highlighting with scrolling and when the
display offset was not 0.

The new approach sticks closely to prior art done for the selection,
where the selection is tracked on the grid and updated whenever the
buffer is rotated.

This fixes #2225.
This fixes #2231." =||= Seems to be resolved.chrisduerrChristian Duerr03/30/19 09:22:18 AMAdd change log entry1
223505/15/18 09:35:53 PMUmur GedikPanics if no imei application is runningNot all the linux environments running IME automatically. In my case I just run ibus xim on demand. Alacritty panics if ibus xim is not working at that moment03/31/19 06:29:05 PM"Merge ""Changed"" sections in ChangeLog"Looks like merge conflict created two ChangeLog sections? Have fixed. =||= Thanks for mentioning the duplication. Closing this in favor of #830 (even though this came first the other seems to have more relevant information).davidhewittDavid Hewitt03/31/19 04:32:10 PM"Merge ""Changed"" sections in ChangeLog"1
223901/04/19 05:17:13 PMNiklas HambüchenREADME section about Wayland/glutin no longer accurate?"Currently it says

> Is wayland supported? Not yet. Alacritty is currently on a fork of glutin that needs some updates to work with Wayland. To stop glutin from detecting Wayland (e.g. for use on XWayland) launch Alacritty like this: `env WAYLAND_DISPLAY= alacritty`

But it seems commit 8e7dd009 - ""Update to latest Glutin/winit (#671)"" does away with that."04/01/19 10:27:28 PMRevert daemon removal"This reverts the removal of the call to libc::daemon and instead adds an
annotation to ignore the deprecation warnings on macos.

This will not be an issue in the future since macOS is only discouraging
the use of `daemon`, but I'm not aware of any intention to actually
remove it.

This fixes #2211." =||= README definitely needs to be updated a bit. Even though we have some Wayland support now, there are a few caveats, and some might prefer to use XWayland still.chrisduerrChristian Duerr04/01/19 09:34:12 PMRemove remaining style issues1
224609/28/18 08:38:44 AMDeleted userMake shader file path user configurable"Feel free to reject this if deemed unnecessary; 
I want to do some messing with shaders so it would be nice to be able to set the file path for the glsl shaders. 

In my case, specifically because NixOS makes packages immutable, and I would have to rebuild for every trivial change."04/02/19 10:58:19 PMFix Windows deployment =||= "I'm not opposed to implementing this and it seems like something which should be quite simple to support, but since the author of this issue doesn't seem to be around anymore, I'm going to close it for now.

If someone else is interested in this feature, or might even want to implement it (it should be trivial), feel free to comment here and I'll re-open the issue."chrisduerrChristian Duerr04/02/19 03:50:01 PMFix Windows deployment1
224708/02/17 07:56:48 AMNoneCursor color somehow set to background color in vim"At least in vim while using alacritty the cursor behaves weirdly, inverting the fore- background colors instead of setting the bg to ""white"" and the fg to ""black"" as is behavior on other TEs.

![cursorcolors](https://user-images.githubusercontent.com/24317742/28817778-8dc22e5a-76a9-11e7-882b-e1ec454c71a5.png)

Haven't seen this in other terminal-emulators and it breaks usability on parens for some reason ( w/ the cursor ending up as the same bg as the term itself ).

Can someone give me pointers what the cause of this is? - I assume this is more then just a misconfiguration, as I don't experience it in any other TEs.


Thanks for any responses."04/02/19 11:29:37 PMFix BSD build failure"This updates all dependencies removing any reference to nix 0.12 which
prevents successful builds on OpenBSD.

Fixes #2244."2"Perfect, thanks!
Resolved"chrisduerrChristian Duerr04/02/19 10:59:04 PM"Fix BSD build failure

This updates all dependencies removing any reference to nix 0.12 which
prevents successful builds on OpenBSD.

Fixes #2244."1
225008/02/17 04:10:01 PMTheodore DuboisAlacritty as a terminal emulation library, like VTE"Alacritty is a great terminal emulator, but I can't use a terminal that doesn't have at least tabs and split panes (I'm not familiar with tmux). So to keep the core small, I think it would be a good idea to make Alacritty into a terminal emulation library, instead of a standalone application. Standalone apps could then be developed that use Alacritty for terminal emulation, and provide features like tabs and split panes, GUI configuration, search, etc. They could also provide a more platform-native experience, like a transparent title bar on macOS (this was suggested recently and could be done with 3 lines of Objective-C code, but winit currently provides no api for it).

@jwilm what do you think?"04/04/19 06:41:57 PMAdd notes about icon installation on Linux"After completing all the steps presented in INSTALL.md, Alacritty will correctly report its icon (e.g. screenshot from rofi).
![out](https://user-images.githubusercontent.com/27620401/55460008-8b12e600-55f9-11e9-9b9c-52c159f75ddd.jpg)
"4dupe of #450kchibisovChristian Duerr04/04/19 06:38:56 PMAdd icon to snap file1
225105/18/18 11:31:23 PMVictor PolevoyThe code lacks documentation"The code has no useful documentation in a lot of places. I have a lot of desire to participate in it, I have a lot of good ideas I would like to propose and implement by myself, but it is very difficult to understand the code. I would treat it as priority task because new developer must spend a lot of time to understand how the project works.

Also, I would suggest to write a separate developer documentation."04/03/19 10:57:56 PMBump dependencies2"As someone who was a bit late to the party I have to say that I didn't really find the code poorly documented at all. Of course documentation could always be better, but I believe (especially since I've been part of it), documenation has been added whenever relevant changes have been made.

If anyone is interested in helping out and getting started, I would strongly recommend to just join the irc #alacritty on freenode or just open an issue. If there are any specific issues with understanding certain parts of the code, it's probably easiest to just explain them personally, and maybe the first little contribution can be adding the results of the discussion as documentation if the current documentation was lacking. :)

I can't speak for anyone else but I'm always ready to help with mentoring issues, it sometimes might just take a day or two until I've got the time to respond. So don't be afraid to open issues/ask questions in IRC!"chrisduerrChristian Duerr04/03/19 09:57:26 PMFix formatting issues1
225205/19/18 12:04:47 AMJames CamposBlack screen when switching from virtual consoleSwitch to virtual console (Ctrl+Alt+F1), switch back to X (Ctrl+Alt+F7), alacritty shows a black screen until its window is clicked. Using Void Linux, bspwm, alacritty 20170624.04/04/19 05:04:07 PMUpgrade to winapi 0.3.7"Bump to winapi 0.3.7.

Closes #1920 " =||= Closing as duplicate of #602.davidhewittDavid Hewitt04/03/19 10:00:15 PMUpgrade to winapi 0.3.71
225308/03/17 03:29:12 PMJake RahmeResolution does not change when switching monitors OSX"**OS**: OS X Sierra 10.12.5
**GPU**: Intel Iris Pro 1536 MB
**Macbook**: Retina, 15-inch Late 2013
**Macbook Resolution**: 1440 x 900
**External Monitor Resolution**: Both at a resolution of 2560 x 1440
**External Monitor Connections**: Display Port / Thunderbolt 2 and HDMI (issue persists over both)

When switching between my external monitors and my mac monitor, the rendering of the Alactritty console does not scale the text resolution.

When Alacritty was started on the external monitor
<img width=""1174"" alt=""screen shot 2017-08-03 at 9 40 42 am"" src=""https://user-images.githubusercontent.com/10501790/28924780-da8a3c40-7830-11e7-8752-2cdcefba68c4.png"">

When Alacritty was moved to the mac monitor
<img width=""1174"" alt=""screen shot 2017-08-03 at 9 41 14 am"" src=""https://user-images.githubusercontent.com/10501790/28924773-d178b9c4-7830-11e7-8376-84768aee07f8.png"">

With the opposite effect happening when Alacritty is started on the mac monitor and moved to the external monitor. The rendering will be fine on the mac, but when moved to the external monitors the resolution does not upscale, and text appears giant. "04/04/19 11:11:30 PMFix build errors on BSD"This updates winit and glutin to the latest git versions instead of
relying on releases to fix a build failure on BSD.

Unfortunately the upstream version bumps might still take a bit and
there hasn't been any feedback with regards to a planned release date.

This also fixes a slight issue on Windows where selections would start
when focusing a window and a build failure with some Linux systems

Fixes #2243.
Fixes #2170.
Fixes #2244."1@tmiller Looks like you're right, I'll close this and defer to the already opened ticket. I guess I wasn't thorough enough in my search. chrisduerrChristian Duerr04/04/19 08:41:55 PMFix build errors1
225505/05/18 03:24:00 PMNeo_ChenDouble Font Width when using Bitmap Font contain CJK Wide Character"Alacritty's font render has the problem above

Distro: Arch Linux
Alacritty Version: 0.1.0.555.g4c4c2f5-1

![2017-08-04- fri _1501835079_scrot](https://user-images.githubusercontent.com/25676597/28966390-853611d8-7948-11e7-9050-d4bc245332f1.png)
"04/04/19 08:57:19 PMFix snap desktop2We made some fixes to how font metrics are computed, and there's a good chance this should be resolved now.chrisduerrChristian Duerr04/04/19 08:49:54 PMChange .desktop path in snap1
225608/12/17 12:06:53 PMAlberto SilvaCursor flickering in Neovim"Hopefully this makes sense. But I've noticed the cursor flickers, especially when opening the completion menu, either for omni-complete or another completion plugin such as deoplete, youcompleteme, or nvim-completion-manager. 

Within tmux, it gets really bad, especially when entering visual line selection, the cursor visibly jumps to the end of the line, before returning to it's initial position when the visual line selection was invoked via hotkey.

These observations are constant:
- In Alacritty, In Neovim, no Tmux, there is minimal flicker.
- In Alacritty, In Neovim, in Tmux, much flickering, very noticeable.
- In iTerm, In Neovim, no flickering at all using tmux or not.

Is anyone else experiencing this?"04/04/19 11:05:50 PMDisable automatic graphics switching"Temporarily disabled automatic graphics switching due to a bug in macOS
which leads to crashing.

See #2221." =||= Ah, word. Thanks for the link, closing!chrisduerrChristian Duerr04/04/19 11:01:14 PM"Disable automatic graphics switching

Temporarily disabled automatic graphics switching due to a bug in macOS
which leads to crashing.

See #2221."1
226105/18/18 11:37:50 PMVincent FoleyImplement visual distinction between an active terminal and an inactive one"Some terminals such as urxvt allow the user to know which terminal is active and which ones are inactive simply by looking at them.  By default, the cursor of an inactive terminal is hollow, and it is possible to configure the terminal to be of a different color/shade when inactive.  The screenshot below shows this distinction.

Is this something that other people would be interested in?  Would it be in line with the alacritty goals?

![2017-08-04-142647_156x128_scrot](https://user-images.githubusercontent.com/39868/28981746-03d7efc0-7921-11e7-8807-bfb17a23ce07.png)"04/21/19 10:44:10 PMImprove errors for missing shell file on Windows "Currently with WinPTY there is no error at all if the shell does not
exist and on ConPTY the error is cryptic 'assertion failed: success'.

This changes the ConPTY assertion to a human-readable error which
clearly states that the file could not be found.

Currently the WinPTY backend has not been fixed yet.

This fixes #2016."1"I've actually implemented this feature a bit ago! Should work out of the box on the latest master!

Blinking is not implemented yet, however there's a different issue for tracking that (#302)."chrisduerrChristian Duerr04/21/19 06:00:23 PMFix rustfmt issues1
226205/18/18 11:35:21 PMcnmadetmux mouse select windows does not support by alacritty"The default shell(without using tmux) can use mice to select area, then press CTRL+SHIFT+c to copy content.

But inside tmux window. even if we open mouse window select.

The alacritty does not respect the mouse behavior.

====================
I also using terminator, it can support mouse select, and copy/past with mouse(by the menu context)

hope alacritty support the tmux mouse select mode

=====================


I am using archlinux + KDE plasma"04/06/19 08:36:50 PMConsistent treatment of numeric types"Don't mix floats and integers.

As mentioned in https://github.com/jwilm/alacritty/issues/2016#issuecomment-480379478."6The behavior mentioned here does work on the latest master.dimblebyDavid Hotham04/06/19 04:59:20 PM"Consistent treatment of numeric types

Don't mix floats and integers."1
226303/13/18 06:21:20 AMSeongChan LeeEmacs scrolls up by itself on mouse click or drag"Emacs scrolls up by itself when navigating cursor with mouse click or drag.
You might reproduce immediately on bare emacs (25 or 26)  by 
```sh
emacs -nw --no-init-file --no-loadup --eval '(xterm-mouse-mode t)' some-long-file
```
Vim doesn't with ```set mouse=a```, and Emacs with same flag on gnome-terminal, guake, xterm doesn't.

I built Alacritty using rustc 1.21.0-nightly (1d2a6df38 2017-08-03), Ubuntu 17.04."04/07/19 02:42:10 AMAdd new icon to macOS binary"This adds the new Alacritty icon to the macOS binary available in the
github releases. On sizes 128x128 and up the image with scanlines is
included.

The ci deployment process should now also offer the svg file for
download so the .desktop file can be used without having to look through
the repos for the icon." =||= "The #1141 PR fixes the SGR issues, adds modifiers and reports middle/right mouse button. Can anyone reproduce this issue with this PR or does it fix it?

Also I didn't see that @Celti already fixed this in #1057, I'll compare the two PRs and maybe we can put them together."chrisduerrChristian Duerr04/07/19 02:36:48 AM"Add new icon to macOS binary

This adds the new Alacritty icon to the macOS binary available in the
github releases. On sizes 128x128 and up the image with scanlines is
included.

The ci deployment process should now also offer the svg file for
download so the .desktop file can be used without having to look through
the repos for the icon."1
226503/29/18 01:34:54 PMChristian RebischkeUTF-8 Support"Hello,
UTF-8 Support seems to be a problem. The terminal is absolutly incompatible with projects like: https://github.com/bhilburn/powerlevel9k"04/08/19 07:14:52 PMBump version to 0.3.0"This is currently waiting on a glutin version bump.

Fixes https://github.com/jwilm/alacritty/issues/2243.
Fixes https://github.com/jwilm/alacritty/issues/2260." =||= Should be fixed, other font configuration issues are probably covered by #957. Closing this for now unless the issue is still present.chrisduerrChristian Duerr04/08/19 08:43:28 AMSwitch to glutin 0.21-rc11
226912/05/17 10:59:25 PMMarais RossouwMouse cursor permanent loading cursor."**The bug:**
I start alacritty, run a command that takes 30~ seconds to complete. Whilst this is going, I start another alacritty window, and now my mouse cursor just seems to constantly load.

**Version:**
Alacritty: 702df40da4ea8585ddfa129cd240c54bab6e42d7
OS: Ubuntu 17
Cargo: cargo 0.20.0 (a60d185c8 2017-07-13)
Rust: rustc 1.19.0 (0ade33941 2017-07-17)
"04/08/19 10:19:23 PMReset scrolling region when receiving the RIS escape sequence (#2258)"Reset the scrolling region (aka top/bottom margins) when the RIS escape sequence is received. 

The change is in `mod.rs:reset_state()`. This function is **only** called when the RIS sequence is received.

This mostly fixes #2258. It also mentions `DECSTR` (soft reset). That escape sequence doesn't appear to be implemented **at all**. This PR makes no attempt to implement it." =||= Seems to have resolved itself.adnklChristian Duerr04/08/19 10:17:42 PMFix change log entry1
227008/08/17 01:55:05 PMJack O'Connorremove unused macrosThis silences a couple of compiler warnings in the build.04/08/19 10:37:22 PMRemove duplicate changelog entry =||= Removing them is great. Thanks!atouchetAlex Touchet04/08/19 10:23:37 PMRemove duplicate changelog entry1
227808/11/17 06:27:37 PMMagnus GroßMissing build dependency for Arch LinuxThe Arch Linux dependency line in the README.md is missing the cargo dependency. Since cargo is in the official repositories, simply adding `cargo` to the `pacman -S` line would fix this.04/09/19 07:29:47 PMSet maximum Rust version to 1.31.0"By setting the minimum Rust version and enforcing it with CI, Alacritty
should hopefully make it possible for maintainers to package the
application even on distributions which are not rolling release.

The 1.31.0 target has been chosen here because it's the first version of
the Rust 2018 release. Bumping this version in the future should be
considered to be a breaking change and should only be done with caution
and in consideration of the supported Rust versions of the major
distributions available.

This fixes #2277."5Once  dependency have changes, you need to change the dependency lists of multiple distributions such as `Ubuntu`, `Arch Linux`, `Fedora`, `openSUSE`, `Slackware`, `Void Linux`, `Solus`, `NixOS`/`Nixpkgs`.chrisduerrChristian Duerr04/09/19 07:28:18 PMAdd change log entry1
228608/10/17 03:53:10 PM石博文Translucent background supportWhether it plans to support translucent background？04/09/19 04:54:10 PMAdd 0.3.0 announcement blog to readme =||= Duplicate of #232chrisduerrChristian Duerr04/09/19 04:52:05 PMAdd 0.3.0 announcement blog to readme1
228808/11/17 03:29:57 PMJoe WilmFixes"* Resolves BCE issues affecting 24-bit vim color schemes
* Fixes some warnings
* Fix bug with alt screen toggle (now sets instead of toggles)"04/09/19 08:59:47 PMDocument distro support for precompiled binaries This fixes #2273. =||= Duplicate of #232chrisduerrChristian Duerr04/09/19 08:58:35 PM"Document distro support for precompiled binaries

This fixes #2273."1
228909/02/17 07:29:04 PMash leaTouchpad scrolling is jankyI don't know exactly what's going on, but when I scroll with the touchpad it requires me to scroll a lot before it will even register, and then it scrolls a ton at once.04/09/19 09:05:27 PMDocument VC++ redistributable requirementThis fixes #1972. =||= "@lheckemann not a new issue, but I don't think a lot of people were likely to encounter it. It requires running x11 on a laptop with a trackpad that generates fractional line deltas in an application that supports scrolling with someone who uses the mouse in terminal. Probably why is hasn't been reported until recently.

Love that you've put together a patch for it! I would be happy to provide feedback. Would you mind putting up a PR so we can use the GitHub review tool on it?"chrisduerrChristian Duerr04/09/19 09:04:00 PM"Document VC++ redistributable requirement

This fixes #1972."1
229008/11/17 06:27:38 PMMaxim BazAdd rust to the list of Arch Linux dependenciesFixes #71804/09/19 09:11:55 PMDocument EGL driver dependency on WaylandThis fixes #1497. =||= Thanks for sending the PR for this issue! Very helpful :DchrisduerrChristian Duerr04/09/19 09:10:04 PM"Document EGL driver dependency on Wayland

This fixes #1497."1
229108/12/17 07:49:58 PMMaxim BazMove rust dependency to the Prerequisites sectionBetter fix for #718.04/09/19 09:17:23 PMDocument URL launcher parameter optionsThis fixes #2112. =||= Thanks!chrisduerrChristian Duerr04/09/19 09:14:40 PM"Document URL launcher parameter options

This fixes #2112."1
229209/02/17 07:29:04 PMLinus HeckemannTouchpad scroll fix (do not merge!)This is an RFC PR to fix #721, my first attempt at modifying a Rust application that people use and my first foray into Alacritty's code. As such there are a few issues with how it's implemented — I'm not happy with how the scrolling state is duplicated across `event::Processor` and `input::ActionContext` (although this might be appropriate?), the names I've used are terrible and I've added a dumb implementation of the state function to what is as far as I can tell a stub implementation of `ActionContext` for testing purposes. I'd love to get some feedback on where this stuff should go and what it should look like!04/10/19 12:04:25 AMFix Alacritty icon backgroundThis fixes #2285. =||= Thanks @lheckemann!chrisduerrChristian Duerr04/09/19 11:46:31 PM"Fix Alacritty icon background

This fixes #2285."1
229310/20/17 02:59:29 PMNone[Feature request] Support for F-keys (Function Keys) support"I was trying out byobu with alacritty but the Shortcuts(Keybindings) containing Functions keys dont work. e.g. Shift+F1

EDITED: the f keys dont work only when combined with Shift"04/11/19 08:41:21 AMFix macos subprocess execution"This fixes the execution of subprocesses on macOS which could sometimes
prevent actions like `SpawnNewProcess` or custom commands from launching
their processes correctly.

This fixes #2259."8Thanks @lheckemann!chrisduerrChristian Duerr04/11/19 07:53:29 AMReport fork and setsid errors1
229501/04/19 05:16:15 PMJack O'Connorcan we blank out WAYLAND_DISPLAY by default?As described in the README, we need `WAYLAND_DISPLAY=` to run Alacritty on Wayland desktops like Gnome Shell. Would it be possible to have Alacritty itself set that variable, so that it worked by default, at least until the Glutin fork gets the updates it needs?04/10/19 06:11:21 PMUse HTTPS =||= Wayland support has improved significantly. Even though it's not perfect yet, I don't think this would be beneficial for most users, especially because it'll only get better in the future.atouchetAlex Touchet04/10/19 04:49:01 PMUse HTTPS1
229608/14/17 11:48:51 PMRonan JouchetFails to build `font` with std/fontconfig error under Arch / rustc 1.19"Since a few days (maybe this started last week, somewhere around August 7), Alacritty fails to build.

See the compiler error below, and here is the [full stdout+stderr](https://github.com/jwilm/alacritty/files/1223703/alacrittyBuildFailArchFontconfig.txt). I followed the README installation instructions (am using package `rust`, and the listed dependencies `cmake freetype2 fontconfig pkg-config make xclip`). rustc 1.19.0, cargo 0.20.0.

```bash
error[E0460]: found possibly newer version of crate `std` which `fontconfig` depends on
  --> font/src/lib.rs:21:1
   |
21 | extern crate fontconfig;
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: perhaps that crate needs to be recompiled?
   = note: crate `std` path #1: /usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-e22d8ea13fc64833.rlib
   = note: crate `std` path #2: /usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-e22d8ea13fc64833.so
   = note: crate `fontconfig` path #1: /opt/alacritty/target/release/deps/libfontconfig-a7a099d606d4157d.rlib

error: aborting due to previous error(s)

error: Could not compile `font`.
```"04/10/19 06:29:54 PMAdd Pop!_OS to the list of supported Linux OSs4"> *try doing a clean build `cargo clean && cargo build --release`*

@jwilm worked! Thanks! Today I learned `cargo clean`! One more exclamation mark!"mmstickMichael Murphy04/10/19 06:06:58 PMAdd Pop!_OS to the list of supported Linux OSs1
229809/19/17 06:50:12 PMBearcat M. Şándorfeature request: text shadows"Years ago when using Enlightenment, i fell in love with the slight drop shadows on text in eterm (and perhaps now in terminology).

Would it be a feasible feature request to be able to add drop shadows to text in alacritty, perhaps through css? "01/15/20 08:19:02 PMAdd support for running commands on BEL"Adds a new configuration option under `visual_bell` called
`bell_command` that reuses the command formatting of the keybindings.

This allows for things like playing a notification sound.
See https://github.com/jwilm/alacritty/issues/1528#issuecomment-425691029

Closes #1528 "6This sort of feature is outside the scope of Alacritty.robertgzrRobert Günzler06/20/19 02:27:08 PMbell command v21
229912/17/18 04:08:57 PMAndreas KlöcknerStrips blank lines on copy from terminalIf I mouse-copy (i.e. select and press Shift-Ctrl-C) some text containing blank lines, then these blank lines do not make it into the copied text. They're significant in some cases (such as diffs), so this is not ideal.04/11/19 07:54:27 AMremove redundant closures and imports =||= This has been resolved on the latest master.matthiaskrgrMatthias Krüger04/11/19 07:09:44 AMremove redundant closures and imports1
230508/16/17 03:17:33 PMDeleted userAlacritty stopped working / does not start anymore"Hello all

I was trying to change the icon of Alacritty to the [official bash logo](https://github.com/odb/official-bash-logo) and when I wanted to start Alacritty, nothing happens. When I try to start it from Gnome Terminal i get this message:

`thread 'main' panicked at 'XOpenIM failed', /home/n0_ah/.cargo/git/checkouts/winit-5993d63686bf7f83/cc89d56/src/platform/linux/x11/mod.rs:680
note: Run with `RUST_BACKTRACE=1` for a backtrace.`

I reversed anything I've done for the icon and also build Alacritty from source without any luck.

I'm runing Ubuntu Gnome 17.04 and using the current version.
I'm sure it is something simple and easy to fix, but im to stupid to find anything...

Thank you in advance and thanks for such a great app! (it realy sucks to be back on Gnome Terminal...)"04/17/19 10:42:28 PMCall TIOCSWINSZ only on grid change"Instead of calling TIOCSWINSZ for every pixel change it will now be called only on changes to the grid size. This should reduce screen refreshes.

This is my first pull-request for this project and first time really working with Rust. I'm open to improvements and hope that my code will be at least a bit useful.

This fixes #2177 " =||= Also running into this in elementary OS 0.4.1 (based off Ubuntu 16.04.2 LTS) with i3. Starting the IBus daemon seems to also solve the issue. Maybe this should be added to the FAQ, or even better get a more descriptive error message (if possible)?ekarbeChristian Duerr04/17/19 09:46:53 PMFix style issues1
230701/07/18 09:11:49 PMRonan JouchetInvoking Paste/PasteSelection commands in editor (vim, nano) mangles pasted text with existing text"A screencast comparing gnome-terminal (left) to alacritty (right) will do better than words:

![alacritty-paste-in-editor-inserts](https://user-images.githubusercontent.com/522085/29365327-90b114c0-8264-11e7-9948-abfe3bc64387.gif)

The key_binding I invoked is visible on the screencast, it is:

```
- { key: V,        mods: Control|Shift,    action: Paste               }
```
... and I tried `PasteSelection`, with the same results. Am I doing something wrong or is it a bug?

This is alacritty master @ 4e9b1c590e8b0990f5f43fa9d7c53a31a92840a8 vs. gnome-terminal 3.18.3, no tmux, under Ubuntu 16.04.3 LTS."04/14/19 03:37:59 PMFix duplicate resize events"If a resize event is identical to the current size, it is no longer
propagated but the resize is discarded immediately.

Fixes #1825.
Fixes #204." =||= "Apparently, non-bracketed pasting *is* the issue here.

When the ""enter"" key is hit, a `CR` (`^M`) is generated (see http://invisible-island.net/xterm/ctlseqs/ctlseqs.html).

In non-bracketed mode, `LF`s (`^J`) in pasted data have to be replaced with `CR`s in order to simulate keypresses.

In non-bracketed mode, applications have no way of distinguishing if data comes from the keyboard or the clipboard, so it seems sensible that a terminal must simulate keypresses.

To me it is not 100% clear to what extent a terminal is supposed to do that (ie: whether octets corresponding to other control characters or maybe to bytes with the high bit set should be processed). Maybe data bytes should be interleaved with `^V`s? Or maybe bracketed mode is how pasting is supposed to work and applications that don't use it are at fault?

Anyhow, replacing `\r` with `\n` seems an improvement and it is what [jediterm](https://github.com/JetBrains/jediterm) does.
"chrisduerrChristian Duerr04/13/19 07:01:51 PMFix rusttype clippy error1
230807/18/18 12:48:38 PMJônatas Hashimoto (Jojo)Karabiner terminal condition remap does not include allacritty"I have remapped `L-cmd` as `ctrl` using karabiner for terminal only.

![My Karabiner config](https://image.ibb.co/bVBxKv/karabiner.png)

It does work on [iTerm2](https://www.iterm2.com)  and [Hyper](https://hyper.is/) but does not in alacritty. 

Is there a way to set alacritty as a terminal app type in OSX, so karabiner can apply a conditional remap?
"04/23/19 07:05:48 PMfeat: add proper fullscreen support"This adds fullscreen support to Alacritty.
It also adds a ""simple"" fullscreen support (the highly requested feature for macOS where the fullscreened window doesn't occupy its own space).

Added platform keybindings:

* macOS: <kbd>ctrl</kbd> + <kbd>cmd</kbd> + <kbd>F</kbd> (native fullscreen)
* windows: <kbd>Alt</kbd> + <kbd>Enter</kbd>

Added actions (can be used to create your own keybindings):

* `ToggleFullscreen`:
    * this toggles the native fullscreen on each platform
* `ToggleSimpleFullscreen`:
    * _on macOS_, this toggles the nice ""simple"" fullscreen (no space required)
    * _non macOS_, this is just an alias for `ToggleFullscreen`. The rationale for this choice is so that the one `alacritty.yml` config file is still compatible cross-platform.

I've manually tested this on the following:

* macOS (mojave)
* Windows 10
* Linux (X11)

---

Fixes #34.
Fixes #2012.
This is different to #2157 (that one is for _starting_ in fullscreen mode)."8"> You still need to add bellow in your own configuration.
> 
> ```
> ""bundle_identifiers"": [
>                                         ""^com\\.apple\\.Terminal$"",
>                                         ""^io\\.Alacritty$"",
>                                     ],
> ```

One minor thing, the A isn't capitalized i.e it is `^io\\.alacritty$`
"acheronfailChristian Duerr04/23/19 05:42:54 PMFix rebase change log regression1
231103/29/18 01:40:08 PMGiovanni LanzaniBeam, Underline cursor not working"Hi there, I've commented on #608 but I guess here it's more appropriate. 

I'm using Alacritty 492d1bd and I don't see the cursor changing when using Neovim. When using iTerm or Terminal.app I do see that, I that *should* rule out issues with my copy of Neovim.

Is there anything I can do to help test/diagnose this?"05/02/19 09:35:09 PMRemove live shader reload feature"This removes the live-shader-reload feature to make the renderer
significantly more concise and maintainable.

As far as I'm aware, this feature was never really used by anyone since
there isn't much of an advantage to recompiling Alacritty yourself just
to make live shader reload work.

This feature has also been broken for a long time, since the projection
is updated after the reload without considering the padding. Editing
with standard editors like vim also deletes the file and replaces it,
making it impossible to use them for live shader reload.

Closes #1523.

This is mostly a proposal at this point, since there is no *need* to remove
live shader reload at this point. However I currently do not see much
advantage in keeping this code around.

If anyone is actually using Alacritty with live shader reload enabled,
please let me know. I believe @towc is the only person to ever create
a live shader reload related issue. Do you still care about this?"7I'm the original reporter of lionheart/openradar-mirror#15500. For [fish](https://github.com/fish-shell/fish-shell), I ended up just using [hard-coded escapes for dim and italics](https://github.com/fish-shell/fish-shell/commit/635e714bb40507ae041dd6da3bea501943a64d2d#diff-4ac27b696a84d0633805d592436a76fa) if we're running on a Mac 😢. I'd encourage anybody that's had a hard time due to ancient terminfo on macOS to [report the issue to Apple](http://bugreport.apple.com). My issue has been open for years now, but they keep track of the number of duplicates in order to figure out what the squeaky wheels are. Maybe 10.15 can deliver a ncurses that isn't 10 years old.chrisduerrChristian Duerr04/13/19 12:12:51 PM"Remove live-config-reload feature

This removes the live-config-reload feature to make the renderer
significantly more concise and maintainable.

As far as I'm aware, this feature was never really used by anyone since
there isn't much of an advantage to recompiling Alacritty yourself just
to make live config reload work.

This feature has also been broken for a long time, since the projection
is updated after the reload without considering the padding. Editing
with standard editors like vim also deletes the file and replaces it,
making it impossible to use them for live config reload.

Closes #1523."1
231208/17/17 04:41:18 PMHitesh PaulSupport for vi-like mode(Insert, Selection)"For users those who prefer window managers(and command line) in general, tend to use their keyboard for all purposes. 

I like alacritty but I miss a feature from [termite](https://github.com/thestinger/termite) such as selection mode, which enables me to select text in the terminal with just the help of keyboard(just to mention, it is lot more efficient than using the mouse and selecting terminal output text!). 

Are there any plans on implementing such feature? "04/28/19 01:24:59 PMSplit alacritty main into a separate crate"Spiritual successor of #1023. The eventual goal is to have alacritty-core not depend on glutin or winit.

@chrisduerr Would you be willing to merge this in the current state? I'd prefer to avoid what happened with the last attempt, where the final goal was so far off that it was never merged and eventually it got impossible to rebase."18"@wayneashleyberry yes, zsh also has a vi-mode(oh-my-zsh) plugin. But that is limited to the current line in prompt. You cannot navigate/interact with the previous outputs. In such scenario, its either the terminal or some program like tmux/screen which will help.

@bearcatsandor Never gave a try to neovim. Will try sometimes soon!"tbodtChristian Duerr04/28/19 12:18:47 PMFix deployment1
232308/18/17 03:44:12 PMJorik KraaikampLine hieght issue"![screenshot from 2017-08-18 11-10-25](https://user-images.githubusercontent.com/390575/29452303-20862868-8406-11e7-99a6-1fa5efd2be84.png)

It is really fast. The only downside is that the line height is not that good. I also tried using bash but that did not work.

I am on Ubuntu 17.04.
I just finished installing using the README. "04/19/19 06:00:25 PMFix cursor dimensions with font offset"Previously cursor dimensions were not calculated correctly when a font
offset was specified, since the font offset was completely ignored.

This has been fixed by moving all the cursor logic from the font into
the Alacritty crate, applying the config's offsets before rasterizing
the cursors.

This has also fixed an issue with some cursors not being rendered as
double-width correctly when over double-width glyphs.

This fixes #2209." =||= Thanks that works.chrisduerrChristian Duerr04/19/19 12:26:54 PMFix clippy and bench build errors1
232808/20/17 05:06:25 PMJared Quickrebased mystal:transparency with master"This is a rebase of mystal transparency work here:
https://github.com/jwilm/alacritty/pull/331

Mystal seems to be busy with other work so I decided to go ahead and rebase this with the current code accordingly.

This code has been tested accordingly on a fresh master on osx 10.12.6 and seems to be working as expected."04/19/19 12:07:57 PMFix update_lines performance issues"This resolves performance issues with the `update_lines` method that
were caused by excessive updates without underlines or strikeout
present.

This also resolves a bug that was causing the underline and strikeout to
extend beyond the end of line in some rare cases.

This fixes #114." =||= Original author followed up and we ended up landing #331. Thanks for getting the ball rolling, though! chrisduerrChristian Duerr04/19/19 11:16:40 AMFix rustfmt issues1
232901/19/20 03:48:20 PMLIU WeiOpinions on live font realoding?"Currently changing fonts requires restarting Alacritty.

Any opinion on the usefulness of live font reloading?

I personally find it useful. If people like that idea I might be able to find some time to do it. (Though currently I have no idea how hard or easy it is going to be)"11/18/19 09:15:26 PMScroll visible region into history on `CSI 2 J`."Upon pressing <kbd>ctrl-L</kbd> in many terminal applications (including most shells) the ANSI escape command `CSI 2 J` is triggered to clear the entire screen. There are various implementations of this in the wild, however we've decided the best course of action should be to retain all output by scrolling the visible region up each time. This ensures you never lose anything on the screen with `CSI 2 J`. Then to clear the history another escape, `CSI 3 J` can be used, as `clear` does.

### TODO
- [x] `clear` no longer clearing all history, last page preserved (might need to be config?)
- [x] `clear` causes a full page of scrollback history each time (most other terminals also do strange things)
- [x] Scrolling regions (`printf ""\e[1;5r"" `)
- [x] Broken ref tests

fixes #2199"15Live font reload is possible with alacritty nowadays.nixpulvisChristian Duerr11/18/19 09:10:23 PMAdd change log entry1
233109/03/17 02:35:58 PMLIU Wei5009566ea broken on Debian Stretch "Got the following when running 5009566ea.

Something is wrong with winit.

```
thread 'main' panicked at 'XOpenIM failed', /local/home/wei/.cargo/git/checkouts/winit-5993d63686bf7f83/200ef9c/src/platform/linux/x11/mod.rs:692
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /checkout/src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:355
   3: std::panicking::default_hook
             at /checkout/src/libstd/panicking.rs:371
   4: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:549
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:511
   6: winit::platform::platform::x11::Window2::new
             at /local/home/wei/.cargo/git/checkouts/winit-5993d63686bf7f83/200ef9c/src/platform/linux/x11/mod.rs:692
   7: winit::platform::platform::Window2::new
             at /local/home/wei/.cargo/git/checkouts/winit-5993d63686bf7f83/200ef9c/src/platform/linux/mod.rs:181
   8: winit::window::<impl winit::WindowBuilder>::build
             at /local/home/wei/.cargo/git/checkouts/winit-5993d63686bf7f83/200ef9c/src/window.rs:113
   9: glutin::platform::platform::x11::Context::new
             at /local/home/wei/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/x11.rs:213
  10: glutin::platform::platform::Context::new
             at /local/home/wei/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/mod.rs:52
  11: glutin::GlWindow::new
             at /local/home/wei/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/lib.rs:322
  12: alacritty::window::Window::new
             at src/window.rs:193
  13: alacritty::display::Display::new
             at src/display.rs:141
  14: alacritty::run
             at src/main.rs:92
  15: alacritty::main
             at src/main.rs:45
  16: __rust_maybe_catch_panic
             at /checkout/src/libpanic_unwind/lib.rs:98
  17: std::rt::lang_start
             at /checkout/src/libstd/panicking.rs:433
             at /checkout/src/libstd/panic.rs:361
             at /checkout/src/libstd/rt.rs:59
  18: main
  19: __libc_start_main
  20: _start
```"04/19/19 01:34:39 PMCall on_resize() if font changesFixes https://github.com/jwilm/alacritty/issues/2327  =||= @addobandre That's just a workaround. I now know why it failed -- it is actually an issue in winit, which insists IM to be valid or panic otherwise. I will ask winit developers for opinion. I think their current setting is too strict.nicolashahnNicolas Hahn04/19/19 12:23:18 PMmove prev_cols/lines to top of method, do not use font_changed1
233511/12/17 03:11:22 AMAlice Ryhlunhandled osc_dispatch caused by base16 color-scheme"The base16-ocean.dark color scheme causes the following message to be printed by alacritty.

    [unhandled osc_dispatch]: [['1','2',],['r','g','b',':','c','0','/','c','5','/','c','e',],] at line 801
"04/19/19 08:56:12 PMFix cursor dimension style issuesThis is a follow-up to https://github.com/jwilm/alacritty/pull/2323 which I merged too soon accidentally. =||= "Hmm, there's a number of OSCs for setting colors we don't yet support. Docs: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Operating-System-Commands

The message you're seeing is for ""Change text cursor color"" which we should be able to support pretty easily."chrisduerrChristian Duerr04/19/19 07:43:34 PMFix build failure with 1.31.01
233601/19/20 04:23:21 PMElliott SlaughterBuild on RHEL 6"Does alacritty depend on a specific version of freetype? I seem to have it installed, but cannot seem to build on RHEL 6. I followed the instructions for Fedora, as below:

```
$ sudo yum install freetype-devel
Loaded plugins: refresh-packagekit, security
Setting up Install Process
Package freetype-devel-2.3.11-17.el6.x86_64 already installed and latest version
Nothing to do
```

Build error (using newest version of alacritty from git):

```
error: linking with `cc` failed: exit code: 1
  |
  = note: ""cc"" ""-Wl,--as-needed"" ""-Wl,-z,noexecstack"" ""-m64"" ""-L"" ""/home/eslaught/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib"" ""/scratch/eslaught/software/alacritty/target/release/deps/alacritty-1e299362c85560ad.0.o"" ""-o"" ""/scratch/eslaught/software/alacritty/target/release/deps/alacritty-1e299362c85560ad"" ""-Wl,--gc-sections"" ""-pie"" ""-Wl,-O1"" ""-nodefaultlibs"" ""-L"" ""/scratch/eslaught/software/alacritty/target/release/deps"" ""-L"" ""/usr/lib64"" ""-L"" ""/usr/lib64"" ""-L"" ""/scratch/eslaught/software/alacritty/target/release/build/servo-fontconfig-sys-104a48ec5df5232a/out"" ""-L"" ""/scratch/eslaught/software/alacritty/target/release/build/expat-sys-f3827039f72451e1/out/lib"" ""-L"" ""/home/eslaught/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib"" ""-Wl,-Bstatic"" ""/tmp/rustc.ag8848wK22hy/libfontconfig_sys-5ae2126b01e9f383.rlib"" ""/tmp/rustc.ag8848wK22hy/libexpat_sys-89978cf1fbc44bab.rlib"" ""/tmp/rustc.ag8848wK22hy/libstd-35ad9950c7e5074b.rlib"" ""/tmp/rustc.ag8848wK22hy/liballoc_jemalloc-28913dc5a1e63cd7.rlib"" ""/tmp/rustc.ag8848wK22hy/libcompiler_builtins-863b57a66ba6c3e1.rlib"" ""-Wl,-Bdynamic"" ""-l"" ""freetype"" ""-l"" ""dl"" ""-l"" ""dl"" ""-l"" ""util"" ""-l"" ""dl"" ""-l"" ""rt"" ""-l"" ""pthread"" ""-l"" ""gcc_s"" ""-l"" ""pthread"" ""-l"" ""c"" ""-l"" ""m"" ""-l"" ""rt"" ""-l"" ""pthread"" ""-l"" ""util""
  = note: /scratch/eslaught/software/alacritty/target/release/deps/alacritty-1e299362c85560ad.0.o: In function `freetype::library::Library::new_face::h05fb961dd66f1225':
          /home/eslaught/.cargo/registry/src/github.com-1ecc6299db9ec823/freetype-rs-0.13.0/src/face.rs:68: undefined reference to `FT_Reference_Library'
          /scratch/eslaught/software/alacritty/target/release/deps/alacritty-1e299362c85560ad.0.o: In function `font::ft::FreeTypeRasterizer::get_rendered_glyph::h6a8808c44fd7c227':
          /home/eslaught/.cargo/registry/src/github.com-1ecc6299db9ec823/freetype-rs-0.13.0/src/face.rs:51: undefined reference to `FT_Reference_Library'
          /home/eslaught/.cargo/registry/src/github.com-1ecc6299db9ec823/freetype-rs-0.13.0/src/face.rs:57: undefined reference to `FT_Reference_Face'
          /home/eslaught/.cargo/registry/src/github.com-1ecc6299db9ec823/freetype-rs-0.13.0/src/face.rs:68: undefined reference to `FT_Reference_Library'
          collect2: error: ld returned 1 exit status
```

Rust version:

```
$ rustup show
Default host: x86_64-unknown-linux-gnu

stable-x86_64-unknown-linux-gnu (default)
rustc 1.19.0 (0ade33941 2017-07-17)
```

Any suggestions? Thanks in advance."04/19/19 06:52:28 PMUpdate glutinThis was updated in Cargo.lock in #2328 but not in Cargo.toml.1The issue is very old and I don't see any problem with building on fedora at least. So if you still have some problems with building let us know.atouchetAlex Touchet04/19/19 06:35:08 PMUpdate glutin1
233908/22/17 06:24:34 PMKrzysztof Warzechadifferences with rendering between xterm and alacritty / screen corruption with tmux + vim"Hello,

I'm getting some kind of a screen corruption when using tmux with vim under alacritty. The same does happen with terminology terminal, but doesn't happen with xterm / urxvt / vte-based terminals.

The corruption looks like this:

![2017-08-21-230625_774x445_scrot](https://user-images.githubusercontent.com/1618371/29566757-3208da02-874b-11e7-88db-8dd7b9b852c3.png)

Few days ago I've opened issue with tmux project (tmux/tmux#1040) and tmux author has been very helpful in getting to the bottom of it. It is possible that there is an issue with alacritty's handling of ""scroll regions"" / ""change_scroll_region"" capability. Tmux author has come up with the test case that allows to reproduce the issue under alacritty, without tmux:

[xtest.txt](https://github.com/jwilm/alacritty/files/1242071/xtest.txt)

To execute it:

    clear; cat xtest.txt; sleep 100

Results under xterm:

![2017-08-22-150134_611x443_scrot](https://user-images.githubusercontent.com/1618371/29566735-23fa2e52-874b-11e7-8c39-a45f818dd7fb.png)

Results under alacirtty:

![2017-08-22-150131_777x533_scrot](https://user-images.githubusercontent.com/1618371/29566743-2814026a-874b-11e7-8ea1-ecc17fc7fe2f.png)

This may be related to #678. There is also tmux issue tmux/tmux#1040. I'll be happy to provide additional details.

I'm running alacritty version 471237d2ced1d1a07de06d832b2902efbc237df9 (`alacritty --versions` says 0.1.0) with mostly default configuration (I've changed only color scheme and shell) under linux. "04/20/19 10:47:06 PMFix cursor colors"This fixes a recent regression in
cfc20d4f34dca535654cc32df18e785296af4cc5 which broke cursor colors when
specified in the `colors.cursor` field in the config.

It also removes a lot of unneeded code from the font crate related to
the cursor rendering."1I just did. Alacritty built from fix-745 branch renders both tmux + vim and the test case correctly. Thank you very much!chrisduerrChristian Duerr04/20/19 02:22:33 PMRun rustfmt1
234108/22/17 07:24:00 PMNoneHome / End keys do not work in Neovim"Home and End keys currently do not work (by default) when used in Neovim.

The following change in alacritty.yml fixes the problem.
Before:
```
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[1~"",  mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[4~"",  mode: ~AppCursor  }
```
After:
```
  - { key: Home,                    chars: ""\x1bOH""                      }
  - { key: End,                     chars: ""\x1bOF""                      }
```"04/21/19 12:52:07 AMFix selection copying on Windows"The `copypasta` crate incorrectly mapped the secondary clipboard on
Windows to the primary clipboard, leading to the primary clipboard
getting overwritten whenever the selection clipboard was updated.

The new Windows clipboard mimics the macOS clipboard, which also does
not have a selection clipboard.

This fixes #2050." =||= Thanks for testing.chrisduerrChristian Duerr04/20/19 10:50:03 PMFix documentation1
234308/22/17 06:24:34 PMJoe WilmFix newline + scroll region bug"When a scroll region is active with the cursor below the bottom of the
region, newlines should not cause the region to scroll.

A ref test was added for this situation to prevent regressions.

Thanks @hiciu for reporting and @nicm for the test case.

Resolves #745."04/22/19 12:20:43 AMFix hidden cursor inverting cell colors"Since the block cursor inverts the background and foreground colors of a
cell, the hidden cursor has done the same thing without rendering a
cursor since it was using the block cursor shape.

A new `Hidden` cursor style has been introduced for explicitly handling
the invisible cursor differently.

This fixes #2342." =||= Thanks for testing.chrisduerrChristian Duerr04/21/19 10:38:59 PM"Fix hidden cursor inverting cell colors

Since the block cursor inverts the background and foreground colors of a
cell, the hidden cursor has done the same thing without rendering a
cursor since it was using the block cursor shape.

A new `Hidden` cursor style has been introduced for explicitly handling
the invisible cursor differently.

This fixes #2342."1
234605/15/18 08:56:21 PMAlexey KotlyarovmacOS: cannot switch input source, cannot use Pinyin"On macOS 10.12.6, with several input sources (System - Preferences - Input Sources) installed:

* Switching input sources using Ctrl-Cmd-Space doesn't work with Alacritty window focused.
* If I switch to a Russian input source _outside_ Alacritty, I can enter Russian characters inside Alacritty (good).
* If I switch to a Pinyin input source outside Alacritty, it gets ignored inside Alacritty (English characters appear unmodified instead).

Related: #44, possibly #209 and #61."04/22/19 04:04:58 PMBump version to 0.3.1 =||= "I thought it works through XIM too, that's why I was curious. I've tested it on your branch but no cigar.

There's an issue for this too: https://github.com/jwilm/alacritty/issues/866"chrisduerrChristian Duerr04/22/19 03:02:02 PMBump version to 0.3.11
234808/29/17 03:54:19 PMRussell DaviesChange color scheme on the fly"I like to switch between a light and dark color profile depending on the time of day. In my config file I have defined the different color schemes and then select which one I desire in the `colors` key like so:
```yaml
color_schemes:
  light: &light
    primary:
      ...
    cursor:
      ...
    ...
  dark: &dark
    ...  

colors: *dark
```
When I want to change the color scheme I just run a shell function which, using sed, replaces the `colors` key with whatever I specify, e.g. `terminal-scheme light`. As the config file is watched, any changes to it are reread and loaded. So this worked well until PR #662 was merged as new config values do not overwrite existing values when reloading.

So what is the best way now to switch between color schemes? Defining the color profiles as escape color codes seems a bit tedious. "04/22/19 07:50:08 PMfix conpty checkThis caused a panic on startup in Windows. It happens in the 0.3.1 release.2I think this is a bug: if a color is not overridden with an escape code, it should have value from the config.PizzabellyAndrew Opalach04/22/19 06:48:51 PMadd changelog entry1
234908/24/17 08:30:33 AMDavorin ŠegoSlow start on MacOS "This line takes several seconds to run. I'm on Sierra 10.12.6

https://github.com/jwilm/alacritty/blob/b92ba65f97ec484ac5df0c3b5b3d62667ca43f2a/assets/osx/Alacritty.app/Contents/MacOS/launcher#L7


<img width=""698"" alt=""screen shot 2017-08-24 at 9 24 12 am"" src=""https://user-images.githubusercontent.com/578557/29654575-09036c58-88ae-11e7-97ae-5e168b348398.png"">"04/25/19 04:51:46 PMShow same fg/bg text when inversed"If a cell has a matching foreground and background and is inversed
through the escape or selection, it will now fall back to the default
background on top of the default foreground.

This makes it possible to show invisible text like this by selecting it.

Hidden text is unaffected by this change.

This fixes #2315." =||= Not happening after restart.  Must be a MacOS issue.chrisduerrChristian Duerr04/22/19 06:16:38 PM"Show same fg/bg text when inversed

If a cell has a matching foreground and background and is inversed
through the escape or selection, it will now fall back to the default
background on top of the default foreground.

This makes it possible to show invisible text like this by selecting it.

Hidden text is unaffected by this change.

This fixes #2315."1
235010/09/17 03:10:05 PMBen BoeckelAlacritty closes without error if font loading failsMakes it hard to diagnose what's going on. I'm trying to use Terminus (usable from urxvt via `xft:Terminus` at least). Alacritty on the other hand just closes immediately after popping a window. `RUST_BACKTRACE` and `-vvv` don't output anything.04/22/19 10:19:56 PMBump version to 0.3.2This bumps the version to 0.3.2 to fix the ConPTY crash on Windows. =||= OK, I figured it out. Fontconfig/freetype is more picky now. I have to refer to the font as `xos4 Terminus`, not just `Terminus`. This also affected lots of other apps which have now also been fixed by using the full font name.chrisduerrChristian Duerr04/22/19 08:18:17 PMBump version to 0.3.21
235802/26/19 07:15:33 PME. BoppAlternative arrow keys and others not working with Neo layout"I use the non-standard [Neo keyboard layout](https://neo-layout.org/index_en.html), which has a bunch of different modifier layers, one of which contains bindings to the arrow keys, home, end etc. (It's layer 4 in the link.)

In Alacritty most of these keys do not do what they are supposed to do. For example, if I start a new terminal with `--print-events` and try to go back in history using the ""up"" key combination (Mod4 + L), these events are triggered by that action:

```
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(14))), event: Key(KeyboardInput { scancode: 94, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(44040195))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 94, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(14))), event: Key(KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: Some(L), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(44040195))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: Some(L), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(14))), event: Key(KeyboardInput { scancode: 26, state: Released, virtual_keycode: Some(L), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(44040195))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Released, virtual_keycode: Some(L), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(14))), event: Key(KeyboardInput { scancode: 94, state: Released, virtual_keycode: None, modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(44040195))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 94, state: Released, virtual_keycode: None, modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
```

However, no ""up"" event gets me the last command that I ran, which is what happens when I press the actual ""up"" key.

This behaves similarly for most of the other combinated keys: all the arrow keys, home, end and escape don't work at all. Backspace, tab and return does work correctly. Delete incorrectly behaves the same way as backspace does."04/23/19 03:27:34 PMUpdate wayland comment in README"Although wayland support still has some issues I believe that functionality has improved a lot since this comment in the README was written, and with more support on the way such as [native wayland clipboard support](https://github.com/jwilm/alacritty/pull/2207). I've been using alacritty on the wayland backend for a few months now and no longer experienced any notable issues.

`env WINIT_UNIX_BACKEND=x11 alacritty` seems more correct as it allows winit to decide to use x11 instead of just disabling access to wayland.

The winit wayland meta issue seems to be stagnant and not be tracking improvements made to wayland support." =||= There have been a lot of updates to Alacritty's Window library since the issue was created. Thanks a ton for keeping us updated!trimentalLucas Timmins04/23/19 03:22:25 PMCapitalize wayland1
236005/19/20 11:53:49 AMMario AriasKeys from Spanish keyboard not recognised on macOSX"Some characters (such as Ñ, ~, `, ^, [,]) aren't recognised.

I did manage to set ~ in the `alacritty.yml` file with

```yml
# tilde (~)
  - { key: Semicolon,mods: Alt,     chars: ""\u007E""                      }
``` 
But ñ is impossible as that keystroke shows `(arg: 1)` in the terminal"04/24/19 06:17:10 PMFix message bar not updating PTY size =||= Duplicate of #458.chrisduerrChristian Duerr04/23/19 09:45:54 PMFix message bar not updating PTY size1
236108/24/17 07:38:58 PMMario AriasMoving alacritty from or to a retina display change the font size"In OSX, if I move alacritty from or to a screen that isn't retina it messes up the font size. 

I suppose that is an issue with high-resolution displays   "02/11/20 12:07:57 AMModify Text Selection"Allow the user to modify a selection. This can be triggered with either a key combination or modifier + mouse button. The end point of the selection will be moved to the mouse location.

The selection will still be cleared when clicking the mouse without any modifiers activated.

Fixes: #1554"56"Thanks @asilvadesigns 

Closing as duplicate of #71."Ben496Ben Firth07/23/19 03:12:57 AM"Merge branch 'master' into text-selection

This might fix the performance issue with moving the mouse quickly while
in a selection."1
236703/08/19 01:03:51 AMzwindlAccess mapscii.me with telnet is all black."Here's the `termite` 's result:
![screenshot_20170825_220041](https://user-images.githubusercontent.com/5116996/29717182-ba62df16-899d-11e7-85ff-3c96ca01ca57.png)
And here's the `alacritty` 's result, it can't show anything unless use mouse to select the text:
![screenshot_20170825_220114](https://user-images.githubusercontent.com/5116996/29717199-cb759c62-899d-11e7-8584-a4c35080ad63.png)
![screenshot_20170825_220131](https://user-images.githubusercontent.com/5116996/29717207-d65edfda-899d-11e7-96d7-04d484a81cc0.png)"04/25/19 08:01:24 PMFix cursor disappearing"The cfc20d4f34dca535654cc32df18e785296af4cc5 commit introduced a
regression which would cause the cursor to disappear after the glyph
cache has been filled.

Since the cursor was not cached on the glyph cache, the cursor would
quickly fill up the OpenGL texture with lots of cursor textures and then
things would break after the atlas was filled completely.

This adds a separate cursor cache which is keyed by the cursor style
that will persist the texture without flooding the atlas.

This fixes #2355.
This fixes #2353."5This seems to work with the latest Alacritty master.chrisduerrChristian Duerr04/25/19 04:31:00 PM"Fix cursor disappearing

The cfc20d4f34dca535654cc32df18e785296af4cc5 commit introduced a
regression which would cause the cursor to disappear after the glyph
cache has been filled.

Since the cursor was not cached on the glyph cache, the cursor would
quickly fill up the OpenGL texture with lots of cursor textures and then
things would break after the atlas was filled completely.

This adds a separate cursor cache which is keyed by the cursor style
that will persist the texture without flooding the atlas.

This fixes #2355."1
236808/29/17 03:54:13 PMTuomas SiipolaFix reloading colors from configThis is a bit ugly fix for #749.04/28/19 06:12:36 PMPerform icon loading on unix non macos platformsOn linux some wms relies on `_NET_WM_ICON` when reporting application/window icon ( e.g. awesomewm with its tasklist and titlebars), so to set this we should call `with_window_icon` as we did it on windows.2This seems to work with the latest Alacritty master.kchibisovKirill Chibisov04/28/19 02:00:58 PM"Perform icon loading on unix non macos platforms.

This also sets _NET_WM_ICON on X11, allowing for WMs to show icons in titlebars"1
236911/12/17 03:11:22 AMTuomas SiipolaSupport more color escape codes"This should fix #743. However some codes like those related to highlight color
are not implemented because they are not (yet) supported by the application.
Also intrestingly, there doesn't seem to be an escape code for changing cursor
foreground color, only the background color."04/25/19 10:26:23 PMFix saturating sub bug =||= LGTM; thanks @siiptuo!chrisduerrChristian Duerr04/25/19 09:14:02 PMAdd change log entry1
237101/04/19 05:15:06 PMJaseem AbidAlacritty opens as a tiny spec in a corner"See the attached screenshot. I'm using the current master (b92ba65) on archlinux + gnome with the default config file. 

![screenshot from 2017-08-27 10-26-32](https://user-images.githubusercontent.com/601714/29747283-876b6a9e-8b12-11e7-96dd-88494f664512.png)

1. Window is a tiny spec in the top left corner
2. Title is 'Unknown'
3. Icons are broken 
4. No icons to maximise/minimize or close the window

"04/28/19 04:09:27 PMFix double-width characters only highlighting halfwayCurrently, `RenderableCellsIter` skips over the `WIDE_CHAR_SPACER`, as it's empty, and doesn't underline it, resulting in only the left half of the character being underlined. This PR makes it so that `RenderableCellsIter` always underlines every cell in `url_highlight`, even if it's empty. =||= Winit/Glutin has gotten some big updates since this issue was reported. I believe this should be fixed now by the new DPI mode. If this issue is still present, please let me know and I'll re-open.CrackedP0tChristian Duerr04/28/19 01:26:14 PMAdd additional whitespace1
237208/29/17 03:40:52 PMazarusAdd gentoo instructions.I added some installation instructions for gentoo. It uses the `slyfox` overlay, and I'll try to keep this README up to date if that overlay disappears and/or if it's broken.04/29/19 07:38:05 PMAdd config option to always highlight URLs on mouseoverIn my daily use of Alacritty I've started noticing that I always forget that URLs are clickable, since they are not highlighted unless you press modifier key. So this PR makes them to be highlighted by default, like in other terminals ( e.g. terminator  ). As alternative, config option could be added to control such behavior.7"Some updates to the ebuild are needed to compile alacritty
 https://github.com/leezu/leezu-overlay/commit/fb8b749d4b74bba44f4e68b3ff293c7e9eeb0436

Note that alacritty (due to dependencies) also requires a more recent version of the rust compiler than is available in the main tree. Such version can be installed via https://github.com/gentoo/gentoo-rust/, but also see https://bugs.gentoo.org/640244 "kchibisovKirill Chibisov04/28/19 02:40:13 PMAdded config option to always highlight URLs on mouseover1
237507/20/18 11:05:55 PMJaseem AbidHolding down keys isn't working.Long press sends only one single event, and this is really annoying while holding down space or backspace. I'm on the current master. Archlinx + Gnome. 04/28/19 10:36:02 PMFix mouse mode generate events without cell changeThis fixes #2347. =||= duplicate of #1257 chrisduerrChristian Duerr04/28/19 09:38:36 PMRun rustfmt1
237708/28/17 05:01:20 PMTim SteinbachPush winit dependency to 0.7.6"Update winit from 0.7.5 to 0.7.6.

I realize that alacritty pulls ""master"" rather than actually using 0.7.5 but it seems a good idea to keep up with winit versions regardless...

Also, this should allow us to fix the NixOS/nixpkgs build."04/29/19 02:33:26 PMFix selection of double-width characters"This changes the selection behavior to automatically select both cells
of double width characters in either selection direction.

This fixes #2322." =||= Thanks @NeQuissimus chrisduerrChristian Duerr04/28/19 02:49:14 PM"Fix selection of double-width characters

This changes the selection behavior to automatically select both cells
of double width characters in either selection direction.

This fixes #2322."1
237912/24/17 09:23:53 PMOliver UvmanRefactor populate cursor, fix-wide-cursor"This refactors the populate cursor functions. It also applies the functional part of the fix-wide-cursor branch (i.e. does not apply the debug printlines.)

Tested with all three cursor modes. Tested with wide characters `ａｓｄｆ`."04/28/19 09:08:42 PMCorrect path to license file so cargo-deb worksCorrect the path to the `LICENSE-APACHE` license file in alacritty's `Cargo.toml` post crate split so that building a Debian package with cargo-deb works correctly again. =||= :clap: wkWild Kat04/28/19 09:01:51 PM"Correct path to license file so cargo-deb works

Correct the path to the LICENSE-APACHE license file post crate split so that building a debian package with cargo-deb works correctly again."1
238008/29/17 02:52:21 PMTiziano SantoroRestore winit deps"Accidentally removed in
https://github.com/jwilm/alacritty/commit/c4ece6dde3c9dcf825a44aa775535a65c0c376a6
when winit version was bumped."04/28/19 09:42:44 PMFix spelling mistakesFound through Codespell, reviewed/fixed manually. =||= Thanks!JDTXfr0st04/28/19 09:12:30 PM"Fix spelling mistakes

Found through Codespell, reviewed/fixed manually."1
238705/29/18 04:50:51 PMJônatas Hashimoto (Jojo)Quotes, double-quotes, sharp accents are not working"pressing quotes/doublequotes/sharp accents is not working for me :(
"04/30/19 11:47:48 AMUpdate INSTALL.md for fresh openSUSE Tumbleweed installA fresh openSUSE Tumbleweed installation was missing a build dependency1Ok I'm not sure why this didn't work for me, but feel free to ignore my attempts at helping on this issue. cbcoutinhoChris Coutinho04/29/19 10:26:15 PMUpdate INSTALL.md for fresh openSUSE Tumbleweed install1
239112/23/17 08:15:19 PMBryce Fisher-FleigFeature/remember window position and size"See discussion on https://github.com/jwilm/alacritty/issues/669

Don't merge this -- just opening this so it can be examined easily."04/30/19 01:30:47 PMRemove clipboard loading error logging"On macOS the clipboard actually returns an error when loading it and it
is empty. However this is not an `Empty` error but all errors are simple
boxed Errors from std.

Since loading the clipboard data usually should not fail, we now do not
log it as error if it fails but just print it to the debug log instead.

This fixes #2389." =||= "Thanks for the followup! Honestly, I felt the same about this approach. I
totally agree with closing and restarting on this feature. Seems like an
upstream feature to add most likely.
"chrisduerrChristian Duerr04/30/19 12:44:52 PM"Remove clipboard loading error logging

On macOS the clipboard actually returns an error when loading it and it
is empty. However this is not an `Empty` error but all errors are simple
boxed Errors from std.

Since loading the clipboard data usually should not fail, we now do not
log it as error if it fails but just print it to the debug log instead.

This fixes #2389."1
239409/06/17 02:29:56 PMKris HicksRandom crashes"On Linux using i3 and alacritty built from 7d3fc0d with `rust 1.21.0-nightly (c11f689d2 2017-08-29)` I'm seeing random crashes.

I've returned to an i3 pane to see alacritty has disappeared; luckily (and obviously) I'm using tmux so no actual state was lost. So, it has nothing to do with what I'm doing within alacritty or tmux at the time of the crash as far as I can tell.

I did not have this issue with the last build of alacritty I was using, which was from 9b13e34.

I'd be happy to provide a crash log but I don't know where alacritty stores them."05/01/19 01:10:16 PMUpdate UPDATE.md with Fedora X11 dependency"This is similar to https://github.com/jwilm/alacritty/pull/2387
On a Fedora system running X11 I had to install the `libxcb-devel` dependency in order to compile."1"I haven't been able to reproduce the crash since re-building it from the same SHA; if I get a stack trace I'll re-open.

Thanks!"krlviKiril Videlov05/01/19 01:04:02 PMAdd libxcb-xfixes0-dev dependency to INSTALL.md for Debian1
239709/05/17 04:07:02 PMJonathan SchleußerUpdate dependencies"The serde updated required adding lifetimes and some renaming.
The notify update required refactoring to use new types.
Mio split some parts into mio-more, and did some refactoring.
The other deps did not required changes."05/03/19 11:48:25 PMAdd git commit sha to output of --version"This changes the output of the `--version` (`-V`) flag. Before it was printing just the version of alacritty, now it will include the current git revision built. For example, this branch currently prints: `alacritty 0.3.2 (531976a)`.

This also fixes a small issue caused by dbd8538762ef8968a493e1bf996e8693479ca783, which caused `alacritty -V` to print `alacritty_terminal 0.3.2`.


- [x] output is using `crate_name!()` now yielding `alacritty_terminal` not `alacritty`"2Thanks!nixpulvisNathan Lilienthal05/01/19 02:11:42 AM"Add git hash to version string, and fix crate name

This moves `cli` out of `alacritty_terminal` and into `alacritty` where
it belongs, along with the `clap` dependency."1
241303/08/19 11:25:51 AMXiaoyu Yin'say' command hangs in alacritty"When using the `say` command, alacritty hangs.

`say alacritty`

Which operating system does the issue occur on?
macOS Sierra (Version 10.12.2 (16C67))"08/28/19 12:40:20 AMRecheck for URLs whenever terminal content changes, as well as other events"This PR makes it so that whenever the terminal's dirty, as well as on certain events, Alacritty checks for URLs - but only if the mouse is in the window.

I changed a good bit of code, so critique is welcome!

Should fix #2388 "15Tested on macOS and confirmed it to work great. Probably a `say` issue or it has been resolved since then.CrackedP0tElaina Martineau05/12/19 06:51:48 PMReformat 1-line match arms1
241509/02/17 02:14:27 PMtanittaRemove invalid characters from default config filesI found invalid character: U+FFFC at all heads of line on dim colors section.05/04/19 06:05:47 PMFix empty clipboard freezing Alacritty on X11This fixes #2392. =||= Thanks!chrisduerrChristian Duerr05/04/19 04:48:52 PM"Fix empty clipboard freezing Alacritty on X11

This fixes #2392."1
241609/05/17 03:56:33 PMValentin BoettcherA (very) little english fixup...05/11/19 03:57:23 PMFix regression causing the cursor to only show over the left half of wide characters"Commit 494348abe80f591dfdd68fd4987bafc59fcb32c1 only cached by cursor style, which meant that the cached cursor, which was probably single-width, would be used to draw over wide characters.
This commit caches by height, width, line_width, and style, so any time the cursor requirements change, a new cursor will be cached."5Thanks!CrackedP0tElaina Martineau05/11/19 12:44:32 AMRemove unnecessary borrow1
241909/08/17 03:48:15 PMDeleted userFonts are fucked up"Which operating system does the issue occur on?
Ubuntu 16.06

If on linux, are you using X11 or Wayland?
X11, i3

[non tmux](https://i.imgur.com/0QYNQ4n.png)
[in tmux](https://i.imgur.com/GvWcWUi.png)

Here's the output:

```
asthma@work:~/public/git/alacritty$ cargo run --release
    Finished release [optimized + debuginfo] target(s) in 0.0 secs
     Running `target/release/alacritty`
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[Unhandled CSI] action='l', args=[1003], intermediates=[63]
[unhandled osc_dispatch]: [['1','1','2',],] at line 801
[unhandled osc_dispatch]: [['1','1','2',],] at line 801
[Unhandled CSI] action='l', args=[1005], intermediates=[63] 
```

I just cloned and compiled master with `cargo build --release`. I also just installed rust **but used the nightly channel** which didn't yield any errors. I started the binary with `cargo run --release`."05/11/19 02:29:08 PMAdd appdata #2412Adding Appstream data to Alacritty to meet Freedesktop.org specification and standard, which will enable it to be seen in Linux software shops, and help in the creation of a Flatpak.  =||= "Looks like you need to update your `font.offset` and `font.glyph_offset` config. Try resetting both to zero.

Please refrain in the future from using profanities in your issue titles; it's not helpful or appreciated."derpmattderpmatt05/11/19 11:19:34 AMamend changelog description1
242009/05/17 03:53:04 PMAlain ArmandHow do you get Alacritty to read your bash_profile?"Which operating system does the issue occur on?
macOS Sierra
 I have `export PATH=""$HOME/.cargo/bin:$PATH""` in ~/.bash_profile but still have to run source ~/.bash_profile to get settings read. Obviously, this is not the way to do it but I cant seem to find the answer anywhere.  I have reread and researched. Obviously missing something. Thanks for the help."05/07/19 03:49:23 PMmacOS app manifest requests NSSystemAdministrationUsageDescription"This resolves permission failures when modifying root-owned files
and such, e.g., modifying /etc/hosts. It had been possible
to work around this by adding alacritty to the set of
applications with ""Full Disk Access"" in System Preferences. macOS
now opens a prompt to confirm permission with a new installation.

Tested on macOS Mojave (10.14.4).

This closes #2337."3"@idkjs 
Just for future reference I had the same problem and you had a small typo on your solution.

Instead of:
``` yaml
#shell:
 program: /bin/bash
  args:
- --login
```

You need to edit as:
``` yaml
shell:
  program: /bin/bash
  args:
    - --login
```"ijlijl05/07/19 01:01:45 PM"macOS app manifest requests NSSystemAdministrationUsageDescription

This resolves permission failures when modifying root-owned files
and such, e.g., modifying /etc/hosts. It had been possible
to work around this by adding alacritty to the set of
applications with ""Full Disk Access"" in System Preferences. macOS
now opens a prompt to confirm permission with a new installation.

Tested on macOS Mojave (10.14.4)."1
242310/09/17 05:33:56 AMNoneservo-fontconfig-sys needs an update"Fedora 26 moved to glibc 2.25 which has names colliding with fontconfig. I have not been able to compile alacritty for weeks now, since we are stuck on the internal fork of the fontconfig crates.

> /home/lukas/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/src/fcmatch.c:284:63: error: 'PRI_CHAR_WIDTH_STRONG' undeclared here (not in a function); did you mean 'PRI_WIDTH_STRONG'?
>  #define FC_OBJECT(NAME, Type, Cmp) { FC_##NAME##_OBJECT, Cmp, PRI_##NAME##_STRONG, PRI_##NAME##_WEAK },
>                                                                ^
> /home/lukas/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/src/fcobjs.h:54:1: note: in expansion of macro 'FC_OBJECT'
>  FC_OBJECT (CHAR_WIDTH,  FcTypeInteger, NULL)
>  ^~~~~~~~~
> /home/lukas/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/src/fcmatch.c:284:84: error: 'PRI_CHAR_WIDTH_WEAK' undeclared here (not in a function); did you mean 'PRI_WIDTH_WEAK'?
>  #define FC_OBJECT(NAME, Type, Cmp) { FC_##NAME##_OBJECT, Cmp, PRI_##NAME##_STRONG, PRI_##NAME##_WEAK },
>                                                                                     ^
> /home/lukas/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/618a529/src/fcobjs.h:54:1: note: in expansion of macro 'FC_OBJECT'
>  FC_OBJECT (CHAR_WIDTH,  FcTypeInteger, NULL)"05/12/19 05:04:18 PMUpdate Cargo.toml"Fixes #2393 

If this doesn't get pulled then build instructions over at https://github.com/jwilm/alacritty/blob/master/INSTALL.md#cargo with fail with

```
cargo-deb: unable to read license file: ../LICENSE-APACHE
  because: No such file or directory (os error 2)
```"4Should be fixed on master. Thanks @da-x!QuintasanMichał Zając05/06/19 10:59:34 PM"Update Cargo.toml

Fixes #2393"1
242410/09/17 05:21:00 AMDan AloniSupport bitmap fonts"To allow FontConfig to work with Bitmap font, we shall pass the size
we are interested in, and account for the size returned in the font
matching process. This is, because we cannot scale those fonts.

FontConfig will return the closest match, and we take its returned
pixel size back when we are rendering the glyphs.

There's an oddity when call set_char_size in `freetype2` - we need to
behave as if the DPI is 72. It is due to the following macro:

    #define FT_REQUEST_HEIGHT( req )                                        \
          ( (req)->vertResolution                                           \
              ? ( (req)->height * (FT_Pos)(req)->vertResolution + 36 ) / 72 \
              : (req)->height )

Further work can allow for integer scaling of the largest bitmap
font varient.

Tested with Terminus PCF-type font under Linux.

This addresses issue #582 ."05/13/19 11:06:20 PMFix message bar not updating PTY size on hideFixes #24183Thanks @haasn!kchibisovKirill Chibisov05/07/19 12:47:40 AMFix message bar not updating PTY size on hide1
242512/23/17 05:17:05 AMDustin SpeckhalsAssure that newlines are in selections"When a selection was made, the last line of the selection did not include a new line character when the line ending was selected. This would occur if only one line was selected; if multiple lines were selected, only the final line did not include a newline.

This commit updates the `string_from_selection` function to attempt to append a newline character in all places where they are suitable. Because of the simplification of newline insertion, several trait implementations were removed.

This fixes the first part of #432."05/10/19 11:36:17 AMRefactor config parsing files"This is a large refactor of the config parsing structure, attempting to
reduce the size of the file a bit by splitting it up into different
modules with more specific purposes.

This also fixes #2279." =||= This simplifies things nicely. Thanks for the PR!chrisduerrChristian Duerr05/09/19 08:16:52 PMFix macOS and Windows build failures1
242610/22/17 06:34:31 PMDustin SpeckhalsChange cursor from pointer to text"It seems that (as a rule) terminal emulators use the text mouse cursor rather
than the pointer that is used now. This commit changes the cursor to
using winit's built-in configuration function."05/12/19 09:55:06 PMDon't attempt shader compilation if not supported."I was trying to get Alacritty to work in WSL. Hint: it doesn't. But I was getting a useless error that could be better:

```
Created log file at ""/tmp/Alacritty-6058.log""
[2019-05-06 14:34] [ERROR] Alacritty encountered an unrecoverable error:

        There was an error initializing the shaders: Failed compiling shader at /home/markus/dist/alacritty/res/text.v.glsl: 

```

It turns out that shader compilation isn't supported, so it never executed and there is no log for `glGetShaderInfoLog()` to return. I guess that's because VcXsrv is starting with `Wgl=""True""`, indicating that all OpenGL stuff should be indirectly executed by Windows WGL.

I'm not sure what the solution to that is. Precompiling GLSL files? Wait for WSL 2? I really wanted to use Alacritty :(

Also, I've never written a line of Rust before so this might not be the best."4@NickeZ I put together the functionality you described in #865.markuspeloquinMarkus Peloquin05/07/19 07:17:17 PMDon't attempt shader compilation if not supported.1
242708/21/20 03:48:49 PMUtkarsh UpadhyayEHN: inherited configuration files."I use alacritty on multiple platforms such that the dotfiles between them is kept in sync (using softlinks and Dropbox, though that is not important).

However, I would like to have slightly tweaked configuration on each system (e.g. larger font sizes on one system, `use_thin_strokes` on one system, light/dark color themes, etc.).

Right now, the config is read only from one single file:

https://github.com/jwilm/alacritty/blob/8990aa4568ea8a7481f827512b7487be4d39332a/src/main.rs#L65-L75

Would there be interest in converting `config_path` to an array and such that all the configs files are read in the said order:

    /// 1. $XDG_CONFIG_HOME/alacritty/alacritty.yml
    /// 2. $XDG_CONFIG_HOME/alacritty.yml
    /// 3. $HOME/.config/alacritty/alacritty.yml
    /// 4. $HOME/.alacritty.yml

and the configurations read from each is _merged_ with preferences being overwritten by files read later.

This would allow me to keep, say, `$HOME/.config/alacritty/alacritty.yml` synced between the systems while keeping local configuration in `$HOME/.alacritty.yml`.

Alternatively, we can add a file to the list, i.e. `$HOME/.alacritty.local.yml`, which will be exclusively used to override the preferences read from other files."05/08/19 08:38:53 AMRun cargo update"This updates notify and thus finally removes bitflags 0.7 from the
lockfile" =||= "After getting very tired of having to update almost identical alacritty.yml's for each of my installation I quickly wrote a very small utility to merge multiple files.

Basically it just merges these files together common + colors + detected os + detected hostname

```
c.common.yml
c.colors.solarized-light.yml
c.os.darwin.yml
c.os.linux.yml
c.host.crangy.yml
c.host.fogskum.yml
c.host.prizza.yml
c.host.transwhale.yml
```

It's written in go and is very basic but it seems to fit my needs
https://github.com/thomasf/dotfiles-thomasf-xmonad/tree/master/.config-xmonad/alacritty

You can also override default/detected options with command line flags.

```
$ go run . -h
Usage of /tmp/go-build462102881/b001/exe/alacritty-genconfig:
  -host string
    	host name (default ""transwhale"")
  -os string
    	os name (default ""linux"")
  -out string
    	output filename (default ""alacritty.yml"")
  -theme string
    	theme name (default ""solarized-light"")
```

if anyone is interested in using this I believe that the yaml parser used by alacritty is faulty because using values like `y`, `Y`, `n` and `N` converts them to boolean with this parser so they have to be quoted. It seems like this is how several yaml parsers works and maybe it is the correct way to parse, idk., yaml is kind of weird.

```
 - { key: 'Y',                           mode: Vi, action: Copy                    }
...
font:
  size: 16.0
  offset:
    x: 0
    'y': 1

```"EijebongBastien Orivel05/07/19 10:55:05 PM"Run cargo update

This updates notify and thus finally removes bitflags 0.7 from the
lockfile"1
242909/19/17 07:11:10 PMMichal 'vorner' VanerText background always black"Hello

I'm getting some strange behaviour on some of my computers and not on others. I don't know what the difference is, though. On the broken systems, the cells that have characters in them always have black background, no matter what color is set in the configuration.

The way to reproduce:

1. Start with the default configuration file
2. Set the colors.primary.background to (for example) '0xff0000'
3. Start alacritty and type something ‒ for example `ls -l`

What I get (on some computers) is red background on the blank cells and black background with the occupied ones. See the attached screenshot.

What I think I should get is red background even in the occupied cells.

Any idea what may be the cause or why it happens on some machines and not on others? Something I can try? Is it possible there's some cache that is broken?

Which operating system does the issue occur on?

```
Linux basilisk 4.11.0-basilisk #1 SMP Tue May 9 20:58:27 CEST 2017 x86_64 Intel(R) Celeron(R) CPU N2940 @ 1.83GHz GenuineIntel GNU/Linux
```

If on linux, are you using X11 or Wayland?

X11.


![color](https://user-images.githubusercontent.com/11783500/30240375-98fcd146-956f-11e7-85d7-b458dde97db1.png)"05/09/19 05:56:35 PMAdd Ubuntu PPAPackages are pulled from the Pop!_OS PPA so that Ubuntu and Ubuntu-derivatives may use it. =||= "Hmm, I found the problem. I had an older copy of the alacritty binary from before and it was sooner in the path. My guess is the old binary didn't run well with new shaders, or something like that.

I must therefore apologize for the invalid report."mmstickMichael Murphy05/09/19 05:29:12 PMMake the Pop!_OS distinction clearer1
243809/12/17 12:17:46 AMChris ChouSet $TERM_PROGRAM and $TERM_PROGRAM_VERSION by default"os: ubuntu 16.04

Many terminal emulator sets $TERM_PROGRAM and $TERM_PROGRAM_VERSION by default or $VTE_VERSION if VTE based. Settings this helps Alacritty integrate with other tools. "10/05/19 12:29:29 AMUpdate to winit/glutin EventLoop 2.0"This takes the latest glutin master to port Alacritty to the EventLoop
2.0 rework.

This changes a big part of the event loop handling by pushing the event
loop in a separate thread from the renderer and running both in
parallel.

TODO:
 - [x] Resize issues (https://github.com/jwilm/alacritty/pull/2438#issuecomment-505518232)
 - [x] `run_return` support for macOS (https://github.com/rust-windowing/winit/issues/1005)
 - [x] Resizing extremely slow
 - [x] Font size change not updating pty size
 - [x] Message bar does not update PTY size properly
 - [x] Incorrect window dimensions when moving Alacritty between different DPI monitors
 - [x] Font size not updating when moving Alacritty between different DPI monitors
 - [x] Clean up code / resolve remaining TODOs
 - [x] Incorrect startup DPI on X11 (https://github.com/rust-windowing/winit/issues/998)
    -> ~~:zap: Still broken when spawning a floating window in i3~~
    -> Workaround implemented
 - [x] Make sure before merging all the linked issues have change log entries
 - [x] Clear errors on message bar reload

Fixes #2796.
Fixes #2694.
Fixes #2643.
Fixes #2625.
Fixes #2618.
Fixes #2601.
Fixes #2564.
Fixes #2456.
Fixes #2438.
Fixes #2334.
Fixes #2254.
Fixes #2217.
Fixes #1789.
Fixes #1750.
Fixes #1125."200"Hm.. is this feature request can be opened again ? although not a standard, many terminal emulators on macOS did this. My use case is to detect if alacritty is in used, then it will launch `tmux`, since no tabs in alacritty, it is my preference though. This is an example `~/.zshrc`:

```
if [ ""$TERM_PROGRAM"" != ""Apple_Terminal"" ] && [ ""$TERM_PROGRAM"" != ""iTerm.app"" ]; then
    [[ $- != *i* ]] && return
    [[ -z ""$TMUX"" ]] && exec tmux
fi
```

this will be easily readable:

```
if [ ""$TERM_PROGRAM"" = ""Alacritty"" ]; then
    [[ $- != *i* ]] && return
    [[ -z ""$TMUX"" ]] && exec tmux
fi
```


taken from [here](https://wiki.archlinux.org/index.php/Tmux#Start_tmux_on_every_shell_login)"chrisduerrChristian Duerr10/04/19 11:17:41 PMFormat code1
244009/28/18 09:34:07 AMNoneFont size varies based on discrete vs embedded graphics"See attached screenshots. Taken on a Lenovo W530 with integrated (small) vs discrete (large) graphics settings in the BIOS. AFAIK NVIDIA Optima is not well-supported on Linux (to switch between the two).

Let me know what additional debugging info is needed.

![alacritty_small](https://user-images.githubusercontent.com/2825204/30509160-600074a8-9a5e-11e7-844a-4eb3c6974baa.jpg)
![alacritty_large](https://user-images.githubusercontent.com/2825204/30509161-6000e500-9a5e-11e7-9df0-ef886b398e4b.jpg)"05/14/19 03:36:14 PMReenable macOS automatic graphics switching"This issue has been resolved upstream by a macOS update, fixing all
crashing issues when switching between integrated and dedicated GPUs.

Fixes #2221." =||= "Since glutin/winit recently made a major change to how font size works, this is likely not accurate anymore.

If this should still be present, please comment and I'll re-open the issue."chrisduerrChristian Duerr05/14/19 02:16:43 PM"Reenable macOS automatic graphics switching

This issue has been resolved upstream by a macOS update, fixing all
crashing issues when switching between integrated and dedicated GPUs.

Fixes #2221."1
244105/19/18 11:06:55 AMBenoit Pierremouse selection behavior"The current behavior for a simple click selection, from left to right, is to only select the first cell character if the click occurred on the left side of said cell. This is not how other terminal works (xterm, rxvt, ...). It's also at odd with the way the selection work when it's handled by a terminal application with mouse support (like vim). It would be great if this was at least configurable.

Here's the patch I'm currently using:
```diff
 src/selection.rs | 34 +++++-----------------------------
 1 file changed, 5 insertions(+), 29 deletions(-)

diff --git c/src/selection.rs i/src/selection.rs
index 714c84c..63ee2be 100644
--- c/src/selection.rs
+++ i/src/selection.rs
@@ -264,35 +264,11 @@ impl Selection {
             return None;
         }
 
-        Some(match (front_side, tail_side) {
-            // [FX][XX][XT]
-            (Side::Left, Side::Right) => Span {
-                cols: cols,
-                front: front,
-                tail: tail,
-                ty: SpanType::Inclusive
-            },
-            // [ F][XX][T ]
-            (Side::Right, Side::Left) => Span {
-                cols: cols,
-                front: front,
-                tail: tail,
-                ty: SpanType::Exclusive
-            },
-            // [FX][XX][T ]
-            (Side::Left, Side::Left) => Span {
-                cols: cols,
-                front: front,
-                tail: tail,
-                ty: SpanType::ExcludeTail
-            },
-            // [ F][XX][XT]
-            (Side::Right, Side::Right) => Span {
-                cols: cols,
-                front: front,
-                tail: tail,
-                ty: SpanType::ExcludeFront
-            },
+        Some(Span {
+            cols: cols,
+            front: front,
+            tail: tail,
+            ty: SpanType::Inclusive
         })
     }
 }
```"05/15/19 10:11:47 AMNon-Git directory manually provides commit hash"Sorry, I opened this PR directly without opening a Issue. This is my reason:

1. In some environments, the `git clone` will not be used, but by downloading the zip or tar.gz package. At this time, the failure to read the commit hash will fail to build. A concrete example is to build the Rust software via the openSUSE Build Service: https://build.opensuse.org/package/show/X11:terminals/alacritty.
2. On my local git version `2.21.0`, the `rustc_tools_util::get_commit_hash` function will not return `None` even if it does not read the commit hash, but instead returns a `Some("""")`, An empty string. This causes the `expect` to never be triggered to terminate the build.

If the `rustc_tools_util::get_commit_hash` function does not get a commit hash (empty string) then the environment variable is read. I think this will solve both problems at the same time.

Even if you decide not to merge this commit, I still hope to improve `build.rs` so that it can be built without the .git directory.

Thanks!"1Closing this for now because it seems the main driving force behind this request does not exist anymore.HentioeHentioe_Cl05/14/19 04:56:43 PMNon-Git directory manually provides commit hash1
244309/17/17 08:39:04 PMMatt Parsons[Ubuntu, Unity] Input lag in fullscreen only"When I open alacritty, it is blazing fast and awesome. In any window configuration other than full screen, it works without a hitch.

When I fullscreen the terminal, there is noticeable draw/render lag on the last line of the terminal. If I `cat **/*.csv`, it renders everything super fast, but when it's done, it doesn't display my prompt. When I type a single letter, it doesn't show that letter until I type the next one, click the window, or otherwise interact with the window.

This problem does not occur when using xmonad window manager.

> Which operating system does the issue occur on?

Ubuntu 16.04

> If on linux, are you using X11 or Wayland?

Whatever Unity has by default"06/06/19 06:46:33 PMCompatible without git"Follow the discussion plan for [PR#2441](https://github.com/jwilm/alacritty/pull/2441). The ultimate goal is to continue building without `git` installed or without getting a commit hash, and correctly output `--version`.
The build script for openSUSE or other Linux distribution continues to be compatible without any source code patches." =||= Thanks! I've subscribed to that issue.HentioeChristian Duerr06/06/19 05:56:37 PMFix remaining style issues1
244909/17/17 09:35:25 PMAlex PavelHtop rendering with missing text"Operating System: openSUSE Tumbleweed and Arch Linux

X11/Wayland: Occurs on both X11 and Wayland on both OSes

Running on commit eb231b3e70b87875df4bdd1974d5e94704024d70 built with Rust 1.20.0, I have graphical issues in htop. Specifically, CPU percentages, RAM usage, and occasionally users do not appear (users appear if I select their row).
Image:

![Broken htop rendering](https://i.imgur.com/BDUez9z.png)
Note: All instances of user `alex` appear in the screenshot above, but all other users are invisible unless selected."05/19/19 07:24:01 PMAllow URLs to end with trailing slashAddresses #2409  =||= This is almost certainly a colorscheme issue.shreveJacob Evan Shreve05/19/19 05:03:57 PMAdd changelog entry1
245109/21/17 03:16:01 PMAlberto SilvaStrange issue with Fish shell and Neovim"Issue occurs on Mac OS.

**Issue - Disclaimer : )**
I realize this may not be Alacritty's fault, I'm simply trying to narrow down my options. That being said, I'm starting here because I only notice this while using Alacritty.

**Issue - You should know...**
I have Fish set as shell for Alacritty within `alacritty.yml` and for Neovim within `init.vim`:

**Issue - What happens...**
If I launch neovim from fish, then quit Alacritty, I can no longer open neovim.

**Issue - Step by step**
1. I launch Alacritty
2. I type `nvim`
3. I quit Alacritty
4. I relaunch Alacritty
5. I type `nvim`
6. just hangs... ultimately pressing `ctrl-c` to kill it

**Issue - Additional details**
After the above step by step, neovim won't work in *iterm* or *terminal*.
Also *bash* and *zsh* won't work either.

**Issue - Temp solution**
I have to restart my machine. : (

I'll be creating an issue on Fish repo as well but, thought to start there.
I'd really appreciate any help, thanks.
"05/16/19 09:05:01 PMFix URL detection matching invalid URLsFixes #2450. =||= Np! : )chrisduerrChristian Duerr05/16/19 09:03:10 PMAdd change log entry1
245209/20/17 05:26:46 AMJackson Delahunterror: `Self` type is used before it's determined"Hi,

I received this error after cloning the repository and following the build instructions on commit `eb231b3`. Sorry I cannot debug it further as this is not my area of expertise. Happened on Ubuntu 17.04 4.10.0-19-generic running X11.

```
jackson@linux:~/repositories/alacritty$ cargo build --release
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/jwilm/rust-fontconfig`
    Updating git repository `https://github.com/jwilm/libfontconfig`
 Downloading log v0.3.8
 Downloading cgmath v0.15.0
 Downloading serde_json v1.0.2
 Downloading bitflags v0.9.1
 Downloading serde_derive v1.0.11
 Downloading xdg v2.1.0
 Downloading mio v0.6.10
 Downloading mio-more v0.1.0
 Downloading glutin v0.9.2
 Downloading serde v1.0.11
 Downloading serde_yaml v0.7.1
 Downloading unicode-width v0.1.4
 Downloading clap v2.26.0
 Downloading libc v0.2.30
 Downloading errno v0.2.3
 Downloading vte v0.3.2
 Downloading notify v4.0.1
 Downloading parking_lot v0.4.5
 Downloading fnv v1.0.5
 Downloading arraydeque v0.2.3
 Downloading approx v0.1.1
 Downloading rand v0.3.16
 Downloading num-traits v0.1.40
 Downloading itoa v0.3.3
 Downloading dtoa v0.4.2
 Downloading syn v0.11.11
 Downloading quote v0.3.15
 Downloading serde_derive_internals v0.15.1
 Downloading unicode-xid v0.0.4
 Downloading synom v0.11.3
 Downloading iovec v0.1.0
 Downloading net2 v0.2.31
 Downloading slab v0.3.0
 Downloading lazycell v0.5.1
 Downloading cfg-if v0.1.2
 Downloading lazycell v0.4.0
 Downloading shared_library v0.1.7
 Downloading winit v0.7.6
 Downloading lazy_static v0.2.8
 Downloading gl_generator v0.5.5
 Downloading khronos_api v1.0.1
 Downloading xml-rs v0.6.1
 Downloading linked-hash-map v0.4.2
 Downloading yaml-rust v0.3.5
 Downloading linked-hash-map v0.3.0
 Downloading foreign-types v0.2.0
 Downloading euclid v0.12.0
 Downloading rustc-serialize v0.3.24
 Downloading serde v0.9.15
 Downloading heapsize v0.3.9
 Downloading term_size v0.3.0
 Downloading ansi_term v0.9.0
 Downloading strsim v0.6.0
 Downloading textwrap v0.7.0
 Downloading atty v0.2.2
 Downloading unicode-segmentation v1.2.0
 Downloading vec_map v0.8.0
 Downloading utf8parse v0.1.0
 Downloading walkdir v0.1.8
 Downloading bitflags v0.7.0
 Downloading filetime v0.1.10
 Downloading kernel32-sys v0.2.2
 Downloading winapi v0.2.8
 Downloading winapi-build v0.1.1
 Downloading owning_ref v0.3.3
 Downloading parking_lot_core v0.2.4
 Downloading stable_deref_trait v1.0.0
 Downloading smallvec v0.4.3
 Downloading nodrop v0.1.9
 Downloading odds v0.2.25
 Downloading x11-dl v2.15.0
 Downloading osmesa-sys v0.1.2
 Downloading wayland-client v0.9.9
 Downloading pkg-config v0.3.9
 Downloading wayland-sys v0.9.9
 Downloading dlib v0.3.1
 Downloading libloading v0.3.4
 Downloading target_build_utils v0.3.1
 Downloading phf v0.7.21
 Downloading serde_json v0.9.10
 Downloading phf_shared v0.7.21
 Downloading siphasher v0.2.2
 Downloading phf_codegen v0.7.21
 Downloading phf_generator v0.7.21
 Downloading wayland-scanner v0.9.9
 Downloading xml-rs v0.3.6
 Downloading wayland-kbd v0.9.1
 Downloading wayland-window v0.7.0
 Downloading wayland-protocols v0.9.9
 Downloading tempfile v2.1.6
 Downloading memmap v0.4.0
 Downloading fs2 v0.2.5
 Downloading byteorder v1.1.0
 Downloading freetype-rs v0.13.0
 Downloading expat-sys v2.1.5
 Downloading freetype-sys v0.4.0
 Downloading cmake v0.1.25
 Downloading gcc v0.3.53
 Downloading libz-sys v1.0.16
 Downloading bitflags v0.8.2
 Downloading mio v0.5.1
 Downloading inotify v0.3.0
 Downloading bytes v0.3.0
 Downloading miow v0.1.5
 Downloading nix v0.5.1
 Downloading slab v0.1.3
 Downloading time v0.1.38
 Downloading ws2_32-sys v0.2.1
 Downloading bitflags v0.4.0
   Compiling bitflags v0.8.2
   Compiling unicode-segmentation v1.2.0
   Compiling slab v0.3.0
   Compiling num-traits v0.1.40
   Compiling dtoa v0.4.2
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling byteorder v1.1.0
   Compiling pkg-config v0.3.9
   Compiling xdg v2.1.0
   Compiling linked-hash-map v0.4.2
   Compiling bitflags v0.4.0
   Compiling approx v0.1.1
   Compiling serde v1.0.11
   Compiling smallvec v0.4.3
   Compiling ws2_32-sys v0.2.1
   Compiling winapi v0.2.8
   Compiling quote v0.3.15
   Compiling servo-fontconfig-sys v2.11.3 (https://github.com/jwilm/libfontconfig#618a5297)
   Compiling itoa v0.3.3
   Compiling serde v0.9.15
   Compiling unicode-width v0.1.4
   Compiling rustc-serialize v0.3.24
   Compiling cfg-if v0.1.2
   Compiling strsim v0.6.0
   Compiling slab v0.1.3
   Compiling unicode-xid v0.0.4
   Compiling synom v0.11.3
   Compiling heapsize v0.3.9
   Compiling stable_deref_trait v1.0.0
   Compiling copypasta v0.0.1 (file:///home/jackson/repositories/alacritty/copypasta)
   Compiling ansi_term v0.9.0
   Compiling lazy_static v0.2.8
   Compiling bitflags v0.7.0
   Compiling xml-rs v0.3.6
   Compiling fnv v1.0.5
   Compiling linked-hash-map v0.3.0
   Compiling yaml-rust v0.3.5
   Compiling serde_json v0.9.10
   Compiling gcc v0.3.53
   Compiling wayland-scanner v0.9.9
   Compiling wayland-client v0.9.9
   Compiling wayland-protocols v0.9.9
   Compiling cmake v0.1.25
   Compiling libz-sys v1.0.16
   Compiling expat-sys v2.1.5
   Compiling walkdir v0.1.8
   Compiling lazycell v0.4.0
   Compiling libc v0.2.30
   Compiling filetime v0.1.10
   Compiling net2 v0.2.31
   Compiling nix v0.5.1
   Compiling shared_library v0.1.7
   Compiling inotify v0.3.0
   Compiling iovec v0.1.0
   Compiling term_size v0.3.0
   Compiling textwrap v0.7.0
   Compiling rand v0.3.16
   Compiling errno v0.2.3
   Compiling osmesa-sys v0.1.2
   Compiling atty v0.2.2
   Compiling serde_yaml v0.7.1
   Compiling tempfile v2.1.6
   Compiling cgmath v0.15.0
error: `Self` type is used before it's determined
  --> /home/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.15.0/src/num.rs:31:71
   |
31 | impl<T> BaseFloat for T where T: BaseNum + Float + ApproxEq<Epsilon = Self> {}
   |                                                                       ^^^^

error: aborting due to previous error

error: Could not compile `cgmath`.
Build failed, waiting for other jobs to finish...
error: build failed
```"05/17/19 07:08:43 PMUpdate Cargo.lockTested and working on Linux and macOS. =||= I did not install [rustup](https://github.com/jwilm/alacritty#installing-rust-compiler-with-rustup) before building. After doing so all worked.lovesegfaultBernardo Meurer05/17/19 04:39:37 AMUpdate Cargo.lock1
245811/14/18 09:06:46 PMRobin HeinemannKeychords randomly not working under high load"This issue occurs under linux with X11.

When my system is under high load (e.g. compiling) some keychords seem to be
randomly ignored. This occours only with atleast two modifiers at the same time (I use `Meta-Shift-l` /  `Meta-Shift-h` to switch windows in tmux). Using less modifiers (`Ctrl-b n`/ `Ctrl-b p`) seems to work fine. The process generating the high load needs to be running as root for this issue to occur.

**Step by Step**
1. Add these lines to `.tmux.conf` and reload tmux (or use the tmux prompt)
   `bind -n M-H previous-window`
   `bind -n M-L next-window`
2. run `sudo stress --cpu NUM_CORES --timeout 60 &`
3. Open some tmux windows and try to switch windows in tmux with `Meta-Shift-h` and `Meta-Shift-l`

Doing the same in `xterm` or `urxvt` is working fine.
I'm using alacritty built from [this](https://github.com/jwilm/alacritty/commit/b92ba65f97ec484ac5df0c3b5b3d62667ca43f2a) commit. "06/07/19 10:08:20 PMWIP Add Dockerfile for FedoraIssue related #21269Closing since there hasn't been any update in over a year. If someone should still experience it, please let me know and I'll re-open this issue.xliivTymoteusz Jankowski05/18/19 10:03:46 PMMove rpm to deploy/1
245910/09/17 05:14:44 PMRobert GünzlerSupport web notation for hex colors"Just checking if you would be interested in this.
Not being able to just use the more common format of specifying hex colors has bugged me for a while now.

This is my first contribution to a Rust project in any form, so please be gentle 🙂 "05/20/19 06:05:21 PMupdate license-file path again now that mmstick/cargo-deb#94 is fixed"Make license-path for cargo-deb relative again now that the behavior has been changed in mmstick/cargo-deb#94. 

This means that as of cargo-deb 1.18.0, a relative path is required for the cargo-deb build to succeed in the supported and documented `cargo deb --install --manifest-path alacritty/Cargo.toml` manner as per the alacritty [instructions](https://github.com/jwilm/alacritty/blob/master/INSTALL.md#debianubuntu-1).

Previously #2379 and #2423." =||= Looks good; thanks!wkWild Kat05/20/19 05:49:04 PMupdate license-file path again now that mmstick/cargo-deb#94 is fixed1
246111/17/20 02:49:06 PMCasey RodarmorGlyphs sometimes cut off (need to draw background in single pass)"I'm getting a visual glitch which causes the right half of certain characters to be missing. Restarting alacritty fixes it.

It happens when working with han characters, which are double width. I haven't been able to figure out the exact situation when it occurs. It seems to occur most often after displaying a lot of characters, so perhaps it's due to a cache getting filled up.

In this image, the first han character on the screen is okay, and the last three are truncated.

![half-characters](https://user-images.githubusercontent.com/1945/30730024-a89c2482-9f18-11e7-95e1-e6aec2e34d14.png)"05/23/19 07:38:35 PMAdd macro for boilerplate combination errors"Hey,

I've been working on some `alacritty`-related stuff just for fun, and found that adding *anything* to these `Error` enums was quite painful. This patch would provide macros (for internal use) that allow easy generation of the boilerplate for error-container enums.

It's just a simple refactor, but I'm hoping to gain some experience with the contribution process before I contribute my larger projects down the line (if they pan out).

Thanks in advance for the help."12"I believe this is due to us not drawing the entire background in a single pass. When the first glyph cache gets filled up, Alacritty starts batching draw calls by texture. This is supported by what you've described

> occur most often after displaying a lot of characters

and

> Restarting alacritty fixes it

I'm updating the title to reflect the required action here."mcoffinMatt Coffin05/20/19 11:20:27 PMmacros: Add macro for combined error generation1
246510/07/17 03:02:55 PMJoshua StroblUpdate Solus depsRemoved freetype2-devel, it isn't necessary given fontconfig-devel depends on freetype2-devel, just as it depends on expat-devel.05/21/19 08:13:31 PMMove the project description to the center1Thanks!HirrolotTemirkhan Myrzamadi05/21/19 07:53:47 PMMove the project description to the center1
246709/27/17 04:14:45 PMNoneCan't type russian charts"Which operating system does the issue occur on?
MacOs HighSierra

When I type in Alacrity in Russian it display Unicode bytes instead of Russian characters, however if I ask system to echo these bytes, it displays right characters, take a look below:

```
@MacB ➜  ~ rvm:(system)  echo '<00d0><009f><00d1><0080><00d0><00b8><00d0><00b2><00d0><00b5><00d1><0082>'
Привет
```

English works fine. Could someone help me? "05/22/19 06:20:03 PMBugfix to rerender the output #540"This PR would change the optimization level. I think this is most likely _not_ an option, is it?
Are there other options to fix the behavior?

See comment of @maximbaz for more info <https://github.com/jwilm/alacritty/issues/540#issuecomment-304479048>"4and yes, iTerm2 and Terminal.app work well with ru_RU.UTF-8andys8andys805/22/19 06:01:20 PM"Bugfix to rerender the output

See comment of @maximbaz for more

<https://github.com/jwilm/alacritty/issues/540#issuecomment-304479048>"1
247001/10/18 05:36:37 PMDimas Cyriaco[Request] Change cursor when windows lose focus."This is a small quality of live suggestion.

I use a two monitor setup, and was used to relying on the 'hollow/full' cursor to find out what window is focused. But with Alacritty i find myself typing on the wrong window all the time, because I look at the cursor and it's full so I think the window is focused.

Well, maybe I'm just dumb.
"06/06/19 12:02:20 AMRe-invert cursor when in selectionCurrently, when the cursor is inside the selection, it isn't visible, because both it and the selection are the inverse of the regular terminal. This PR inverts the cursor and its cell again, making sure that the cursor is still visible.3This has been implemented with #937. :)CrackedP0tChristian Duerr06/04/19 05:39:46 PMFix minor style issues1
247709/30/17 11:30:05 PMJaro ReindersGraphics glitches"Which operating system does the issue occur on?
Arch linux

If on linux, are you using X11 or Wayland?
X11

Using arm to monitor my tor relay causes major graphics glitches:

All the bars should be solid
![image](https://user-images.githubusercontent.com/2665074/30922819-8c5afeec-a3aa-11e7-9f68-58a81fc6fac5.png)

![image](https://user-images.githubusercontent.com/2665074/30922842-997e86fc-a3aa-11e7-8637-7c6ede17cf75.png)

Screenshot of the correct behaviour in urxvt:
![image](https://user-images.githubusercontent.com/2665074/30922951-efb13e7a-a3aa-11e7-9874-d25d4bdf49cf.png)

"05/25/19 10:14:50 AMadd build instructions for Clear Linux =||= "I'm not sure what mode ?1034 is supposed to be, as it doesn't seem to appear in my usual resource for ANSI (http://bjh21.me.uk/all-escapes/all-escapes.txt). But CSI action 'b' means ""repeat previous char"" which explains the corrupted bars in `mutt` and other programs. This action appears to be unimplemented in `csi_dispatch` in `ansi.rs`."jokeyrhymeRon Waldon05/25/19 06:11:20 AMadd build instructions for Clear Linux1
247809/28/17 12:29:46 AMAaron HillUse a wildcard dependency for clippy, and start fixing warnings"Because there are so many clippy warnings in the current codebase,
this commit removes '#![cfg_attr(feature = ""clippy"", deny(clippy))]',
to make it easier to fix warnings incrementally."06/03/19 03:18:46 PMAdd Gentoo install dependencies"While Gentoo was listed in the table of contents of the INSTALL.md, the
instructions to install the build dependencies were missing.

This adds the emerge command necessary to install all dependencies of
Alacritty (other than Rust) so building from source without the overlay
is possible."15Looks great; thanks!chrisduerrChristian Duerr06/03/19 03:16:44 PMChange Gentoo emerge command1
248204/01/18 12:40:58 AMBartCreate a man pageRight now, the most extensive documentation for Alacritty can be found in the comments of the config file, the  existence of which can be learned from reading the README file. This is not ideal if you ask me. It would be a good idea to create a man page, perhaps several (one for command line arguments, one for configuration options, for example).05/28/19 04:29:43 PMSkip UTF-8 BOM when reading config file"I'm currently stuck with Notepad when editing the config file and it insists on adding a BOM when saving it. Alacritty errors when loading the config file due to it and so this patch adds code to skip the BOM.

Note that my Rust knowledge is basically based on Googling for how-to-do-stuff and interpreting the results, so any improvements to the code are welcome." =||= A manpage has been added in #1133.kazarmyKhairul Azhar Kasmiran05/28/19 12:12:11 PMUse String::split_off instead1
249512/22/17 11:05:25 PMMark StosbergCorrect accuracy of first sentence in READMEAs documented in https://github.com/jwilm/alacritty/issues/289 it's not currently the fastest-- only a small number of terminals running a single task for initially benchmarked.06/02/19 01:16:39 PMAdd foreground/background request escape codes"When a ""?"" is given rather than a color in xterm for foreground/background escape codes, the current color is returned. This can be and is used by programs such as vim to preserve readability.

I have based the output format directly on xterm."1https://jwilm.io/blog/alacritty-lands-scrollback/#benchmarksrbongChristian Duerr06/02/19 12:23:19 PMFormat code1
250110/22/17 03:42:40 PMNoneRewrite err_println to eprintln introduced in Rust 1.1906/03/19 03:05:43 PMUpdate INSTALL.mdThe previous link (above) was pointing at its own section, and the reference is actually below. Corrected section link and wording. =||= Looks good; thanks!KurgolKurgol06/03/19 08:31:49 AM"Update INSTALL.md

The previous link (above) was pointing at its own section (), and the reference is actually below. Corrected section link and wording."1
250209/20/18 02:58:58 PMAlexey LebedeffBracketed paste should filter 'END PASTE' sequence"Which operating system does the issue occur on?
linux

If on linux, are you using X11 or Wayland?
x11

When pasting in bracketed past mode, 'END PASTE' sequence should be filtered from pasted text. Otherwise the second exploit from http://thejh.net/misc/website-terminal-copy-paste still works against programs running inside alacritty.

This should happen there: https://github.com/jwilm/alacritty/commit/ff5081d5e5cd2ddcf775357853b81afbcf45aef4#diff-d678f39ca56a471bfa2efbcdfcf593b0R188


"06/03/19 08:01:26 PMInstall docs: Linux/windows headline and link"Since the headline was changed, the relative link wasn't working anymore.

(minor)" =||= @dm17 Correct. To my knowledge there is no way to execute a command immediately with bracketed paste mode active, thus pastejacking is not a problem (assuming you don't just immediately hit enter yourself after pasting).andys8Andy06/03/19 06:04:07 PM"Install docs: Linux/windows headline and link

Since the headline was changes, the relative link wasn't working anymore."1
250409/30/17 11:30:05 PMJasperimplement ANSI CSI REP (Repeat)"I'm not sure if this is the best way to do this, but it fixes #795 for me. There is a small additional overhead caused by storing the preceding_char -- perhaps there is a better way to do that.

If an ANSI CSI with action REP ('b') is received, the previously-printed character is repeated the number of times according to the first argument of the CSI (defaulting to 1).

Note that the previously-printed char is repeated even if it was not the previous byte in the stream (e.g. if there were escape sequences since the previous graphical character). This seems to be acceptable according to standards, because according to the text for REP [here](http://bjh21.me.uk/all-escapes/all-escapes.txt), if the previous byte in the stream was not a graphical character, the behaviour is undefined."08/19/19 07:56:28 PMFollow full xparsecolor spec in escape sequences"Escape sequences in xterm are parsed according to xparsecolor. xparsecolor supports 1, 2, 3, and 4 digit hex colors. Previously, only 2 digits were supported.

This also fixes a bug where ""fX"" was parsed as ""0xf"" instead of ""0xf0"". xterm handles invalid hex values as 0, except for '/'.

The response to a request for fg/bg must be a valid escape sequence. Most terminals output a 4-digit hex response on request for fg/bg color. This changes the response to 4-digit, improving compatibility.

- [xterm control sequence document referencing xparsecolor](https://www.xfree86.org/current/ctlseqs.html)
- [xparsecolor spec describing the valid colors](https://linux.die.net/man/3/xparsecolor)
- [context for why we were using 2-digit color hex responses](https://github.com/jwilm/alacritty/pull/2495#discussion_r289637940)"12Thanks for implementing this! I added a ref test so that it doesn't regress.rbongChristian Duerr08/18/19 11:08:57 PMRefactor color parsing code1
250609/30/18 12:44:59 AMStone TickleBlack screen with no output on OS X 10.10.2"System: OS X 10.10.2

Everything compiled with no errors, and on first and all subsequent executions the app launched with a black screen and nothing else.
The config file is in place
I used the right rust compiler (specified in the readme)"06/09/19 04:30:43 PMRPM packaging"I added a specfile template that enables building alacritty with [rpkg](https://docs.pagure.org/rpkg-util/), for example in [COPR](https://copr.fedorainfracloud.org). I would be happy to maintain an inofficial COPR repo that we could mention in README.md for Fedora and EL7/Centos users.

I hope I got all the building and installation steps right, but it seems to work fine in my testing.

Is libEGL a build or a runtime dependency? I was able to build without the package mesa-libEGL-devel . I could add mesa-libEGL (no -dev) as Requires: if it's a runtime dependency.

I had to base this on #2443, as the rpmbuild chroot is not a git repository, and the build failed otherwise.
Unfortunately, I was unable to place the files into extra/linux/rpm or similar, because rpkg expects the macros in the project root.

Lastly, I made some assumptions when generating the RPM package version: I take the output of git describe, replace dashes with dots and drop the leading ""v"" from the tag name. I didn't want to repeat the crate version in the spec template so it doesn't need to be bumped for every release.
(N.B. `git_version` is a built-in rpkg macro, but I override it because it expects a specific tagging scheme in the repo)."41No, I just checked and everything works fine, but since I opened this issue I have upgraded to macOS 10.13.3 so I can't confirm it is fixed for 10.10.2.pschyskaPaul Schyska06/09/19 11:57:06 AMUpdate required rust version to 1.32.01
250704/13/21 09:37:17 AMBartVim not using ttymouse=sgr automatically"While clicking and holding the mouse, the mouse position is not updated. This behavior is not consistent with how other terminal emulators work.

To demonstrate the issue, I created a screen recording of selecting in vim, GNOME terminal (bottom), Alacritty (top).

![Screen recording](https://user-images.githubusercontent.com/649392/30976872-3d16cbc8-a476-11e7-8743-13740f847808.gif)"06/09/19 06:02:16 PMDynamic color code escapes for foreground/background"Saw https://github.com/jwilm/alacritty/issues/2497 and decided to take a crack at it

Recursively causes os dispatch to parse the next
parameters, as if they were entered with their
own escape codes

Not too familiar with rust but seems like this 
would be tail recursive

before:
![Screen Shot 2019-06-04 at 4 56 34 PM](https://user-images.githubusercontent.com/24661601/58913242-c0b37880-86e9-11e9-8c8e-aa4edfb405a0.png)

after:
![Screen Shot 2019-06-04 at 4 56 39 PM](https://user-images.githubusercontent.com/24661601/58913243-c1e4a580-86e9-11e9-80b9-533d91279d4a.png)
"4This is a vim, not an Alacritty issue. Neovim for example works just fine.kev-zhengChristian Duerr06/07/19 10:22:47 PMFix formatting issues1
250901/18/18 05:27:08 PMAlexandre Bury`reset` does not properly reset the terminal"On Archlinux, running X11.
After printing some random binary data to stdout (literally ran `cat /dev/urandom`), terminal is messed up. In most other terminals, the command `reset` is enough to bring back the terminal to a usable state; but it doesn't appear to work in alacritty.

To reproduce:

* Prints 10MB random binary data to stdout:
```
 head -c 10MB /dev/urandom
```
* Observe messed up terminal (if not, repeat previous step).
* Press `Ctrl-C` to discard messed-up input prompt.
* Enter the `reset` command (blindly since terminal is messed up).
* Observe alacritty clearing the screen for a second, then showing a prompt again, still in messed up mode.

![screenshot from 2017-09-29 22-58-27](https://user-images.githubusercontent.com/564903/31043031-b23445c2-a569-11e7-96be-44250fa993fb.png)

Tested running bash and zsh.

Note: I remember other terminals getting messed up like that quite often by binary data being printed out, but strangely can't reproduce it on gnome-terminal, konsole, xfce4-terminal or even xterm - they all remain normal after printing such data... Not sure what changed.

The good thing is alacritty is definitely the fastest terminal to print this 10MB of data :)"06/21/19 02:35:29 PMExpand/Refactor Config Key Bindings Docs"This is in response to #2457, and should fully cover the `key_bindings` configuration.

- [x] Document `mode` values"3This is probably because we don't reinitialize the `vte::Parser`; should be an easy fix.nixpulvisNathan Lilienthal06/05/19 02:35:38 PMReorder and clearify the mouse/keybinding docs.1
251110/01/17 09:48:36 AMYoshitomo TOKOIYaml split06/06/19 01:04:13 PMFix index out of bounds during selection"This reworks the selection logic to prevent any possible index out of
bounds exceptions by clamping the start and end points before doing
anything else with them when converting selections to spans.

This also fixes a bug where semantic selections would not automatically
expand across double-width characters.

Fixes #2486."3"I'm Sorry.
I made a mistake it. I will close."chrisduerrChristian Duerr06/05/19 11:54:38 PMRemove unused From trait impl1
251312/22/18 05:16:55 PMJovansonlee CesarStrikethrough?"Which operating system does the issue occur on?
Linux
If on linux, are you using X11 or Wayland?
ubuntu 16.04 default.

Is there a plan to support ~~strike-through~~ text?
"06/07/19 03:02:44 AMAdd wayland primary selection support"Fixes https://github.com/jwilm/alacritty/issues/2510

Adds wayland primary selection support through the [primary selection protocol](https://github.com/wayland-project/wayland-protocols/blob/master/unstable/primary-selection/primary-selection-unstable-v1.xml)

Hopefully if this PR seems to work for people then I can merge https://github.com/Smithay/smithay-clipboard/pull/4 and release smithay-clipboard 0.3v. Right now it links to the [smithay clipboard primary branch](https://github.com/Smithay/smithay-clipboard/tree/primary) and [trimental/rust-clipboard](https://github.com/trimental/rust-clipboard/tree/primary)"8looks like this will be fixed by #1078trimentalLucas Timmins06/06/19 08:09:04 AMAdd wayland primary selection support1
251710/23/17 11:14:51 AMNoneTransparency affects all background colors"Linux, X11

Hey! When transparency is enabled, it affects every background color. Other terminal emulators have it apply only to the ""background"" of the terminal, but have custom background colors appear at 100% still.

See screenshots. How it should be (transparency disabled entirely):
![screenshot_2017-10-02_21-46-23](https://user-images.githubusercontent.com/781030/31096217-b32d6fe0-a7bb-11e7-845d-f2f3d9c9726c.png)

What alacritty does with transparency enabled:
![screenshot_2017-10-02_21-49-55](https://user-images.githubusercontent.com/781030/31096234-c0c82352-a7bb-11e7-90d1-88ff04dcbcc0.png)"06/09/19 05:52:49 PMfix compiler warnings with latest nightly3Yes, indeed. Thanks!matthiaskrgrChristian Duerr06/09/19 04:35:37 PMFix before_exec warnings1
251901/05/19 08:47:12 PMDominic MonroeOpen new window in same directory"In other terminals, this is commonly bound to Ctrl-Shift-T.

Possibly a duplicate of https://github.com/jwilm/alacritty/issues/607 but I'm not certain."06/09/19 11:46:32 AMAdd wayland primary selection clipboard support"This is a follow-up PR to #2513.

Using the smithay-clipboard v0.3 release, this adds support for the primary selection clipboard on Wayland.

Since the progress on the rust-clipboard PR has been a bit slow, the clipboard crate has also been moved into alacritty under the name copypasta (same as the previous clipboard crate we had). This should hopefully allow directly sending PRs, without having it live in a separate repo.

Fixes #2510."5"@muralikodali 

I'm running

    alacritty --working-directory `xcwd`

, and new terminals open in the same folder. You'll probably have to describe what you're trying to get any good feedback."chrisduerrChristian Duerr06/08/19 09:15:17 PMRemove copypasta CI/Git files1
252010/17/17 03:00:35 PMNoneFeature request: zoom in/out/reset"This is critical for my workflow with terminator and tmux.
I think that if this will be supported, I'll be able to start making the switch"06/07/19 10:09:23 PMFix ncurses backspace key"Ncurses does some special handling for backspace, normally comparing it
to the KEY_BACKSPACE constant. However to make this work, the right
backspace escape sequence needs to be set in the terminfo.

XTerm has this set to ^H, but it always sends ^H. Since Alacritty
usually sends ^? instead, this needs to be specified to allow correct
interpretation for ncurses.

Thanks to @ckath for pointing this out." =||= Thanks @sodiumjoe. chrisduerrChristian Duerr06/07/19 09:54:26 PM"Fix ncurses backspace key

Ncurses does some special handling for backspace, normally comparing it
to the KEY_BACKSPACE constant. However to make this work, the right
backspace escape sequence needs to be set in the terminfo.

XTerm has this set to ^H, but it always sends ^H. Since Alacritty
usually sends ^? instead, this needs to be specified to allow correct
interpretation for ncurses."1
252104/17/19 06:16:12 PMNoneRanger doesn't get ctrl+h event"#### Which operating system does the issue occur on?
Archlinux

#### If on linux, are you using X11 or Wayland?
X11

#### Issue:
I'm not completely sure if this is a issue with alacritty(scrollback branch & master) or ranger(1.8.1 & 1.9.0b5). I noticed that `ctrl+h` does not show the hidden files when I use ranger in alacritty - when I use termite and ranger `ctrl+h` works as expected. Now the suspicious thing is, that this is seems to affect only `h`- if I remap the combination to ""anything"" else (randomly picked a few keys eg `ctrl+e`or`ctrl+y`...) the key combination works. 

For now I will fallback to another mapping but it would be nice if this will be fixed."06/08/19 04:01:15 PMBump minimum supported Rust version to 1.32.0 =||= It works. Issue can be closed :)chrisduerrChristian Duerr06/08/19 03:11:16 PMFix Windows build1
252512/23/17 08:36:45 PMChet GurevitchUpdate glutin, bitflags and other dependencies"Vastly improves wayland support. Only one line had to be added in event.rs to pass on an additional case in a match statement. I also removed minor version numbers specified in Cargo.toml so we always use the latest compatible versions. Every dependency is on the latest version (major and minor) with the exception of bitflags. They recently pushed version 1.0 but haven't published any release notes about the breaking changes.

Edit: Closes #758 and #702. "06/16/19 04:03:53 PMUnset DESKTOP_STARTUP_ID environment variable"This unsets the DESKTOP_STARTUP_ID environment variable at startup, to
prevent child processes from inheriting it. This solves problems with
child windows not properly spawning in the foreground with KDE.

More information can be found here:
https://specifications.freedesktop.org/startup-notification-spec/startup-notification-latest.txt

Fixes https://github.com/jwilm/alacritty/issues/2515." =||= @jwilm everything that could be done with cargo update _was_ done in a single commit, the other commits all required changes to source. I bundled #777 in here while I was waiting for it in master since the bitflags update effected it but I can add those changes to the bitflags commit now that it has been merged.chrisduerrChristian Duerr06/16/19 02:51:37 PMAdd change log entry1
252710/21/17 11:03:59 PMBarret RennieSet urgent WM flag on bell on X11 systems"This patch adds support for setting the urgent flag on systems using X11
when a terminal bell occurs.

When the window becomes focused, we will clear the urgent flag since not
all WMs will clear it automatically.

Fixes #181"06/13/19 09:18:02 PMDon't use reqwest in winpty"I think the lockfile diff speaks for itself... We don't need something
as complicated as reqwest to download a simple file from github. I had
to implement some redirection logic myself but it's simple enough." =||= Looks good; thanks!EijebongBastien Orivel06/11/19 08:27:56 PM"Don't use reqwest in winpty

I think the lockfile diff speaks for itself... We don't need something
as complicated as reqwest to download a simple file from github. I had
to implement some redirection logic myself but it's simple enough."1
253010/04/17 03:49:35 PMPeter ButkovicCentOS/RHEL 7  build instructions added06/15/19 07:08:52 PMBump smithay-clipboard dependency versionFixes https://github.com/jwilm/alacritty/issues/2529.1Thanks!chrisduerrChristian Duerr06/15/19 11:10:34 AMRemove nix from all depedencies1
253301/11/18 03:13:15 PMStefan Natchevalacritty+tmux crash on `cat /dev/random`"> Which operating system does the issue occur on?
macOS 10.12, tmux 2.3

To reproduce the crash, create a new tmux session and `cat /dev/random`. Sometimes it crashes right away, sometimes it takes a few seconds.

```
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[unhandled osc_dispatch]: [['1','1','2',],] at line 804
thread 'pty reader' panicked at 'index out of bounds: the len is 24 but the index is 24', /Users/travis/build/rust-lang/rust/src/liballoc/vec.rs:1561:14
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
   1: std::panicking::default_hook::{{closure}}
   2: std::panicking::rust_panic_with_hook
   3: std::panicking::begin_panic
   4: std::panicking::begin_panic_fmt
   5: core::panicking::panic_fmt
   6: core::panicking::panic_bounds_check
   7: <alacritty::term::Term as alacritty::ansi::Handler>::input
   8: <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}
thread 'main' panicked at 'index out of bounds: the len is 24 but the index is 24', /Users/travis/build/rust-lang/rust/src/liballoc/vec.rs:1552:10
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
   1: std::panicking::default_hook::{{closure}}
   2: std::panicking::rust_panic_with_hook
   3: std::panicking::begin_panic
   4: std::panicking::begin_panic_fmt
   5: core::panicking::panic_fmt
   6: core::panicking::panic_bounds_check
   7: alacritty::display::Display::draw
   8: alacritty::run
   9: alacritty::main
  10: main
```"06/13/19 03:28:02 PMUpdate OpenBSD installation to reflect rust-xcb python3 build dependency"Without having installed the Python 3 package, the Alacritty build fails as rust-xcb requires it:
```
error: failed to run custom build command for `xcb v0.8.2`
process didn't exit successfully: `/home/pwrdwnsys/building/alacritty/target/release/build/xcb-581edfd7cf040f3d/build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'Unable to find build dependency python3: Os { code: 2, kind: NotFound, message: ""No such file or directory"" }', src/libcore/result.rs:997:5
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.

warning: build failed, waiting for other jobs to finish...
error: build failed
```" =||= @chrisduerr confirming that I cannot reproduce this any longer with master. Great project!pwrdwnsyspwrdwnsys06/13/19 09:20:24 AMUpdate OpenBSD installation to reflect rust-xcb python3 build dependency1
254110/06/17 03:47:52 PMVictor BergerUpdate glutin & fix a few wayland issues"This PR fixes a few wayland issues of alacritty (and updates glutin on the process because it is needed).

Mainly two changes are done:

First add a `drawing_ready()` method on `Window`: see https://docs.rs/winit/0.8.2/winit/os/unix/trait.WindowExt.html#tymethod.is_ready for explanations. Hopefully glutin will be able to handle it itself in the future, but it currently does not.

Secondly; resize window and OpenGL contextes. The way wayland forces winit to draw its own decorations and how surface size is defined by its content means that in practice:

- winit's `window.set_inner_size()` defines the dimensions of the borders
- glutins `gl_window.resize()` defines the dimensions of the content (and is a noop in other platforms)

It is for now glutin's user responsibility to keep them in sync otherwise borders are drawn stupidly. This PR changes the resize methods of `alacritty::Window` to always update both.

This fixed the borders issues for me, tested on weston."06/16/19 11:29:19 AMLaunch a login shell by default on Linux"Alacritty did not launch a login shell by default on Linux contrary to
what is claimed by the comments in the configuration file. As a result,
`bash` does not read `/etc/profile` file leading to an inconsistent
environment compared to those with other terminals.

This commit simply extends what has been done by PR #1856 referenced by
issue #1071."6Thanks for the PR, @vberger! Several people have complained about the resize issue on Wayland; hopefully they see this.gentooboontooJulien Sanchez06/14/19 08:33:41 PMFix configuration documentation about default shell program1
254412/24/17 07:07:37 PMMarcel RobitailleAdd option to disable dynamic title"Which operating system does the issue occur on?
Linux Hermes 4.13.3-1-ARCH #1 SMP PREEMPT Thu Sep 21 20:33:16 CEST 2017 x86_64 GNU/Linux

If on linux, are you using X11 or Wayland?
X11

Termite has a great feature that allows you to disable dynamic title:
```
dynamic_title = false
```

It would be great to have such a feature in alacritty. Otherwise, for me the title will stay `tmux`. Another nice option would be to be able to set the title. I would like to set it to `terminal`.
"06/15/19 04:52:24 PMFix dynamic color escape response"The dynamic color escape response would answer to requests with
rgb:0/0/0 when the color was completely black, instead of properly
responding with double-digit hex colors. This has been changed so that
Alacritty now alwaysy properly responds with the same number of hex
digits for all colors.

The number of digits has also been changed from two to four digits per
color, since that is the more commonly used format.

Fixes #2543." =||= Thanks @maximbaz chrisduerrChristian Duerr06/15/19 04:09:17 PMFix dynamic color response taking multiple writes1
254510/13/17 05:10:31 PMexebookcrashes on an attempt to start"Which operating system does the issue occur on?
Ubuntu 16

If on linux, are you using X11 or Wayland?
X11
```

$ RUST_BACKTRACE=1 alacritty 
thread 'main' panicked at 'XOpenIM failed', /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692:16
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:71
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:380
   2: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:396
             at /checkout/src/libstd/panicking.rs:611
   3: std::panicking::begin_panic_new
             at /checkout/src/libstd/panicking.rs:553
   4: winit::platform::platform::x11::Window2::new
             at /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692
   5: winit::window::<impl winit::WindowBuilder>::build
             at /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/mod.rs:181
             at /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/window.rs:113
   6: glutin::platform::platform::x11::Context::new
             at /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/x11.rs:213
   7: alacritty::window::Window::new
             at /home/ya/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/mod.rs:52
   8: alacritty::display::Display::new
             at src/display.rs:141
   9: alacritty::run
             at src/main.rs:95
  10: alacritty::main
             at src/main.rs:45
  11: main
  12: __libc_start_main
  13: _start



```"06/15/19 08:30:18 PMAdd note about OpenBSD default user datasize limitRef #2529 LLVM out of memory on OpenBSD default login.conf settings1duplicate of #830 pwrdwnsyspwrdwnsys06/15/19 07:49:55 PMchange OpenBSD limits note based on feedback1
254709/28/18 08:38:41 PMAvjinderCrashes on macOS High Sierra"Screen freezes, then glitches out. Reboots the computer.

I believe this has something to do with the fact that High Sierra is using Metal2."06/16/19 11:35:29 AMFix default fullscreen binding docs =||= Is this still relevant? It has been a while.chrisduerrChristian Duerr06/16/19 11:33:12 AMFix default fullscreen binding docs1
254812/24/17 06:24:29 PMWesley A. GahrAdding dynamic_title property to configurationThis PR adds a small feature to Alacritty, namely turning off the dynamic title in the bar of the application. I was thinking of maybe adding another property which completely removes any text from the title bar. Thoughts on this?06/16/19 02:10:16 PMBump version to 0.3.3 =||= Thanks for the PR! Landed.chrisduerrChristian Duerr06/16/19 01:38:19 PMBump version to 0.3.31
255110/09/17 01:04:29 AMChadwick DahlquistAdd support for Backtick and Tilde key binding"As far as I can tell, there's no config objects for Backtick or Tilde keys here:

https://github.com/jwilm/alacritty/blob/master/src/config.rs#L1539

I would like to be able to use these very convenient left-hand key bindings."06/16/19 07:47:59 PMMention the Copr repositories in README.mdAdd pointer to Copr in README.md for Fedora builds.1Yep that works. Thanks.pschyskaPaul Schyska06/16/19 07:23:29 PMMention the Copr repositories in README.md1
255210/09/17 05:21:00 AMJoe WilmVarious improvements to fontconfig/FreeType rasterization"* Idiomatic wrappers for much of _fontconfig_ library
* Remove unnecessary clone of loaded face hash when rasterizing glyphs
* Respect _fontconfig_ settings like `antialias`, `hintstyle`, `rgba`, `lcdfilter`
* Support for bitmap fonts (cc @da-x, I reimplemented your patch on top of the new fontconfig bindings)

Closes #776 
Closes #321 
Resolves #582 
Resolves #460 
Resolves #101 "06/20/19 03:56:10 PMAdd block selection"This implements a block selection mode which can be triggered by holding
Control before starting a selection.

If text is copied using this block selection, newlines will be
automatically added to the end of the lines.

TODO:
 - [x] Tests

This fixes #526."4@da-x I was actually planning to look at the `font-resize` branch next. If you have a rebased version, can you push it up now that this has been merged?chrisduerrChristian Duerr06/20/19 03:11:33 PMRefactor block selection newline addition1
255610/09/17 12:52:15 AMFelix SchüttMake alacritty into a library, in order to embed it into other applications?"I've thought about making a more user-friendly wrapper using alacritty as a base framework. Basically, like gnome-terminal, with a graphical configuration, system menus and so on. However, I want to respect alacrittys mission to be only a ""basic"" terminal emulator and not have these features.

So my proposed solution would be to have alacritty be exposed as a library (`alacritty` is currently not used on crates.io). alacritty could draw to an OpenGL texture and take inputs via a `Processor` provided by the embedding application.

Use-cases would be:

- Wrappers for alacritty, for drawing decorations and such
- Embedded system terminals (like having a small command line in an OpenGL application).

This is just an idea."06/17/19 09:22:11 PMFix ubuntu deploymentFixes https://github.com/jwilm/alacritty/issues/2554. =||= Yep, this would be great. In fact, we've got another issue open for it already. Please subscribe to #450 for updates.chrisduerrChristian Duerr06/17/19 08:09:50 PMFix macos deployment function1
255707/15/18 07:47:08 PMAndy RussellBright foreground color is not configurable"Which operating system does the issue occur on?

Linux

If on linux, are you using X11 or Wayland?

X11

I'm trying to configure alacritty to match my termite config, and it appears that there is no way to configure the color used for bright foreground (escape sequence `1m`). Currently this escape sequence falls back to using the foreground color.
"06/18/19 09:23:04 PMclippy: statics by default have a static lifetime (fix clippy::redundant_static_lifetimes) =||= Yep, this would be great. In fact, we've got another issue open for it already. Please subscribe to #450 for updates.matthiaskrgrMatthias Krüger06/18/19 01:40:18 AMclippy: statics by default have a static lifetime (fix clippy::redundant_static_lifetimes)1
256305/02/20 04:22:55 PMBen BoeckelSupport cursor colors"Which operating system does the issue occur on?

Linux/X11 using 6916537858d12e02478d618339d1b9f0e73a677a.

There doesn't seem to be support for changing the cursor color. This is done by echoing an escape sequence like:

```
_zle_ins=""\033P\033]12;$_zle_ins_color\007\033\\""
```"06/19/19 06:26:59 PMBump appdata to v0.3.3"The timestamp is that of when the `v0.3.3` tag was created.

While at it, I also changed the date format to follow ISO 8601 :+1:"2"Why was this issue closed ?

The issue  @sodiumjoe  raised with the inverse cursor not showing up in zsh Vi normal mode  is still present in the latest commit on master.

The echo statement that was posted by @kchibisov only works when the `inverse cursor color` option in alacrity is disabled (e.g. by not setting it), otherwise Alacritty's inverse cursor will take priority over any zsh or line-mode configured cursor color.

some options that I just tried to test this:

1. Setting the echo statement as specified by @sodiumjoe, with inverse cursor color disabled => Works, zsh configured color overwrites alacritty config specified cursor color.
2. Setting the echo statement as specified, with inverse color enabled => does not work
3. Registering a ZLE option to change the cursor based on keymap => does not work alacritty overwrites it.

```
# Vi mode {{{
  # set nvim as defaut editor
  export EDITOR=""nvim""

  zle-keymap-select () {
    if [ $KEYMAP = vicmd ]; then

    echo -ne ""\033]12;Green1\007""

    else

    echo -ne ""\033]12;Orange1\007""

    fi
  }

  zle -N zle-keymap-select

  zle-line-init () {
    zle -K viins
    echo -ne ""\033]12;Orange1\007""
  }

  zle -N zle-line-init
"" }}}"1aceEric Engestrom06/19/19 11:25:45 AMBump appdata to v0.3.31
256804/28/20 07:59:06 PMBen BoeckelACS character alignment issue (has gaps between chars)"Which operating system does the issue occur on?

Linux/X11 using 6916537858d12e02478d618339d1b9f0e73a677a.

tmux draws split windows using ACS line-drawing characters. I'm seeing them not aligned properly (there are small gaps between adjacent lines. FWIW, it works in rxvt-unicode-256color.

Font: `xft:xos4 Terminus:size=7`
Screenshot (ignore the white rectangle; not sure what's up there):

![2017-10-09-132708_189x85_scrot](https://user-images.githubusercontent.com/97253/31350589-bf160b8e-acf5-11e7-9129-b3b8a1b92414.png)"08/18/19 04:49:33 PMRFC: Dump scrollback buffer to new instance of alacritty running a pager"This is a potential compromise for fixing #1017.  Currently being unable to search the scrollback buffer severely limits its usefulness but at the same it's questionable whether this should be implemented directly in alacritty itself.

This PR adds an action to spawn a new instance of alacritty with a user specified pager and then dump the contents of the scrollback buffer into the stdin of the new instance.  This neatly sidesteps the issue of having to implement search functionality in alacritty itself while giving users the freedom to use whichever pager best suits their needs.  The default is `less` but there's nothing stopping someone from using an editor like `vim` as their pager instead.

The contents of the scrollback buffer are first converted into a string (by iterating over every occupied cell) before being written out, which means we end up with a copy of the buffer in memory.  However since this is something that is only done in response to explicit user action, it shouldn't end up getting out of hand.

This is probably not fit for merging in its current state but I wanted to ask if this is something that would be accepted upstream before spending time cleaning it up."11I see no reason to keep this open though. There's already tracking issues for font fallback configuration (#957) and the text composition issues (#118). Other than that, there's no intention to change how box drawing characters are rendered.jynnantonixChirantan Ekbote06/20/19 10:14:41 AM"Add an action to dump the scrollback buffer into a pager

Add the `SpawnPager` action, which will spawn a new instance of
alacritty that runs a user specified pager (defaults to `less`) and then
pipe the contents of the scrollback buffer into the stdin of this
instance."1
257301/04/19 05:17:32 PMDan McAteeApp crashes if i try to bind number keys"Hey I'm on macOS and trying to map curly braces and brackets, because i can't type them in alacritty
```
  - { key: 8,     mods: Alt,     chars: ""\x7b""                           }
  - { key: 9,     mods: Alt,     chars: ""\x7d""                           }
  - { key: 5,     mods: Alt,     chars: ""\x5b""                           }
  - { key: 6,     mods: Alt,     chars: ""\x5d""                           }
```
So I'm trying this and the app crashes on reload"06/21/19 11:00:02 PMFix inconsitent cursor position when scrolling"This commit fixes regression introduced in cfc20d4f34dca535654cc32df18e785296af4cc5.
`self.cursor.line` forced the cursor to hold a fixed location while scrolling
until its ""original"" location (usually the shell prompt) went off the screen.
So cursor position should be keep updated, which can be achieved by using
`self.inner.line()`.

cc @chrisduerr @lovesegfault "2"yeah sure,
I wanted to bind number keys to write brackets and curly braces on a german keyboard, I just needed to do:
```
  - { key: Key8,     mods: Alt,     chars: ""\x7b""                           }
  - { key: Key9,     mods: Alt,     chars: ""\x7d""                           }
  - { key: Key5,     mods: Alt,     chars: ""\x5b""                           }
  - { key: Key6,     mods: Alt,     chars: ""\x5d""                           }
```

i also wanted to map control space:
```
- { key: Space,       mods: Control,     chars: ""\x00""                        }
```
"kchibisovChristian Duerr06/21/19 10:57:22 PMClarify change log entry1
258004/13/21 09:38:27 AMBen BoeckelImproper rendering of emdash"Which operating system does the issue occur on?

Linux/X11 using 6916537858d12e02478d618339d1b9f0e73a677a.

`alacritty` is rendering an emdash improperly:

`alacritty`:

![2017-10-10-103147_151x25_scrot](https://user-images.githubusercontent.com/97253/31392210-b0278e02-ada6-11e7-82b0-620a6e1a3518.png)

`urxvt256c`:

![2017-10-10-103256_197x28_scrot](https://user-images.githubusercontent.com/97253/31392216-b481d3cc-ada6-11e7-8827-7157579f64c3.png)

The screenshot comes from attaching to the same `tmux` session through two different terminals.

Here is a copy/past of the content: `(1.1*:—root@megas:~)`."06/25/19 09:34:56 PMPerform clear + `swap_buffers` before `window.show`"This should fill window with background color while it is offscreen instead of
showing uninitilized window (just borders) and then performing `clear`. So, the new behavior
should prevent glitches during startup (e.g. content of a windows below,
garbage from drivers, so on).

--
However, I was able to get glitches ( previous app content ) with the new behavior, but it happens 1 time out of 15-20 openings, instead of every time. So if someone knows how should I prevent this 1 time, I'll appreciate it.

P.s. I'm not very familiar with `opengl`, so if you see something completely wrong, let me know."8Stop sending me email please kchibisovChristian Duerr06/24/19 09:42:00 PMFix style issues1
258105/29/18 04:50:51 PMGurdit Singh Bedithread 'main' panicked at 'XOpenIM failed'"Which operating system does the issue occur on?
`Linux gurdit-lp 4.9.31-1-MANJARO #1 SMP PREEMPT Wed Jun 7 19:39:15 UTC 2017 x86_64 GNU/Linux`

If on linux, are you using X11 or Wayland? `X11`

I followed the installation instruction of arch linux as specified in the readme. The installation completed with no errors. But when I try to execute `alacritty` from my old terminal. I get this error
```
thread 'main' panicked at 'XOpenIM failed', /home/gurditsbedi/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692:16
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```

Now I run again `alacritty` after executing `export RUST_BACKTRACE=1` and I get this.
```
thread 'main' panicked at 'XOpenIM failed', /home/gurditsbedi/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692:16
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: <unknown>
  10: <unknown>
  11: <unknown>
  12: __libc_start_main
  13: <unknown>
```
"06/23/19 01:30:43 AMDisable text reflow on `ALT_SCREEN` mode"Apps that are using `ALT_SCREEN` mode are probably doing their own
reflow, so `our` reflow can lead to strange ""artifacts"" during resize.

> Other terminals should be checked to see what they do in this case.

I've testing `kitty` for this, and it seems like its doing text reflow on `ALT_SCREEN` mode. 

The behavior without reflow feels better in apps with `ALT_SCREEN` mode though.

This `PR` uses the approach that was before b1032bc , when we need resize without reflow.

Implements #2414 "2Well, geeze, it's been a while. For now, everything should work on this branch: https://github.com/francesca64/alacritty/tree/winit-gitkchibisovKirill Chibisov06/23/19 12:17:29 AM"Disable text reflow on `ALT_SCREEN` mode

Apps that are using `ALT_SCREEN` mode are probably doing their own
reflow, so `our` reflow can lead to strange ""artifacts"" during resize."1
258205/18/18 11:46:14 PMChris AllenMerged scrollback and x11 clipboard support into a single branch"Located here: https://github.com/bitemyapp/alacritty/tree/scrollback-and-x11-clipboard

Seems to work fine for me on Ubuntu 16.04.

I don't do any scrollback/x11 clipboard specific config, but my yml is here: https://github.com/bitemyapp/dotfiles/blob/master/.alacritty.yml

These were two features I needed to be able to get off gnome-terminal and I didn't want to wait for you to merge the PRs. Posting this in case it helps anyone else."06/23/19 11:29:02 PMFix performance issues with text reflow"Fixes #2567.
Fixes #2414." =||= Well, geeze, it's been a while. For now, everything should work on this branch: https://github.com/francesca64/alacritty/tree/winit-gitchrisduerrChristian Duerr06/23/19 10:33:40 PMFix rustfmt/clippy issues1
258310/21/17 07:56:29 AMTim Sampsonrendering borked with neovim master"The screen cap is of me editing alacritty.yml. The numbers of the left should be the line numbers of the file. For reference editing the same file with the same version of neovim in gnome-terminal works as expected.

![2017-10-11-112350_1264x1331_scrot](https://user-images.githubusercontent.com/2088/31429587-233e8596-ae77-11e7-8735-1a46cd466cc8.png)

Against neovim (77f1392f073660558d8772cfab8be8cf7c2f8b7f) and alacritty (68cca6eb381f88e861439ed6a1dda1ab6a7429d3) master today. 

On X11 (with awesomewm if that makes any difference).

I get plenty of these spat out to the terminal

```
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[38480, 1], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
[Unhandled CSI] action='m', args=[3848], intermediates=[]
```

Which may be related.
"06/23/19 03:46:25 PMUpdate install instructions for Void LinuxRemove unnecessary dependencies and add others missing. =||= So this is on me, I guess.gabrielsimoesGabriel Silva Simões06/23/19 03:36:12 PM"Update install instructions for Void Linux

Remove unnecessary dependencies and add others missing."1
259001/19/20 03:43:41 PMPeter Butkovic"support for ""use colors from system theme"" in gnome""Which operating system does the issue occur on?
RHEL 7.4

If on linux, are you using X11 or Wayland?
X11

I'd love to see alacritty supporting colors from system theme in Gnome. Namely color + background for:

* default/text
* highlight
* cursor

(similar to gnome-terminal behaviour)"06/25/19 09:32:28 PMFix first unfullscreen on fullscreen mode launched window =||= "> I'm not sure how much of complexity this issue will introduce to alacritty, however I feel like if we have an option to parse theme on linux, we can properly set CSD on Wayland to match user defined theme, which could help with GNOME Wayland csd thing.

We already have a PR to do this though, all you need to do is set the proper colors.

Looking back at this issue, I'm not actually sure why it has not been closed yet, I must have missed it. Alacritty is not a gnome application and I see no reason why would would add code to try and query DE-specific information.

If you want Alacritty to use your DEs theme, just dump it and set it in the Alacritty configuration. If you want to do that dynamically on startup, then write a small script to do it.

While something like XResources has a certain amount of cross-DE standardization, at least for X11, I see no reason why we should support DE-specific almost 'proprietary' protocols to handle things like that. That has no end and unnecessarily favors big projects."chrisduerrChristian Duerr06/24/19 09:23:05 PMFix first unfullscreen on fullscreen mode launched window1
259107/10/20 02:24:51 PMBen BoeckelMouse selection doesn't render in reverse in Vim and less"Which operating system does the issue occur on?

Linux/X11.

The mouse click/drag selection doesn't work inside of all the programs for which it works within urxvt. At least Vim is affected. This persists even if I put tmux into copy mode.

I do not have `set mouse` set in Vim, so it shouldn't be mouse-aware, but maybe it is still sending some escape codes related to them?"06/25/19 03:04:15 PMFix dependencies for arch in INSTALL.md"current master does not build on arch w/o libxcb
https://www.archlinux.org/packages/extra/x86_64/libxcb/"1if someone can still repro that let us know.benjaminbauerBenjamin Bauer06/25/19 09:36:15 AM"Fix dependencies for arch in INSTALL.md

current master does not build on arch w/o libxcb
https://www.archlinux.org/packages/extra/x86_64/libxcb/"1
259809/17/18 03:15:21 PMBen BoeckelMouse selection doesn't clear when contents change underneath"Which operating system does the issue occur on?

Linux/X11

When there is a mouse selection highlighted, it stays in its position even if the content scrolls underneath. In urxvt, the selection moves with the content if it is scrolled, but cleared if the content changes underneath (or it scrolls off). In alacritty, the selection (highlight) stays in place."07/13/19 09:51:29 AMBetter font antialiasing using DirectWrite"`DWRITE_RENDERING_MODE_NATURAL`:
![](https://i.imgur.com/mhr8tTs.png)

`DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC`:
![](https://i.imgur.com/k51hnMp.png)"9"I've looked at `xterm` and `termite` to check how they behave in this case and it seems like they have the selection directly associated to the cells. So when the screen changes or scrolls, it will move the selection with the scrolling content.

It might be possible to add a `selected` attribute to all cells in the buffer and then iterate over the grid when the selection should change or a copy is triggered with ctrl+shift+c.

Would love to know what you think about this @jwilm. I'm pretty sure this would need at least some changes to how selection currently works."ark0fark0f06/27/19 08:50:30 PMBetter font antialiasing using DirectWrite1
259909/17/18 03:15:21 PMAlessandro MolariIncredibly slow compared to urxvt"I have installed alacritty, compiling it from source.

I've tested some common operations I make with terminal and in almost all operations alacritty is 4 times slower than my previous terminal: rxvt-unicode.

I have a NVidia Quadro graphics card (optimized for OpenGL rendering).

Which operating system does the issue occur on?

Gentoo

If on linux, are you using X11 or Wayland?

X11"06/28/19 08:19:16 PMFix rows only resetting partially"This resolves an issue with rows only resetting partially, based on
their `occ` state. However this state is not always accurate, so more
than just the occupied elements need to be cleared.

Fixes #2340." =||= "@jasom that is pretty much resolved on the [`vec-deque-backing`](https://github.com/jwilm/alacritty/tree/vec-deque-backing) branch. Will be going for parity before landing it.

If you want to play around with some other benchmarks, I recommend checking out the [_vtebench_] application we've been working on.

[_vtebench_]: https://github.com/jwilm/vtebench/"chrisduerrChristian Duerr06/28/19 01:05:23 AM"Fix rows only resetting partially

This resolves an issue with rows only resetting partially, based on
their `occ` state. However this state is not always accurate, so more
than just the occupied elements need to be cleared.

Fixes #2340."1
260310/13/17 05:10:41 PMxyosthread 'main' panicked at 'XOpenIM failed'"Which operating system does the issue occur on?
Linux leon 4.4.0-97-generic #120-Ubuntu SMP Tue Sep 19 17:28:18 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
If on linux, are you using X11 or Wayland?
X11

```
xyos@leon:~/code/alacritty$ RUST_BACKTRACE=1 ./target/debug/alacritty
thread 'main' panicked at 'XOpenIM failed', /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692:16
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /checkout/src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:381
   3: std::panicking::default_hook
             at /checkout/src/libstd/panicking.rs:397
   4: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:611
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:572
   6: winit::platform::platform::x11::Window2::new
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:692
   7: winit::platform::platform::Window2::new
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/mod.rs:181
   8: winit::window::<impl winit::WindowBuilder>::build
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/window.rs:113
   9: glutin::platform::platform::x11::Context::new
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/x11.rs:213
  10: glutin::platform::platform::Context::new
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/platform/linux/mod.rs:52
  11: glutin::GlWindow::new
             at /home/xyos/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.9.2/src/lib.rs:322
  12: alacritty::window::Window::new
             at src/window.rs:193
  13: alacritty::display::Display::new
             at src/display.rs:140
  14: alacritty::run
             at src/main.rs:95
  15: alacritty::main
             at src/main.rs:45
  16: __rust_maybe_catch_panic
             at /checkout/src/libpanic_unwind/lib.rs:99
  17: std::rt::lang_start
             at /checkout/src/libstd/panicking.rs:459
             at /checkout/src/libstd/panic.rs:361
             at /checkout/src/libstd/rt.rs:61
  18: main
  19: __libc_start_main
  20: _start
```"06/29/19 02:35:53 PMFix X11 clipboard hanging with mime setFixes #2595. =||= duplicate of #830 chrisduerrChristian Duerr06/29/19 01:51:59 PMFix X11 clipboard hanging with mime set1
260511/19/19 04:09:27 PMazarusRight click doesn't work."Which operating system does the issue occur on? Gentoo.

If on linux, are you using X11 or Wayland? Both.

I noticed that I can't right click to play songs in ncmpcpp. This works fine in st, and any other terminal emulator I've tried."06/30/19 04:04:10 PMSuggest installing fish completions per-userThis uses $fish_complete_path[1], which should be in the user's home directory, so `sudo` is no longer needed.1That makes total sense! Sorry for the false alarm and thank you @chrisduerr and @kchibisov for the help and patience 😄 fahoFabian Homborg06/30/19 03:44:31 PMAlso make the directory1
260610/15/17 06:32:01 AMAlberto Silva#![feature] may not be used on the stable release channel"**Which operating system does the issue occur on?**
Mac OS 10.11.6

When trying to build from master, I get the following output below. I saw a previous issue #158 with a similar output, had something to do with rust compiler, any help greatly appreciated.

```
cargo build --release
   Compiling unicode-width v0.1.4
   Compiling stable_deref_trait v1.0.0
   Compiling unicode-segmentation v1.2.0
   Compiling serde v0.9.15
   Compiling num-traits v0.1.40
   Compiling block v0.1.6
   Compiling foreign-types v0.2.0
   Compiling lazycell v0.5.1
   Compiling vec_map v0.8.0
   Compiling utf8-ranges v1.0.0
   Compiling quote v0.3.15
   Compiling utf8parse v0.1.0
   Compiling linked-hash-map v0.4.2
   Compiling unicode-xid v0.0.4
   Compiling bitflags v0.9.1
   Compiling linked-hash-map v0.3.0
   Compiling khronos_api v1.0.1
   Compiling strsim v0.6.0
   Compiling itoa v0.3.3
   Compiling core-foundation-sys v0.3.1
   Compiling lazycell v0.4.0
   Compiling void v1.0.2
   Compiling cfg-if v0.1.2
   Compiling core-foundation-sys v0.4.4
   Compiling rustc-serialize v0.3.24
   Compiling bitflags v0.7.0
   Compiling slab v0.3.0
   Compiling fnv v1.0.5
   Compiling winapi v0.2.8
   Compiling libc v0.2.30
   Compiling heapsize v0.3.9
   Compiling pkg-config v0.3.9
   Compiling ansi_term v0.9.0
   Compiling xdg v2.1.0
   Compiling smallvec v0.4.3
   Compiling dtoa v0.4.2
   Compiling serde v1.0.11
   Compiling approx v0.1.1
   Compiling lazy_static v0.2.8
   Compiling winapi-build v0.1.1
   Compiling log v0.3.8
   Compiling regex-syntax v0.4.1
   Compiling odds v0.2.25
   Compiling owning_ref v0.3.3
   Compiling vte v0.3.2
   Compiling synom v0.11.3
   Compiling xml-rs v0.6.1
   Compiling yaml-rust v0.3.5
   Compiling unreachable v1.0.0
   Compiling filetime v0.1.10
   Compiling rand v0.3.16
   Compiling term_size v0.3.0
   Compiling errno v0.2.3
   Compiling atty v0.2.2
   Compiling fsevent-sys v0.1.6
   Compiling net2 v0.2.31
   Compiling iovec v0.1.0
   Compiling memchr v1.0.1
   Compiling malloc_buf v0.0.6
   Compiling shared_library v0.1.7
   Compiling kernel32-sys v0.2.2
   Compiling nodrop v0.1.9
   Compiling syn v0.11.11
   Compiling thread_local v0.3.4
   Compiling textwrap v0.7.0
   Compiling fsevent v0.2.16
   Compiling parking_lot_core v0.2.4
   Compiling cgmath v0.15.0
   Compiling mio v0.6.10
   Compiling objc v0.2.2
   Compiling aho-corasick v0.6.3
   Compiling arraydeque v0.2.3
   Compiling core-foundation v0.3.0
   Compiling core-foundation v0.4.4
   Compiling clap v2.26.0
   Compiling serde_json v1.0.2
   Compiling gl_generator v0.5.5
   Compiling parking_lot v0.4.5
   Compiling euclid v0.12.0
   Compiling serde_yaml v0.7.1
   Compiling objc_id v0.1.0
   Compiling core-graphics v0.8.2
   Compiling walkdir v0.1.8
   Compiling regex v0.2.2
   Compiling mio-more v0.1.0
   Compiling objc-foundation v0.1.1
   Compiling core-text v6.1.2
   Compiling cocoa v0.9.2
   Compiling notify v4.0.1
   Compiling copypasta v0.0.1 (file:///Users/aas/Applications/alacritty/copypasta)
   Compiling font v0.1.0 (file:///Users/aas/Applications/alacritty/font)
   Compiling glutin v0.9.2
   Compiling alacritty v0.1.0 (file:///Users/aas/Applications/alacritty)
   Compiling gleam v0.4.8
   Compiling serde_derive_internals v0.15.1
   Compiling winit v0.7.6
   Compiling serde_derive v1.0.11
   Compiling env_logger v0.4.3
   Compiling cgl v0.2.1
warning: variable does not need to be mutable
 --> /Users/aas/Applications/alacritty/target/release/build/alacritty-b34087bbb366c4ee/out/gl_bindings.rs:9:23
  |
9 |         fn metaloadfn(mut loadfn: &mut FnMut(&str) -> *const __gl_imports::raw::c_void,
  |                       ^^^^^^^^^^
  |
  = note: #[warn(unused_mut)] on by default

error[E0554]: #![feature] may not be used on the stable release channel
  --> src/main.rs:18:1
   |
18 | #![feature(alloc_system)] extern crate alloc_system;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

error: Could not compile `alacritty`.
```"07/06/19 07:34:57 PMGnome tweaks"This makes two small changes for better support under gnome:

- Allow setting the `_GTK_THEME_VARIANT` hint.  This permits selecting dark title bars to go with a dark terminal theme
- Allow setting both the instance and class portions of the `WM_CLASS` hint (with CLI support).  This gives complete control over which desktop entry gnome-shell associates with the window.  Without this, gnome-shell would always associated the created window with alacritty.desktop, even if it was launched from a custom desktop entry (e.g. to create a dedicated vim window).  The commit message gives an example."22yep my bad; fixed nowbkoropoffChristian Duerr07/06/19 08:40:22 AMAdd change log entry1
261112/23/17 01:36:32 AMJoe MoonFallback"Disclaimer: total rust n00b.

This was the only thing keeping me from switching over, so I took a crack at implementing the requested changes in #610 .

* rebased against current master
* fixed all the multiline method signatures
* inlined `get_specific_descriptor`
* fixed indentation of chained method
* implemented a separate `to_font_with_fallbacks` constructor on `Descriptor` (wasn't totally sure this is what you meant [here](https://github.com/jwilm/alacritty/pull/610#discussion_r122882474)

Also not sure if I should squash this with @algesten's and leave him as the author, since my contribution is so trivial.

fixes #45"07/06/19 09:00:17 AMUse Menlo as fallback font on macOS"This commit makes alacritty use Menlo as a fallback font on macOS if the config specified font family isn't found.

closes #2585 "3Thanks for the effort here @sodiumjoe. I ended up creating a much smaller PR to only focus on the Menlo fallback list in #956. Regarding fallbacks in the config, this is something I'd very much like to support, but I'd like to add it as part of a much more extensive font configuration overhaul. I would be very interested in your feedback. The RFC is in #957.nangtrongvuonDzung Le07/04/19 07:48:47 AM"Use Menlo as fallback font on macOS

This commit makes alacritty use Menlo as a fallback font on macOS if the config specified font family isn't found."1
261412/24/17 06:03:16 PMMaxim BazStack overflow when increasing font size to its maximum"ArchLinux, X11

Hold <kbd>Ctrl+plus</kbd> until the font size gets largest possible. Then alacritty is stuck, pressing any character will do nothing, <kbd>Ctrl+minus</kbd> will not decrease font anymore, and within a few seconds alacritty will crash.

```
Size(22)
Size(24)
Size(28)
Size(30)
Size(32)
Size(38)
Size(44)
Size(48)
Size(50)
Size(54)
Size(56)
Size(58)
Size(62)

thread 'main' has overflowed its stack
fatal runtime error: stack overflow
[1]    16295 abort (core dumped)  alacritty
```

Stress-testing new feature #625 :stuck_out_tongue_winking_eye: Other than that, works great!"07/08/19 06:13:56 PMChange mouse cursor when hovering over the message bar"This PR sets the mouse cursor to an arrow when over the message bar, and to a pointer when over the close button. This indicates that the message bar isn't part of the regular terminal, and that the close button can be clicked on and closed.

Feedback welcome!" =||= @valentjedi it was reopened due to @Aaron1011's comments in #955. The case they mentioned is now addressed on master.CrackedP0tElaina Martineau07/08/19 04:38:28 AMSet dirty to true in set_mouse_cursor1
261910/16/17 04:57:05 PMErik NilsenUse correct keyname for decreasing font size in MacOS 07/10/19 09:24:05 PMFix cursor color setting with escape sequence"The cursor rework introduced a regression where cursor color was always picked
from a config file, rather then using `ansi::NamedColor::Cursor` and
`ansi::NamedColor::CursorText` for this purposes.

Fixes:  #2617" =||= thanks!kchibisovKirill Chibisov07/06/19 10:37:21 PM"Fix cursor color setting with escape sequence

The cursor rework introduced a regression where cursor color was always picked
from a config file, rather then using `ansi::NamedColor::Cursor` for this
purpose.

This commit also removes `CursorText` option from `NamedColor` enum,
since we can't speculate with `CursorText` during runtime.

Cursor rework commits:
  cfc20d4f34dca535654cc32df18e785296af4cc5
  371d13f8ef95157c97f7de9964bcbc89d4a8e930
  0d060d5d801e3abb55035269138d819d38fc175b"1
262110/17/17 05:15:25 PMAlberto SilvaFont Rendering - Blurry letters"**Which operating system does the issue occur on?**
macOS

As reported by @weslly in https://github.com/jwilm/alacritty/commit/e8f5ab89ee0b6810649f76c6dbd15ee1105554e8.

![screen shot 2017-10-16 at 1 23 45 pm](https://user-images.githubusercontent.com/7071307/31625877-acf97186-b275-11e7-9000-1074a9012dd6.png)
![screen shot 2017-10-16 at 12 00 17 pm](https://user-images.githubusercontent.com/7071307/31625878-ad0889be-b275-11e7-9b5e-5efe36ad7a12.png)

"07/08/19 03:19:43 PMUpdate shell completions"Add `--class` and `-t` options to shell completions.

Fixes: #2612"3"👍 
"kchibisovKirill Chibisov07/07/19 12:45:38 AMUpdate shell completions1
262210/17/17 05:15:25 PMJoe WilmFix render issues on macOS"Parts of neighboring glyphs in the atlas were being rendered
incorrectly. The issue is resolved by aligning cells to the pixel grid.

This behavior was achieved previously by first applying integer
truncation before casting to a float.

Fixes #844."07/07/19 01:14:05 PMChange comment symbols for desired alignment"Before:
![Screenshot_Sun 07 Jul 2019 03:43:37 PM MSK](https://user-images.githubusercontent.com/27620401/60768591-49994780-a0ce-11e9-8bdd-b37aeb4abc80.png)

After:
![Screenshot_Sun 07 Jul 2019 03:43:01 PM MSK](https://user-images.githubusercontent.com/27620401/60768592-4e5dfb80-a0ce-11e9-921b-582c6c54b1b2.png)" =||= "👍 
"kchibisovKirill Chibisov07/07/19 12:41:31 PMChange comment symbols for desired alignment1
262310/21/17 10:26:43 PMJoe WilmFix solid background color opacity"Since landing the patch adding transparency support to Alacritty,
there's been an issue where othewise solid background cells were also
being rendered partially transparent. Now, all filled background cells
are rendered fully opaque.

Some logic was added to support discarding filled backgrounds which had
the same color as the default background. This means that, if the
default background is #000 and a cell has that background, it will never
be rendered opaque. This may not be correct.

Note that many truecolor vim color schemes print spaces for default
colored background cells. Performance can be dramatically improved by
using ctermbg=NONE guibg=NONE to skip rendering those cells."07/07/19 01:52:51 PMFix saving of ref tests"Since ref tests were only stored whenever winit requested the window
close, they would not get stored properly when the terminal was closed
through Alacritty using `exit`, Ctrl+D or similar.

This moves the ref test code to the and of the main entry point, which
will always be executed regardless of how the terminal was shutdown."1"Ok, here's the latest with comparison to urxvt. Alacritty on the left.

## No selection

![image](https://user-images.githubusercontent.com/4285147/31835160-5c91ea8a-b585-11e7-94c4-44dc7537a004.png)


## Selection

![image](https://user-images.githubusercontent.com/4285147/31835179-70acdc6e-b585-11e7-9e6f-c4bb2e75783b.png)

There's something slightly different in urxvt (no selection) on lines 

    Fg=Black,     Bg=Black,      Inverse TEST
    Fg=Foreground,Bg=Background, Inverse TEST

where the text appears lighter than in neighboring lines. Not sure what's going on here, but I'm not interested in pursuing it further atm."chrisduerrChristian Duerr07/07/19 01:35:01 PM"Fix saving of ref tests

Since ref tests were only stored whenever winit requested the window
close, they would not get stored properly when the terminal was closed
through Alacritty using `exit`, Ctrl+D or similar.

This moves the ref test code to the and of the main entry point, which
will always be executed regardless of how the terminal was shutdown."1
262410/21/17 10:26:15 PMRobert BittleList all valid actions in config error message07/07/19 02:51:12 PMFix saving of ref tests"Since ref tests were only stored whenever winit requested the window
close, they would not get stored properly when the terminal was closed
through Alacritty using `exit`, Ctrl+D or similar.

This moves the ref test code to the and of the main entry point, which
will always be executed regardless of how the terminal was shutdown."7Thanks!chrisduerrChristian Duerr07/07/19 02:48:40 PMFix formatting issues1
263005/05/18 03:13:58 PMPaulo MatosFonts seem to overlap"Which operating system does the issue occur on?

Fedora 26

If on linux, are you using X11 or Wayland?

i3, X11 with alacrity master.

See screenshot.
![2017-10-18-143611_1247x499_scrot](https://user-images.githubusercontent.com/7911/31718918-e4a997da-b411-11e7-87a4-56e630081a66.png)"07/10/19 09:17:21 PMFix row occ not set during new and resetFixes #2613. =||= This is a configuration issuechrisduerrChristian Duerr07/09/19 07:26:23 PMRevert backtrace update1
263311/07/17 05:09:50 PMBen BoeckelX locks up"Which operating system does the issue occur on?

Linux/X11

Haven't been able to track this down, but it has happened on multiple machines now and only after changing over to alacritty and with alacritty on the screen. I'll switch back to urxvt for a while to see if it still happens."07/22/19 06:56:09 PMFix NetBSD build failureFixes #2631. =||= FWIW, I've seen what is probably the same thing without running Alacritty. I suspect that there's some lockup in my video driver that OpenGL-using applications tickle (I've seen it with an OpenGL game and `mpv` as well).chrisduerrChristian Duerr07/16/19 03:46:54 PMFix x11-dl depedency annotation1
263610/19/17 11:40:47 PMTy OverbyCTRL-Space input is not passed through"> Which operating system does the issue occur on?
OSX

Because CTRL-Space doesn't have an ascii representation, many terminals send NUL.

See more: https://stackoverflow.com/questions/23189568/control-space-vim-key-binding-in-normal-mode-does-not-work"07/10/19 06:27:44 PMFix mouse move handling"This commit fixes the regression introduced in
84aca672964e29b5b4503b7da7bc34fc395f08ab

Fixes: #2635 " =||= So it is!kchibisovChristian Duerr07/10/19 06:25:40 PMInvert statement1
264211/11/17 05:44:33 PMBryan GilbertDon't enforce window dimensions if configured with 0 columns or lines"Currently alacritty always enforces the starting window size based on the dimensions specified as an option or in the configuration file. This presents a problem for me, because I use XMonad to create the window with a certain size and in a certain position based on the size of the screen.

However, since alacritty forces itself into a certain size instead of allowing the window manager to dictate the size of the window, it makes alacritty difficult to integrate into my workflow as the window always resizes itself to something else. This pull request essentially falls back to using the existing size of the window when either the `width` or the `height` dimension properties are less than or equal to zero.

This will allow me to specify `-d 0 0` in order to tell alacritty not to resize itself at all.

Thanks!"07/15/19 09:32:48 PMOverride default bindings with subset mode matchFixes #2641.27Thanks for the rebase. LGTM.chrisduerrChristian Duerr07/13/19 09:13:56 PMOverride default bindings with superset modes1
264410/20/17 02:59:29 PMJoe WilmAdd Function + Modifier keybindings"Also rearranged the default config slightly to move the long key binding
list to the bottom of the file.

Resolves #690 
Resolves #727 "07/14/19 10:53:05 AMQuery DirectWrite for the rendering mode to use"As an alternative to #2598, query DirectWrite for the font rendering mode to use instead of hard-coding one.

With the settings on my system this doesn't make much of a difference visually, but asking for the OS to decide the mode seems better simply because there could be different system configurations that result in different modes, or it could even be varied on a per font basis by Microsoft."1Thanks for the rebase. LGTM.TheDecryptorAlex07/14/19 03:33:41 AMNote DirectWrite anti-aliasing change in changelog1
264810/20/17 10:14:39 PMIlya KolpakovMargins (like xterm -borderwidth)"The letters in the first/last columns can be difficult to read because they are very close to window borders. It would be nice to have a possibility to create some space similar to `xterm`'s `borderwidth` option. One can have different settings for vertical and horizontal margins."07/30/19 08:51:30 PMURL parser: add angle brackets as delimiters"After having #2629 sitting there for a while I decided to have a go at it. The change is pretty straightforward. There isn't much to say in addition to what I already explained there. Let me know if this is ok. 

Fixes #2629."6Many thanks, somehow I did not spot this option in the config file.mebeimMarco Bonelli07/15/19 12:53:18 AMURL parser: add angle brackets as delimiters1
264911/14/17 05:08:16 PMNone"""out of bounds"" crash - access beyond last row?""Running the irssi irc client continuously in tmux on a remote machine causes alacritty to always crash after irregular amounts of time.

The window has 81 rows, so it seems something is trying to access rows that don't exist.

Alacritty version is 9f79d72109b5745c32a8c0bdd4d17799f827fbba from github.

Run as:
```RUST_LOG=full RUST_BACKTRACE=full ./target/debug/deps/alacritty-b2da0394a0ca1112```

Full backtrace:
```
thread 'main' panicked at 'index out of bounds: the len is 82 but the index is 82', /Users/travis/build/rust-lang/rust/src/libcollections/vec.rs:1552
stack backtrace:
  0:        0x10d970043 - std::sys::imp::backtrace::tracing::imp::unwind_backtrace::h884a721e113c3303
  1:        0x10d975113 - std::panicking::default_hook::{{closure}}::h7a7d734b2824d103
  2:        0x10d974d5c - std::panicking::default_hook::h3eb11bd6cbfdc331
  3:        0x10d977287 - std::panicking::rust_panic_with_hook::h8b9b25777425677b
  4:        0x10d977124 - std::panicking::begin_panic::h69fe06a9d67b6165
  5:        0x10d977092 - std::panicking::begin_panic_fmt::haf8695bfb6c52436
  6:        0x10d976ff7 - rust_begin_unwind
  7:        0x10d99d820 - core::panicking::panic_fmt::hfedd6515bcee8bb1
  8:        0x10d99d798 - core::panicking::panic_bounds_check::h7e54553d1bd69142
  9:        0x10d3e9d28 - <collections::vec::Vec<T> as core::ops::Index<usize>>::index::h385d942757023add
 10:        0x10d408b1f - <alacritty::grid::Grid<T> as core::ops::Index<&'point alacritty::index::Point>>::index::h2a7413910317e701
 11:        0x10d4183e8 - alacritty::term::RenderableCellsIter::populate_no_cursor::h895cc7459e0f8b7a
 12:        0x10d418552 - alacritty::term::RenderableCellsIter::initialize::h9f6592acd443ac18
 13:        0x10d417953 - alacritty::term::RenderableCellsIter::new::hb73e002fe676d3c4
 14:        0x10d41bf82 - alacritty::term::Term::renderable_cells::hecd7505a9250eecd
 15:        0x10d406ebe - alacritty::display::Display::draw::{{closure}}::hebea04e907d57673
 16:        0x10d40e1aa - alacritty::renderer::QuadRenderer::with_api::h3450a8f2b1aaef03
 17:        0x10d406a1b - alacritty::display::Display::draw::hf41d6aeb6b513ec8
 18:        0x10d28538d - alacritty::run::he26f75e5563d5b1e
 19:        0x10d283a3f - alacritty::main::h015c9c3f7e93b13b
 20:        0x10d97831a - __rust_maybe_catch_panic
 21:        0x10d977704 - std::rt::lang_start::h6e7c6ad302fab11a
 22:        0x10d285bf9 - main
thread 'pty reader' panicked at 'index out of bounds: the len is 82 but the index is 82', /Users/travis/build/rust-lang/rust/src/libcollections/vec.rs:1561
stack backtrace:
  0:        0x10d970043 - std::sys::imp::backtrace::tracing::imp::unwind_backtrace::h884a721e113c3303
  1:        0x10d975113 - std::panicking::default_hook::{{closure}}::h7a7d734b2824d103
  2:        0x10d974d5c - std::panicking::default_hook::h3eb11bd6cbfdc331
  3:        0x10d977287 - std::panicking::rust_panic_with_hook::h8b9b25777425677b
  4:        0x10d977124 - std::panicking::begin_panic::h69fe06a9d67b6165
  5:        0x10d977092 - std::panicking::begin_panic_fmt::haf8695bfb6c52436
  6:        0x10d976ff7 - rust_begin_unwind
  7:        0x10d99d820 - core::panicking::panic_fmt::hfedd6515bcee8bb1
  8:        0x10d99d798 - core::panicking::panic_bounds_check::h7e54553d1bd69142
  9:        0x10d2620b8 - <collections::vec::Vec<T> as core::ops::IndexMut<usize>>::index_mut::h80b2a1fd0adbdbad
 10:        0x10d0e9c3f - <alacritty::grid::Grid<T> as core::ops::IndexMut<&'point alacritty::index::Point>>::index_mut::he2f2b33300115f7b
 11:        0x10d238238 - <alacritty::term::Term as alacritty::ansi::Handler>::input::h38b25ef3b43b5502
 12:        0x10d26f1cc - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::print::h1bbcd6503e2a2250
 13:        0x10d17d9a0 - vte::Parser::perform_action::ha5470c3c1c3e22e2
 14:        0x10d17e66a - vte::Parser::perform_state_change::ha59191296917e01e
 15:        0x10d17e9db - vte::Parser::advance::h060f2b296d3adeef
 16:        0x10d27a336 - alacritty::ansi::Processor::advance::hadba47c2171baa34
 17:        0x10d20717c - <alacritty::event_loop::EventLoop<Io>>::pty_read::h8c0c86f61ccffee4
 18:        0x10d206226 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h0db2a67f949da023
 19:        0x10d173c75 - std::sys_common::backtrace::__rust_begin_short_backtrace::h9e5f8791a6b57a35
 20:        0x10d17c69e - std::thread::Builder::spawn::{{closure}}::{{closure}}::hf8f80e7bd991c509
 21:        0x10d270e65 - <std::panic::AssertUnwindSafe<F> as core::ops::FnOnce<()>>::call_once::h434813d67c2348e4
 22:        0x10d17d59e - std::panicking::try::do_call::h61a1b9db16b3a2d9
 23:        0x10d97831a - __rust_maybe_catch_panic
 24:        0x10d17d04c - std::panicking::try::h44a3b0daba729aec
 25:        0x10d17acc5 - std::panic::catch_unwind::h15134a4717a565c6
 26:        0x10d17c0bb - std::thread::Builder::spawn::{{closure}}::h55b2c6785ba8d20e
 27:        0x10d1fefa3 - <F as alloc::boxed::FnBox<A>>::call_box::hc2de7fc48eb0897a
 28:        0x10d974745 - std::sys::imp::thread::Thread::new::thread_start::h993b7e5cb7871f66
 29:     0x7fff8323e99c - _pthread_body
 30:     0x7fff8323e919 - _pthread_start
```

The durations after which crashes have occurred:
```
14936.222349
72115.422882
43475.226691
25231.261642
31821.904172
18509.776205
29194.054814
15107.070347
32855.495703
99737.405839
15130.510268
30697.664912
91362.931336
29762.215947
76674.832828
15152.655278
16026.488250
14962.226446
3933.400551
21053.432503
15114.813950
29907.619427
15108.094483
```

Running on OSX 10.11.6."07/16/19 03:45:47 PMremove redundant use"The outputs below were printed in executing `make app` on macOS.

```
warning: the item `WindowExt` is imported redundantly
   --> alacritty_terminal/src/window.rs:406:13
    |
22  | use glutin::os::macos::WindowExt;
    |     ---------------------------- the item `WindowExt` is already imported here
...
406 |         use glutin::os::macos::WindowExt;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: #[warn(unused_imports)] on by default
```" =||= This was resolved.mihyaeru21Mihyaeru07/16/19 11:02:49 AMremove redundant use1
265910/21/17 10:25:49 PMHugo TuniusUpdate macOS icon with icon from #285"This takes the icon agreed on in #285 and makes it the new icon
for macOS apps generated with `make app`. It's using the icns that
@net posted in the thread.

![image](https://user-images.githubusercontent.com/1333960/31856207-72c4a124-b6b3-11e7-93c9-040702e52f78.png)"07/23/19 09:21:12 PMDon't load embedded bitmaps when disabled in fcResolves #2655 =||= "Personally, I prefer the blue flame variant.

<img width=""148"" alt=""screen shot 2017-10-21 at 8 31 23 pm"" src=""https://user-images.githubusercontent.com/6983821/31856966-faa8846c-b69e-11e7-9932-fe49e750726a.png"">"roman-holovinRoman Holovin07/23/19 08:32:20 PMUpdate changelog1
266003/08/19 01:07:34 AMDeleted userUnhandled CSI"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11

I'm getting a bunch of unhandled CSI characters. I compiled master just now.

```
asthma@dev ~ $ alacritty 
[Unhandled CSI] action='h', args=[34], intermediates=[]
[Unhandled CSI] action='l', args=[1005], intermediates=[63]
[Unhandled CSI] action='l', args=[34], intermediates=[]
[Unhandled CSI] action='h', args=[34], intermediates=[]
[Unhandled CSI] action='l', args=[1003], intermediates=[63]
[Unhandled CSI] action='h', args=[34], intermediates=[]
[Unhandled CSI] action='l', args=[34], intermediates=[]
[Unhandled CSI] action='h', args=[34], intermediates=[]
[Unhandled CSI] action='l', args=[1003], intermediates=[63]
[Unhandled CSI] action='h', args=[34], intermediates=[]
[Unhandled CSI] action='h', args=[34], intermediates=[]
^ this 50 times more
```"07/20/19 08:37:36 AMAlways show Text mouse cursor when using Shift to select a block of textResolves #2550  =||= "Closing this as it is not about any specific escapes necessary to work properly. This was originally just debug output and the log level has been changed to represent that.

If there should be any escape sequences necessary to make something work, opening a separate issue for that sequence explicitly is the way to go."jjsullivan5196John Sullivan07/20/19 07:53:50 AMAlways show Text mouse cursor when using Shift to select a block of text1
266102/07/20 07:53:13 AMMichal RusPerformance of `cat` in GNU Screen worse than xterm’s on X11?"> Which operating system does the issue occur on?

NixOS (Linux) 17.03.1844.83706dd49f (Gorilla)

> If on linux, are you using X11 or Wayland?

X11

---

If I set up _really_ fast keyboard repetition, e.g. `""-ardelay"" ""150"" ""-arinterval"" ""8""` in xserver’s args, and hold a letter in both xterm, and Alacritty, the latter visibly stutters, while xterm is very smooth.

Here’s my config, nothing fancy: https://github.com/michalrus/dotfiles/blob/237d1a7e94e22f6ea5c3e3c28d50452a4342e70e/dotfiles/michalrus/base/.config/alacritty/alacritty.yml"08/24/19 11:18:51 PMAlways show Text mouse cursor when using Shift to select a block of textResolves #2550 13closing due to oldish issue, and this is unlikely true for a modern alacrittyjjsullivan5196Christian Duerr08/24/19 09:52:29 PMRename mouse cursor update method1
266410/23/17 03:06:46 PMHugo TuniusSend text at start support"In iTerm I use

```
tmux ls && read tmux_session && tmux attach -t ${tmux_session:-default} || tmux new -s ${tmux_session:-default}
```

for ""Send text at start"" to ensure I always start in tmux. Is it possible to do so in Alacritty? I haven't found anything like it so maybe it's something that is open to contriubtion."08/06/19 10:59:17 PMIgnore unsupported CSI sequences"I came from https://github.com/akinomyoga/ble.sh/issues/28, https://github.com/jwilm/alacritty/issues/2652, https://github.com/jwilm/alacritty/issues/2171 .

For details of the problem, please refer to these issues. If it does not support some control functions, it should ignore them rather than triggering random control functions which have similar coded representations. The problem is not restricted in private sequences, but even some ANSI sequences (such as SL, SR, PPA, etc.) triggers wrong control functions in the current Alacritty where parameter/extra-intermediate bytes of CSI sequences are not checked. In this patch, the sequences with extra bytes are handled separately from the sequences without extra bytes.

Note: the support for DA2 (Secondary Device Attribute) is not included in this patch.

Fixes #2171."18Cool I figure it would be something like that. Thanks :)akinomyogaKoichi Murase08/05/19 12:09:59 AMRename ref test1
266605/18/18 11:49:44 PMAlberto SilvaStrange glitch with Neovim and mouse mode"**Which operating system does the issue occur on?**
macOS

**Description**
I've noticed when setting `set mouse=a` within init.vim, whenever I open neovim in Alacritty, I get a very strange glitch were the colorscheme is disabled or a crazy amount of flickering occurs. Once the mouse setting is disabled in Neovim, problem is gone. So I thought to post this here in case anyone else runs into this issue, I'll be making a new issue in Neovim's repo as well and reference here shortly.
"07/28/19 05:04:27 PMFix cursor flickering on url hover"This commit fixes the regression introduced in
84aca672964e29b5b4503b7da7bc34fc395f08ab.

Fixes #2665.

`reset_mouse_cursor()` was called most of the time twice during mouse move actions and in case of hovering over already highlighted url, we were resetting `hand` cursor and then immediately setting it back,  this behavior was causing cursor ""flickering""."14I'm not able to reproduce this and it sounds unlikely that this is an alacritty issue (sounds more like issues with the init.vim). If the issue still exists and you wish to troubleshoot this further, please let me know and I'll re-open this.kchibisovKirill Chibisov07/21/19 01:25:23 AM"Fix cursor flickering on url hover.

This commit fixes the regression introduced in 84aca67 and also fixes url
highlight bounds computation when url ends on a last column.

Fixes #2665."1
267211/20/17 07:13:57 AMHarings RobRequest: Globbal toggle key"Hi,

Great product, I really love it, it is basically the only full terminal that allows a smooth vim experience on os x.

The only thing I miss is a toggle. When I am in certain software, I would like to quickly open up, run a command and close down.

Any plans on implementing this?

Regards,"07/26/19 11:18:48 AMFix Double-click selects trailing tab"Add `\t` to the `semantic_escape_chars` in alacritty.yml.

Fixes #2639" =||= Good idea @programus, have updated my post 👍Ben496Ben Firth07/23/19 08:29:24 PMUpdate changelog1
267612/24/17 09:33:26 PMRémi GardeIcon for linux desktop entry"Uses the icon from #285 converted to PNG (a SVG might be better if @net could make one).

I put the icon in `assets` but there might be a better location.

How it looks like on Cinnamon desktop: 
![alacritty_mint](https://user-images.githubusercontent.com/25256520/31931718-cf828118-b8ef-11e7-891d-9a842a9aba31.png)"07/24/19 11:45:58 PMFix copypasta README.md formatting =||= Closing this for now until we get the final icon. I filed an issue to track remaining work.kchibisovKirill Chibisov07/24/19 11:25:45 PMFix copypasta README.md formatting1
267712/24/17 08:15:43 PMDustin SpeckhalsChange mouse cursor on terminal mode change"Some terminals have functionality around changing the type of mouse
cursor dynamically (arrow and text) based on which mode(s) the VTE is
in. For example, gnome-terminal changes the cursor from text (default)
to an arrow when opening programs that track mouse events (e.g. vim,
emacs, tmux, htop, etc.). The programs all allow using the mouse
interactively under some circumstances (like executing `set mouse=a` in
vim).

The programs that use an interactive mouse set the terminal mode to
different values. Though they're not entirely the same terminal mode
across programs, an emulator like vte (the library gnome-terminal
implements), changes the mouse cursor if the mouse mode is one of the
following:

- 1000: Mouse Click Tracking
- 1001: Mouse Highlight Tracking
- 1002: Mouse Cell Motion Tracking
- 1003: Mouse All Motion Tracking
- 1004: Mouse Focus Tracking

See https://github.com/GNOME/vte/blob/6acfa59dfcceef65c1f7e3570db37ab245f049c4/src/vteseq.cc#L708
for more information.

This commit adds functionality that changes the winit/glutin
`MouseCursor` when a mouse-listening mode of 1000-1004 is set. It
behaves similarly to when the window title changes.

### Notes:
- I renamed `ReportMouseMotion` to `ReportCellMouseMotion` to be more precise.
- I added `ReportAllMouseMotion` (1003); tmux sets this mode when mouse mode is on.
- I wrapped winit's `CursorMode` into a local library enum. It felt kind of dirty leaking winit all over the application.
- Please let me know of anything that could be better implemented!"07/24/19 11:45:58 PMSupport for Font Ligatures using Harfbuzz on Linux"Initial support for font ligatures using harfbuzz and free type on linux.
This builds on the work done by @anirudhb in [[WIP] Basic text shaping and rendering using Harfbuzz](https://github.com/jwilm/alacritty/pull/2181)
Step in the direction towards closing #50 .

This is relatively early in it's implementation but I wanted to get some eyes on it as changes past this point will start to effect core pieces of infrastructure (rendering etc.).

Currently code will render ligatures on linux with a monospace font (I've only tested with Fira Code).

![image](https://user-images.githubusercontent.com/4822730/61919571-0f6fd880-af0b-11e9-9104-2d7567aaa335.png)

## Major Changes 
---
* TextRun replaces RenderableCell as main method of rendering text
* Harfbuzz used to shape runs of text (allowing ligatures)
* GlyphKey uses u32 (glyph index) instead of char

Support for font ligatures is enabled by changing the base rendering unit from a RenderableCell to a TextRun (name flexible). A TextRun bundles a series of RenderableCells that share the same render properties (line, fg, bg, etc.) into one unit. Each TextRun gets shaped by harfbuzz returning the glyph indices for each character.  From here each glyph is rasterized as normal through the glyph cache.

Changes are guarded behind the `hb-ft` feature in `alacritty_terminal`. 
Along with adding new code under this feature, some code is removed when this feature is turned on. Mainly code dealing with rendering RenderableCell's (and GlyphKey's c member).
The idea behind this is to ensure that there aren't any unknown uses of RenderableCell in the codebase. Once the code is free of RenderableCell when hb-ft is on, more intrusive changes can be made to rendering that break the conventions set by RenderableCell.

## Caveats
---
* Only works on linux.
* Incurs performance hit of shape() call for each text run for each draw call (haven't done any testing yet to see how steep this is).
* Ignores position information from harfbuzz, this means it probably only works for monospace ligatures (Fira Code) since each ligature is still rendered as if it's in it's own cell.
* Each Face object carries an instance of hb_font with it, in addition to `freetype::Face`, this doesn't seem hugely problematic but is should definitely be noted.
* Post shaping work is mainly done in Glyph Indices, this makes it hard to employ the same font recovery technique currently used by `load_face_with_glyph` as we don't have a char available to guess at the font. This functionality can be recovered by keeping the char stored with it's indice however this means `GlyphKey` would no longer fit in a `u64`.

## Questions
---
* Should TextRuns be cached similar to how GlyphKeys are currently?
* Can this approach be adapted to Mac OSX and Windows, and if it can how different does the code need to be?
* Currently code grabs a `Vec<RenderableCell>` from `grid` and wraps that as a `TextRunIter` to produce `TextRun`s. Would it make more sense for `grid` to directly produce a `TextRunIter` and avoid the unecessary middle allocation (hopefully)?
* Should alacritty only support monospace ligatures and ignore ""proper"" ligatures?
* Can `TextRun` completely replace `RenderabelCell`?
* Does it make sense to use glyph index in `GlyphKey` (instead of char)?

## Remaining Work
---
* Rendering and Atlas construction should hopefully be able to take more advantage of TextRuns then they are currently (none).
* Font ligatures should be a configurable option, this is a matter of enabling/disabling the harfbuzz feature based on a bool.
* Harfbuzz supports building a font from a freetype Face directly, however none of the rust bindings expose that functionality currently.
* Glyph Index is represented by a raw u32, this should be replaced with a newtype wrapper such as `GlyphIndex(u32)` similar to Line and Column.
* Benchmarking performance with new TextRun implementation

I'm relatively new to the open source community so my apologies if something is out of place or I've missed a process I should've completed.

I initially ran my code through `cargo fmt` however it changed a ton of the codebase that I hadn't touched so I undid those changes. Is there a common `rustfmt.toml` config the repo uses?
"62Thanks for the PR; looks good!thunderseethethunderseethe10/07/19 09:45:55 PMTidy up merge and ensure build behaves as expected1
268110/27/17 01:48:11 AMTy Coghlanfix warning on mac caused by set_urgent"On mac, compiling throws a warning due to `is_urgent` not being used within `set_urgent`. This can be changed just by using an underscore instead.
I'm aware of how much of a non-issue this is, but still it's nice to not see any warnings when compiling."08/01/19 03:37:02 PMSwitch to rfind_url for URL detection"This switches to rfind_url for detecting URLs inside the grid. Instead
of expanding at the cursor position, the complete terminal is searched
from the bottom until the visible region is left with no active URL.

Fixes #2629.
Fixes #2627."25Thanks!chrisduerrChristian Duerr08/01/19 02:26:16 PMUpdate lockfile1
268212/23/17 01:32:51 AMmetaspriteAlacritty causing 1-2 mins of busy cursor on i3 desktop, and extreme i3 performance issues"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11

Version: current version in arch user repository, unsure how to check version number

Opening an Alacritty instance causes the mouse to be stuck on ""busy"" instead of the normal cursor, only when the mouse is hovering over the i3wm desktop. Not the biggest of deals, but can be distracting. This effect seems to usually go away after *approximately*  1.5-2 to minutes, but it persists even after the terminal is closed. Running `i3 restart` resets the cursor to normal.

Alacritty also seems to cause performance issues specifically with i3 after long periods of time and many terminals opened and closed. The longer my session lasts and the more Alacritty terminals I open (and close), the worse i3 performance gets (e.g. switching between workspaces becomes extremely slow) while application performance is fine. It eventually becomes unusuable. These issues *only* happen when I'm using Alacritty."08/04/19 12:19:26 PMFix last line update criterion in update_lines."`SizeInfo` lines/cols start from 1, however `RenderableCell` lines/cols start from 0, so explicit inc/dec is required. Also checking for `cell.column == size_info.cols() + 1` seems incorrect here, since it will be called, when our terminal last line will be entirely occupied by text, so underline/strikethrough wouldn't be updated most of the time.

Fixes: #2680"15I am experiencing the same thing with alacritty. I understand that adding --no-startup-id is a workaround, but would be nice to have a solutionkchibisovKirill Chibisov08/01/19 10:06:00 AMImplement proposal1
268307/15/18 07:40:57 PMAndrey ListopadovAlacritty blinks on resize"OS: Arch Linux, openSUSE
DE: KDE
Compositor: KWin
Display Server: Xorg

Resizing Alacritty causes weird flickering
check this video:
(epilepsy warning)
[example.zip](https://github.com/jwilm/alacritty/files/1419366/example.zip)
"07/28/19 05:03:53 PMUpdate gl_generator to 0.13Bump gl_generator dependency to 0.13 now that brendanzab/gl-rs#493 is merged =||= "Yeah, that is tracked in #969, macos definitely still has some issues with resizing.

**Edit:** Just noticed you created that issue, so you probably already know. :D"wkWild Kat07/28/19 02:15:11 PMUpdate gl_generator to 0.131
268610/27/17 04:15:39 PMKareem HTmux not found, even though it's installed"Which operating system does the issue occur on?
OSX High Sierra 10.13 (17A405)

So when opening alacritty, I get this error:
```
zsh tmux plugin: tmux not found. Please install tmux before using this plugin.
```
But I can still use tmux though."07/30/19 10:13:52 PMBump minimum supported Rust version to 1.34.0 =||= I agree with @NickeZ. Feel free to reopen if you determine otherwise, @magicalbanana.chrisduerrChristian Duerr07/30/19 08:45:49 PMUpdate depedencies1
268901/06/18 10:12:36 AMEgor KovetskiyUnable to start when specifying command"Arch Linux, latest build from git.

```
 $  alacritty -e /bin/id               
Event loop exitting due to error: Input/output error (os error 5) [src/event_loop.rs:401]                                                                      

```"08/01/19 02:26:56 PMRemove color from log outputFixes #2474. =||= @kovetskiy why close this?chrisduerrChristian Duerr07/30/19 09:35:54 PM"Remove color from log output

Fixes #2474."1
269110/27/17 01:47:04 AMNoneStack overflow"`cat /dev/random` (without tmux, so not related to #814 ) eats up the stack:
```
thread 'main' has overflowed its stack
fatal runtime error: stack overflow
```
Triggers OSX CrashReporter, which displays the following:
[20171024-135558-crashreporter-edited.txt](https://github.com/jwilm/alacritty/files/1420036/20171024-135558-crashreporter-edited.txt)

OS Version:            Mac OS X 10.11.6 (15G1611)"08/01/19 04:58:33 AMOrganize Readme OS listGroups the Linux distributions together and sort them alphabetically. =||= Thanks for that fantastic stack trace! This should be easy to fix.atouchetAlex Touchet08/01/19 04:16:58 AMOrganize Readme OS list1
269712/22/17 10:13:40 PMOmer Katz[WIP] Run lints as part of the build process08/03/19 01:19:34 PMMove modifier check before URL search"This makes sure that the URL search is only initiated when all required
modifiers are held down. This should improve performance with long URLs.

This was previously the case, however 72dfa47 introduced a regression
which broke this."6Closing due to inactivity. Feel free to reopen if you want to keep working on this.chrisduerrChristian Duerr08/03/19 01:17:08 PMFix formatting issues1
269801/15/18 04:19:33 PMMichal 'vorner' VanerDelayed command start"Hello

I use xmonad as a window manager and on session start, I start multiple alacritty terminals with some specific commands inside (like `alacritty -e top &`). The window manager places them on specific workspaces. Therefore, they are not visible right away, only after I switch to the given workspace.

I observe a strange thing. It seems to me the command is started when the alacritty is first show. Therefore, when I have (for example) a music player controlled by global keyboard shortcuts, it doesn't respond to the keyboard shortcuts until I first switch to the workspace with the music player.

Is something like that possible? That it is not really started until it is drawn for the first time? One thing of note, xmonad is supposed to be „non-reparenting“ window manager (whatever that means), which is said to be quite unusual.

I'll be happy to provide further information if needed.

> Which operating system does the issue occur on?

Linux.

> If on linux, are you using X11 or Wayland?

X11
"08/04/19 08:17:23 PMRemove errno depedency =||= "I can reproduce this issue with `i3` as my WM as follows:

`~/.config/i3/config`
```
# ...

assign [class=""Alacritty""] 9
exec --no-startup-id alacritty -e speaker-test
```

I don't hear the speaker test until I navigate to workspace 9. Using `urxvt` instead works as expected."chrisduerrChristian Duerr08/04/19 12:23:13 AMRemove errno depedency1
270011/11/17 04:24:08 PMNoneFixed typo in README.md08/04/19 04:01:09 PMFix mouse hover over message bar"`visible_to_buffer` can't be used on a point from message bar, such use
of function will result in crash.

This commit fixes the regression introduced in 9dddf64.

Fixes: #2699"2Thanks!kchibisovKirill Chibisov08/04/19 08:19:40 AM"Fix mouse hover over message bar

`visible_to_buffer` can't be used on a point from message bar, such use
of function will result in crash.

This commit fixes the regression introduced in 9dddf64.

Fixes: #2699"1
270111/29/17 02:00:15 AMPeter GervaiMouse selection is not cleared by scrolling"***Which operating system does the issue occur on?***
Debian Linux/sid

***If on linux, are you using X11 or Wayland?***
X11

***What's your pain?***
1) ```ls /usr/bin | while read i ; do echo $i; sleep 1; done```
2) select anything by mouse
3) the selection (reverse strip) stays there while the content scrolls up

I'm not sure whether this is by design or a bug, but OtherTerminals™ work differently.
"08/04/19 07:40:58 PMFix lines in last line not rendered when scrolled up"Instead of creating the rectangles for lines after the line is
completed, the rectangle is now initialized as soon as it is started.
Then when following cells also contain the same line type, the rectangle
is updated.

This resolves the problem of having to finish the last line when it ends
in the last non-empty column in the last line, since the render iterator
only returns non-empty cells and we never get the information that the
underline has ended.

Fixes #2680." =||= Yep, dupe of #836. Not by design, but we also haven't done the work to implement this part of selections; maybe you could call it a bug :). chrisduerrChristian Duerr08/03/19 11:31:14 PM"Fix lines in last line not rendered when scrolled up

Instead of creating the rectangles for lines after the line is
completed, the rectangle is now initialized as soon as it is started.
Then when following cells also contain the same line type, the rectangle
is updated.

This resolves the problem of having to finish the last line when it ends
in the last non-empty column in the last line, since the render iterator
only returns non-empty cells and we never get the information that the
underline has ended.

Fixes #2680."1
270510/30/17 04:25:14 PMMartin Lindhefix some typos08/06/19 10:46:03 PMFix multiple lines with the same color on the same line"This commit fixes regression introduced in ddee14a.

P.s.
I really with feel bad for not spotting this one in a first place."15Wow, thanks! So many typos... 😳 kchibisovKirill Chibisov08/06/19 08:52:50 PMRenderLine[s]1
270712/13/17 05:52:37 PMTheodore DuboisRemove the launcher and set the locale/current directory in alacrittyThis is #661 but off of a different branch in my fork, and with merge conflicts fixed. For some reason, it's working perfectly for me now.08/07/19 08:40:05 PMUpdate the README logo to be crisperFollowing the work in #2651, I've lifted a better looking icon for use in our README. I've also added the other `.ico` file sizes provided by @xuzhao9 until we have a way to generate these ourselves.19LGTM; thanks!nixpulvisNathan Lilienthal08/07/19 06:42:27 PMUpdate the README logo to be crisper.1
271510/31/17 03:35:22 PMjkunlinThe display is odd"Which operating system does the issue occur on?
Linux mint 18.2

If on linux, are you using X11 or Wayland?
X11

I run Alacritty using gnome-terminal, with the default configuration alacritty.yml.
But the display is so odd.
![image](https://user-images.githubusercontent.com/3398363/32210319-f03684f6-be47-11e7-8326-1262b91a1469.png)

"08/15/19 11:58:23 PMFix wayland clipboard integration"What was fixed here:
- [x] Implement `gtk_primary_selection_device_manager` ( `smithay-clipborad`)
- [X] Fix race? or whatever with normal clipboard on GNOME ( `smithay-clipboard` or `alacritty` )
- [ ] Clipboard dies over time on sway/probably GNOME (`smithay-clipboard`)

Initial attempt to fix clipboard on wayland.

Fixes: #2574"10LGTM; thanks!kchibisovChristian Duerr08/15/19 11:13:10 PMFix clippy issues1
271710/31/17 03:54:31 PMBailey StonerLink to FAQ when referencing itSuggestion to convert this to a link because I was being hella lazy while reading it and decided to fix the case where other developers are hella lazy as well ❤️ 01/14/20 11:02:14 PMTriple-select include wraplines"Hey there! First PR on Alacritty.

This enables triple-select to select all lines that have wrapped in either direction from the clicked point.

<img width=""795"" alt=""Screen Shot 2019-08-12 at 1 20 29 PM"" src=""https://user-images.githubusercontent.com/943641/62895546-fab18400-bd03-11e9-94de-8fd305ae45df.png"">

I am unable to get one of the tests to work -- the `line_selection_works` test fails with the following error:

```
thread 'term::tests::line_selection_works' panicked at 'assertion failed: requested < self.len', alacritty_terminal/src/grid/storage.rs:195:9
```

Also, the contribution guide recommends running `cargo fmt`, but the formatter changes a couple dozen files. I did not commit these changes."19Great idea; thanks!ikeIsaac Lewis09/01/19 05:30:10 AMclean up span_lines method; revert previously-modified test1
271911/11/17 04:23:53 PMFélix SaparelliFont size value as an int causes a crash"- Which operating system does the issue occur on? All
- If on linux, are you using X11 or Wayland? N/A (but Wayland)
- Alacritty installed from AUR package: 0.1.0.573.gb92ba65-1

The config requires a floating point font size, and if it's an integer alacritty crashes. It would be friendlier if integer font sizes were accepted."09/09/19 08:39:40 PMReset the Mouse Cursor While Selecting"This change makes the mouse cursor reset to it's default state while a selection is in progress. A click to clear the selection doesn't trigger a URL action, and so the mouse hand style isn't applied until the selection is cleared.

Before:
![before](https://user-images.githubusercontent.com/715947/62955430-0a41d300-bdbf-11e9-8629-dc5a1368a20b.gif)

After:
![after](https://user-images.githubusercontent.com/715947/62955446-10d04a80-bdbf-11e9-8353-dd5224951f9d.gif)"5Great idea; thanks!nixpulvisChristian Duerr09/09/19 07:06:09 PMMove url text conversion into `if let` block1
272302/22/18 08:52:15 AMAlisueMouse cursor does not appear when screen/space has changed"### Environment
- OS: macOS High Sierra
- Alacritty: I built it approx 10 min ago (2017.11.01 14:00). Don't know how to check the working version.

### Issue
Mouse cursor does not appear when I changed focus by moving space/screen (`hide_cursor_when_typing: true` is used).
https://youtu.be/lzR3rIATKrY shows the issue.

### Reproduce
1. Open Alacritty in macOS's fullscreen
2. Input some words to the shell on Alacritty so that the cursor becomes invisible
3. Hit `Ctrl + Left arrow` to get back **without touching mouse**
4. The mouse cursor is invisible. I have to click right mouse button to make cursor visible"08/18/19 02:46:30 AMUpdate euclid to 0.204Confirmed 👍 EijebongChristian Duerr08/18/19 01:42:10 AMAdd tag to font Rect1
272409/10/20 07:46:09 PMDavid GrajalText render is off (ZSH)"Which operating system does the issue occur on?
MACOS + ZSH

I started using Alacritty in early October and since then I have this issue. I am using default macos configuration file. It doesnt happen on MACOS terminal or iterm2.  I am using zprezto - with the pure theme.
https://github.com/sindresorhus/pure

![20171102_issueterminalalacritty](https://user-images.githubusercontent.com/1942073/32318319-336fb6aa-bfb7-11e7-908e-e1ad0eb3dee2.gif)

I tried to solve the issue but I run out of ideas. I guessed it is something related to the ZSH prompt, but it happens with all the ZSH prompts I tried. It doesnt happen with bash."08/18/19 02:46:30 AMTrack and report damage to compatible compositors"Implement damage tracking and reporting.

This allows compositors to only process damaged (that is, updated) regions of our window buffer, which for larger window sizes (think 4k) should significantly reduce compositing workload under compositors that support/honor it, which is good for performance and battery life.

On Wayland, clients are expected to report always report correct damage, so this makes us a good (or at least, better) citizen there. It can also aid remote desktop (waypipe, RDP, VNC, ...) and other types of screencopy by having damage bubble up correctly.

Damage tracking has been implemented in a somewhat naïve fashion, but I believe it is a fair start.

Note that this currently depends on a fork of glutin where support has been added.

Fixes #3186."74I'll just close this for now, if someone can reproduce it that should lead to new bug reports which will probably be easier to resolve than having an ancient thread around with nobody left to help troubleshoot.kennylevinsenKenny Levinsen11/03/19 12:45:18 PMMove damaged_lines, add comment1
274609/17/18 03:15:21 PMMichaël PeetersScrolling is 50% slower than rxvt / urxvt"Which operating system does the issue occur on?

Ubuntu 16.04

If on linux, are you using X11 or Wayland?

X11 (I guess?)

glxinfo?

```
glxinfo | grep OpenGL
# OpenGL vendor string: Intel Open Source Technology Center
# OpenGL renderer string: Mesa DRI Intel(R) Haswell Mobile 
# OpenGL core profile version string: 4.3 (Core Profile) Mesa 17.0.7
# OpenGL core profile shading language version string: 4.30
# OpenGL core profile context flags: (none)
# OpenGL core profile profile mask: core profile
# OpenGL core profile extensions:
# OpenGL version string: 3.0 Mesa 17.0.7
# OpenGL shading language version string: 1.30
# OpenGL context flags: (none)
# OpenGL extensions:
# OpenGL ES profile version string: OpenGL ES 3.1 Mesa 17.0.7
# OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.10
# OpenGL ES profile extensions:
```

I run the following benchmark:

```
yes | dd count=10k > yes.txt
time cat yes.txt
```

I collect the following times (real):
```
rxvt            0.815s 0.878s 0.781s 0.854s 0.785s avg 0.823s
urxvt           0.849s 0.882s 0.864s 0.838s 0.978s avg 0.882s
alacritty       1.297s 1.273s 1.228s 1.495s 1.207s avg 1.300s
terminator      2.057s 2.012s 1.998s 1.948s 2.017s avg 2.006s
```

So alacritty is roughly 50% slower than urvxt, and 60% slower than rxvt.

Note that the slow down is only in this specific benchmark, which is intensive on scrolling up
"08/25/19 12:35:19 PMSupport bold italic font"It’s perfectly reasonable to combine bold and italic.

I also normalised the ordering of the four variants, which was inconsistent in some places (including also the doc comment not matching the code in one place), to this: regular, bold, italic, bold italic.

This may functionally be a slight regression for fonts that don’t have a bold italic variant, because I suppose it’ll pick some other variant, I know not which, rather than the bold font. If we care about that enough, we can fiddle it in config::font to fall back to bold rather than normal, and in renderer to fall back to bold rather than I know not what. I didn’t do that due to the (very) mild complexity involved, because of the rareness I expect of manually setting a bold font that differs materially from the normal font, and because I naively expect the renderer fallback to do a sane thing out of the box.

----

Untested because I’m on Windows and italics aren’t working there (#2745). It builds and runs, but I can’t definitely say further than that."5"I use another command `time exa -lR /proc` and also add gnome-terminal to the test (on X11/i3wm). I can confirm the same on par performance. Urxvt is just a bit faster. Also `optirun alacrity` (NVIDIA 960M) is slower than `alacrity` on Intel. I do mulitple consequtive run test. Each 5 times and here is the results:

| TE                    | user mean/std   | system          | cpu (total)     |
|-----------------------|-----------------|-----------------|-----------------|
| **alacritty**         | `6.76 \pm 0.09` | `5.62 \pm 0.12` | `6.20 \pm 0.07` |
| **urxvt**             | `6.74 \pm 0.08` | `5.47 \pm 0.15` | `6.42 \pm 0.08` |
| **gnome-terminal**    | `6.89 \pm 0.03` | `5.58 \pm 0.07` | `7.89 \pm 0.08` |
| **optirun alacritty** | `6.97 \pm 0.16` | `5.88 \pm 0.10` | `8.88 \pm 0.21` |


here is `glxinfo | ag ""OpenGL""`:

```
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 530 (Skylake GT2) 
OpenGL core profile version string: 4.5 (Core Profile) Mesa 18.0.4
OpenGL core profile shading language version string: 4.50
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 18.0.4
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 18.0.4
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:
```

`optirun glxinfo | ag ""OpenGL""`:

```
OpenGL vendor string: NVIDIA Corporation
OpenGL renderer string: GeForce GTX 960M/PCIe/SSE2
OpenGL core profile version string: 4.6.0 NVIDIA 396.24
OpenGL core profile shading language version string: 4.60 NVIDIA
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 4.6.0 NVIDIA 396.24
OpenGL shading language version string: 4.60 NVIDIA
OpenGL context flags: (none)
OpenGL profile mask: (none)
OpenGL extensions:
```

"chris-morganChris Morgan08/25/19 10:46:52 AM"Add bold italic font support

If the terminal escape sequences for bold and italic text are active,
the text should be rendered as bold and italic. However, due to missing
support in Alacritty, it would always render this text in bold.

This adds support for combining the bold and italic escapes to render
text in both styles and allows users to override the font for this
scenario using the `font.bold_italic` configuration option."1
274911/11/17 04:23:49 PMNoneFixed #88209/10/19 04:08:02 PMuse std::mem::MaybeUninit::uninit().assume_init() instead of deprecated std::mem::uninitialized().3"I use another command `time exa -lR /proc` and also add gnome-terminal to the test (on X11/i3wm). I can confirm the same on par performance. Urxvt is just a bit faster. Also `optirun alacrity` (NVIDIA 960M) is slower than `alacrity` on Intel. I do mulitple consequtive run test. Each 5 times and here is the results:

| TE                    | user mean/std   | system          | cpu (total)     |
|-----------------------|-----------------|-----------------|-----------------|
| **alacritty**         | `6.76 \pm 0.09` | `5.62 \pm 0.12` | `6.20 \pm 0.07` |
| **urxvt**             | `6.74 \pm 0.08` | `5.47 \pm 0.15` | `6.42 \pm 0.08` |
| **gnome-terminal**    | `6.89 \pm 0.03` | `5.58 \pm 0.07` | `7.89 \pm 0.08` |
| **optirun alacritty** | `6.97 \pm 0.16` | `5.88 \pm 0.10` | `8.88 \pm 0.21` |


here is `glxinfo | ag ""OpenGL""`:

```
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 530 (Skylake GT2) 
OpenGL core profile version string: 4.5 (Core Profile) Mesa 18.0.4
OpenGL core profile shading language version string: 4.50
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 18.0.4
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 18.0.4
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:
```

`optirun glxinfo | ag ""OpenGL""`:

```
OpenGL vendor string: NVIDIA Corporation
OpenGL renderer string: GeForce GTX 960M/PCIe/SSE2
OpenGL core profile version string: 4.6.0 NVIDIA 396.24
OpenGL core profile shading language version string: 4.60 NVIDIA
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 4.6.0 NVIDIA 396.24
OpenGL shading language version string: 4.60 NVIDIA
OpenGL context flags: (none)
OpenGL profile mask: (none)
OpenGL extensions:
```

"matthiaskrgrChristian Duerr09/10/19 03:05:46 PMFix unsafe MaybeUninit usage1
275111/11/17 05:23:44 PMNoneCorrect linefeed handling when scroll region set (#855)"Linefeeds should only move the cursor down if it's before the end of
the scroll region.

The ""out of bounds"" panic was triggered by linefeeds going off the
bottom of the screen when the scroll region end was above the cursor.

Note: https://vt100.net/docs/vt102-ug/chapter5.html
""Characters added outside the scrolling region do not cause the screen to scroll."""08/25/19 12:46:54 PMFollow zsh conventions in zsh completion"This also encompasses some functional improvements like handling = between options and their arguments and reflecting some cases of option mutual exclusion.

Declaring curcontext etc local is superfluous as _arguments states are not used. It is also superfluous to include an outer function definition syntax in zsh autoloadable functions: _alacritty() { ... } is implied.

Zsh convention is not to capitalize descriptions.

We also generally use the imperative mood verb form for descriptions as this allows them to start with the shortest form of the verb - e.g. ""reduce"" instead of ""reduces"" and
results in better grammar in the absence of an explicit sentence subject. I'd
recommend this in the --help output too.

Using _guard for the position and dimensions was unnecessary given that the values are not mixed with other matches." =||= Thanks @metayan! I appreciate the time you spent diagnosing and patching this issue. There's a minor change from your initial commit to match behavior in other terminals. Specifically, linefeed outside of the scroll region but within the terminal bounds should still advance to the next line.okapiaOliver Kiddle08/25/19 12:45:48 AM"Follow zsh conventions in zsh completion

Declaring curcontext etc local is superfluous as _arguments states are
not used. It is also superfluous to include an outer function definition
syntax in zsh autoloadable functions. Zsh convention is not to
capitalize descriptions. It is also better to use the imperative mood
verb form for descriptions as this allows them to start with the
shortest form of the verb - e.g. ""reduce"" instead of ""reduces"" and
results in better grammar in the absence of a sentence subject. I'd
recommend this in the --help output too. Using _guard for the position
and dimensions was unnecessary given that the values are not mixed with
other matches."1
275511/12/17 01:17:47 AMNoneOutput more info for `--version`"Example output:
```
$ alacritty --version
alacritty 0.1.0 (git commit f68558e) [debug build using rustc 1.21.0 (3b72af97e 2017-10-09)])
```

`-V` after this PR will still have a short output:
```
$ alacritty -V
alacritty 0.1.0
```

### Rationale

Useful when requesting more info from users to help investigating issues.

### Drawbacks

- Increase in build time because `built` depends on a large `git2` dependency which may not be fine for an application that already has a relatively large build time (~400 secs on my 4-cored machine with Rust 1.21). On the flip side, alacritty ""already taking a lot of time to build"" may mean that an additional large dependency has less impact on it than on a smaller application (in a relative time addition sense).
- Different outputs for `-V` and `--version` may confuse users who used to them being equivalent (for many programs `-V` and `--version` have the same output in my experience).

### Unresolved questions

- Format of `--version` is the subject for bikeshedding. I've only included info that is definitely useful when asking users what configuration of `alacritty` were they using when hitting issues. Please leave your opinion on  how much `--version` should reveal and how this info should be shown."08/28/19 04:13:50 PMFix url highlight not showing with required modifiers4Why not just execute `git rev-parse HEAD`?chrisduerrChristian Duerr08/26/19 04:09:20 PMFix url highlight not showing with required modifiers1
276212/21/20 06:40:23 AMMatt KeelerGraphical artifacts with window transparency"Which operating system does the issue occur on? MacOS (10.12.6 - Intel Iris Pro graphcis)

So when I have window transparency turned on (background_opacity: 0.85) I sometimes see graphical artifacts where text is rendered in the background of what was previously on my terminal. An image is attached. This occurs both within tmux and outside of tmux after detaching.

I cant seem to figure out what makes it occur or why its displaying a particular text but its pretty reproducible for me.

<img width=""368"" alt=""artifact"" src=""https://user-images.githubusercontent.com/1641976/32444417-8bd8bc1c-c2d0-11e7-98eb-d8b00868ae13.png"">

"10/19/19 07:41:56 PMContinuously track visible URLs"This PR scans for URLs every frame, and it will only go 4096 characters away from the current viewport. It starts scanning 4096 characters below the viewport, and it stops scanning either once the last URL that extends above the viewport ends, or once the last URL reaches 4096 characters.

I made sure to scan before events are processed but after they're gathered, so that the events always operate on the same lock as the URL scan.

Thanks, feedback welcome!"8"FWIW I'm seeing this specifically when I resize the window very quickly.

I can get it to go away by _slowly_ resizing the window a couple lines, then _slowly_ moving it back."CrackedP0tChristian Duerr10/05/19 11:09:49 PM"Track visible URLs continuously

Fixes #2479."1
276301/17/19 08:42:13 PMSimon DahlbergAdd a config option to send or not send ESC when ALT-key is pressed"In some keyboard layouts, some characters like @, {}, [], etc.. requires the ALT-key. Sending the escape character when the ALT-key i pressed, makes it hard to enter those characters.

Therefore I think it's a good idea to choose wether to send the escape character or not. This PR should fix that."08/28/19 07:21:27 PMFix legacy xparsecolor regression"The legacy xparsecolor implementation assumed that the \007 ending would
be passed to the parser, however it never is. This caused colors in the
format #rrggbb to be interpreted as #rrggb, leading to incorrect colors
showing up in Alacritty.

Fixes #2759."2"It works for me too today on Arch Linux without any changes, but what you mention about `Alt` vs `AltGr` is a very important distinction. 

For example, in Danish layout <kbd>AltGr+2</kbd> produces `@`, but not <kbd>Alt+2</kbd>. The output of `showkey -a` is identical for me in sakura and alacritty terminal:

<kbd>AltGr+2</kbd>
```
@ 	 64 0100 0x40
```

<kbd>Alt+2</kbd>
```
^[2 	 27 0033 0x1b
 	 50 0062 0x32
```
"chrisduerrChristian Duerr08/28/19 12:35:34 AM"Fix legacy xparsecolor regression

The legacy xparsecolor implementation assumed that the \007 ending would
be passed to the parser, however it never is. This caused colors in the
format #rrggbb to be interpreted as #rrggb, leading to incorrect colors
showing up in Alacritty.

Fixes #2759."1
277411/07/17 04:09:30 PMChris DeLucaAlacritty does panics during compile on macOS 10.12"Which operating system does the issue occur on?

This occurs on macOS, version:
```
ProductName:	Mac OS X
ProductVersion:	10.12.6
BuildVersion:	16G29
```

Rust version:
`rustup 1.7.0 (813f7b7a8 2017-10-30)`

Error output:
```

       Fresh libc v0.2.30
       Fresh foreign-types v0.2.0
       Fresh strsim v0.6.0
       Fresh log v0.3.8
       Fresh utf8-ranges v1.0.0
       Fresh lazy_static v0.2.8
       Fresh malloc_buf v0.0.6
       Fresh odds v0.2.25
       Fresh smallvec v0.4.3
       Fresh approx v0.1.1
       Fresh iovec v0.1.0
       Fresh errno v0.2.3
       Fresh nodrop v0.1.9
       Fresh ansi_term v0.9.0
       Fresh stable_deref_trait v1.0.0
       Fresh term_size v0.3.0
       Fresh arraydeque v0.2.3
       Fresh linked-hash-map v0.4.2
       Fresh fsevent-sys v0.1.6
       Fresh utf8parse v0.1.0
       Fresh shared_library v0.1.7
       Fresh memchr v1.0.1
       Fresh unicode-xid v0.0.4
       Fresh owning_ref v0.3.3
       Fresh itoa v0.3.3
       Fresh aho-corasick v0.6.3
       Fresh bitflags v0.7.0
       Fresh dtoa v0.4.2
       Fresh quote v0.3.15
       Fresh pkg-config v0.3.9
       Fresh fsevent v0.2.16
       Fresh atty v0.2.2
       Fresh block v0.1.6
       Fresh rustc-serialize v0.3.24
       Fresh serde v0.9.15
       Fresh synom v0.11.3
       Fresh linked-hash-map v0.3.0
       Fresh xdg v2.1.0
       Fresh unicode-width v0.1.4
       Fresh syn v0.11.11
       Fresh yaml-rust v0.3.5
       Fresh unicode-segmentation v1.2.0
       Fresh textwrap v0.7.0
       Fresh lazycell v0.4.0
       Fresh vec_map v0.8.0
       Fresh khronos_api v1.0.1
       Fresh void v1.0.2
       Fresh filetime v0.1.10
       Fresh serde v1.0.11
       Fresh unreachable v1.0.0
       Fresh winapi-build v0.1.1
       Fresh bitflags v0.9.1
       Fresh thread_local v0.3.4
       Fresh xml-rs v0.6.1
       Fresh clap v2.26.0
       Fresh gl_generator v0.5.5
       Fresh heapsize v0.3.9
       Fresh objc v0.2.2
       Fresh lazycell v0.5.1
       Fresh rand v0.3.16
       Fresh gleam v0.4.8
       Fresh parking_lot_core v0.2.4
       Fresh cgl v0.2.1
       Fresh regex-syntax v0.4.1
       Fresh parking_lot v0.4.5
       Fresh regex v0.2.2
       Fresh fnv v1.0.5
       Fresh core-foundation-sys v0.4.4
       Fresh core-foundation-sys v0.3.1
       Fresh env_logger v0.4.3
       Fresh core-foundation v0.4.4
       Fresh core-foundation v0.3.0
       Fresh objc_id v0.1.0
       Fresh slab v0.3.0
       Fresh vte v0.3.2
       Fresh core-graphics v0.8.2
       Fresh objc-foundation v0.1.1
       Fresh serde_derive_internals v0.15.1
       Fresh winapi v0.2.8
       Fresh cocoa v0.9.2
       Fresh copypasta v0.0.1 (file:///Users/delucac/Documents/alacritty/copypasta)
       Fresh serde_derive v1.0.11
       Fresh kernel32-sys v0.2.2
       Fresh winit v0.7.6
       Fresh num-traits v0.1.40
       Fresh cfg-if v0.1.2
       Fresh walkdir v0.1.8
       Fresh glutin v0.9.2
       Fresh cgmath v0.15.0
       Fresh net2 v0.2.31
       Fresh serde_yaml v0.7.1
       Fresh euclid v0.12.0
       Fresh serde_json v1.0.2
       Fresh mio v0.6.10
       Fresh notify v4.0.1
       Fresh core-text v6.1.2
       Fresh mio-more v0.1.0
       Fresh font v0.1.0 (file:///Users/delucac/Documents/alacritty/font)
   Compiling alacritty v0.1.0 (file:///Users/delucac/Documents/alacritty)
     Running `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg 'feature=""default""' -C metadata=5e350ff163786454 -C extra-filename=-5e350ff163786454 --out-dir /Users/delucac/Documents/alacritty/target/release/deps -L dependency=/Users/delucac/Documents/alacritty/target/release/deps --extern serde_derive=/Users/delucac/Documents/alacritty/target/release/deps/libserde_derive-bde7297987eb06f6.dylib --extern serde=/Users/delucac/Documents/alacritty/target/release/deps/libserde-b70994c07ba57906.rlib --extern xdg=/Users/delucac/Documents/alacritty/target/release/deps/libxdg-9927f7584121c845.rlib --extern parking_lot=/Users/delucac/Documents/alacritty/target/release/deps/libparking_lot-c67c52c280106222.rlib --extern cgmath=/Users/delucac/Documents/alacritty/target/release/deps/libcgmath-a548a2b52230de17.rlib --extern arraydeque=/Users/delucac/Documents/alacritty/target/release/deps/libarraydeque-be4bdd93812ca0ba.rlib --extern copypasta=/Users/delucac/Documents/alacritty/target/release/deps/libcopypasta-29ba2a45d70f5be8.rlib --extern serde_json=/Users/delucac/Documents/alacritty/target/release/deps/libserde_json-9eef2522180ee400.rlib --extern libc=/Users/delucac/Documents/alacritty/target/release/deps/liblibc-a74272b56f4b142f.rlib --extern notify=/Users/delucac/Documents/alacritty/target/release/deps/libnotify-1bac8de134bc9b65.rlib --extern mio=/Users/delucac/Documents/alacritty/target/release/deps/libmio-c3287260894458e7.rlib --extern env_logger=/Users/delucac/Documents/alacritty/target/release/deps/libenv_logger-4a2ee9c770e17b6e.rlib --extern serde_yaml=/Users/delucac/Documents/alacritty/target/release/deps/libserde_yaml-3ae955a971d2c3fc.rlib --extern vte=/Users/delucac/Documents/alacritty/target/release/deps/libvte-e98c0b606092e5fe.rlib --extern mio_more=/Users/delucac/Documents/alacritty/target/release/deps/libmio_more-8467ba602dff6b8a.rlib --extern bitflags=/Users/delucac/Documents/alacritty/target/release/deps/libbitflags-4bf914584211d875.rlib --extern font=/Users/delucac/Documents/alacritty/target/release/deps/libfont-ba2a34304f803300.rlib --extern unicode_width=/Users/delucac/Documents/alacritty/target/release/deps/libunicode_width-fa365370873b727b.rlib --extern fnv=/Users/delucac/Documents/alacritty/target/release/deps/libfnv-557bfb60b466380f.rlib --extern errno=/Users/delucac/Documents/alacritty/target/release/deps/liberrno-943a85b6dea28914.rlib --extern glutin=/Users/delucac/Documents/alacritty/target/release/deps/libglutin-1fe1605dc4634ccc.rlib --extern clap=/Users/delucac/Documents/alacritty/target/release/deps/libclap-443f7126ff6c1399.rlib --extern log=/Users/delucac/Documents/alacritty/target/release/deps/liblog-cbc3786f4c67fe67.rlib`
error: proc-macro derive panicked
   --> src/ansi.rs:463:73
    |
463 | #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
    |                                                                         ^^^^^^^^^^^
    |
    = help: message: proc_macro::__internal::with_parse_sess() called before set_parse_sess()!

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg feature=""default"" -C metadata=5e350ff163786454 -C extra-filename=-5e350ff163786454 --out-dir /Users/delucac/Documents/alacritty/target/release/deps -L dependency=/Users/delucac/Documents/alacritty/target/release/deps --extern serde_derive=/Users/delucac/Documents/alacritty/target/release/deps/libserde_derive-bde7297987eb06f6.dylib --extern serde=/Users/delucac/Documents/alacritty/target/release/deps/libserde-b70994c07ba57906.rlib --extern xdg=/Users/delucac/Documents/alacritty/target/release/deps/libxdg-9927f7584121c845.rlib --extern parking_lot=/Users/delucac/Documents/alacritty/target/release/deps/libparking_lot-c67c52c280106222.rlib --extern cgmath=/Users/delucac/Documents/alacritty/target/release/deps/libcgmath-a548a2b52230de17.rlib --extern arraydeque=/Users/delucac/Documents/alacritty/target/release/deps/libarraydeque-be4bdd93812ca0ba.rlib --extern copypasta=/Users/delucac/Documents/alacritty/target/release/deps/libcopypasta-29ba2a45d70f5be8.rlib --extern serde_json=/Users/delucac/Documents/alacritty/target/release/deps/libserde_json-9eef2522180ee400.rlib --extern libc=/Users/delucac/Documents/alacritty/target/release/deps/liblibc-a74272b56f4b142f.rlib --extern notify=/Users/delucac/Documents/alacritty/target/release/deps/libnotify-1bac8de134bc9b65.rlib --extern mio=/Users/delucac/Documents/alacritty/target/release/deps/libmio-c3287260894458e7.rlib --extern env_logger=/Users/delucac/Documents/alacritty/target/release/deps/libenv_logger-4a2ee9c770e17b6e.rlib --extern serde_yaml=/Users/delucac/Documents/alacritty/target/release/deps/libserde_yaml-3ae955a971d2c3fc.rlib --extern vte=/Users/delucac/Documents/alacritty/target/release/deps/libvte-e98c0b606092e5fe.rlib --extern mio_more=/Users/delucac/Documents/alacritty/target/release/deps/libmio_more-8467ba602dff6b8a.rlib --extern bitflags=/Users/delucac/Documents/alacritty/target/release/deps/libbitflags-4bf914584211d875.rlib --extern font=/Users/delucac/Documents/alacritty/target/release/deps/libfont-ba2a34304f803300.rlib --extern unicode_width=/Users/delucac/Documents/alacritty/target/release/deps/libunicode_width-fa365370873b727b.rlib --extern fnv=/Users/delucac/Documents/alacritty/target/release/deps/libfnv-557bfb60b466380f.rlib --extern errno=/Users/delucac/Documents/alacritty/target/release/deps/liberrno-943a85b6dea28914.rlib --extern glutin=/Users/delucac/Documents/alacritty/target/release/deps/libglutin-1fe1605dc4634ccc.rlib --extern clap=/Users/delucac/Documents/alacritty/target/release/deps/libclap-443f7126ff6c1399.rlib --extern log=/Users/delucac/Documents/alacritty/target/release/deps/liblog-cbc3786f4c67fe67.rlib` (exit code: 101)
```"09/03/19 03:42:24 PMFix Wayland primary clipboard storing when stopping selection outside…… of the window3duplicate of #537 (see issue for solution)kchibisovKirill Chibisov09/03/19 01:50:54 PMFix Wayland primary selection clipboard not storing text when selection is stopped outside of the window1
278306/07/18 03:10:08 PMNoneCan't input ~^´`¨[]{} and @ with Portuguese keyboard on macOS"Using macOS 10.13 and the Portuguese keyboard layout, I can't get Alacritty (and therefore neovim) to input these symbols
``~^´`¨[]{}@``
I installed Alacritty from master today.
"09/06/19 07:35:29 PMUpdate and dedupe parking_lot to 0.9 =||= "Ok, luckily right after writing my last comment, I've found out my config had partly wrong indention. First you have to set `alt_send_esc: false` and then be sure it's on the top level of the config hierarchy (not indented). For example:
```
shell:
  program: /usr/local/bin/bash
  args:
    - --login
# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: false
```

This disables sending escape sequences when using Alt/Option combinations."EijebongBastien Orivel09/06/19 07:00:45 PMUpdate and dedupe parking_lot to 0.91
278506/23/20 08:56:27 AMIvanSome fonts fail to display italics"Which operating system does the issue occur on? Ubuntu 17.04

If on linux, are you using X11 or Wayland? X11

I configured alacritty.yml to use `Source Code Pro` fonts, but found that italic text wasn't being italicized. Nor would italics work for several other font families I tried (`monospace`, `Noto Mono`, ...). I confirmed that these fonts do display italics in a different terminal emulator (gnome-terminal) on my system.

I found a couple fonts that will display italics, including `FreeMono` and `Liberation Mono`.

I installed the alacritty terminfo entry and tried changing the `TERM` variable in alacritty.yml to `alacritty-256color`, but it made no difference. I also tried removing the terminfo entries I'd previously installed to `~/.terminfo` to support italics in a different emulator, but found that had no effect (I actually found that italics worked in gnome-terminal without my custom-installed terminfo entries, so maybe Ubuntu comes with a more complete entry than my previous system did).

For completeness, here are the terminfo source files I have:
xterm-256color.terminfo
```
xterm-256color|xterm with 256 colors and italic,
  sitm=\E[3m, ritm=\E[23m,
  use=xterm-256color,
```

tmux-256color.terminfo
```
tmux-256color|tmux with 256 colors,
  sitm=\E[3m, ritm=\E[23m,
  smso=\E[7m, rmso=\E[27m,
  use=screen-256color,
```

alacritty.info
```
alacritty| alacritty,
  use=xterm-256color,
  ritm=\E[23m,
  sitm=\E[3m,
  Tc,

alacritty-256color| alacritty with 256 colors,
  use=alacritty,
```

I compiled them with:
```
tic    -o $HOME/.terminfo xterm-256color.terminfo
tic    -o $HOME/.terminfo tmux-256color.terminfo
tic -x -o $HOME/.terminfo alacritty.info
```
(The -x silences a compiler warning about the unrecognized Tc in alacritty.info, so tic will treat it as a user-defined capability.)

I tested italics by running the following, both inside and outside of tmux:
```sh
echo -e ""\e[3m foo \e[23m""
echo `tput sitm` foo `tput ritm`
```

With `TERM` set to xterm-256color, running infocmp shows:
```
#       Reconstructed via infocmp from file: /home/ivan/.terminfo/x/xterm-256color
xterm-256color|xterm with 256 colors and italic,
        ...
        ritm=\E[23m, rmacs=\E(B, rmam=\E[?7l, rmcup=\E[?1049l,
        rmir=\E[4l, rmkx=\E[?1l\E>, rmso=\E[27m, rmul=\E[24m,
        ...
        sgr0=\E(B\E[m, sitm=\E[3m, smacs=\E(0, smam=\E[?7h,
        smcup=\E[?1049h, smir=\E[4h, smkx=\E[?1h\E=, smso=\E[7m,
        ...
```

With `TERM` set to alacritty-256color, running infocmp shows:
```
#       Reconstructed via infocmp from file: /home/ivan/.terminfo/a/alacritty-256color
alacritty-256color| alacritty with 256 colors,
        ...
        ritm=\E[23m, rmacs=\E(B, rmam=\E[?7l, rmcup=\E[?1049l,
        rmir=\E[4l, rmkx=\E[?1l\E>, rmso=\E[27m, rmul=\E[24m,
        ...
        sgr0=\E(B\E[m, sitm=\E[3m, smacs=\E(0, smam=\E[?7h,
        smcup=\E[?1049h, smir=\E[4h, smkx=\E[?1h\E=, smso=\E[7m,
        ...
```

The `font` section of my alacritty.yml (I'm using `Liberation Mono` for italics, since `Source Code Pro` wasn't italicizing):
```yml
font:
  # The normal (roman) font face to use.
  normal:
    family: Source Code Pro # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Source Code Pro # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Liberation Mono # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic
```"09/18/19 07:21:02 PMRework default bindings"This commit removes all bindings which are sending escapes from
the default configuration file, adds bindings for F13-F24, adds bindings
for ScrollToTop/ScrollToBottom actions, removes bindings for Super + F1-F12,
fixes bindings for Alt + F1-F12.

Fixes: #2688"1"I noticed on Ubuntu that my regular italics were not working but bold italics were for some reason. 

Once i changed `style: Italic` to `style: Oblique` in my alacritty settings under font > italic, the regular italic started to work.

I am using the `DejaVu Sans Mono for Powerline` font."kchibisovKirill Chibisov09/18/19 02:44:11 PMTruncate table1
278606/11/18 10:04:45 PMMr. MetricSegmentation fault in XIFreeDeviceInfo"Which operating system does the issue occur on? Arch Linux

If on linux, are you using X11 or Wayland? X11

Version: master branch, revision f68558e9dcce97e0d4d842a2d5b62e31e4124210

I ran it with `rust-gdb ./target/debug/alacritty`, waited for the crash, and got this backtrace:

```
Thread 1 ""alacritty"" received signal SIGSEGV, Segmentation fault.
0x00007ffff363b9fc in XIFreeDeviceInfo () from /usr/lib/libXi.so.6
(gdb) bt
#0  0x00007ffff363b9fc in XIFreeDeviceInfo () from /usr/lib/libXi.so.6
#1  0x0000555555d86967 in winit::platform::platform::x11::{{impl}}::drop (self=0x7fffffff5070)
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:641
#2  0x0000555555d54395 in core::ptr::drop_in_place<winit::platform::platform::x11::DeviceInfo> () at /checkout/src/libcore/ptr.rs:60
#3  0x0000555555d86353 in winit::platform::platform::x11::EventsLoop::init_device (self=0x7fffffff8768, device=17)
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:575
#4  0x0000555555745c9a in winit::platform::platform::x11::EventsLoop::process_event<&mut closure> (self=0x7fffffff8768, xev=0x7fffffff7818, callback=0x7fffffff78e0)
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:553
#5  0x0000555555742313 in winit::platform::platform::x11::EventsLoop::run_forever<closure> (self=0x7fffffff8768, callback=closure = {...})
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/x11/mod.rs:174
#6  0x000055555574201a in winit::platform::platform::EventsLoop::run_forever<closure> (self=0x7fffffff8760, callback=closure = {...})
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/platform/linux/mod.rs:387
#7  0x0000555555741e5d in winit::EventsLoop::run_forever<closure> (self=0x7fffffff8760, callback=closure = {...})
    at /home/mrmetric/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.7.6/src/lib.rs:219
#8  0x000055555579d7ed in alacritty::window::Window::wait_events<closure> (self=0x7fffffff8760, func=closure = {...}) at /home/mrmetric/Downloads/source/alacritty/src/window.rs:274
#9  0x00005555556b0101 in alacritty::event::Processor<alacritty::event_loop::Notifier>::process_events<alacritty::event_loop::Notifier> (self=0x7fffffffc178, term=0x7fffef8d5e10, 
    window=0x7fffffff8760) at /home/mrmetric/Downloads/source/alacritty/src/event.rs:375
#10 0x00005555557a0f52 in alacritty::run (config=Config = {...}, options=Options = {...}) at src/main.rs:170
#11 0x000055555579faac in alacritty::main () at src/main.rs:45
```

I tried to do some debugging, but I don't know Rust, so I can't tell if this is a problem in Alacritty or in winit."09/24/19 05:43:55 PMAdd Xembed support."This is a basic implementation of XEmbed.  Please go easy on me.  I'm a Java developer, and haven't seen rust code until about 3 days ago.  Nevertheless, my interest in XEmbed for this application is to allow it to be used in conjunction with Suckless tabbed - which seems to work fine with not too much effort.

I normally run a basic terminal in tabbed in dwm, but here's what it looks like in Xfce:
![image](https://user-images.githubusercontent.com/5728376/64483357-9680c380-d1ce-11e9-9011-00d7799982f7.png)"8Thanks a ton for the heads-up! As always much appreciated!mkosemChristian Duerr09/23/19 10:56:00 PMLoad xlib separate from winit1
278711/14/18 09:07:31 PMDmitry Kashitsyn`apt install`'s progress bar is not hidden sometimes"I've just installed `sl` and progress bar remained on screen even after `apt` exited. It disappeared only when I resized the alacritty's window using mouse.

Version info:
```
Kubuntu 16.04.3, Xorg
Alacritty built from master f68558e9dcce97e0d4d842a2d5b62e31e4124210
```"10/09/19 09:37:49 PM"Fix #1165 - Implement the ""hold"" feature""Hi there! Thanks a lot for your work on Alacritty, this project been helpful for me in countless ways, so I want to contribute something back. This PR implements `--hold` flag together with the `hold` configuration option which keeps Alacritty open after its child process exits.

Maybe I should clarify why I decided to put the `hold` flag in the `Term` struct instead of passing it directly to the `EventLoop` where the handling of child process exit happens. I've tried this approach first, but it turned out to be extremely hard to write a test for (at least for me, I'm a total noob in Rust). I've also tried ref-tests, but for some reason, even with just opening and closing Alacritty I get 60 megabytes of `grid.json`, and a generated ref test is always failing. I'm not sure why it happens as I'm not very familiar with how `Grid` works yet.

So I've taken the easy-to-test approach, I hope it's good enough :)"12Closing since there has been no update to this issue in over a year. If someone is still experiencing this problem, please let me know and I'll re-open it.valignatevChristian Duerr10/09/19 09:33:30 PMRun code formatter1
279008/14/20 09:38:28 PMSplinter SuidmanSlow on macOS with large, dense grids"_Which operating system does the issue occur on?_
macOS 10.12.5

When I set `termguicolors` in my vimrc file (which I really want to) scrolling becomes very slow on larger windows. In windows smaller than 100x80, it works fine, but on bigger windows it becomes slow.
This happens both in neovim (v0.2.1) and in vim (v8.0.1175), and only in alacritty, tested in [kitty](https://github.com/kovidgoyal/kitty), Terminal.app and iTerm. Other programs (like ternimal) run a lot faster in alacritty than in those.
I guess this is a problem with true colours?"09/09/19 09:40:49 PMBump minimum Rust version to 1.36.0 =||= The PR for #652 was merged recently, the performance with dense grids on macOS should be significantly improved now.chrisduerrChristian Duerr09/08/19 10:38:57 PMBump minimum Rust version to 1.36.01
279312/22/17 09:18:09 PMValentin IgnatevX11 crashes while holding C-+ to increase font size"Hi, I know that alacritty is in early stage of development, but it already looks and works just awesome for the most part.

Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
I hold Ctrl plus to increase my font, and I suppose it goes beyond scaling limit at some point, so X11 crashes entirely forcing me to type `startx` again :)

X11 traceback looks more or less like this:
```
Fontconfig error: ""/etc/fonts/conf.d/10-scale-bitmap-fonts.conf"", line 72: non-double matrix element
Fontconfig error: ""/etc/fonts/conf.d/10-scale-bitmap-fonts.conf"", line 80: saw unknown, expected number
```

Since this `10-scale-bitmap-fonts.conf` is not that big, I'll post it here too, just in case. Its value is default one:

```xml
<?xml version=""1.0""?>
<!DOCTYPE fontconfig SYSTEM ""fonts.dtd"">
<fontconfig>

<!--
  If font is bitmap, calculate scale factor.
  Note that color bitmap fonts have scalable=true, while
  non-color ones have scalable=false.  Both groups have outline=false.
  -->
<match target=""font"">
  <test name=""outline"" compare=""eq"">
    <bool>false</bool>
  </test>
  <edit name=""pixelsizefixupfactor"" mode=""assign"">
    <divide>
      <name target=""pattern"">pixelsize</name>
      <name target=""font""   >pixelsize</name>
    </divide>
  </edit>
</match>
<!--
  For non-scalable bitmap fonts (ie. non-color), skip
  minor scaling if hinting is enabled.
  -->
<match target=""font"">
  <test name=""outline"" compare=""eq"">
    <bool>false</bool>
  </test>
  <test name=""scalable"" compare=""eq"">
    <bool>false</bool>
  </test>
  <test name=""hinting"" compare=""eq"">
    <bool>true</bool>
  </test>
  <edit name=""scalingnotneeded"" mode=""assign"">
    <and>
      <less>
        <name>pixelsizefixupfactor</name>
        <double>1.2</double>
      </less>
      <more>
        <name>pixelsizefixupfactor</name>
        <double>0.8</double>
      </more>
    </and>
  </edit>
</match>
<match target=""font"">
  <test name=""scalingnotneeded"" compare=""eq"">
    <bool>true</bool>
  </test>
  <edit name=""pixelsizefixupfactor"" mode=""assign"">
    <double>1.0</double>
  </edit>
</match>
<!--
  If we *are* going to scale, go ahead and do it.
  -->
<match target=""font"">
  <test name=""outline"" compare=""eq"">
    <bool>false</bool>
  </test>
  <test name=""pixelsizefixupfactor"" compare=""not_eq"">
    <double>1.0</double>
  </test>
  <edit name=""matrix"" mode=""assign"">
    <times>
      <name>matrix</name>
      <matrix>
        <name>pixelsizefixupfactor</name> <double>0</double>
        <double>0</double> <name>pixelsizefixupfactor</name>
       </matrix>
    </times>
  </edit>
  <edit name=""size"" mode=""assign"">
    <divide>
      <name>size</name>
      <name>pixelsizefixupfactor</name>
    </divide>
  </edit>
</match>

</fontconfig>
```

I've checked `termite` and `kitty` terminals just in case it's something with my setup and they both work fine. Maybe there is some missing boundary check?"09/13/19 11:51:16 PMFix empty block selection detectionFixes #2789.3Duplicate of https://github.com/jwilm/alacritty/issues/842chrisduerrChristian Duerr09/13/19 08:47:04 PMImprove empty selection documentation1
279811/13/17 05:23:28 PMAdam AlbrechtBuild Failed on MacOS Due to libgit2-sys error"MacOS 10.13.1
rustup 1.7.0
rustc 1.21.0

I ran `cargo build --release` to build the application but it failed with the following error:

```
error: failed to run custom build command for `libgit2-sys v0.6.16`
process didn't exit successfully: `/Users/adam/code/alacritty/target/release/build/libgit2-sys-7c1749229562ba2b/build-script-build` (exit code: 101)
--- stdout
running: ""cmake"" ""/Users/adam/.cargo/registry/src/github.com-1ecc6299db9ec823/libgit2-sys-0.6.16/libgit2"" ""-DUSE_SSH=OFF"" ""-DUSE_OPENSSL=OFF"" ""-DCURL=OFF"" ""-DBUILD_SHARED_LIBS=OFF"" ""-DBUILD_CLAR=OFF"" ""-DCMAKE_INSTALL_PREFIX=/Users/adam/code/alacritty/target/release/build/libgit2-sys-1aff8a310342cad7/out"" ""-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64"" ""-DCMAKE_C_COMPILER=/usr/bin/cc"" ""-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64"" ""-DCMAKE_CXX_COMPILER=/usr/bin/c++"" ""-DCMAKE_BUILD_TYPE=Release""

--- stderr
fatal: Not a git repository (or any of the parent directories): .git
thread 'main' panicked at '
failed to execute command: No such file or directory (os error 2)
is `cmake` not installed?

build script failed, must exit now', /Users/adam/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.25/src/lib.rs:599:4
note: Run with `RUST_BACKTRACE=1` for a backtrace.

warning: build failed, waiting for other jobs to finish...
error: build failed
```"09/15/19 08:53:21 PMAdd background image"Add background image with a new configuration option `background_image`.
If you would like to try on it, add a new row in your `alacritty.yml` to set the path to the image, like as:
```yaml
background_image: /home/tamamu/Pictures/background.jpg
```
PNG is also ok.

There is a certain demand of this feature.
See #565

![Screenshot from 2019-09-15 01-24-06](https://user-images.githubusercontent.com/9401982/64911026-c5abad80-d757-11e9-9c6c-eb2faefd9df5.png)"4I faced the same issue, but if not mistaken there's no mention of the cmake requirement for macOS. Maybe that can be improved. :)tamamutamamu09/14/19 04:06:51 PMRemove test image1
280209/28/18 08:46:39 AMNoneUpper part of long characters (f, l) missing a few pixels using small font sizes"Which operating system does the issue occur on? Mac OS 10.12.6, Macbook Pro Retina 13inch, late 2013.

Using certain font sizes a few pixels of the top of long letters are missing. I've only seen this happen with quite small font sizes, which isn't a problem on my 13 inch screen (since they don't need to be small) but is a problem when using a bigger screen. 

This is happening while using the ""IBM Plex"" font. Possibly a bug of IBM Plex and not alacritty? I've tried adjusting the x-offset which isn't helping. 

Correct F
<img width=""245"" alt=""correct f"" src=""https://user-images.githubusercontent.com/21057514/32778736-523e1800-c93b-11e7-8082-f1eeedd95e68.png"">

Wrong F (look very closely)
<img width=""198"" alt=""wrong f"" src=""https://user-images.githubusercontent.com/21057514/32778737-526d3478-c93b-11e7-9d9f-a93bc613e569.png"">

Alacritty.conf: https://pastebin.com/7TsE5QwC

On a side note: what is the correct way to define the font to use for certain styles? I can't seem to get it to work. 

"09/16/19 03:02:30 PMFix bindings incorrectly getting replacedFixes #2794. =||= "There have been a lot of changes to the computation of font metrics since this issue has been created. As a result I'm closing it since it should be resolved with the latest master.

If this issue is still present, please let me know and I'll re-open it."chrisduerrChristian Duerr09/15/19 07:40:40 PM"Fix bindings incorrectly getting replaced

Fixes #2794."1
280801/08/18 11:39:10 PMSageNo way to map plus key">Which operating system does the issue occur on?
nixos (linux)
>If on linux, are you using X11 or Wayland?
X11

My keyboard has a plus key (I'm using the programmers dvorak layout), and there seems to be no way to bind it. It seems each key has an entry in the Key enum defined in config.rs, but there is no ""Plus"" entry. 

This is the output xev gives me of pressing the plus key on my keyboard:
`
KeyPress event, serial 34, synthetic NO, window 0x2800001,
    root 0x146, subw 0x0, time 3019940, (110,75), root:(1301,669),
    state 0x0, keycode 18 (keysym 0x2b, plus), same_screen YES,
    XLookupString gives 1 bytes: (2b) ""+""
    XmbLookupString gives 1 bytes: (2b) ""+""
    XFilterEvent returns: False

KeyRelease event, serial 34, synthetic NO, window 0x2800001,
    root 0x146, subw 0x0, time 3020087, (110,75), root:(1301,669),
    state 0x0, keycode 18 (keysym 0x2b, plus), same_screen YES,
    XLookupString gives 1 bytes: (2b) ""+""
    XFilterEvent returns: False

`"09/19/19 09:15:06 PMInitialize only visible characters"This fixes an off-by-two error in the renderer which initializes
characters 32 until 128 (inclusive) for each font whenever it is loaded.
The ascii visible range however just goes from 32 until 126 (inclusive)."1I've created a quick PR which puts a link right at the top of the documentation: #1012.chrisduerrChristian Duerr09/19/19 08:34:15 PM"Initialize only visible characters

This fixes an off-by-two error in the renderer which initializes
characters 32 until 128 (inclusive) for each font whenever it is loaded.
The ascii visible range however just goes from 32 until 126 (inclusive)."1
280903/02/18 10:47:21 PMAverrinWrong font width"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11

Alacritty version:
from AUR

![screenshot](https://i.imgur.com/bi7vQW7.png)

For this screenshot i use Iosevka-ss03, but with other fonts gaps between chars much bigger.
"09/21/19 05:54:33 PMRemove outdated TODO/FIXME comments =||= Closing this because it seems fixed. If this exact issue still exists, you can reopen the issue or just open a new one.chrisduerrChristian Duerr09/20/19 07:38:44 PMFormat code1
281011/16/17 04:56:32 PMNoneAlacritty crashes when using a to big font size. "Which operating system does the issue occur on? Mac OS 10.12.6
To reproduce: Open up Alacritty zoom with cmd + until it crashes.
[AlacrittyCrashLog.txt](https://github.com/jwilm/alacritty/files/1478101/AlacrittyCrashLog.txt)"09/28/19 12:37:23 AMRemove bindings with action `None`Currently, there is no option to disable default key bindings while keep receiving pressed keys. It's because specifying action `None` is actually a no-op and does not result in an unset binding. This pull request aims to overcome this limitation.24Duplicate of #842 and #898zsugabubuszsugabubus09/27/19 11:22:28 PMChange comments1
281911/17/17 08:23:17 PMJimi SmootMultiple screen resolution issues"On macOs running dual monitors with different resolutions, the font doesnt seem to adhere to the setting. 

If I open the window in the Thunderbolt display and move it to the macpro screen the font are very small. If I open the window on the MacPro screen the font is fine, but if I move the window to the Thunderbolt the font becomes very large.

Open window on Thunderbolt case:

On Apple 27"" Thunderbolt display
![screen shot 2017-11-17 at 10 25 39 am](https://user-images.githubusercontent.com/1569744/32962548-b64f221a-cb81-11e7-8245-3ad2d63478e5.png)
![](https://user-images.githubusercontent.com/1569744/32961658-477ea34a-cb7e-11e7-8dc1-64929af4249a.png)


On 15 inch MacPro 
![screen shot 2017-11-17 at 10 25 45 am](https://user-images.githubusercontent.com/1569744/32962561-c3be1a1e-cb81-11e7-9b52-bf4a2c802d7c.png)

<img width=""721"" alt=""screen shot 2017-11-17 at 9 59 30 am"" src=""https://user-images.githubusercontent.com/1569744/32961660-49005e70-cb7e-11e7-9912-558014cc62c1.png"">


Open initial window on the MacPro screen case:

On MacPro
<img width=""1438"" alt=""screen shot 2017-11-17 at 10 30 01 am"" src=""https://user-images.githubusercontent.com/1569744/32962697-4b80a160-cb82-11e7-85a3-f1a4639cdeec.png"">


On Thunderbolt:
![screen shot 2017-11-17 at 10 31 06 am](https://user-images.githubusercontent.com/1569744/32962736-7bc79b12-cb82-11e7-9b4f-5af634c08603.png)


Config:
```
# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

# Window dimensions in character columns and lines
# (changes require restart)
dimensions:
  columns: 150
  lines: 50

# Adds this many blank pixels of padding around the window
# Units are physical pixels; this is not DPI aware.
# (change requires restart)
padding:
  x: 10
  y: 10

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: ""Ubuntu Mono""
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: ""Ubuntu Mono""
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: ""Ubuntu Mono""
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0.0
    y: 0.0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0.0
    y: 0.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    cursor: '0xe6c547'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0xffffff'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0xffffff'

  # Dim colors (Optional)
  dim:
    black:   '0x333333'
    red:     '0xf2777a'
    green:   '0x99cc99'
    yellow:  '0xffcc66'
    blue:    '0x6699cc'
    magenta: '0xcc99cc'
    cyan:    '0x66cccc'
    white:   '0xdddddd'


# Visual Bell
#
# Any time the BEL code is received, Alacritty ""rings"" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 0.95

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: "",│`|:\""' ()[]{}<>""

hide_cursor_when_typing: false

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /bin/bash
  args:
    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: ""alacritty"", args: [""-e"", ""vttest""] } }
key_bindings:
  - { key: T,        mods: Command, command: { program: ""open"", args: [""-n"", ""/Applications/Alacritty.app""] } }
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   chars: ""\x1b[5;2~""                   }
  - { key: PageUp,   mods: Control, chars: ""\x1b[5;5~""                   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown, mods: Shift,   chars: ""\x1b[6;2~""                   }
  - { key: PageDown, mods: Control, chars: ""\x1b[6;5~""                   }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Back,     mods: Alt,     chars: ""\x1b\x7f""                    }
  - { key: Insert,                  chars: ""\x1b[2~""                     }
  - { key: Delete,                  chars: ""\x1b[3~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: F1,       mods: Shift,   chars: ""\x1b[1;2P""                   }
  - { key: F2,       mods: Shift,   chars: ""\x1b[1;2Q""                   }
  - { key: F3,       mods: Shift,   chars: ""\x1b[1;2R""                   }
  - { key: F4,       mods: Shift,   chars: ""\x1b[1;2S""                   }
  - { key: F5,       mods: Shift,   chars: ""\x1b[15;2~""                  }
  - { key: F6,       mods: Shift,   chars: ""\x1b[17;2~""                  }
  - { key: F7,       mods: Shift,   chars: ""\x1b[18;2~""                  }
  - { key: F8,       mods: Shift,   chars: ""\x1b[19;2~""                  }
  - { key: F9,       mods: Shift,   chars: ""\x1b[20;2~""                  }
  - { key: F10,      mods: Shift,   chars: ""\x1b[21;2~""                  }
  - { key: F11,      mods: Shift,   chars: ""\x1b[23;2~""                  }
  - { key: F12,      mods: Shift,   chars: ""\x1b[24;2~""                  }
  - { key: F1,       mods: Control, chars: ""\x1b[1;5P""                   }
  - { key: F2,       mods: Control, chars: ""\x1b[1;5Q""                   }
  - { key: F3,       mods: Control, chars: ""\x1b[1;5R""                   }
  - { key: F4,       mods: Control, chars: ""\x1b[1;5S""                   }
  - { key: F5,       mods: Control, chars: ""\x1b[15;5~""                  }
  - { key: F6,       mods: Control, chars: ""\x1b[17;5~""                  }
  - { key: F7,       mods: Control, chars: ""\x1b[18;5~""                  }
  - { key: F8,       mods: Control, chars: ""\x1b[19;5~""                  }
  - { key: F9,       mods: Control, chars: ""\x1b[20;5~""                  }
  - { key: F10,      mods: Control, chars: ""\x1b[21;5~""                  }
  - { key: F11,      mods: Control, chars: ""\x1b[23;5~""                  }
  - { key: F12,      mods: Control, chars: ""\x1b[24;5~""                  }
  - { key: F1,       mods: Alt,     chars: ""\x1b[1;6P""                   }
  - { key: F2,       mods: Alt,     chars: ""\x1b[1;6Q""                   }
  - { key: F3,       mods: Alt,     chars: ""\x1b[1;6R""                   }
  - { key: F4,       mods: Alt,     chars: ""\x1b[1;6S""                   }
  - { key: F5,       mods: Alt,     chars: ""\x1b[15;6~""                  }
  - { key: F6,       mods: Alt,     chars: ""\x1b[17;6~""                  }
  - { key: F7,       mods: Alt,     chars: ""\x1b[18;6~""                  }
  - { key: F8,       mods: Alt,     chars: ""\x1b[19;6~""                  }
  - { key: F9,       mods: Alt,     chars: ""\x1b[20;6~""                  }
  - { key: F10,      mods: Alt,     chars: ""\x1b[21;6~""                  }
  - { key: F11,      mods: Alt,     chars: ""\x1b[23;6~""                  }
  - { key: F12,      mods: Alt,     chars: ""\x1b[24;6~""                  }
  - { key: F1,       mods: Command, chars: ""\x1b[1;3P""                   }
  - { key: F2,       mods: Command, chars: ""\x1b[1;3Q""                   }
  - { key: F3,       mods: Command, chars: ""\x1b[1;3R""                   }
  - { key: F4,       mods: Command, chars: ""\x1b[1;3S""                   }
  - { key: F5,       mods: Command, chars: ""\x1b[15;3~""                  }
  - { key: F6,       mods: Command, chars: ""\x1b[17;3~""                  }
  - { key: F7,       mods: Command, chars: ""\x1b[18;3~""                  }
  - { key: F8,       mods: Command, chars: ""\x1b[19;3~""                  }
  - { key: F9,       mods: Command, chars: ""\x1b[20;3~""                  }
  - { key: F10,      mods: Command, chars: ""\x1b[21;3~""                  }
  - { key: F11,      mods: Command, chars: ""\x1b[23;3~""                  }
  - { key: F12,      mods: Command, chars: ""\x1b[24;3~""                  }
```






"09/26/19 02:10:55 PMFix cell alpha setting on non NamedColor::Background cell's bg"Commit e964af8 introduced a regression, where if cell's bg color was
equal to NamedColor::Background rgb color it was rendered with transparent
background. However the correct behavior is to render bg transparent
only when bg color is actually a NamedColor::Background.

Fixes: #2814"3duplicate of #71 kchibisovKirill Chibisov09/26/19 12:07:37 PMOne more update to changelog1
282011/17/17 07:14:48 PMJacob Evan ShreveUnable to compile (cannot find macro `eprintln!` in this scope)"Which operating system does the issue occur on?

Ubuntu 17.04

If on linux, are you using X11 or Wayland?

X11

rustc 1.17.0
cargo 0.18.0

I downloaded from master, with no changes. Whenever I try to compile, with or without the `--release` flag, I get 12 errors about `eprintln!` not being found. I ran `sed -i 's/eprintln/println/' (fd -tf)` and it was able to compile.


```
error: cannot find macro `eprintln!` in this scope
   --> src/macros.rs:18:9
    |
18  |         eprintln!($($arg)*);
    |         ^^^^^^^^
    |
   ::: src/tty.rs
    |
300 |             die!(""ioctl TIOCSWINSZ failed: {}"", errno());
    |             --------------------------------------------- in this macro invocation
    |
    = help: did you mean `println!`?
error: aborting due to 12 previous errors
error: Could not compile `alacritty`.
```

I found these similar issues, but I don't understand the solution. I'm still pretty new to rust.
https://github.com/birkenfeld/fddf/issues/1
https://github.com/vmchale/project-init/issues/2"10/06/19 10:47:21 AMRemove automatic config generation"Alacritty can work without any configuration file being presented,
so generating one for user in $HOME/.config/alacritty/alacritty.yml by default
is considered a bad practice.

Fixes: #2818"2I figured out my own issue. I just needed newer versions of rustc and cargo. I was using apt-get versions, but 1.17.0 and 0.18.0 were the latest versions there. I replaced those using https://www.rustup.rs/, and now I have 1.21.0 and 0.22.0 respectively, and it compiles just fine :+1: kchibisovKirill Chibisov10/05/19 11:53:14 PMFix test1
282311/19/17 04:49:35 PMNathan LilienthalRemove outdated TASKS.mdTitle says it all. I'm just going through things from top to bottom here and this stood out to me.09/26/19 12:45:00 PMFix overflow on wrong scroll region settingFixes: #28225Thanks! Definitely outdated :)kchibisovKirill Chibisov09/26/19 11:13:13 AMRun rustfmt1
282611/19/17 04:57:02 PMCharlesWait to display window until initialization is complete"Helps to address #297.

Patch waits to display window until initial configuration is complete. This prevents the window from visually resizing.

Gif demonstration:

![test2](https://user-images.githubusercontent.com/1291012/32991608-8c62b2fa-cd0c-11e7-9a68-4d156f9386d1.gif)

In the current release, the window will snap and resize as it configures. In the second case, it hides while configuring.

Unfortunately, this doesn't seem to fix the initial blink of black for the screen, but it does help to address some of the ""flickering"" during startup.
"09/26/19 03:32:51 PMFix opacity on inverse cells =||= Thanks for the feedback @maximbaz; I reverted this on master. The issue of resizing on startup will be resolved once winit allows us to get DPI from MonitorId.kchibisovKirill Chibisov09/26/19 03:25:10 PMFix opacity on inverse cells1
282701/04/19 05:23:17 PMSteven NobleError message required when cannot start"Which operating system does the issue occur on? 10.13.1

Great job.

When you can't launch Alacritty because of an error in the configuration file (e.g. column and row settings that are bigger than the maximum) then it should provide an error message to that effect."09/26/19 06:55:31 PMFix selection not inverting terminal background"Fixes a regression introduced in
9a0555bbba30c264f617ec9260ca00e0eab70870 where the terminal background
would not get inverted when selected."4Thanks for the feedback @maximbaz; I reverted this on master. The issue of resizing on startup will be resolved once winit allows us to get DPI from MonitorId.chrisduerrChristian Duerr09/26/19 03:23:26 PM"Fix selection not inverting terminal background

Fixes a regression introduced in
9a0555bbba30c264f617ec9260ca00e0eab70870 where the terminal background
would not get inverted when selected."1
283102/04/18 08:28:43 AMSteven Lulocale not set in macOS"macOS 10.13.1

I have two machines (one a MacBook and one a MacBook Pro) both on 10.13.1

On one of these machines nothing needs to be done to enable utf8. But on one of the machines, when creating or attaching to a tmux session, I must specify `-u` in order for my font to render properly in Alacritty. 

I've actually now tracked it down to locale. So although I've used the same method (build from source and `make app` and copy it to /Applications) on one machine it has proper `en_US.UTF-8` locale, and on the other machine it is `LANG=` and `""C""` for the LC_* variables.

I wonder what might cause this? In my other terminals on the problematic environment they do have locale set. "09/28/19 04:59:28 PMConcatenate parameters of title OSC"A semicolon in a title OSC should be interpreted literally, not as a parameter
separator, but the OSC parser is very simple and does not know about arities of
commands.

Therefore, this patch takes all the parameters returned by the OSC parser and
reconstructs the original string by interspersing semicolons. Now an OSC like
`\e]2;hello;world` will set the title to 'hello;world' and not 'hello' like
before." =||= so we can probably close this issue?pcapriottiPaolo Capriotti09/28/19 07:28:08 AM"Concatenate parameters of title OSC

A semicolon in a title OSC should be interpreted literally, not as a parameter
separator, but the OSC parser is very simple and does not know about arities of
commands.

Therefore, this patch takes all the parameters returned by the OSC parser and
reconstructs the original string by interspersing semicolons. Now an OSC like
'\e]2;hello;world' will set the title to 'hello;world' and not 'hello' like
before."1
283311/21/17 11:43:11 PMDrew De PontemacOS app bundle launched multiple times creates multiple instances of the app"Which operating system does the issue occur on?

macOS High Sierra 10.13.1 (17B48)

If on linux, are you using X11 or Wayland?

Just built the latest master (8ff3c5d) using `cargo build --release` and then `make app` and installed it by copying the app bundle into the applications folder.

When I launch the app by double clicking, opening with a launcher (Spotlight, Alfred, etc.), or open the app with `open -a 'Alacritty'` multiple times in a row, it opens multiple instances of the app.

This is abnormal behavior for macOS. It generally should simply focus the first launched instance when opened a second, third, etc. time.

I remember this used to work back in the day when the macOS app bundle was just added to the project. I tried going back to those commits and building but the compilation is failing.
"10/01/19 07:41:12 PMAdd error detail, when possible, on the event of an invalid config file"This PR aims to help with error descriptions (#2752) by removing the intermediate deserialization to `serde_yaml::Value` in the `failure_default` deserializer, which is used in the vast majority of fields, resulting in:

![explained-error](https://user-images.githubusercontent.com/4250565/65931894-d445c600-e3e1-11e9-9005-08b267c99bf5.png)

Instead of

![image](https://user-images.githubusercontent.com/4250565/65932020-5cc46680-e3e2-11e9-8361-16646be4b0b5.png)


This change has no effect in how errors are displayed for fields that use `from_string_or_deserialize` or `option_explicit_none`, as they would need to either require `Clone` on `D` or to be able to deserialize from a borrowed field, which I believe is not possible in serde_yaml as it stands."3Yessss!!! Thank you!!!! You have saved me countless CMD + tabs keypresses and boosted my productivity by a lot!martskinsMartin Asquino10/01/19 03:11:58 AMAdd error detail, when possible, on the event of an invalid config file1
283407/06/19 11:30:20 PMSolly RossSupport OSC 10-17 `?` parameter"According to https://www.xfree86.org/4.8.0/ctlseqs.html, in `OSC 10-17`, if the `?` parameter is given instead of an RGB color, the terminal should return the appropriate control sequence to set the given color to whatever its current value is (so we'd return something `OSC<command>;rgb:<r>/<g>/<b>BEL`).

My copy of vim seems to attempt to use this on startup."10/02/19 06:49:20 PMLive reload font size from alacritty config"Addresses first part of \#2737. Second part, which will be font family and styles to also be live-reloaded, is coming in a follow-up PR."1Fixed in https://github.com/jwilm/alacritty/commit/f79007035ccc8d52f5f491d35d3d4132aa29898d.waynrWayne Warren10/02/19 04:28:16 PMdoh1
283612/31/17 05:37:44 PMRafael BodillAlacritty crashes when scrolling through Unicode inside Neovim"Reproduce:
1. Run Alacritty and tmux 2.6
2. Download https://www.fsd.it/pragmatapro/All_chars.txt
3. Run Neovim and open All_chars.txt
4. Scroll through document
5. Alacritty crashes (see [crash dump](https://gist.github.com/rafi/b5c3367b9093ccb52ce3bcd7445c0f70))

[Using macOS High Sierra, tmux 2.6, latest greatest Neovim & Alacritty]
"11/03/19 07:02:27 PMLive reload font family and style from alacritty config"Follow-up to \#2834, addresses second part of \#2737.

This seems to work for me as a naive first pass, but I kind of just blindly copied what looked to be the relevent parts of `Display.new` where the initial `GlyphCache` is populated.

One notable difference is that I left out the logic around estimated DPR since at this point we already have a known `Display.size_info.dpr` calculated when `Display::new` is run."2"I can no longer reproduce this, thanks @chrisduerr.
"waynrWayne Warren11/03/19 02:31:08 PMaddress nitpicks1
284303/12/19 07:44:48 PMPatryk Czachurski"Quitting Vim after ""alacritty -e vim"" requires additional keystroke to close the terminal""If I run 

``alacritty -e vim``

And then quit right away with

``:q``

There remains a dangling Alacritty window with no text and just a cursor in the top left corner.
It persists until I move the mouse or press a key, which is a little bit annoying.
I've tested the same command with ``urxvt``, ``terminator``, ``st`` and behaviour of all seems to be the same in that they all close the terminal once ``vim`` quits.

For the record, I am writing this from Arch Linux with an i3 window manager. My server is ``X11``.

Other than that, thank you for an amazing terminal... I've been struggling to find one that takes advantage of my 144 Hz monitor, especially since I am a former FPS player and can immediately tell whether something responds to my keystrokes in 16ms or 7ms!"11/28/19 06:09:15 PMSimplify logo SVG for better compatibility"This removes the fancy masked bit that makes up the white part of the logo in favor of a simple radial gradient. This makes all the SVGs compatible with the SVG Tiny subset that QtSVG supports. Sadly webkit will still butcher some of the blurs, so I also rendered a PNG for the README. The results are somewhat different from the original though, so not sure if this is an acceptable workaround.

Opening this PR since there has been little discussion on the matter beyond acknowledging the issue, and to increase the possibility of having this fixed in 0.3.4, if consensus is to go with these simplified versions :wink: ."5"Work-around until this is fixed (works in Linux/X11 at least).

Instead of

```alacritty -e vim /tmp/foo```

run: 
```alacritty -e sh -c 'vim /tmp/foo; clear'```"jansolJan Solanti10/09/19 06:31:02 PM"Add prerendered PNG and simplified SVG logo

This should help with compatibility problems with some platforms like
KDE, that do not support all the features necessary for rendering the
default Alacritty logo."1
284505/18/18 11:52:12 PMJonathon"Fails to compile, ""thread 'main' panicked at 'Box<Any>'"" in built-0.2.0""Which operating system does the issue occur on?
Manjaro Linux, Ubuntu Linux 16.04
rust=1.22.1
cargo=0.23.0

If on linux, are you using X11 or Wayland?
X11

I've tried clearing out `~/.cargo` and re-cloning the alacritty repo; same result.

```
$ RUST_BACKTRACE=1 cargo build --release
   Compiling alacritty v0.1.0 (file:///home/jonathon/src/alacritty)
error: failed to run custom build command for `alacritty v0.1.0 (file:///home/jonathon/src/alacritty)`
process didn't exit successfully: `/home/jonathon/src/alacritty/target/release/build/alacritty-8bce53a622b9f242/build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'Box<Any>', /home/jonathon/.cargo/registry/src/github.com-1ecc6299db9ec823/built-0.2.0/src/lib.rs:339:18
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /checkout/src/libstd/sys_common/backtrace.rs:69
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:58
             at /checkout/src/libstd/panicking.rs:381
   3: std::panicking::default_hook
             at /checkout/src/libstd/panicking.rs:397
   4: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:577
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:538
   6: built::write_built_file_with_opts
             at /home/jonathon/.cargo/registry/src/github.com-1ecc6299db9ec823/built-0.2.0/src/lib.rs:339
             at /home/jonathon/.cargo/registry/src/github.com-1ecc6299db9ec823/built-0.2.0/src/lib.rs:807
   7: built::write_built_file
             at /home/jonathon/.cargo/registry/src/github.com-1ecc6299db9ec823/built-0.2.0/src/lib.rs:835
   8: build_script_build::main
             at ./build.rs:32
   9: __rust_maybe_catch_panic
             at /checkout/src/libpanic_unwind/lib.rs:99
  10: std::rt::lang_start
             at /checkout/src/libstd/panicking.rs:459
             at /checkout/src/libstd/panic.rs:361
             at /checkout/src/libstd/rt.rs:59
  11: __libc_start_main
  12: _start
```


This started a few commits ago, but:

```
$ git log -1
commit 8ff3c5d170abe47554f5d2a41ad35ddc451d254d (grafted, HEAD -> master, origin/master, origin/HEAD)
Author: Joe Wilm <joe@>
Date:   Mon Nov 20 09:30:57 2017 -0800

    Revert ""Wait to display window until initialization is complete (#907)""
    
    This reverts commit a931d691a21a851ca4653cbab3542c600b72ff36.
    
    Please see https://github.com/jwilm/alacritty/pull/907#issuecomment-345666727
    for rationale w/ GIF.
    
    > now alacritty starts ""in stages"". First it paints some small
    > rectangle, and in a second in ""boots"" and fills up the available
    > space.
```

```
$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-linux-gnu/7.2.0/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: /build/gcc-multilib/src/gcc/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++ --enable-shared --enable-threads=posix --enable-libmpx --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --enable-multilib --disable-werror --enable-checking=release --enable-default-pie --enable-default-ssp
Thread model: posix
gcc version 7.2.0 (GCC)
```"01/11/20 09:34:01 PMvalidate if working directory configuration existsCurrently, this gives a system failure with no clear indication of what the issue is (a general file not found error)2This shouldn't be an issue with the latest alacritty and rust anymore. If the problem still exists, please let me know and I will re-open this issue.tylersouthwickTyler Southwick11/18/19 06:37:53 AMvalidate cli parameter options1
284601/06/18 08:28:03 PMMichal 'vorner' VanerCrash when compiled with recent nightly"Since some time back, alacritty crashes when compiled with nightly (and works fine with stable). I reported the issue to [rustc](https://github.com/rust-lang/rust/issues/46158) and it turned out to be an UB in a dependency.

I updated the Cargo.lock in a local checkout. And the Illegal Instruction disappeared… to be replaced by SEGFAULT. It is probably some other UB in another dependency (I hear quite few of them surfaced after some recent change), but I didn't find out which one. I'm not sure if there are any steps to be taken at the alacritty side, except watching out for updates of the dependencies, but I'm reporting it anyway, to be known.

The backtrace I get now is quite useless:

```
(gdb) bt
Python Exception <class 'gdb.error'> Dwarf Error: Cannot find DIE at 0xb4 referenced from DIE at 0x1e47b5 [in module /home/vorner/.cargo/bin/alacritty]: 
#0  0x0000000000000000 in ?? ()
```

Which operating system does the issue occur on?

Linux

If on linux, are you using X11 or Wayland?

X11"10/04/19 11:25:42 AMResolve race between DPI change and resize events."On windows, when the DPI changes, alacritty updates the terminal dimensions as part of the `handle_resize` callback. However, the `PhysicalSize` with which alacritty does the calculation can occasionally be the wrong DPI, depending on the order in which the DPI change and resize events are sent.

I suggest working around this race by asking the window for its current DPI and size when we detect a DPI change.

The race problem seems to occur on [event.rs line 369](https://github.com/davidhewitt/alacritty/blob/d1b08c02d8a670fa163ce6de399d8621289d0735/alacritty_terminal/src/event.rs#L369) when we convert the `LogicalSize` to a `PhysicalSize`. Sometimes the DPR used is correct, but for me the DPR is wrong when I switch back and forth from my laptop display to an external monitor. The result is that the pty has the wrong dimensions (either has loads of empty space or overflows the window, depending on whether the DPR went up or down).

I experimented with delaying the conversion from `LogicalSize` to `PhysicalSize` into the `handle_resize` callback, which also fixed the issue for me, but I couldn't guarantee that it's race free. If you prefer that solution rather than asking the `Window` directly for its size I can change this PR to do that.

Fixes #2456.
Fixes #2334."2Sounds like this is fixeddavidhewittDavid Hewitt10/04/19 07:13:15 AM"Resolve race between DPI change and resize events.

When the DPI changes, alacritty updates the terminal dimensions as
part of the handle_resize callback. However, the PhysicalSize with
which alacritty does the calculation can occasionally be the wrong
DPI, depending on the order in which the DPI change and resize
events are sent.

We're working around this race by asking the window for its current
DPI and size when we detect a DPI change."1
284703/10/19 12:08:59 AMIshan JainJumping word by word using control + arrow keys doesn't works in vim"Which operating system does the issue occur on?
Arch Linux(Linux y50 4.13.12-1-ARCH #1 SMP PREEMPT Wed Nov 8 11:54:06 CET 2017 x86_64 GNU/Linux)

If on linux, are you using X11 or Wayland?
X11

Usually, Pressing Ctrl+Left/Right arrow keys makes the cursor jump word by word in left or right direction in vim. 

In alacritty, When I press Ctrl+Left Arrow Key, It enters `:5D` in command mode in vim and pressing Ctrl+Right arrow key enters `:5C` in command mode. 

I tried fixes like putting `set nocompatible` and `set nocp` in my `.vimrc` but it doesn't works. 

`od -a` output for Left and Right arrow keys. 
Left Arrow key -> `^[[1;5D`
Right Arrow key -> `^[[1;5C`

Is there some way to make arrow keys work in vim? I am not comfortable with using hjkl yet and not having arrow keys to help is slightly frustrating. 

Thanks. 
PS: This project is awesome. I have a few suggestions and PRs, I'll create seperate issues for those. "10/04/19 10:27:07 AMUpdate VirtualKeyCode url in alacritty.ymlThe URL was not valid anymore, updating it. =||= "The workaround I'm using is

```vim
if &term == 'alacritty'
    execute ""set <xUp>=\e[1;*A""
    execute ""set <xDown>=\e[1;*B""
    execute ""set <xRight>=\e[1;*C""
    execute ""set <xLeft>=\e[1;*D""
endif
```

(from https://superuser.com/a/402084/1182008)

This is better since it avoids having mappings starting with `<Esc>`, which would make vim wait for `timeoutlen` milliseconds whenever you press Escape."PorkepixPorkepix10/04/19 08:19:09 AMUpdate VirtualKeyCode url in alacritty.yml1
285508/14/20 09:00:38 PMMatthias DevlamynckPowerline characters overflow vertically"The powerline characters overflow vertically:

![alacritty](https://user-images.githubusercontent.com/4378377/33269352-a9963b1a-d380-11e7-810f-c58a883f056d.png)

Which operating system does the issue occur on? Linux Mint 17.1

If on linux, are you using X11 or Wayland? X11

I'm using alacritty on an arch linux machine and I don't have this bug, maybe it's related to different lib versions?"10/15/19 07:13:59 PMAdd support for alternate scroll escapeCloses #2727 2The original screenshot already shows that this is not the case for the author. So that's simply not true.zummenixChristian Duerr10/15/19 06:15:25 PMRun rustfmt1
285703/13/18 06:11:57 AMDeleted userError creating GL context; Couldn't find any pixel format that matches the criterias."Which operating system does the issue occur on?
CentOS Linux release 7.3.1611 (Core)
If on linux, are you using X11 or Wayland?
X11

Compiled using : cargo build and run using RUST_BACKTRACE=1 cargo run, following is output:
`[root@DEV_test_master alacritty]# RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/alacritty`
libGL error: unable to load driver: swrast_dri.so
libGL error: failed to load driver: swrast
Alacritty encountered an unrecoverable error:

        Error creating GL context; Couldn't find any pixel format that matches the criterias.

`

"10/14/19 05:51:00 PMSupport saving window title in a stack"This commit adds the concept of a ""title stack"" to the terminal. Some programs (e.g. vim) send control sequences `CSI 22 ; 0` (push title) and `CSI 23 ; 0` (pop title). Clues on how to handles these were taken from a couple of other terminal emulators ([Gnome Terminal](https://github.com/GNOME/vte/commit/23c44f1f18b7985d9fba3205500d8873ecde51aa), [kitty](https://github.com/kovidgoyal/kitty/commit/3067103b188c55d594918d1525d397cb523f8fea)).

The title stack is mainly just a history of previous titles. Applications can push the current title onto the stack, and pop it back off (setting the window title in the process).

To implement this, the Alacritty `Term` must have two new pieces of state: `title` (the mirror of what is set in the Glutin window) and `title_stack` (the history of titles if pushed onto). When control sequence 22 is received, then a title is pushed, and 23 pops and sets the Glutin window title.

This fixes #2840"5@tbehner @alexherbo2 I created Pull Request #1178 just now, this should solve your problem.DSpeckhalsDustin Speckhals10/13/19 08:56:58 PM"Make config title a String instead of Option<String>

Also improve change log entry"1
286209/17/18 03:15:21 PMJacob Evan ShreveComplete implementation of scrollback"Scrollback (#657) is nearly complete, but does still require some heavy lifting to get it merged into master.

Bountysource won't let me put a bounty on a pull request, so I've made this issue. 

[![Bountysource](https://api.bountysource.com/badge/issue?issue_id=52061265)](https://www.bountysource.com/issues/52061265-complete-implementation-of-scrollback?utm_source=52061265&utm_medium=shield&utm_campaign=ISSUE_BADGE)
"10/09/19 11:19:11 PMAdd libxcb-xfixes0-dev as travis dependency"Currently on Linux the CI is not building since it cannot fint xcb for
linking. Installing it in the pre-install hook should make sure it's
available when linking." =||= "@neon64 Since @jwilm did most of the work with the second scrollback implementation and he decided that it should be granted to you, I think it's fine.

However if you still want to give part of the bounty to other contributors, you could put it on other issues, I think bountysource only charges 10% on withdrawal.

If you don't care about Alacritty, you could of course also give it to anyone else or keep it, but these seem like the best options if you do not wish to do that.

I don't think it's possible to partially claim a bounty based on looking at the page myself. However I'm not super familiar with bountysource so I might be wrong there."chrisduerrChristian Duerr10/09/19 09:38:32 PM"Add libxcb-xfixes0-dev as travis dependency

Currently on Linux the CI is not building since it cannot fint xcb for
linking. Installing it in the pre-install hook should make sure it's
available when linking."1
286812/03/17 08:50:41 PMMatthias Krügerfix a bunch of clippy warnings (mostly about references)10/11/19 08:16:13 PMDisable depth and stencil buffer allocation"Disable allocation of depth and stencil buffers. This reduces active GPU memory consumption by almost a third, at least on Linux.

If I have a large number of terminals open and there is memory pressure, switching between terminals takes a while, presumably because some required GEM objects are swapped to disk. This change makes the number and size of required GEM objects smaller, hopefully alleviating the issue.

**I have only tested this on Linux (X11).** If passing 0 as the depth/stencil buffer size has different semantics on other platforms with glutin, things might break.

With this branch: Note that the amount of active objects is 27MB. (the inactive object count is higher, since I just ran vtebench)

```
archaea# cat i915_gem_objects|grep alacritty
alacritty: 32 objects, 79409152 bytes (27426816 active, 51798016 inactive, 0 global, 29360128 shared, 184320 unbound, 0 closed)
alacritty: 26 objects, 67796992 bytes (0 active, 67694592 inactive, 0 global, 29360128 shared, 102400 unbound, 0 closed)
```

With master, 47MB of active objects are needed.

```
archaea# cat i915_gem_objects|grep alacritty
alacritty: 31 objects, 79147008 bytes (0 active, 78962688 inactive, 0 global, 29360128 shared, 184320 unbound, 0 closed)
alacritty: 26 objects, 67796992 bytes (47620096 active, 20074496 inactive, 0 global, 29360128 shared, 102400 unbound, 0 closed)
```

This had no effect on vtebench results."11Thanks!JasuJasper Mattsson10/10/19 02:08:41 PM"Disable depth and stencil buffers

Disable allocation of depth and stencil buffers. This reduces active
GPU memory consumption by almost a third, at least on Linux."1
287012/05/17 04:57:21 AMSteven NobleHelp with setting up Mac-standard keyboard shortcuts for Tmux"Which operating system does the issue occur on? Mac OS X

My GUI Mac apps are all set up to do the following:

- ⌘T: New tab
- ⌘`: Next tab
- ⌘W: Close tab

To mimic this in Tmux in Alacritty, I removed the ⌘-W mapping in `alacritty.yml` and added the following:
```
  - { key: Grave,    mods: Command, command: { program: ""/usr/local/bin/tmux"", args: [""next""] } }
  - { key: T,        mods: Command, command: { program: ""/usr/local/bin/tmux"", args: [""new-window""] } }
  - { key: W,        mods: Command, command: { program: ""/usr/local/bin/tmux"", args: [""kill-window""] } }
```
Now, the following are working:
- ⌘`: Next tab
- ⌘W: Close tab

However, ⌘T for new tab is not.

If I manually type `tmux new-window` the Tmux statusline flashes the `reattach to namespace` message and then creates a tab. If I press ⌘T, it flashes that message and then nothing happens.

Any suggestions?"10/12/19 10:55:20 AMAdd note about unstable setting"When setting to ""decorations: none"" on Windows (observed on multiple machines), the Alacritty window fails to open. I added a note so that Windows users will be aware of the bug before making configuration changes.

I don't see an Issue related to this bug, but I haven't had a chance to figure out if the bug is truly with Alacritty or if it's with the Glutin crate that Alacritty uses. When I figure that out, I will submit an Issue to the appropriate repository. Though, if you prefer I submit an Issue to Alacritty right now, let me know and I can do that."3Thanks @pascalw that worked!josephkreydtJoe10/12/19 09:56:36 AM"Add note about unstable setting

When setting to ""decorations: none"" on Windows (observed on multiple machines), the Alacritty window fails to open. I added a note so that Windows users will be aware of the bug before making configuration changes.

I don't see an Issue related to this bug, but I haven't had a chance to figure out if the bug is truly with Alacritty or if it's with the Glutin crate that Alacritty uses. When I figure that out, I will submit an Issue to the appropriate repository. Though, if you prefer I submit an Issue to Alacritty right now, let me know and I can do that."1
287112/02/17 07:03:44 AMYashwanth Reddy GondiNo buttons on title bar"Which operating system does the issue occur on?
Ubuntu 17.10

If on linux, are you using X11 or Wayland?
Wayland (gnome shell 3.26.1)

![screenshot from 2017-12-01 20-53-55](https://user-images.githubusercontent.com/7929962/33489404-cb1af3aa-d6d9-11e7-864c-97b045e66191.png)"06/06/20 02:08:40 PMRemove copypasta dependency from alacritty_terminal"Remove the copypasta dependency used by alacritty_terminal,
which pulls some gui libraries like xcb."9"Seems like this issue is already addressed here: https://github.com/jwilm/alacritty/issues/97#issuecomment-316811703
Closing this."kchibisovKirill Chibisov06/04/20 10:11:24 PM"Remove copypasta dependency from alacritty_terminal

Remove the copypasta dependency used by alacritty_terminal,
which pulls some gui libraries like xcb."1
287202/05/18 10:28:51 AMNoneprecompiled binaries?"Any chance pre-compiled binaries (x86/amd64, Ubuntu) will be published, or are we not ready for that yet?
Thanks."10/14/19 08:34:55 PMUse proper path logging formatting"It was discovered that we were logging path with `\\` instead of `\` as
separators on Windows due to use of Debug formatting instead of Display
for paths."4"I personally don't believe much in ""universal"" package managers and there already is a snap as far as I know. So native distro support will always be the preferred way to install Alacritty. However, for platforms that do not (yet?) support Alacritty, I don't see why it shouldn't be offered.

Ideally I'd like to separate packaging from source code whenever possible, I'm not sure exactly how this works with AppImage. But I think if someone is willing to maintain an AppImage out of tree, that would be ideal. Adding installation instructions to the Alacritty upstream would of course still be possible."kchibisovKirill Chibisov10/12/19 01:59:18 PM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
287512/03/17 09:38:42 PMChristian DuerrAdd cursor style option"This makes it possible to change the default cursor style of the
terminal. It requires a restart to apply the changes.

When vim or a different terminal application changes the cursor, it is
not reset. But I wouldn't say that's an issue with alacritty, but rather
with the terminal application."10/16/19 12:26:56 AMSet stencil buffer to 1"It was discovered that on some GPUs (Rx 570 + amdgpu driver) this leads to artifacts during startup on X11.

The bug is presented with or without compositor running.

video
https://www.dropbox.com/s/5xcni3cs6p263lc/revert.mkv?dl=0

This reverts commit 3475e449870b382cda4ea6d48f980577cd8c929e.

cc @Jasu

P.s.
I've initially tested only my Wayland system, which is absolutely fine with this changes, however X11 don't like it at all."32No problem. :)kchibisovKirill Chibisov10/13/19 12:47:44 PM"Set stencil buffer to 1

It was discovered that without allocating it there were strange
graphical glitches on some systems with X11 + amdgpu driver."1
287912/04/17 03:08:30 AMBernardo MeurerNot working on Arch Linux"I'm using alacritty on Arch Linux by means of the `alacritty-git` AUR package. I upgraded all y `-git` packages today, and now alacritty no longer works. I am using i3 as my window manager on X11.
```
$ alacritty
[1]    13215 illegal hardware instruction (core dumped)  alacritty 
```
Here's the backtrace I got using `gdb`
```
#0  0x00005555557b10d3 in ?? ()
#1  0x00005555557b3f2e in ?? ()
#2  0x00005555558e999d in ?? ()
#3  0x000055555572a379 in ?? ()
#4  0x00005555557225ee in ?? ()
#5  0x0000555555664816 in ?? ()
#6  0x0000555555661189 in ?? ()
#7  0x000055555566e00a in ?? ()
#8  0x00007ffff6af1f6a in __libc_start_main () from /usr/lib/libc.so.6
#9  0x000055555557c91a in ?? ()
```"10/15/19 08:53:25 PMPrint launch command name on failure =||= @jwilm Awesome, I'll keep an eye out for it.chrisduerrChristian Duerr10/14/19 04:24:54 PMPrint launch command name on failure1
288201/19/20 04:21:18 PMNoneGDB input redirection does not work"If you try to debug a program with gdb and want to redirect input from a file:
`gdb
<gdb>r < input
`
the input is not redirected, but instead read again from stdin.
This works with Konsole and gnome-terminal.

You can try this with the following C program

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char **argv, char **envp)
{
        char buffer[20];
    printf(""Input your name: "");
        gets(buffer);
    printf(""Your input was:%s\n"", buffer);
        return 0;
}

I tried this with Ubuntu 16.04 and Fedora 26 with alacritty version
alacritty 0.1.0 (git commit 9bdac6b) [release build using rustc 1.24.0-nightly (1956d5535 2017-12-03)])

If you have any questions, I'm happy to help"10/16/19 12:53:37 AM"Revert ""Disable depth and stencil buffers"""This reverts commit 3475e449870b382cda4ea6d48f980577cd8c929e. =||= This issue as was already mentioned doesn't belong to alacritty. I use gdb a lot and don't get this problem.chrisduerrChristian Duerr10/16/19 12:19:36 AM"Revert ""Disable depth and stencil buffers""

This reverts commit 3475e449870b382cda4ea6d48f980577cd8c929e."1
288312/24/17 05:46:55 PMChristian DuerrUnderline cursor disappearing"I'm running alacritty on X.Org and having an interesting issue with the underline cursor. Block and Beam cursors do not show this bug.

The issue I've noticed is that when compiling Rust (or doing other things), my cursor sometimes straight-up disappears completely. Sending the codes `0`, `3` or `4` do not make the cursor appear again. Changing to a different cursor and then switching back to underline also doesn't work.

To reproduce you can just create an empty new binary Rust project and run this: `for i in {0..25}; do cargo clean && cargo run --release; done`. It seems to reliably break it for me, might require running a few more iterations sometimes tho. Another alternative is to use a project with more output lines like `alacritty`, because it seems to break when the terminal is printing to stdout while the user is not inputting text.

I've tested this before the `cursor_style` change, after the `cursor_style` change and with the `scrollback` PR's version (pretty old).

So I've just figured out something interesting. This is only an issue on one of my three screens. My DisplayPort screen works just fine, so does one of my DVI screens. But the other DVI screen will break. Here's a little showcase of what happens when moving the terminal from a working screen to the broken one and back: https://u.teknik.io/Cw5z0.webm"10/16/19 07:20:39 PMBump winit versionFixes cursor icon managing with hide_when_typing: true on Wayland2"Some screenshots to demonstrate the issue:
[Working](https://i.imgur.com/358A4Wc.png)
[Half broken](https://i.imgur.com/NDlb2eh.png)
[Completely broken](https://i.imgur.com/s8rNnld.png)

I was able to recreate the issue on all my screens now by dragging a fixed-size window around."kchibisovKirill Chibisov10/16/19 04:20:40 PM"Bump winit version

Fixes cursor icon managing with hide_when_typing: true on Wayland"1
288412/22/17 11:00:07 PMJonathonBump built to 0.2.2 to fix #917 build failureSee also https://github.com/lukaslueg/built/issues/710/16/19 07:31:13 PMremove terminfo from deb metadatadelete the terminfo line from the .deb manifest to get rid of the related issue #2685  =||= Thanks for the PR! I've actually decided to remove the `built` crate for the time being. Rationale: continued support burden (both on and outside GitHub) due to build issues, and large extra dependencies.Ckathckath10/16/19 07:28:35 PMupdate changelog: remove .deb terminfo1
288812/17/17 06:04:11 AMJon McDuffieFix License link at the bottom of the readme10/17/19 07:24:22 PM"Fix cases where config's ""window"" is not defined""In the config, if `window` is undefined, the derived `Default` for the String `title` is used, which is an empty String. This was unintended, and causes issues in gnome-shell (e.g. in the alt-tab dialog) when the window title is an empty string.

This commit adds a manually implemented default for the `WindowConfig`, it's the same as the derived `Default`, except for the `title`, which will now always be ""Alacritty"" as originally intended.

Fixes #2887 " =||= thanks!DSpeckhalsDustin Speckhals10/17/19 05:10:55 PMMove title field to bottom to improve clarity1
289012/05/17 08:15:27 PMNoneHow to open urls with a mouse?I just want to click an url and open it in my browser. How can I do it?12/20/19 11:02:08 PMDefault to ConPTY instead of WinPTYI’ve been using the ConPTY backend since I started using Alacritty, and I don’t think I have *ever* experienced a problem unique to the ConPTY backend. Whenever I disable it to test something on the WinPTY backend, I cringe at how buggy ConPTY’s rendering is. After a year of ConPTY’s existence, I see no compelling reason to stick with the old and inferior. I reckon it’s time to default to the new and improved.4@yevhen-m, if you use tmux you can use https://github.com/tmux-plugins/tmux-open chris-morganChris Morgan10/18/19 11:59:56 AM"Default to ConPTY instead of WinPTY

I’ve been using the ConPTY backend since I started using Alacritty, and
I don’t think I have *ever* experienced a problem unique to the ConPTY
backend. Whenever I disable it to test something on the WinPTY backend,
I cringe at how buggy it is. After a year of ConPTY’s existence, I see
no compelling reason to stick with the old and inferior. I reckon it’s
time to default to the new and improved."1
289605/15/18 05:52:58 PMAndrew ZahCan't switch keyboards on macOS while alacritty is focused"On OSX I quite often swap between English & Hangul keyboards.
This is done through Keyboard Shortcuts > Select next input source. 

However, in Alacritty, that input doesn't work. (I tested the same setup with iTerm2, it works)

I *think* this has to do with how Alacritty is bundled? "11/03/19 08:59:29 PMTrack visible URLs continuously"TODO:
 - [x] Resolve issue with leaving/entering Alacritty window straight into URL
 - [x] Update mouse cursor when URL highlight changes without mouse motion
 - [x] Fix URL color
 - [x] Add documentation to urlocator source + readme
 - [x] Alacritty source code documentation
 - [x] Fix remaining style issues

Fixes #2898.
Fixes #2479."9@azah that's a known limitation of the current implementation. winit would need to make some API changes for that to be possible, which would have to be designed in tandem with inline IME support on X11. I'm not sure when I'll get around to that.chrisduerrChristian Duerr10/05/19 11:09:49 PM"Track visible URLs continuously

Fixes #2479."1
289712/06/17 04:42:30 AMAndrew ZahHangul / Multi grapheme input is broken"Korean characters are made up of at least two graphemes, max 3-4. Normal input waits for a space or the maximum graphemes before moving onto the next character.

Intended behavior: Typing ㄲ ㅗ ㄱ should produce 꼭, ㄷ ㅏ ㄹ ㄱ should produce 닭, etc.

Alacritty behavior: Typing ㄲ ㅗ ㄱ stays as the individual graphemes. It doesn't appear to enter the mode of character composition.

System: OSX
Tested with iTerm2, no issues there on my setup."10/20/19 12:31:00 PMFix XEmbed compilation error on 32-bit platforms"Compilation is broken on 32-bit X11 platforms since c1f089970fd3d4b9137d07647f8cd028b2b5b3a9:

```
error[E0308]: mismatched types
   --> alacritty/src/window.rs:420:69
    |
420 |         (xlib.XReparentWindow)(xlib_display as _, xlib_window as _, parent_id, 0, 0);
    |                                                                     ^^^^^^^^^ expected u32, found u64
help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit
    |
420 |         (xlib.XReparentWindow)(xlib_display as _, xlib_window as _, parent_id.try_into().unwrap(), 0, 0);
```

The XID of the XEmbed parent needs to be an unsigned long, as seen here: [xlib.rs#L623](https://github.com/erlepereira/x11-rs/blob/7d81595d630f03ced06747f3e214c59eda438df8/src/xlib.rs#L623)." =||= "@mbrubeck that's really helpful! Given that it composes into single codepoints per grapheme, we may be able to support this without major architectural changes.

On Linux, this is handled out-of-band with IMEs, but I don't think there's any equivalent for macOS."ghostJason Francis10/19/19 11:23:31 PMFix XEmbed compilation error on 32-bit platforms1
290412/24/17 05:46:55 PMChristian DuerrAdd custom underline, beam and box cursors"As mentioned in jwilm/alacritty#931, it can be troublesome if a font has
an underline symbol outside of the glyph's bounding box. This can lead
to the underline disappearing at the bottom of the terminal.

As a solution a symbol from the private use area was used as the
character code for the underline symbol. Whenever this symbol is
encountered, instead of rendering it, a custom block is rendered.

In this implementation the block has the full character as width and
sits flush with the bottom of the glyph's bounding box. The height is
half the distance between the baseline and the bottom of the bounding
box.

Here are some screenshots of how this underline looks now:
![Small](https://u.teknik.io/58RVG.png)
![Normal](https://u.teknik.io/hDJSo.png)
![Big](https://u.teknik.io/PguV1.png)
![Huge](https://u.teknik.io/bW9dl.png)

This fixes #931 "10/22/19 03:42:08 PMAvoid unused import warning on macOS/Windows"Getting rid of an unused import for Windows/macOS.

My rustc version is 1.38.0.

<img width=""1065"" alt=""Screen Shot 2019-10-22 at 17 31 23"" src=""https://user-images.githubusercontent.com/147051/67269775-48135400-f4f2-11e9-9fca-a939aa3f8717.png"">"2https://youtu.be/YHMc5vf_pFAgiginetKohki Miki10/22/19 09:33:37 AMUpdate alacritty/src/window.rs1
290912/22/17 10:09:10 PMColin KingUpdate README.md for current state of macOS"Homebrew Rust will correctly compile `alacritty` now, and the monospace
font is automatically set to `Menlo` at first launch."10/24/19 03:11:18 AMFix: setting persistent logging via CLI does not work1Great; thanks!juchiastDuy Do10/23/19 01:20:03 PMFix: setting persistent logging via CLI does not work1
291012/22/17 10:07:46 PMIris HoffmeyerAdd Void Linux to distrobutions with packagesVoid Linux has the alacritty package in the main repository's, so compilation from source isn't needed.10/23/19 07:17:10 PMBump winit versionShould probably fix macOS termination problem and illegal instruction(not sure about the last one). =||= Cool, thanks!kchibisovChristian Duerr10/23/19 06:29:14 PMUpdate other dependencies1
291505/05/18 03:14:54 PMAndrey Listopadov[Linux] Font anti-aliasing configuration issue"Arch Linux, X11, KDE Plasma 5.11.4.
Builds from git and aur both.

I didn't configure my fonts sync installation of archlinux, and they are fine in konsole and other vte terms, like gnome-terminal, xfce4, etc. But in alacritty they're looking just like in editors. I like how fonts look int editors, but I don't think that terminal should use same rules for font rendering. I use alot of unicode characters and for example zsh and Vim looks blurry in alacritty.
![image](https://user-images.githubusercontent.com/19470159/33825811-e19c024e-de73-11e7-9aa8-3178639bff7e.png)

Alacritty suggests to disable rgba, but nothing changes in particular, I've tryed a lot of configurations, and still my fonts look blurry in alacritty. Even with font-antialiasing switched off completely (fonts look bad everywhere in the system), alacritty shows bad fonts compared to other terms:
![image](https://user-images.githubusercontent.com/19470159/33827397-49231fd8-de79-11e7-9830-dd92bf9c776a.png)
(alacritty at the top, any other term at the bottom)

With these settings:
```
<?xml version='1.0'?>
<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
<fontconfig>
 <dir>~/.fonts</dir>
 <match target=""font"">
  <edit name=""rgba"" mode=""assign"">
   <const>none</const>
  </edit>
 </match>
 <match target=""font"">
  <edit name=""hinting"" mode=""assign"">
   <bool>false</bool>
  </edit>
 </match>
 <match target=""font"">
  <edit name=""hintstyle"" mode=""assign"">
   <const>hintnone</const>
  </edit>
 </match>
 <match target=""font"">
  <edit name=""antialias"" mode=""assign"">
   <bool>true</bool>
  </edit>
 </match>
</fontconfig>
```
fonts look like this:
![image](https://user-images.githubusercontent.com/19470159/33827551-cf533afc-de79-11e7-8b2a-4fcbcfea26bb.png)
(xfce4 at the top, alacritty at the bottom)
Which is slightly better, then in the beginning, but still nothing in comparison with other terms.
Am I doing something wrong? Or I missed something in configuration?

Test symbols, if needed
```
┌─╼[~] 
└────╼ 
```"10/24/19 10:26:34 PMDraw dirty terminal even when event queue is empty"If the event queue was empty, we would stop the event loop even if the terminal was dirty. This lead to the terminal not being drawn when running animations unless something else was causing events to queue, such as user input.

This change ensures that the terminal is always drawn on EventsCleared when dirty.

Fixes #2914."3Duplicate of #118 kennylevinsenChristian Duerr10/24/19 09:40:37 PMFix minor style issues1
291712/13/17 09:30:27 PMDrew De PonteOn macOS when launching multiple times focus win"I dug into this and narrowed the issue down to the macOS app bundle
Info.plist file. So, I spun up a native macOS app real quick and tested
it by launching the binary directly and launching it via the app bundle.
When launching from the command line directly, it created multiple
windows & instances of the app. However, when launching via the app
bundle it behaved as I normally expect a macOS app to behave, that is
when launched multiple times to simply focus the already existing window
and instance.

This informed me that it wasn't something in code as much as it was
something in the app bundle configuration. Hence, I reworked the
Info.plist file based on the one that was created by XCode when I made
the native macOS app and it started behaving as expected.

The downside is that the ALACRITTY_LOCALE, LANG, and LC_CTYPE are not set as
they would be via the launcher script. Also, the PWD starts out at / rather than
the users home directory. The LANG, LC_CTYPE environment variables can be set in
your config under the env section. It isn't dynamic which still isn't quite as
nice as the bash + applescript approach. However, it make the behavior work
correctly which is critical for anyone using an app launcher like Spotlight to
switch apps."11/16/19 09:11:57 PMFix for WinPTY freeze on termination"This is a proof-of-concept for working around [winit:1241](https://github.com/rust-windowing/winit/issues/1241) to fix [alacritty:2889](https://github.com/jwilm/alacritty/issues/2889).

The workaround creates a notification channel between main even loop and `pty thread` that notifies the thread that the main loop is about to exit. This notifies the thread to terminate which stop it from  spamming `Wakeup` messages on Windows message channels."14I'm not sure right now if its something I messed up on my end or not but when I recompiled master this trick in my config file no longer works. Will report back when I get around to fixing this.cfietMaciej Makowski11/14/19 10:11:30 PMRedoing events iteration1
291812/14/17 11:32:31 PMAlberto SilvaThis application Alacritty cannot be opened - MacOS"Which operating system does the issue occur on?
MacOS 10.11.6

Since latest push, I'm not able to open the release after building.

Help! : )
"10/26/19 07:45:48 PMFix visual bellcc @nixpulvis 3@jwilm worked! thanks!kchibisovKirill Chibisov10/26/19 06:25:09 PMFix comments1
292001/04/18 05:16:32 AMNoneRecent launcher removal in Alacritty.app bundle breaks the app (macOS)"After the commits that fiddle with window focus and removal of script launcher under macOS (https://github.com/jwilm/alacritty/commit/d0fb4c563f8fe9d995cdcaec7b2b16e77e19d1a2 and https://github.com/jwilm/alacritty/commit/d0fb4c563f8fe9d995cdcaec7b2b16e77e19d1a2)
double clicking on the app in Finder or trying to `open` it from terminal doesn't work anymore:

```bash
$ open assets/osx/Alacritty.app
LSOpenURLsWithRole() failed with error -10810 for the file ~/rust/alacritty/assets/osx/Alacritty.app.
```

The recent built of executable in `assets/osx/Alacritty.app/Contents/MacOS` folder has `+x` flag as it was suggested [here](https://apple.stackexchange.com/questions/181026/lsopenurlswithrole-failed-with-error-10810-cant-open-install-os-x-yosemite)

Of course, Alacritty can be launchd from command line of Terminal.app:

```
target/release/alacritty 
```

Any help is appreciated."10/26/19 01:10:26 AMDont redraw the screen when moving the mouse, if it is not needed"On high resolution monitors connected to laptops, reducing the amount of needles redraws of the window helps reducing the battery usage. And when turning on the config option debug.render_time I noticed alacritty redrawing constantly when moving the mouse across the window.
When moving the mouse across the screen, alacritty currently checks if the mouse changes cells before doing anything. This includes setting and resetting the url underline status in the terminal, causing it to always get set to dirty, even in the following cases:
1) no url is highlighted before and after the mouse movement
2) the same url is highlighted before and after

Both cases obviously require no redraw of the Terminal.

This pull request only fixes 1), since it was simpler and I guess the much more common situation."1Solution is available in https://github.com/jwilm/alacritty/commit/d0fb4c563f8fe9d995cdcaec7b2b16e77e19d1a2#commentssimon-auchSimon Auch10/26/19 12:58:20 AMDont redraw the screen when moving the mouse, if it is not needed1
292603/08/19 01:09:31 AMPeter Gervaiunhandled osc_dispatch"alacritty 0.1.0 (git commit d0fb4c5) [release build using rustc 1.20.0])

Which operating system does the issue occur on?

Debian/sid

If on linux, are you using X11 or Wayland?

X11

```[unhandled osc_dispatch]: [['2','1',],['-','v',' ','e','x',],] at line 849```

It also have crashed once, same variation I guess, but I don't have the message handy."10/29/19 04:58:27 PMFix message bar being drawn over terminal content after the next resizeFixes #2924 =||= "Closing this as it is not about any specific escapes necessary to work properly. This was originally just debug output and the log level has been changed to represent that.

If there should be any escape sequences necessary to make something work, opening a separate issue for that sequence explicitly is the way to go."kchibisovKirill Chibisov10/28/19 12:41:19 PM"Fix message bar being drawn over terminal content after the next resize

Fixes regression introduced in 729eef0c933831bccfeac6a355bdb410787fbe5f"1
292701/23/19 07:44:25 PMOleksiy GolovkoMemorize the input source for MacOS"This PR tries to partially fix the #909. Specifically, memorising the input source when window loses focus and restoring it once focus is received.

I'm new to Rust and have no MacOS API experience, so the code is quite naive, but solves the problem I'm having. I would appreciate an advice on how to make it better / more idiomatic.

@kalekseev, do mind giving it a whirl?"10/29/19 04:56:49 PMFix selection not being reset on escape send"This is probably a bit controversial change, however I don't see much difference between `Action::Esc` and arbitrary user input for selection clearing.

What do you think @chrisduerr, @nixpulvis?

Fixes: #2925"1"Confirm the problem is fixed

On Wed, Jan 23, 2019, at 08:31, Nathan Lilienthal wrote:
> I don't have a mac, but just from reading the comments in the referenced winit threads it sounds like this should be fixed. Can anyone confirm?


> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/jwilm/alacritty/pull/945#issuecomment-456675678>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAWam5zuTpNIzDNF5bpRNz08dTH7zlQ5ks5vF_OTgaJpZM4REB5v>.


-- 
С уважением,
Констанин Алексеев
"kchibisovKirill Chibisov10/28/19 04:53:36 PM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
293512/22/17 10:00:18 PMChristian DuerrImplement faux scrolling"This patch implements faux scrolling inside the alternate screen buffer.

Whenever the user scrolls up or down while the alternate screen buffer
is active, instead of actual scrolling three up/down arrow keys are
inserted.

This fixes #550.

**Important:** I wasn't able to test this on a touch device, because I do not own one, so if anyone could test it, that would be nice.

Also I've tested termite and they seem to scroll 7 lines, I've settled for 3 lines for now, but any feedback is appreciated."01/12/20 09:29:28 PMMatch font family & style for fontconfig fallback"In the previous behavior, when looking for a missing glyph, fontconfig will just return some font containing that glyph based on its own ordering preference. It doesn't try to match the user's configured font; it might not even be monospace. This is probably (at least partially) the cause of https://github.com/jwilm/alacritty/issues/1560.

This is my first time contributing in Rust, and I'm not very familiar with the structure of this project yet. So I took the simplest approach of reading back the values already loaded in FreeType. If there's an easy way to get the values directly from the user config, I'm happy to do that instead."8"> it shows how you can make it scroll even only once per 4 mouse wheel events! 

did that but for me even ""0.5"" was really choppy, did not really work out

> The limit of Terminal UI is that you can't scroll halfway through a line!

yeah guessed that, really unfortunate 😄 "keidaxGabriel Holodak09/26/19 11:58:18 PMMatch font family & style for missing glyph1
293612/22/17 09:14:49 PMRobert GünzlerAdd option to draw borderless windowsPartial solution for #168 until winit has more granular control over the window decorations https://github.com/tomaka/winit/issues/323 10/31/19 09:10:31 PMWindows: fix unused imports"Resolves a couple of unused imports warnings when building on windows.

The only other warnings I get are some deprecation warnings originating from the `clap::crate_authors!` macro. Looks like they'll be resolved in the next clap version: https://github.com/clap-rs/clap/pull/1558"1@robertgzr my best guess here is that the scaling is thrown off by the extra space for content in the titlebar from the `fullsize_content_view`.davidhewittChristian Duerr10/30/19 11:25:40 PMFormat code1
293712/21/17 08:10:55 AMJustas TrimailovasCannot switch languages with keyboard shortcut"OS: macOS 10.12.6

As the title says. If I focus `Alacritty.app` and it has wrong input source language, I cannot change it with keyboard shortcut.

Related: https://github.com/jwilm/alacritty/pull/945 , https://github.com/jwilm/alacritty/issues/909

Created this as a new issue, to not bloat up #909 and this issue may not be only related to macOS.
"08/05/20 09:30:55 AMImplement handling for OS escape code 7"This OS escape code is used by libvte (on unix) and Terminal.app on macOS to inform the terminal emulator about the working directory.

By adding an OSC 7 message to the prompt (i.e. as libvte and Terminal.app do) Alacritty can be updated about the working directory of a child process, even on Windows. This technique also works for subshells, e.g. 

    Alacritty -> bash -> bash

Checking `/proc` can only get the cwd of the ""root"" bash instance which Alacritty itself spawned, but this OSC 7 message can work for any depth of subshell as long as that subshell is sending the message (normally as part of its prompt).

Relevant iterm2 issue where they added support: https://gitlab.com/gnachman/iterm2/issues/3939
The Windows Terminal guys are also considering handling this: https://github.com/microsoft/terminal/issues/3158

So in theory, this has the potential to fix #1979 for all platforms without `/proc`, but requires the user to customise their prompt a little. If you are in favour of merging this PR, I will add documentation for customising the prompt.

Fixes #1979."17"@melonmanchan thanks, have not stumbled upon that issue during the search (should've used `OSX` and not `macOS` for searching :) ).

I am closing this issue then."davidhewittDavid Hewitt11/06/19 10:31:34 AMMinor fixes for PR#29371
294212/22/17 09:18:09 PMChristian DuerrFix stack-overflow when creating a new atlas"When an atlas is full and the `insert` call fails, a new atlas should be
created. This is the current strategy, however the atlas is put at the
end of the vector, but the `current_atlas` index is set to 0, instead of
the last element. This leads to a recursion where it keeps trying to
insert into the full atlas at position 0 instead of the new at
`atlas.len() - 1`.

With this simple fix a stack-overflow is prevented because the new atlas
is inserted as the first element, which then will be used correctly for
loading new glyphs.

This fixes jwilm/alacritty/issues/842 and might also solve
jwilm/alacritty/issues/914 (I wasn't able to reproduce this with the
latest master). Also fixes #898."10/31/19 08:28:22 PMUpdate Windows config path in README.md"config file specifically saves into ...\AppData\Roaming\alacritty\ in windows"1@maximbaz would you mind filing another issue for that? We can fix this with a change in our book keeping.thepiperJames Liu10/31/19 07:58:05 PM"Update README.md

config file specifically saves into AppData\Roaming\alacritty in windows"1
294312/22/17 02:58:18 AMKeivaun WaughImproper font scaling across various DPI screens"Occurs on MacOS High Sierra 10.13.1. Untested on other OSs. When alacritty is started on the built in macbook pro display, the font is rendered correctly. If the window is dragged to a standard 1080p monitor, the text is huge. Conversely, if alacritty is started on the 1080p monitor, then dragged onto the build-in display, the text is tiny."11/02/19 12:25:34 AMFix clippy warnings =||= This is a duplicate of #71.chrisduerrChristian Duerr11/01/19 05:42:28 PMFix clippy warnings1
294511/10/18 04:08:49 PMPeter Gervaidimensions aren't working"**Which operating system does the issue occur on?**
Debian/sid

**If on linux, are you using X11 or Wayland?**
X11, 5760x2160, 160 dpi

![alacritty_hires_size](https://user-images.githubusercontent.com/1056054/34260285-9f277a84-e665-11e7-8455-5697f7ed1edf.png)

So you see the dimensions given have nothing in common with the dimensions displayed: 80x25 became something like 48x15 or so. Granted, the DPI is not usual, and ther is custom font, still the resolution seems to be based on the system font used in the title rather than the terminal space."11/02/19 11:34:08 AMFix wrong default cursor icon =||= I had the same issue on macOS, but https://github.com/jwilm/alacritty/pull/1403 fixed it for me.kchibisovChristian Duerr11/02/19 10:56:25 AMFix formatting1
294612/22/17 09:15:59 PMAshley HauckAdd --needed to pacman command"By default, `pacman` _reinstalls_ any package specified that is already installed. The `--needed` flag says ""if this package is already installed, just ignore it"". From the man page:

```
       --needed
           Do not reinstall the targets that are already up-to-date.
```

I quickly glanced through the other distributions listed, and I couldn't immediately find any others that have the same behavior. However, I haven't used most of them, so I'm not sure."11/03/19 01:31:55 AMTerm::reset_url_highlight should not always dirty Term"Term::reset_url_highlight is called on cursor move, so dirtying
unconditionally leads to excessive redraw."2"You shouldn't use `pacman -Syyu` because it's basically never needed and just unnecessarily updating your databases.

`--needed` has nothing to do with the package databases but it's about the packages you want to install.
So `-y` will update your databases if they are out of date before doing anything else. Then after that with `--needed` the program will be updated if it is not already up to date."kennylevinsenKenny Levinsen11/02/19 11:41:55 PM"Term::reset_url_highlight should not always dirty Term

Term::reset_url_highlight is called on cursor move, so dirtying
unconditionally leads to excessive redraw."1
294701/06/18 12:50:13 AMJoe WilmBroken config files should not cause Alacritty not to launch11/03/19 11:14:24 PMFix incorrect cell foreground when clearing screen"This fixes a bug that would clear the cells with the current template
cell with just the `flags` reset, to make sure the colors are correct.
However, the cell foreground was not reset, leading to cells counting as
occupied when resizing.

With this change both cell flags and foreground color are ignored when
clearing both the whole screen and inside the line, allowing us to
accurately keep track of cell occupation.

Fixes #2866." =||= "For everything that already has a custom deserializer it would be fairly straight-forward to use a default fallback value. Assuming that all fallback values for one deserializer are the same.

But even tho it would be great to have this for every value, it seems to me like it would require a custom deserializer for every type we have.

Alacritty definitely needs to start no matter what's inside the config though. As someone that doesn't have any editor except for neovim, I really don't want to switch to the tty to fix my alacritty config when all my terminals are closed.
  "chrisduerrChristian Duerr11/03/19 10:25:21 PMFix formatting issues1
294801/05/18 03:22:59 AMMaxim BazPrevent decreasing font size beyond the minimal value"Linux, X11.
Extracted from https://github.com/jwilm/alacritty/pull/949#issuecomment-353494090

-----

I played with holding <kbd>Ctrl +/-</kbd> and found a silly issue, posting just in case you can immediately think of a simple fix, otherwise I guess it's not worth looking into:

- Hold <kbd>Ctrl +</kbd>. The value reaches its maximum value (274 in my case) and stays there, pressing <kbd>Ctrl +</kbd> further has no effect. Pressing <kbd>Ctrl -</kbd> once reduces font size to 272.
- Now hold <kbd>Ctrl -</kbd>. The value reaches its minimum value (2 in my case), but further presses of <kbd>Ctrl -</kbd> change the value to 2, again and again. If I press <kbd>Ctrl -</kbd> 10 times after I already reached the minimal value of 2, then pressing <kbd>Ctrl +</kbd> once will have no effect - the font size will stay at 2. I have to press <kbd>Ctrl +</kbd> 10 times to compensate for my earlier actions, before further presses of <kbd>Ctrl +</kbd> begin to actually increase the font."07/14/20 01:13:20 AMFix F26Dot6-conversion (rounding issue)"Fixes https://github.com/jwilm/alacritty/issues/2780."10"@Aaron1011 It does actually fix the issue tho. The issue was never that the glyph was too big for a single atlas. Have you tested it out yourself? With #949 the crash doesn't happen anymore when increasing font size. The problem was that the atlas never changed, so there was never a new atlas that was created.

In theory you could run into problems with glyphs being too big for a single atlas, but I don't think that's even possible to happen because of gpu restrictions. I've played around with it a bit myself and the max font size goes up to a limit and then just stops. The worst thing I was able to reconstruct was that a few glyphs didn't show up anymore because my gpu driver was spouting errors about textures being too big. I don't think fitting a single glyph into an empty atlas has ever been the actual issue. Or can you still reproduce the issue after #949.

I did initially play with changing the recursion strategy, but it turned out for me that after I fixed the obvious problem, all the other issues were resolved too."cynecxKirill Chibisov07/14/20 12:31:52 AMMerge branch 'master' into fix-ft-rounding1
295212/23/17 01:36:53 AMJoe WilmFix macOS fallbacks"The cascade list is now generated from Menlo for all fonts. This doesn't
feel correct to me, but it seems to give the expected behavior on macOS.
One of the problems cited was that certain glyphs like ❯ would not be
rendered with default cascade lists for some fonts."11/17/19 12:04:17 AMFix underline/strikeout bleed into current line on backspaceFixes: #233010"@Aaron1011 It does actually fix the issue tho. The issue was never that the glyph was too big for a single atlas. Have you tested it out yourself? With #949 the crash doesn't happen anymore when increasing font size. The problem was that the atlas never changed, so there was never a new atlas that was created.

In theory you could run into problems with glyphs being too big for a single atlas, but I don't think that's even possible to happen because of gpu restrictions. I've played around with it a bit myself and the max font size goes up to a limit and then just stops. The worst thing I was able to reconstruct was that a few glyphs didn't show up anymore because my gpu driver was spouting errors about textures being too big. I don't think fitting a single glyph into an empty atlas has ever been the actual issue. Or can you still reproduce the issue after #949.

I did initially play with changing the recursion strategy, but it turned out for me that after I fixed the obvious problem, all the other issues were resolved too."kchibisovKirill Chibisov11/16/19 08:52:28 PMdelete a line1
295406/20/19 11:29:41 AMJoe WilmRemember window position on macOS"@brycefisher opened a PR (#765) for this a while back. We decided not to merge it with the following rationale:

> This PR adds a bunch of code to achieve this behavior whereas it seems to work out-of-the-box for most macOS applications. This suggests to me that something would need to change in winit. This might also be another reason why Alacritty should actually have a native cocoa component and just embed Alacritty as a library.

Discussion in this issue should focus on whether this feature can be supported via winit, and on how typical macOS applications provide this behavior. If ""standard"" macOS desktop app features can't be provided through winit (not just not implemented, actually impossible), then we should start another discussion about running Alacritty from a standard cocoa app. Other motivation for such a change is supporting multiple windows within a single process."11/04/19 07:41:42 PMFix URL scheme highlighting =||= This is a duplicate of https://github.com/jwilm/alacritty/issues/669.chrisduerrChristian Duerr11/04/19 03:47:39 PMFix URL scheme highlighting1
295512/26/17 02:38:18 AMJoe WilmUpdate winit, glutin, bitflags, and euclid"PR #811 had done this in addition to some other work. Unfortunately, it became coupled to another of other PRs. The TODO with this issue is updating the allowed versions for these packages in `Cargo.toml` and making any necessary code changes."11/04/19 07:41:14 PMUTF-8 mouse mode escape sequence (`CSI ? 1005 h` / `CSI ? 1005 l`)Fixes: #1934 =||= Yes thanks for the bump!kchibisovKirill Chibisov11/04/19 07:14:05 PMs/0x3f/631
296012/24/17 05:39:10 AMChet GurevitchUpdate Dependencies"ref #959 
Some other dependency updates that didn't require any changes to source are included in the first commit. Simplified versions specified since cargo update will handle minor versions.

Edit: Pushing again w/o built. Also all the updates not directly referenced in #959 are to dependencies shared with glutin (core-*, gl_generator etc.) other than parking_lot."11/05/19 10:15:11 PMset env variable, LC_CTYPE=UTF-8, fixes #29392LGTM; thanks!debrisdebris11/05/19 03:35:28 PMset env variable, LC_CTYPE=UTF-8, fixes #29391
296401/06/18 08:12:29 PMTaupiqueurHonour working directory"Alacritty doesn’t honour the working directory.

For example:

``` sh
cd Desktop; alacritty
```

Alacritty starts in the home directory, instead of the desktop one."11/10/19 07:26:39 PMAdd ref test for verifying colored clear behavior"This covers the behavior of clearing the screen and a row with colored
cells.

This covers a bug discovered in #2329 which was not detected in any
existing ref tests."1Right now it seems like alacritty explicitly changes the directory to the home directory when started. Maybe @jwilm can explain why this is the case?chrisduerrChristian Duerr11/09/19 12:56:00 AM"Add ref test for verifying colored clear behavior

This covers the behavior of clearing the screen and a row with colored
cells.

This covers a bug discovered in #2329 which was not detected in any
existing ref tests."1
296612/17/18 07:06:07 PMChristian DuerrMake visual bell flash color customizable (#2)"This addresses the main feedback in jwilm/alacritty/pull/430. I've
decided to go from scratch instead of basing my work on top of what
markandrus has already implemented to keep it as simple as possible.

If there's any stuff that I should take from the other PR, please let me
know. I can also try to send a PR to markandrus."11/11/19 12:12:15 AMAdd escape for reading clipboard5"~~Sorry for the noise, but I still can't find a way to configure visual_bell in a way that doesn't induce a blinding white flash. the ease will go from full-white toward the specified color, and then fade, but that isn't really useful.~~ Nevermind. Alacritty just needs to be restarted for setting to take.

The opacity seems to be affected though. This looked at first to be a premultiplied alpha issue... but upon trying a more saturated white color it still seems to decrease the opacity some."chrisduerrChristian Duerr11/10/19 04:38:08 PMAdd change log for setting selection clipboard1
296711/10/18 04:08:49 PMJoe WilmHandle winit's DPI Change event"_winit_ added `WindowEvent::HiDPIFactorChanged(f32)`, but none of the backends emit it, yet. Alacritty will need to recompute font size based on the new DPI and flush the glyph cache when the new event is delivered.

This is currently blocked on the event being supported on macOS and X11 _winit_ backends.

cc #510 "11/11/19 09:05:25 PMFix modifier inconsistenciesFixes https://github.com/jwilm/alacritty/issues/2906.3@francesca64 Ah ok, that makes complete sense, I'll make sure to add that to my PR when I make it. Meanwhile, I'll keep an eye out for winit `0.14.0`. Thanks for the info!chrisduerrChristian Duerr11/10/19 05:00:02 PMFix clippy errors1
297001/27/20 12:54:36 AMJoe WilmOptimize fontconfig fallback"There's some ideas in #456 which are worth pursuing to improve fallback performance. Specifically, it added caching for results of various fontconfig operations like `font_sort`. Additionally, it might be a huge win to store a custom `FontSet` which is the set of all fonts which have so far been used for fallback.
"11/11/19 11:18:34 PMFix incorrect DPI at startup on X11Fixes #2938. =||= "You're welcome! I'm ready to think more about this subject, as I have to do anyhow for my work where I'm faced with having to select the right font for the right codepoint in various applications, one of them being a MarkDown -> (Xe)(La)TeX -> PDF typesetting workflow, the other being text editors, web browsers and the command line. 

One of the most valuable tools that I've been using over the years is [BabelMap](http://www.babelstone.co.uk/Software/BabelMap.html), a Windows Unicode viewer that runs fine on Linux under Wine. For years this was virtually the only convenient tool I had to look up how exactly a given codepoint renders in a given font without being mislead by font substitions, and also vice versa to see what codepoints were supported by a given font. This unassuming free tool does it better than many fat and costly applications manage to, and it does so in very simple ways. I just opened it to have another look at its Composite Font Configuration dialog, where you can select Unicode block by block and assign a different font to each one from a selection list that has a figure for % coverage and a preview. If that wasn't enough, you can ex- and import your settings; turns out the author uses a simple XML format:

```xml
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<CompositeFont unicode=""10.0"" lang=""en"">
	<Block start=""0000"" end=""007F"" name=""Basic Latin"">Sun-ExtA</Block>
	<Block start=""0080"" end=""00FF"" name=""Latin-1 Supplement"">Sun-ExtA</Block>
	<Block start=""0100"" end=""017F"" name=""Latin Extended-A"">Sun-ExtA</Block>
	<Block start=""0180"" end=""024F"" name=""Latin Extended-B"">Sun-ExtA</Block>
	<Block start=""0250"" end=""02AF"" name=""IPA Extensions"">Sun-ExtA</Block>
	<Block start=""02B0"" end=""02FF"" name=""Spacing Modifier Letters"">Sun-ExtA</Block>
	<Block start=""0300"" end=""036F"" name=""Combining Diacritical Marks"">Sun-ExtA</Block>
...
	<Block start=""F0000"" end=""FFFFF"" name=""Supplementary Private Use Area-A"">Aegyptus</Block>
	<Block start=""100000"" end=""10FFFF"" name=""Supplementary Private Use Area-B"">Samyak Devanagari</Block>
</CompositeFont>
```

I'm not into XML but I can totally live with *this* level of complexity. This is like 80 or 90 percent of what fontconfig should have ever been about. 

Basically what is needed in my opinion is the ability to name a 'display flavor' and then add physical fonts in a ranked listing where later mentions overrides earlier mentions (fontconfig got this one wrong which is why you always have to explicitly prepend your own rules to the set of existing rules; CSS got it right). The ranked listing should provide a way to specify single codepoints or ranges of codepoints; probably there should be an option to specify what to do with 'holes' in the font (i.e. with codepoints that provide no glyph; most of the time, but not always, you'll want missing glyphs to be filled in from fonts lower in the ranking). 

BTW over the years I've come to reject the whole idea of having one font with several 'styles' such as italic, bold or bold-italic. These terms largely only apply to Western typography anyway; what you really want is a sound collection of typefaces that go together well in the same document. Think of it like an oldskool typesetter: Whatever is put together in one case is a font; when you want to emphasize a word, set a quoted passage, or add a headline, you have to break out another case (another font, i.e. another file). One huge advantage of digital type, at least vector type, is that one 'master' may be used for any number of sizes; but, as in lead type, if you typeset in LucidFooRoman and there's no italics coming with that typeface, just go and grab another typeface that harmonizes. 

As far as terminal emulators are concerned, I think if you want styled type at all, then what you really want is configurable, named 'flavors' of type. In this thinking a whole layer of complexity that has never really worked satisfactorily is summarily done away with.
"chrisduerrChristian Duerr11/11/19 09:16:27 PM"Fix incorrect DPI at startup on X11

Fixes #2938."1
297102/20/19 12:39:38 AMJoe WilmRestore mouse cursor on focusThe configured mouse cursor should be restored when Alacritty is focused. This doesn't currently seem to work on macOS.11/12/19 04:50:34 PMFix mouse protocols/encodings sets not being mutually exclusive within itself =||= I've tested this and it seems to be fixed.kchibisovKirill Chibisov11/12/19 02:44:39 PMFix mouse protocols/encodings not being mutually exclusive within themselves1
297204/01/19 10:41:21 PMJoe WilmFinalize Icon Choice"We settled on using the icon from @net. In #863, some changes were discussed including using the blue flame variant, and tweaking the stroke to make it show up better on dark backgrounds.

## Tasks

- [ ] @net to tweak border
- [ ] @net to provide final SVG
- [ ] Ship icon for macOS
- [ ] Ship icon for Linux"11/13/19 11:36:55 PMFix division by zero when minimizing on Windows"I keep getting the following error from latest master every time I minimize Alacritty on Windows:

```
---------------------------
Alacritty: Runtime Error
---------------------------
panicked at 'attempt to calculate the remainder with a divisor of zero', C:\Users\byk\Documents\Projects\alacritty\alacritty_terminal\src\index.rs:53:52

Press Ctrl-C to Copy
---------------------------
OK   
---------------------------
```

Looks like we expect `num_cols` to never be `0` but when minimizing, it becomes zero. I thought about protecting against this lower in the URL update code but it makes sense to skip drawing completely if we have `0` columns, right?

_Disclaimer: this is one of my first Rust patches and certainly the very first one against Alacritty so assume I have no idea what I'm doing. Pretty open to guidance and fix ups._"5The white background should be fixed with the latest master. There are some scaling issues with Windows but that seems to be because of issues with the .ico format.BYKChristian Duerr11/12/19 11:53:58 PM"Fix division by zero without cols or lines

The URL check uses a division to wrap column indices across lines, which
will cause a runtime error if the size of the terminal is zero columns
wide.

Since a lot of our logic assumes that we at least have one column and
line to work with and our behavior doesn't matter otherwise, this change
fixes the terminal dimensions to have space for at least one cell."1
297301/02/18 04:24:04 PMChristian DuerrAdd configuration option for faux scrollback"Some people have complained about the behavior of faux scrollback inside
of vim/tmux, however from what I can tell, alacritty behaves the same
way as other terminal emulators that support faux scrollback.

However there are a lot of terminal emulators that do not support faux
scrollback at all, which leads to people complaining about unusual
scroll behavior.

This is my proposal on how to solve this issue, by giving people that do
not like the VTE-Style faux scrolling the option to opt-out."11/12/19 10:23:13 PMfix #1465 hide on macosFix #1465 by hiding the application using NSApplication.sharedApplication().hide(nil) on macOS rather than just hiding the window. I ran into this issue because tmux mouse mode no longer worked for me after pressing command-H and re-activating alacritty.5Confirmed. Everything works as expected now. Thank you!!nitskyDavid Yamnitsky11/12/19 08:56:53 PMfix clippy1
298501/02/18 04:32:51 PMGeert JansenImplement OSC 52 (set clipboard)"This change allows a program running in the terminal to set the clipboard via the OSC 52 escape code. This is useful with remote commands running under tmux.

To test, set the tmux configuration variable ""set-clipboard"" to ""on"", and select some text. The text will be copied to the primary clipboard.

The best documentation that I've found for this escape code is here:

http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Operating-System-Commands"11/15/19 10:37:25 PMFix `CSI Ps M` deleting lines above cursorFixes #2984.2Thanks! This LGTM.chrisduerrChristian Duerr11/15/19 08:13:45 PMAdd reftest for line deletion1
298601/07/19 12:54:25 PMGleb M BorisovZombie processes from key_bindings commands execution"Which operating system does the issue occur on?
**OS X 10.12.6 (16G29)**

My alacritty.yml configuration contains such strange thing:

    key_bindings:
      - { key: LBracket, mods: Command|Shift, command: { program: ""/usr/local/bin/tmux"", args: [""prev""] } }
      - { key: RBracket, mods: Command|Shift, command: { program: ""/usr/local/bin/tmux"", args: [""next""] } }

Each time I trigger command execution with Cmd+Shift+[ or ] I'm getting more and more zombie processes of tmux in my system. Unfortunately I have very small ulimit on processes (1000 hard) and after some time I'm hitting fork error in all shell windows. Re-launching alacritty works (all processes are collected by system on alacritty exit). Seems that alacritty doesn't wait for spawned processes.

If you need any additional information or debug logs, feel free to ping me here.

Thanks."11/17/19 02:10:12 AMFix DA report1"I know that @zacps has added ignored the daemon mode in his Windows PR (only when built on Windows). So currently there's the Windows version (I think it's just spawned without awaiting), the Linux version where it's spawned as daemon and it works and the MacOS version where it's spawned as daemon and does not work.

As far as I know the `wait` call should be present on all platforms (correct me if I'm wrong please), so that might still be a good option. Alternatively it's probably possible to orphan the spawned process to allow init to `wait` for the process to exit."kchibisovChristian Duerr11/17/19 12:07:08 AM"Fix ESC escapes not ignoring invalid intermediates

Previously, `ESC` escapes would ignore invalid intermediates and still
execute the specified actions, leading to false positives. If there's an
unexpected, intermediate specified now, the escape will be dropped.

This also fixes an issue with `CSI Ps c` not dropping the escape with
invalid intermediates."1
299301/03/18 07:15:58 PMChristian DuerrEnable shift+select in mouse mode"When an application takes control over the mouse, it usually disables
selection completely. However the common way to still make selection
possible is by allowing selection while the shift key is held down.

This feature is implemented here by making use of the new `modifiers`
field on mouse events with glutin/winit.

This fixes jwilm/alacritty#146.

I've thought about changing the cursor, but it seems like that would be kinda odd (you wouldn't want it changing every time when hitting shift). And other terminal emulators also do not seem to change the cursor with shift selection.
For clearing a selection you also need to hold shift and click, but this also seems consistent with my experience on other terminal emulators.
If you have any feedback on these two things, feel free to tell me about it."11/18/19 10:08:50 PMBump glutin depedency =||= No problem. :)chrisduerrChristian Duerr11/18/19 09:27:00 PMBump glutin depedency1
299605/05/18 03:38:25 PMVõ Anh DuyBroken screen on tmux with emoji in status bar"Which operating system does the issue occur on?
MacOs
If on linux, are you using X11 or Wayland?
Nah

If i run tmux which has an emoji (from https://github.com/Goles/Battery, run which `battery -pt`, result is `#[fg=green][100%] ⚡#[default]%`) in status bar, iTerm2 display it probably but alacritty seem broken.

<img width=""1440"" alt=""screenshot 2017-12-29 14 11 36"" src=""https://user-images.githubusercontent.com/1771266/34431498-52c4ebc0-eca2-11e7-95fb-1ab3975690aa.png"">

Left side is iterm2, right side is alacritty"11/19/19 06:02:11 PMRemove tests failing in release mode =||= Closing in favor of #1295. Please subscribe to that ticket for further updates.chrisduerrChristian Duerr11/19/19 05:19:27 PMRemove tests failing in release mode1
300012/29/17 05:19:15 PMJoe WilmFix zombie childrenResolves #97311/21/19 06:11:56 PMFix blank lines after each line after pasting from GTK apps on WaylandFixes: #2844 =||= Closing in favor of #1295. Please subscribe to that ticket for further updates.kchibisovKirill Chibisov11/21/19 05:03:22 PM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
300609/24/18 06:40:14 PMOliver Leitner10 megabytes per terminal"hi everyone

ive been running alacritty within x11 for a few months now..., in that time i noticed that each open alacritty terminal takes about 10 megabytes of ram.

thats about 10 times as much as a compareable xterm or gnome-terminal or xfce4-terminal takes...

what are you doing with that ram?"11/22/19 04:09:02 PMFix excessive allocations in URL parserFixes #3002.1@jedahan Thanks for the heads-up. Closing this since #1584 has been merged.chrisduerrChristian Duerr11/22/19 03:27:00 PMFix clippy warnings1
300902/03/18 03:04:57 PMChristian DuerrBlock selection"Unphased has mentioned in #974 that block selection would be a nice feature for alacritty. And I'd love to take a look at implementing this.

The main question would probably be about which modifier should be used for it. I'd go for ctrl, which is used by VTE, but it seems like other terminals use alt."11/23/19 05:08:53 PMMove renderer from alacritty_terminal to alacritty =||= Closed because it's a duplicate of #526.kchibisovKirill Chibisov11/23/19 04:00:27 PMFix import + remove alacritty_term/src/cursor.rs1
301112/29/17 11:53:16 PMBastien OrivelBump glutin to 0.12This removes a lot of duplicated dependencies12/09/19 10:12:45 PMColored emojis on Linux/BSD with freetype."This PR implements colored emojis support on Linux/BSD with freetype.

The Linux/BSD part of it is working fine, however the implementation requires some discussion, since integration is not that simple in the current structure and I don't want to tight the other platforms on how Linux/BSD operates here.


![picture](https://user-images.githubusercontent.com/27620401/69481137-810b5500-0e1f-11ea-8c39-2b0a8e5a44b6.png)


~P.s. I'll fix macOS/Windows builds when we agree on integration.~"24No problem. :DkchibisovChristian Duerr12/09/19 09:07:34 PMFix some minor comment issues1
301201/06/18 08:26:02 PMÖmer Sinan AğacanSegfault on X11 Linux" Which operating system does the issue occur on?

Linux x86_64 (Xubuntu 16.04)

If on linux, are you using X11 or Wayland?

X11 (i3 window manager)

Version

8ce553f

---

When I run alacritty in release mode (debug mode works fine) it segfaults directly without printing anything.

I tried removing my config files but got the same output.

Stack trace:

```
#0  0x0000000000000000 in ?? ()
#1  0x000055555580f504 in glutin::api::glx::ffi::glx_extra::Glx::SwapIntervalEXT::ha832efad79070a2a (interval=1, self=<optimized out>, dpy=<optimized out>, drawable=<optimized out>)
    at /home/omer/rust/alacritty/target/release/build/glutin-fc5681b4476584a0/out/glx_extra_bindings.rs:593
#2  glutin::api::glx::ContextPrototype::finish::hea806e244e24ee17 (self=..., window=<optimized out>) at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.11.0/src/api/glx/mod.rs:252
#3  0x0000555555804e48 in glutin::platform::platform::x11::Context::new::h209159face65e7a9 (window_builder=..., events_loop=<optimized out>, pf_reqs=<optimized out>, gl_attr=<optimized out>)
    at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.11.0/src/platform/linux/x11.rs:217
#4  0x000055555580077a in glutin::platform::platform::Context::new::hde3556c342568aa2 (window_builder=..., events_loop=0x7fffffffa340, pf_reqs=<optimized out>, gl_attr=<optimized out>)
    at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.11.0/src/platform/linux/mod.rs:58
#5  glutin::GlWindow::new::h2293a9bd6e9bdebb (window_builder=..., context_builder=..., events_loop=0x7fffffffa340) at /home/omer/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.11.0/src/lib.rs:322
#6  0x000055555565a62b in alacritty::window::Window::new::hd57571420e67a9e7 (title=..., window_config=0x7fffffffc4b8) at src/window.rs:203
#7  0x0000555555628c69 in alacritty::display::Display::new::hb2503e60a7097e41 (config=0x7fffffffc3d0, options=0x7fffffffd528) at src/display.rs:140
#8  0x0000555555683868 in alacritty::run::hc2eda810edf4ce0a (options=<optimized out>, config=...) at src/main.rs:103
#9  alacritty::main::hddd2bd38ccac6e4b () at src/main.rs:53
#10 0x0000555555660256 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h8f369ceb4f6e618f () at /checkout/src/libstd/rt.rs:74
#11 0x0000555555895568 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::haefc7fa79ac54b63 () at /checkout/src/libstd/rt.rs:59
#12 std::panicking::try::do_call::h8154dbcab3f4d602 () at /checkout/src/libstd/panicking.rs:480
#13 0x000055555589e8ae in __rust_maybe_catch_panic () at /checkout/src/libpanic_unwind/lib.rs:101
#14 std::panicking::try::h3315662ae9ec5656 () at /checkout/src/libstd/panicking.rs:459
#15 std::panic::catch_unwind::h9138e7d39c984961 () at /checkout/src/libstd/panic.rs:365
#16 std::rt::lang_start_internal::h6e5de529be6cef59 () at /checkout/src/libstd/rt.rs:58
#17 0x00005555556849e2 in main ()
```"11/23/19 06:23:01 PMFix modifiers not getting released with XWayland"This resolves a winit bug where modifiers would stay pressed when they
were released outside of Alacritty when it was started in XWayland mode." =||= "Try using stable. Nightly has had some issues for a while. If you really want to use nightly make sure it's on the latest nightly, that seems to work for me again.

But generally going with stable is the safer bet.
@osa1 Were you able to make it work with stable?"chrisduerrChristian Duerr11/23/19 05:37:07 PM"Fix modifiers not getting released with XWayland

This resolves a winit bug where modifiers would stay pressed when they
were released outside of Alacritty when it was started in XWayland mode."1
302001/02/18 04:09:10 PMChristian DuerrImplement block selection"Basic block selection has been implemented. This fixes #978.

Currently this still uses a fixed key, which is `ctrl`. It might be desirable to use a configurable key option for this, but I wasn't sure if I should put that in the key shortcuts, or if a separate option outside of the key options should be used.

One issue with setting up a `key_binding` is that especially when keys like control or shift are used, they might be counted as modifiers. So when holding shifit and pressing control, it would be a different key combination. So this key would need to be setup to catch the key itself and all modifiers.

It would also be the first key that requires a separate release event as far as I know. So that might be some code complexity that would not be desired."11/25/19 10:04:17 PMBump x11-clipboard to 0.4"Closes https://github.com/jwilm/alacritty/issues/3018

---

Haven't done much for the project in a while so figured I'd start with something as simple changing one digit :wink: "1awesome! Thanks for your contributions 💯 cole-hCole Helbling11/25/19 07:50:31 PMFormat version idiomatically1
302401/01/18 09:55:50 PMRichard JohnsonFaux scrolling breaks vim scrolling event capture"Which operating system does the issue occur on? Linux

If on linux, are you using X11 or Wayland? X11

https://github.com/jwilm/alacritty/commit/e0993587e7c994214aef83a6d50e70959ee05d96 on master disables mouse scrolling events in tmux / vim and inserts up / down arrow events.

I understand this is probably still under development; unfortunately I can't see a config option to disable faux scrolling at this point."11/25/19 11:45:35 PMBump copypasta to 0.6.1"I think it should be fine to export this as a non-breaking change, since we don't publish any of the breaking APIs of XCB as far as I'm aware.

There also haven't been any changes in our API or X11-clipboard's." =||= Apologies for the duplicate, closing.chrisduerrChristian Duerr11/25/19 10:06:37 PMBump copypasta to 0.6.11
303301/02/18 04:33:34 PMJonathan HayaseScrolling behavior does not match vte3"My apologies in advanced if this issue is unclear. There are several things happening at once, and it's not clear to me how closely related they are, although I currently believe they may be solved at the same time.

I am using `linux` with `X11`.

**The Problem**

Scrolling seems to behave rather strangely for me. To explain what I mean, I will compare the behavior between `gnome-terminal` and `alacritty` and highlight the unexpected results.

  * `htop`
    - `alacritty` scrolls as if the arrow-keys were pressed.
    - `gnome-terminal` scrolls in a different way, which leaves the selected process stationary and scrolls the contents of the process pane.
  * `emacs`
    - **`alacritty` sends arrow key codes (according to <kbd>C-h</kbd> <kbd>k</kbd>)**
    - `gnome-terminal` sends something which `emacs` calls `<mouse-4>`/`<mouse-5>`. (I have yet to figure out what characters these correspond to.)
  * `less`
    - The behavior appears to be the same.
  * `tmux`
    - `tmux` is treated just like `htop` and `emacs`, therefore it receives arrow-key sequences (which are then handed to the program running inside `emacs`).
 
It's worth noting that in `htop` and `emacs`, `alacritty` seems to be sending the arrow keys with the direction inverted relative to my normal desktop scrolling. (I.e., the motion that would scroll down in a web-browser sends the up-arrow key in `alacritty`.)

Right now this difference in behavior is the cause for some ergonomic frustrations (i.e. not being able to distinguish scrolling from arrow keys for anything running inside `tmux`). Any help/explanations would be appreciated!"11/26/19 04:53:44 PMUse `cargo deb` in a simple way`cargo deb -p` was added this year https://github.com/mmstick/cargo-deb/issues/49#issuecomment-510033134 =||= #968 landed; this should be resolved in master.zyctreePen Tree11/26/19 01:19:27 PMUse `cargo deb` in a simple way1
303501/03/18 07:17:15 PMPeter GervaiLibrary libwayland-egl.so could not be loaded."**Which operating system does the issue occur on?**
Linux

**If on linux, are you using X11 or Wayland?**
Same on both.

A fresh pull resulted this executable:
```
thread 'main' panicked at 'Library libwayland-egl.so could not be loaded.', src/libcore/option.rs:839:4
   7: std::sync::once::Once::call_once::{{closure}}
             at src/libcore/option.rs:302
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-sys-0.9.10/src/egl.rs:32
             at src/libcore/ops/function.rs:223
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-0.2.11/src/lazy.rs:24
             at src/libstd/sync/once.rs:228
   8: std::sync::once::Once::call_inner
             at src/libstd/sync/once.rs:308
   9: alacritty::display::Display::new
             at src/libstd/sync/once.rs:228
             at src/display.rs:140
  10: alacritty::run
```
Interestingly, there is egl installed, but apparently not what rust had on mind:
```
/usr/lib/x86_64-linux-gnu/libwayland-egl.so.1
/usr/lib/x86_64-linux-gnu/libwayland-egl.so.1.0.0

libwayland-egl1-mesa:amd64: /usr/lib/x86_64-linux-gnu/libwayland-egl.so.1.0.0
```"11/26/19 09:02:47 PMRemove unused PackedVertex struct"All references to `PackedVertex` were removed in #2066, so there is no
reason to keep it around.

---

I'm on a roll. From changing a few characters to completely removing a few lines!" =||= @pklingem #974 is completely unrelated. Please open a new issue.cole-hCole Helbling11/26/19 04:32:12 PM"Remove unused PackedVertex struct

All references to `PackedVertex` were removed in #2066, so there is no
reason to keep it around."1
303601/19/20 04:20:18 PMDeleted userkeybindings/ forward keys support"Which operating system does the issue occur on?

masOS 10.13.2


I discovered this while using/ trying [micro](https://github.com/zyedidia/micro)
they recommend iTerm cause Mac Terminal does not do a good job as well but alacritty is actually even worse as far as I've seen.

Wanted to bring this up here cause I actually use alacritty with tmux daily and would like to see this improved or at least hear someones opinion on this issue.

thanks 

## steps to reproduce
1. get micro
2. open a file/ type some text
3. alt+shift+(left/right) is supposed to select a word but alacritty just does strange things/ moves the word
3.1 or try `shift+(up/down)` to select lines (nothing happens, Mac Terminal just moves the courser)

to debug this further the [following statement](https://github.com/zyedidia/micro/issues/974#issuecomment-354831774) from a different context might help:
> Unfortunately most terminals do not differentiate between Shift-Backspace and Backspace so it is impossible for micro to know which was pressed. Micro just always assumes backspace is pressed. You can see this in micro if you use the nightly with the > raw command which will show the raw escape sequences micro is receiving. For shift-backspace and backspace, the escape sequence is the same.

[and](https://github.com/zyedidia/micro/issues/974#issuecomment-354878299)
> The issue is that in mac, alt+keys sends unicode characters instead of letting the application do whatever it wants (in this case send the escape sequences to micro). To fix this in iTerm2, go to Preferences->Profiles->Keys and select Esc+ for Left option key."11/27/19 07:21:52 PMFix parsing of file schemeFixes #3034. =||= "Is there no way to send a sequence to vim when clicking just the modifier key?  Why must it be paired with another character

For example I would map Cmd to some arbitrary sequence, then set that same sequence as leader in VIM and do the mapping that way."chrisduerrChristian Duerr11/26/19 08:58:38 PM"Fix parsing of file scheme

Fixes #3034."1
303801/06/18 01:42:56 AMChristian DuerrAdd clippy check to travis "This commit adds clippy as a required step of the build process. To make
this possible, all existing clippy issues have been resolved.

I think making clippy part of the travis CI run would be a great step,
but if this is not desired, I can also take that part out of this and
add just the fixes for all current clippy issues."11/28/19 07:08:05 AMFix `OSC 52` with empty clipboard param"This fixes the behavior of the clipboard escape (`OSC 52`) when the
second parameter is not specified. If it is missing, the parameter is
now assumed to be `c`, defaulting to the default clipboard.

This has been fixed both for writing and reading.

Fixes #3037." =||= "Rebased this on top of master, should be good now when travis doesn't complain.
  "chrisduerrChristian Duerr11/26/19 10:16:32 PM"Fix `OSC 52` with empty clipboard param

This fixes the behavior of the clipboard escape (`OSC 52`) when the
second parameter is not specified. If it is missing, the parameter is
now assumed to be `c`, defaulting to the default clipboard.

This has been fixed both for writing and reading.

Fixes #3037."1
303901/06/18 08:12:29 PMChristian DuerrHonour working dir on linux"Apparently switching to the home directory on startup was primarily done for macos, however the default behavior on linux is to start the terminal emulator in the working directory.

This just doesn't switch to the home directory when alacritty is run on linux.
If there is any more to it, please let me know.

This fixes #961."03/23/20 04:21:15 AM[WIP] Preliminary efforts to add *BSD CI"Closes #2248.

---

This is a draft for adding *BSD support to our CI, utilizing the [https://builds.sr.ht](https://builds.sr.ht) and [https://dispatch.sr.ht](https://dispatch.sr.ht) services.

As it is, there are a few problems with this (or rather, differences from Travis):
- [ ] sequential execution of tasks (all subsequent tasks are blocked until completion)
- [ ] lack of ability to restart a single, failed task
- [ ] no way to specify allowed-failures (like we do with all nightly builds under Travis)
  - I currently `|| true` all tests that would be an allowed-failure, which works but isn't as graceful, nor notifies when it fails
- [ ] dispatch.sr.ht requires full access (r/w) to all repos in order to set up the webhook (see also: https://todo.sr.ht/~sircmpwn/dispatch.sr.ht/22)
  - could maybe be worked around if dispatch.sr.ht were to provide a way to manually create a webhook?

In regards to points 1 and 2, we could just split every single task into its own file. I haven't tested if having subfolders in `.builds` would succeed, which could allow us to keep the folder from getting too hectic if we decide to move our other targets to sr.ht as well. This would also allow us to restart single tasks as well as have them all run in parallel.

---

(the following are notes and not necessarily blockers)

### FreeBSD
My current implementation uses `rustup` to install v1.36.0, stable, and nightly Rust toolchains. We could potentially drop 1.36.0 in favor of using Rust stable straight from FreeBSD's ports. This would also cull nightly, because neither package installs `rustup` for managing versions.

Example build for the curious: https://builds.sr.ht/~cole_h/job/114951

### OpenBSD
OpenBSD is a Tier 3 target for Rust, which results in no `rustup` being built for it (available from rustup.rs, at least). This means we can only CI the available version, which at the time of writing is 1.38.0.

Example build for the curious: https://builds.sr.ht/~cole_h/job/114979"1LGTMcole-hCole Helbling11/27/19 12:46:14 AMPreliminary efforts to add *BSD CI1
304309/24/18 06:41:14 PMSteven LuAuto copyFeature request for a configuration option that enables selection to auto copy to clipboard. To mirror iTerm2 functionality (as well as a few other terminals i've used).11/30/19 06:11:43 AMMove icon embed build step out of winpty, etc"- In preparation for feature gating winpty (#2890), move the embed step out of the winpty build process.
- Add default-members to workspace, this permits non-targeted platforms to completely ignore unused packages.
- Remove default features from image dependency, further reducing build time."3Cool! Thanks for following up, I'll recheck my versions and rebuild.sterlingjensensterlingjensen11/28/19 09:47:52 PM"Revert Cargo.toml

Changes withdrawn in response to objection."1
304903/05/18 04:41:18 PMNoneFaux-Srollback not working on Macbook Pro "Which operating system does the issue occur on? Mac OS

I can't seem to get faux-scrollback to work. It is working in chrisduerr's faux-scrollback [fork.](https://github.com/chrisduerr/alacritty/tree/faux-scrollback) Has this something to do with my touchpad, the code or my config? Config located [here](https://github.com/sandersantema/Alacritty-Config)



Any help would be greatly appreciated! 

And a big thanks to all the contributors! Alacritty makes the terminal a joy to use 😄 
"11/28/19 08:18:22 PMAdd terminal escape bindings with combined modifiers for Delete and Insert"These bindings was forgotten, when the first massive addition took place.

Fixes: #3046" =||= Scrollback is a current WIP, yes. No ETA but it's currently being worked on.kchibisovKirill Chibisov11/28/19 07:22:53 PM"Fix compilation

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
305101/03/18 11:42:49 PMLeonard LausenLarge spacing between characters with default config"After compiling alacritty on Gentoo Linux with X11 with default config there is a large spacing between characters, making alacritty unusable. Note that this is a device with HiDPI. I am not sure what could cause the issue, any help would be appreciated.

![image](https://user-images.githubusercontent.com/946903/34536066-66726262-f0c4-11e7-9069-8a0cfd230f28.png)

The following ebuild was used to build alacritty: https://github.com/leezu/leezu-overlay/blob/fb8b749d4b74bba44f4e68b3ff293c7e9eeb0436/x11-terms/alacritty/alacritty-9999.ebuild 
It was autogenerated by https://github.com/cardoe/cargo-ebuild"12/04/19 11:12:23 PMAdd documentation for the release process3Thanks @chrisduerr , it seems to be the same issue.chrisduerrChristian Duerr12/04/19 09:31:47 PMFix happy little accident1
305412/15/18 09:33:34 PMSteve BlundyFixing tabs in copy-paste (#219)Adding tab characters to the Grid as an actual tab - rather than a space - followed by spacer characters. The spacer characters have the WIDE_CHAR_SPACER flag so the selection code will *not* pass them to the clipboard. This means `Term::string_from_selection()` will filter out the spacers and just return the tabs.12/10/19 11:53:52 AMFix deadlock issue in Conpty drop implementation"Fixes #3042 

I also refactored some of the differences between winpty / conpty at the same time - resulting in more uniform interfaces and less code overall. Also got rid of the lifetime on the `Pty` type 😄 "12"I changed the copy code to use self.tabs and I updated the renderer to render '\t' as a space. Tabs are also being skipped in the same way spaces are. Also, I went ahead and wrapped self.tabs to they're indexed by Columns."davidhewittDavid Hewitt12/03/19 10:58:36 AMFix lint errors1
305501/03/18 08:35:08 PMChristian DuerrLast column outside of selection when mouse at right side of window"So recently I've played around a bit with the selection and noticed that when a selection is made and the mouse is dragged outside the right side of the alacritty window, the last column is not selected anymore.

This is due to the way the `side` calculation works in `input.rs`. The last column is only included when the cursor position goes over the half way point of the glyph. However when the cursor leaves the screen, the cursor position relative to the cell is reset to 0 and the `side` is `Side::Left`, even tho the mouse leaves the window at the right side.
 
I feel like this might also be the reason for #777, so it seems like the results of the issue were fixed, instead of the actual issue itself?

Seems like this is at least partially covered by #432."11/30/19 03:36:38 PMFix direct escape input on Windows using altFixes #1939. =||= Moved to #432 to keep everything in one place.chrisduerrChristian Duerr11/30/19 06:09:16 AM"Fix direct escape input on Windows using alt

Fixes #1939."1
305705/14/18 07:37:15 PMGiorgio GalloLC_CTYPE set to some strange (invalid?) value in alacritty"(macOS, current master branch)

My `.bashrc` sets `LANG=en_GB.UTF-8` and `LC_COLLATE=C`; in `terminal.app` I get:

<img width=""458"" alt=""t"" src=""https://user-images.githubusercontent.com/471835/34543150-c40853d0-f0df-11e7-947e-b23ae50ae1d3.png"">

In `alacritty` `LC_CTYPE` is set to `en_GB@currency=EUR.UTF-8`:

<img width=""386"" alt=""a"" src=""https://user-images.githubusercontent.com/471835/34543167-dd072b18-f0df-11e7-90a8-059def995195.png"">

I guess the value of `LC_CTYPE` somehow comes from my macOS setting (where I have overridden £ with €), but it doesn't seem valid (at least, it causes `nano` to not correctly display unicode files) and I do not expect my locale settings to be impacted by launching a terminal.

Also, in `alacritty` I get a `__CF_USER_TEXT_ENCODING=0x1F5:0:0`, which is absent in `terminal.app`."12/01/19 02:15:22 AMAdd new issue and PR templates"This adds a PR template that should remind users to document their
changes in our CHANGELOG, without requiring too much direct interaction
from the user.

The issue template has also been reworked a bit, hopefully making it
easier for people to report bugs, without intruding on them if the
information is irrelevant or providing it is too much effort.

Fixes #3031." =||= Nevermind, I did not had LANG set in my zshrc, works nowchrisduerrChristian Duerr12/01/19 01:43:00 AMRemove redundant 'optionally'1
305901/05/18 03:22:59 AMChristian DuerrPrevent font_size_modifier from sinking too low"This change prevents the `font_size_modifier` of the terminal from going
below the font size 1. If this is not done, it is possible to decrease
the `font_size_modifier` without the font size itself changing. So when
raising it again, nothing happens until the `font_size_modifier` is back
at a reasonable level.

This fixes this by making sure the `font_size_modifier` never goes below
`1 - original_font_size`. So if the original font size is 12, the
`font_size_modifier` will always bee `-11` or bigger. Effectively limiting
it to the value where the font is 1. (`12 - 11 = 1`)

This fixes #955."12/02/19 04:12:30 PMFix PR and issue templateThis is a follow-up to https://github.com/jwilm/alacritty/commit/918ce9dead33cdb3ee4bbd016cd177313981151c, since that showed some issues. =||= I'm actually not quite sure if we want to limit the upper bound of the font size. It seems like most other terminal emulators do not do that. If the user wants to use a giant font he will probably know that eventually things might get funky.chrisduerrChristian Duerr12/01/19 07:59:42 PMMerge line breaks1
306001/07/18 09:11:47 PMGiorgio GalloResolves #733.(see comment on issue #733, which would have probably been better inserted here instead)12/09/19 11:35:14 PMFix colored row reset performance"This fixes a bug where a row would always get reset completely if its
background does not equal the default terminal background. This leads to
big performance bottlenecks when running commands like `echo ""\e[41m"" &&
yes`.

Instead of resetting the entire row whenever the template cell is not
empty, the template cell is now compared to the last cell in the row.
The last cell will always be equal to the previous template cell when
`row.occ < row.inner.len()` and if `occ` is equal to the row's length,
the entire row is always reset anyways.

Fixes #2989."3This looks great, and thanks for the explanation of the design choices.chrisduerrChristian Duerr12/09/19 10:09:17 PMFix build failure1
306804/09/19 04:37:53 PMPeter GervaiError creating GL context; eglCreateWindowSurface failed"**Which operating system does the issue occur on?**
Debian/sid

**If on linux, are you using X11 or Wayland?**
Both.

Actual pull results:
```
Alacritty encountered an unrecoverable error:

        Error creating GL context; eglCreateWindowSurface failed
```"12/04/19 08:11:51 PMFix incorrect DPI after wakeup on X11"Fixes #3022." =||= Also glutin guys have closed the referenced issue, so I guess this can be closed unless someone see it again.chrisduerrChristian Duerr12/04/19 07:31:52 PM"Fix incorrect DPI after wakeup on X11

Fixes #3022."1
306901/06/18 06:36:42 PMNonekey bindings with Ctrl"MacOSX 10.13.3 

help me bind <Ctrl>+<Tab>, I use it to switch buffers in vim but it is not working in alcritty
"12/05/19 05:14:48 PMRemove unnecessary newtype lifetimes"With the exception of Err, all implement Drop on their owned heap allocations and contain no references - making lifetime declaration unnecessary.
In the case of Err, the unused raw pointer was removed - making Drop unnecessary.
Memory is correctly freed according to sanitizer instrumentation, manually verified in debug session." =||= "You probably want the name ""Add"""sterlingjensensterlingjensen12/05/19 04:06:29 PM"Apply suggested corrections to check_err(e)

Remove forward declarations and clever use of filter method."1
307101/06/18 07:42:43 PMChristian DuerrFix scrolling outside of u8 range"Until now scrolling past column and line 222 has been ignored. With this
patch it now reports scrolling beyond these lines as scrolling at the
limits (222).

I'm not entirely sure if there is a way to report numbers outside of the
u8 range, however I do not see any separator between line and column and
have choosen to just report these as line/column 222 for now. If someone
knows more about this, please let me know.

This fixes #698."12/06/19 09:35:45 PMFix unicode 11/12 width =||= Thanks for the PR! Unfortunately, this is not the source of problems with SGR mouse reporting, and the original behavior of `normal_mouse_report` is correct for basic mouse reporting.chrisduerrChristian Duerr12/05/19 06:35:21 PMFix unicode 11/12 width1
307401/06/18 12:50:13 AMChristian DuerrImprove ability of alacritty to deal with broken config"When part of the config is broken, alacritty shouldn't instantly try to
recover to the default config, but instead try to use defaults only for
the parts of the config which are broken.

The primary fields which are still breaking the complete config when
they are not configured properly are fonts, mouse bindings and key
bindings. In those cases alacritty falls back to the default config.

This fixes #954.

I think it might be possible to prevent the mouse and keyboard shortcuts from destroying everything with a custom deserializer over the whole vec, I'll look into that.
I'm not sure about the fonts though.
  
**Update**: Mouse and Keyboard bindings should work now too. Only invalid yaml should be able to break the config now."12/10/19 11:47:43 AMFix deadlock with closing on Windows using Conpty (v2)"The ClosePseudoConsole call was deadlocking if it was called after the i/o pipes had already been closed in some other thread. To avoid this issue the i/o pipes have been moved into the Conpty struct in order to ensure they are dropped (closed) at the same time as the pseudoconsole.

This commit also makes corresponding changes to the Winpty backend to keep the code uniform.

Compared to #3054, this PR:
- Also moves the i/o pipes into the `Conpty` / `WinptyAgent` structs to ensure that `Conpty`'s drop closes the i/o pipes and calls .
- Instead to static dispatch using `match`
- Instead does not remove the `EventedReadablePipe` and `EventedWritablePipe` types
- Instead attempts to inline the necessary `match` calls to choose between the `Winpty` / `Conpty` backends

Also many thanks to @sterlingjensen for #3069 which makes this changeset smaller and neater. No lifetimes 😄 !"2Thanks for the PR! Unfortunately, this is not the source of problems with SGR mouse reporting, and the original behavior of `normal_mouse_report` is correct for basic mouse reporting.davidhewittDavid Hewitt12/05/19 05:39:56 PM"Fix deadlock with closing on Windows using Conpty

The ClosePseudoConsole call was deadlocking if it was called after
the i/o pipes had already been closed in some other thread. To
avoid this issue the i/o pipes have been moved into the Conpty
struct in order to ensure they are dropped (closed) at the same
time as the pseudoconsole.

This commit also makes corresponding changes to the Winpty backend
to keep the code uniform."1
307709/17/18 03:15:21 PMMaxim BazMake scrollback support alternative screen buffer (e.g. tmux history)"UPDATE: I'm not sure, this might or might not be relevant for alternative screen buffers in general, not only for tmux, see https://github.com/jwilm/alacritty/pull/657#issuecomment-357005356.

----

The initial implementation of scrollback #657 does not support tmux, so when I start tmux and run `tree /` to generate a lot of output, the alacritty's scrollback will be empty.

Sakura terminal on the other hand supports tmux history, so when you have one pane, the results of scrolling via sakura and via tmux itself are identical. Sakura is based on VTE, so presumably there are other terminals that behave in the same way.

I will be using tmux after scrollback is released, some of its features (like incremental search) and plugins (such as [laktak/extrakto](https://github.com/laktak/extrakto)) are too important for me to lose, but I would really like to disable mouse support in tmux and enjoy the much smoother and pleasant scrollback provided by alacritty.

Tmux can probably also help handling reflows (window resizes) until this is implemented in alacritty.
  
  "12/06/19 11:06:39 PMCreate /Applications symlink inside dmg for easier installationSolves #3072 2"Termite, which is based on a fork of VTE, does not support this.

If I understand http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer correctly, this should not exist."mikroskeemMark Vainomaa12/06/19 09:56:47 PMNote about the /Applications symlink in the changelog1
307801/06/18 07:57:40 PMJoe WilmFix SGR mouse reporting"There were two bugs fixed in this commit:

1. `sgr_mouse_report` was not always called when `SGR_MOUSE` bit was set
   due to calling `normal_mouse_report` instead of `mouse_report` in the
   scrolling method.
2. SGR reporting was always going off the left mouse button state rather
   than what was appropriate. This affected SGR scroll reporting since
   it only behaves correctly for pressed events (final character 'M').

Resolves #698."12/07/19 02:39:21 PMfeature - Draw chart metrics in alacritty"First, thanks so much for the terminal, it is amazing, I use it everyday as my main terminal and I live in a terminal (I'm an SRE).

### Disclaimer
I used this as a learning playground for Rust/etc. 
I tried to make daily small commits, might be a bit annoying to watch the history.
I'm not a real dev and I'm not sure I should be even creating this PR, it is inconsistent with the ideas of making a blazing fast terminal, I just found it useful for my day-to-day live on a terminal.
I think this could become an external ""module"" or ""addon"" but I'm not sure how to do that.

### Rationale
I wanted to show graphically in my terminal bottom the status of some computer counters (load/memory/disk free/alerts), I use OSX and Linux and I didn't want to create measure techniques for either separately (i.e. proc_info crate only worked on Linux), so I thought of finding something that deals with the different OSs and gives me the metrics and went for Prometheus (I use it a lot for kuberenetes clusters I babysit).

### How it works:
- A background thread is started for Tokio, and the Charts definition and state are managed there.
- The tokio thread uses Intervals to load the data from remote resources (http or https endpoiunts) and calculates the OpenGL vertices.
- The terminal main thread asks the background thread for the opengl representation and then it is rendered.

I tried to include some documentation as well in alacritty_charts/README.md

Please let me know if there's any interest on merging this or if this should become an ""addon/module"", otherwise I will continue with my fork. Again, thanks for all the great work!"1Just tried this out, and it solves the issue I had. Thanks!sebospSeb Ospina12/07/19 09:13:06 AMDocumentation, examples, screenshot1
307901/12/20 04:28:41 PMsekiroccTmux copy-mode copied text loss"Which operating system does the issue occur on?
elementary OS
If on linux, are you using X11 or Wayland?
X11.

I use tmux and tmux-plugins/tmux-yank to copy text to system clipboard (through copy-mode y command). When I copied, say 30 lines, and CTRL-V paste them to sublime, there are only 10 lines pasted, the other lines are lost.

copied
```
➜  / ll
total 100K
drwxr-xr-x   2 root root 4.0K 1月   6 12:09 bin
drwxr-xr-x   4 root root 4.0K 1月   6 11:25 boot
drwxrwxr-x   2 root root 4.0K 1月   6 11:16 cdrom
drwxr-xr-x  20 root root 4.3K 1月   7 09:08 dev
drwxr-xr-x 141 root root  12K 1月   7 09:15 etc
drwxr-xr-x   3 root root 4.0K 1月   6 11:17 home
lrwxrwxrwx   1 root root   33 1月   6 11:24 initrd.img -> boot/initrd.img-4.4.0-104-generic
lrwxrwxrwx   1 root root   33 1月   6 11:17 initrd.img.old -> boot/initrd.img-4.10.0-32-generic
drwxr-xr-x  23 root root 4.0K 1月   6 11:23 lib
drwxr-xr-x   2 root root 4.0K 1月   6 11:23 lib32
drwxr-xr-x   2 root root 4.0K 8月  15 03:24 lib64
drwx------   2 root root  16K 1月   6 11:13 lost+found
drwxr-xr-x   3 root root 4.0K 1月   6 15:39 media
drwxr-xr-x   2 root root 4.0K 8月  15 03:23 mnt
drwxr-xr-x   2 root root 4.0K 8月  15 03:23 opt
dr-xr-xr-x 255 root root    0 1月   7 09:08 proc
drwx------   3 root root 4.0K 8月  15 03:39 root
drwxr-xr-x  28 root root  860 1月   7 09:13 run
drwxr-xr-x   2 root root  12K 1月   6 11:23 sbin
drwxr-xr-x   2 root root 4.0K 8月  15 03:23 srv
dr-xr-xr-x  13 root root    0 1月   7 10:44 sys
drwxrwxrwt  14 root root 4.0K 1月   7 10:38 tmp
drwxr-xr-x  12 root root 4.0K 1月   6 11:23 usr
drwxr-xr-x  13 root root 4.0K 8月  15 03:39 var
lrwxrwxrwx   1 root root   30 1月   6 11:24 vmlinuz -> boot/vmlinuz-4.4.0-104-generic
lrwxrwxrwx   1 root root   30 1月   6 11:17 vmlinuz.old -> boot/vmlinuz-4.10.0-32-generic

```
pasted
```
➜  / ll
total 100K
drwxr-xr-x   2 root root 4.0K 1月   6 12:09 bin
drwxr-xr-x   4 root root 4.0K 1月   6 11:25 boot
drwxrwxr-x   2 root root 4.0K 1月   6 11:16 cdrom
drwxr-xr-x  20 root root 4.3K 1月   7 09:08 dev
drwxr-xr-x 141 root root  12K 1月   7 09:15 etc
drwxr-xr-x   3 root root 4.0K 1月   6 11:17 home
lrwxrwxrwx   1 root root   33 1月   6 11:24 initrd.img -> boot/initrd.img-4.4.0-104-generic
lrwxrwxrwx   1 root root   33 1月   6 11:17 initrd.img.old -> boot/initrd.img-4.10.0-32-generic
drwxr-xr-x  23 root root 4.0K 1月   6 11:23 lib
drwxr-xr-x   2 root root 4.0K 1月   6 11:23 lib32
drwxr-xr-x   2 root root 4.0K 8月  15 03:24 lib64
drwx------   2 root root  16K 1月   6 11:13 lost+found
drwxr-xr-x   3 root root 4.0K 1月   6 15:39 media
```


Tested with system terminal, It works fine."12/10/19 04:18:26 PMTransition font crate to 2018 editionIn addition to implementing the path changes, dependencies are now more strictly specified, and a light linting was performed.5"To add extra info to this issue, I've had literally the exact same issue with tmux, except I can completely eliminate alacritty from the equation; the issue happens in urxvt too.

And the solution is the same: putting `set -g set-clipboard off` in `.tmux.conf` solves the problem.

HUGE thanks to @maximbaz; I've been pulling my hair out over this for the last few days."sterlingjensensterlingjensen12/10/19 03:37:36 PM"Update font/src/ft/fc.rs

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
308001/07/18 07:13:47 PMNonepathfinder integration?"Which operating system does the issue occur on?
All.

Pathfinder is the rust gpu accelerated fonts/vectors rendering library, and will be integrated in webrender, servo and in the long term, in firefox. https://github.com/pcwalton/pathfinder

I don't know how does this interface with your gpu renderer but I bet you can at least reuse a lot of pathfinder optimisations (or even webrender optimisations).

Maybe some alacritty optimisations are reusable by pathfinder itself!

  "12/11/19 11:30:31 PMImprove error handling for Winpty"Closes #2344

I've managed to make it such that failures to spawn the shell now result in a proper error message being displayed. Turns out the `winpty` crate had a TODO item to plumb through the appropriate error in the `Winpty::spawn` method :smile:

Crashes on the Winpty backend now also display error descriptions such as `SpawnCreateProcessFailed` instead of the Winpty internal error codes (e.g. `2`)."3dupe of #412 davidhewittDavid Hewitt12/11/19 07:37:58 AMAdd line breaks after check_err1
308101/07/18 04:38:33 PMStefan WimmerBitflags fails to compile since #960"Which operating system does the issue occur on?
Gentoo/Linux x86_64
If on linux, are you using X11 or Wayland?
X11

Alacritty (x11-terms/alacritty-9999.ebuild to be precise) stopped compiling on my system since December 23th.
The error message I find in the logs is as follows:
 ```Rust
Compiling bitflags v1.0.1
Running `rustc --crate-name bitflags /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg 'feature=""default""' --cfg 'feature=""example_generated""' -C metadata=b1e128976cae9d5b -C extra-filename=-b1e128976cae9d5b --out-dir /var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps -L dependency=/var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps --cap-lints allow`
error: expected ident, found #
   --> /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs:423:29
    |
423 |                               #[allow(deprecated)]
    |                               ^
    | 
   ::: /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/example_generated.rs
    |
4   | / bitflags! {
5   | |     /// This is the same `Flags` struct defined in the [crate level example](../index.html#example).
6   | |     /// Note that this struct is just for documentation purposes only, it must not be used outside
7   | |     /// this crate.
...   |
13  | |     }
14  | | }
    | |_- in this macro invocation

error: Could not compile `bitflags`.

Caused by:
  process didn't exit successfully: `rustc --crate-name bitflags /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg feature=""default"" --cfg feature=""example_generated"" -C metadata=b1e128976cae9d5b -C extra-filename=-b1e128976cae9d5b --out-dir /var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps -L dependency=/var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps --cap-lints allow` (exit code: 101)
warning: build failed, waiting for other jobs to finish...
error: build failed
```

Please let me know if you need some more information."12/09/19 05:26:32 PMFix minimize on Windows"This is a potential solution for #3047.

Both WinPTY and ConPTY backends have issues when minimizing because a winit `Resize` event fires which sets the size to zero (and for various reasons both backends don't like this).

Alternative solutions:
- Change winit to not emit a `Resize` event when minimizing. (Perhaps emit some other event.)
- Add an API to winit to check if the window is minimized, and use that instead of checking `lsize.width` and `lsize.height`.

(Closes #3047)"6@chrisduerr: thank you for clarifying! Then I guess I'll have to wait until 1.23.0 hits the tree :)davidhewittDavid Hewitt12/09/19 03:41:28 PMFix minimize on Windows1
308405/18/18 11:54:28 PMBernardo MeurerAlacritty Segfaults on Start"On Arch Linux running i3 (X11) running alacritty causes a segfault.
```
$ alacritty
Config `dimensions` is deprecated. Please use `window.dimensions` instead.
Config `padding` is deprecated. Please use `window.padding` instead.
Segmentation fault (core dumped)
```
Alacritty is being compiled with Stable Rust 1.23
```
$ rustc --version
rustc 1.23.0 (766bd11c8 2018-01-01)
```

If I try to run alacritty from inside Valgrind I get the following 
```valgrind
$ valgrind alacritty
==7281== Memcheck, a memory error detector
==7281== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7281== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==7281== Command: alacritty
==7281== 
Config `dimensions` is deprecated. Please use `window.dimensions` instead.
Config `padding` is deprecated. Please use `window.padding` instead.
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x8444D0C: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x844546D: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x8444D26: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x844546D: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444DA4: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x844546D: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444E06: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x844546D: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444EBC: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x844546D: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x84454D9: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x84455C0: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x4C301BC: strcpy (vg_replace_strmem.c:510)
==7281==    by 0x8444F96: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445206: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845969C: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845A614: _XReply (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x84454FF: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x4C301D8: strcpy (vg_replace_strmem.c:510)
==7281==    by 0x8444F96: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445206: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845969C: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845A614: _XReply (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x84454FF: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444F9E: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445206: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845969C: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845A614: _XReply (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x84454FF: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444FB4: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445206: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845969C: ??? (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x845A614: _XReply (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x84454FF: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x8444F5E: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445602: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x4C301BC: strcpy (vg_replace_strmem.c:510)
==7281==    by 0x8444F96: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445602: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Conditional jump or move depends on uninitialised value(s)
==7281==    at 0x4C301D8: strcpy (vg_replace_strmem.c:510)
==7281==    by 0x8444F96: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445602: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444F9E: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445602: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Use of uninitialised value of size 8
==7281==    at 0x8444FB4: _XUpdateAtomCache (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x8445602: XInternAtoms (in /usr/lib/libX11.so.6.3.0)
==7281==    by 0x38E349: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D61F4: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281== 
==7281== Invalid read of size 1
==7281==    at 0x4C30102: __strlen_sse2 (vg_replace_strmem.c:460)
==7281==    by 0x4C241D: ??? (in /usr/bin/alacritty)
==7281==    by 0x300CD0: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D68FE: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7281== 
==7281== 
==7281== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==7281==  Access not within mapped region at address 0x0
==7281==    at 0x4C30102: __strlen_sse2 (vg_replace_strmem.c:460)
==7281==    by 0x4C241D: ??? (in /usr/bin/alacritty)
==7281==    by 0x300CD0: ??? (in /usr/bin/alacritty)
==7281==    by 0x2D68FE: ??? (in /usr/bin/alacritty)
==7281==    by 0x21DF01: ??? (in /usr/bin/alacritty)
==7281==    by 0x21A658: ??? (in /usr/bin/alacritty)
==7281==    by 0x229BE6: ??? (in /usr/bin/alacritty)
==7281==    by 0x5DA8F49: (below main) (in /usr/lib/libc-2.26.so)
==7281==  If you believe this happened as a result of a stack
==7281==  overflow in your program's main thread (unlikely but
==7281==  possible), you can try to increase the size of the
==7281==  main thread stack using the --main-stacksize= flag.
==7281==  The main thread stack size used in this run was 8388608.
==7281== 
==7281== HEAP SUMMARY:
==7281==     in use at exit: 157,666 bytes in 1,103 blocks
==7281==   total heap usage: 1,543 allocs, 440 frees, 234,058 bytes allocated
==7281== 
==7281== LEAK SUMMARY:
==7281==    definitely lost: 0 bytes in 0 blocks
==7281==    indirectly lost: 0 bytes in 0 blocks
==7281==      possibly lost: 160 bytes in 2 blocks
==7281==    still reachable: 157,506 bytes in 1,101 blocks
==7281==         suppressed: 0 bytes in 0 blocks
==7281== Rerun with --leak-check=full to see details of leaked memory
==7281== 
==7281== For counts of detected and suppressed errors, rerun with: -v
==7281== Use --track-origins=yes to see where uninitialised values come from
==7281== ERROR SUMMARY: 109 errors from 17 contexts (suppressed: 30 from 3)
Segmentation fault (core dumped)
```"12/12/19 03:01:24 PMFix deadlock with closing on Windows using Conpty"This follows on one more attempt from #3054 and #3074.

This time we're implementing the correct drop order in `Drop for Pty`. To ensure the pseudoconsole is properly closed, I've added a `debug_assert!` to `Drop for Conpty`.

Fingers crossed that this implementation now looks passable :smile:

Fixes #3042"8I think this a problem with the GPU, make sure it is read by your os.davidhewittChristian Duerr12/11/19 11:29:00 PMFormat code1
308901/08/18 04:53:59 AMNoneAlacritty starts in '/' on macOS after #987"Which operating system does the issue occur on?
MacOS

  
  "12/12/19 03:02:08 PMFix crash when resizing Alacritty"Fixes #3088." =||= Yes, it works correctly. Thank you!chrisduerrChristian Duerr12/11/19 08:35:54 PM"Fix crash when resizing Alacritty

Fixes #3088."1
309201/08/18 04:46:12 AMChristian DuerrRevert #987 behavior on macos"Probably should have double-checked this before merging, but apparently macos did change its behavior after #987.

This should make sure the macos behavior is to switch to home directory, while linux stays in the working directory."12/12/19 11:57:24 PMFix zero rotation error"This fixes a regression introduced in
e99057b179cbdc0851c36575dd043fcdaa45437a, which used `self.len` to
calculate the remainder of `self.zero` during rotation instead of
`self.inner.len()`, leading to a broken `self.zero` offset and incorrect
rotation." =||= Yes, it works correctly. Thank you!chrisduerrChristian Duerr12/12/19 09:16:33 PM"Fix zero rotation error

This fixes a regression introduced in
e99057b179cbdc0851c36575dd043fcdaa45437a, which used `self.len` to
calculate the remainder of `self.zero` during rotation instead of
`self.inner.len()`, leading to a broken `self.zero` offset and incorrect
rotation."1
309401/08/18 01:07:31 PMNiklas DusenlundColor regression"> Which operating system does the issue occur on?

Linux

> If on linux, are you using X11 or Wayland?

X11

Setting the colors from the [base16 solarized dark bash script](https://github.com/chriskempson/base16-shell/blob/master/scripts/base16-solarized-dark.sh) doesn't work for me any more.

```
[unhandled osc_dispatch]: [['4',],['0',],['r','g','b',':','0','0','/','2','b','/','3','6',],] at line 746
[unhandled osc_dispatch]: [['4',],['1',],['r','g','b',':','d','c','/','3','2','/','2','f',],] at line 746
[unhandled osc_dispatch]: [['4',],['2',],['r','g','b',':','8','5','/','9','9','/','0','0',],] at line 746
[unhandled osc_dispatch]: [['4',],['3',],['r','g','b',':','b','5','/','8','9','/','0','0',],] at line 746
[unhandled osc_dispatch]: [['4',],['4',],['r','g','b',':','2','6','/','8','b','/','d','2',],] at line 746
[unhandled osc_dispatch]: [['4',],['5',],['r','g','b',':','6','c','/','7','1','/','c','4',],] at line 746
[unhandled osc_dispatch]: [['4',],['6',],['r','g','b',':','2','a','/','a','1','/','9','8',],] at line 746
[unhandled osc_dispatch]: [['4',],['7',],['r','g','b',':','9','3','/','a','1','/','a','1',],] at line 746
[unhandled osc_dispatch]: [['4',],['8',],['r','g','b',':','6','5','/','7','b','/','8','3',],] at line 746
[unhandled osc_dispatch]: [['4',],['9',],['r','g','b',':','d','c','/','3','2','/','2','f',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','0',],['r','g','b',':','8','5','/','9','9','/','0','0',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','1',],['r','g','b',':','b','5','/','8','9','/','0','0',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','2',],['r','g','b',':','2','6','/','8','b','/','d','2',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','3',],['r','g','b',':','6','c','/','7','1','/','c','4',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','4',],['r','g','b',':','2','a','/','a','1','/','9','8',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','5',],['r','g','b',':','f','d','/','f','6','/','e','3',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','6',],['r','g','b',':','c','b','/','4','b','/','1','6',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','7',],['r','g','b',':','d','3','/','3','6','/','8','2',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','8',],['r','g','b',':','0','7','/','3','6','/','4','2',],] at line 746
[unhandled osc_dispatch]: [['4',],['1','9',],['r','g','b',':','5','8','/','6','e','/','7','5',],] at line 746
[unhandled osc_dispatch]: [['4',],['2','0',],['r','g','b',':','8','3','/','9','4','/','9','6',],] at line 746
[unhandled osc_dispatch]: [['4',],['2','1',],['r','g','b',':','e','e','/','e','8','/','d','5',],] at line 746
[unhandled osc_dispatch]: [['1','2',],['7',],] at line 746
```"12/15/19 05:21:55 AMReplace dynamically-loaded kernel32 functions with winapi"The libloaderapi implementation pre-dates availability in consoleapi (0.3.7).
The winapi feature flags have fallen out of sync with what is in use, as no relative paths to the crate are used in this project, so they were removed."19Yes, it works correctly. Thank you!sterlingjensenChristian Duerr12/15/19 01:17:42 AMBreak winapi feature import1
309601/08/18 01:07:31 PMNiklas DusenlundFix indexed color setting regression.Fixes: #100812/14/19 09:32:25 PMSend resize messages through the event loop"Closes #3086 

This turned out to be a great idea! I was able to leverage the existing `OnResize` trait and use it to plumb through the messages in a couple places.

I was also able to completely delete the `tty::winpty::Agent` type and just re-export `pub use winpty::Winpty as Agent`."1Oh yeah, it looks like I made a typo when applying the clippy updates, thanks.davidhewittChristian Duerr12/14/19 03:37:56 PMFormat code1
310204/13/21 09:40:22 AMNiklas DusenlundCannot bind to subtract anymore"> Which operating system does the issue occur on?

Linux

> If on linux, are you using X11 or Wayland?

X11

---

The following config doesn't work anymore on my machine:

```
 - { key: Subtract, mods: Control|Shift, action: DecreaseFontSize       }
```

```
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 29, state: Pressed, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 29, state: Pressed, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 42, state: Pressed, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } })}
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 42, state: Pressed, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: false, ctrl: true, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 12, state: Pressed, virtual_keycode: Some(Subtract), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 12, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: true, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: ReceivedCharacter('\u{1f}') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 12, state: Released, virtual_keycode: Some(Subtract), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false }}) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 12, state: Released, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: true, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 29, state: Released, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false }}) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 29, state: Released, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: true, ctrl: true, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 42, state: Released, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(90177539))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 42, state: Released, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: true, ctrl: false, alt: false, logo: false } } } }
```

Is there something I can do to help debug?"01/09/20 11:06:42 PMFix cut off full width glyphs in last column"This resolves the issue with full width glyphs getting rendered in the
last column. Since they need at least two glyphs, it is not possible to
properly render them in the last column.

Instead of rendering half of the glyph in the last column, with the
other half cut off, an additional spacer is now inserted before the wide
glyph. This means that the specific glyph in question is then three
cells wide.

Fixes #2385."12One of the many issues which will be fixed by https://github.com/rust-windowing/winit/issues/753. Closing as duplicate.chrisduerrChristian Duerr12/24/19 09:28:55 PMFix Rust 1.36.0 failure1
311301/08/18 10:49:02 PMChristian DuerrFix `ioctl` call failing on 32 bit architecture12/21/19 09:23:18 PMDefault to ConPTY instead of WinPTY (PR try 2)I've cleaned up #2890 and improved the Windows notes in `README.md` slightly.1One of the many issues which will be fixed by https://github.com/rust-windowing/winit/issues/753. Closing as duplicate.davidhewittDavid Hewitt12/21/19 10:10:29 AMImprove documentation for WinPTY settings1
311401/10/18 06:36:35 PMChristian DuerrExpand key binding config documentation"A link to all variants available as `key` has been added at the top of
the key bindings documentation, to help users with finding the right
place for mapping key codes."12/22/19 11:05:20 AMCrash on `clear` when looking into scrollback buffer"Fixes: #3112

cc @nixpulvis @sQVe" =||= That's a good point, but I'm currently not aware of any way to change this.kchibisovKirill Chibisov12/20/19 08:59:27 PMFix github's fault1
311501/10/18 05:40:05 PMNoneProblem minimize/restore window"Which operating system does the issue occur on?
MacOsX 10.13.3

Alacritty HEAD version.

If you minimize (minus button) alacritty window and then restore it from dock, all window is selected as you will select with mouse. I am using it with tmux HEAD. I think it is due to that when you use mouse click in titlebar of the window it is passed to user area which is not correct.

<img width=""1440"" alt=""screen shot 2018-01-10 at 10 07 45"" src=""https://user-images.githubusercontent.com/5719362/34761897-618a8aac-f5ee-11e7-8494-0dcff33baedd.png"">

As you see selection is starting from bellow minimize button and finish to mouse position. Also if you use vim in alacritty and try to move alacritty window with mouse, click is passed to vim and it start to scroll up."01/26/20 01:49:59 PMFix grid.len() and grid.history_size() misreporting"The grid reset should fail, but It seems like we should rerecord the test.

@chrisduerr "23Thanks for the report! This is the same problem as #47.kchibisovChristian Duerr01/26/20 01:30:46 PMRemove storage call for 0 line scrollback change1
311603/16/18 12:55:23 AMNoneregression of issue #210 to use integrated GPU on macsThere seems to be a regression on issue #210  in commit b83a26ffe097ba9bf80b2801ba27737f6ccd90be the update to glutin 0.12 makes the dedicated GPU come on all the time12/21/19 01:18:02 AMFix Windows CI build failure =||= Closing as duplicate of #210 chrisduerrChristian Duerr12/21/19 12:27:22 AMFix clippy warnings1
311701/10/18 04:54:34 PMPaul AlvarezMake Mac app installation steps idempotent"* Repeated uses of `cp -r target/release/osx/Alacritty.app
  /Applications/Alacritty.app` will result in copying Alacritty.app to
  `/Applications/Alacritty.app/Alacritty.app`."01/02/20 11:49:27 AMClean up string handling in Windows PTY implementations.Removes `widestring` and `dunce` dependencies, reduces some code duplication and cleans up a few minor pieces regarding `Path` / `PathBuf`.2Thanks for the fix!davidhewittDavid Hewitt12/22/19 02:18:33 PMAddress points from PR#31171
311901/11/18 04:30:53 PMChristian DuerrUpdate lockfile"Clippy failed to build with the latest nightly, so the lockfile has been
updated to allow the nightly builds to work again."12/22/19 11:02:57 AMRemove unneeded NamedPipe::connect() calls"In the way the code was set up, these calls would always do nothing and return `io::ErrorKind::WouldBlock`, so they can be safely removed.

([See source for connect](https://docs.rs/mio-named-pipes/0.1.6/x86_64-pc-windows-msvc/src/mio_named_pipes/lib.rs.html#186) if you wish to confirm this yourself)

In a more Windows API minded sense, calling `ConnectNamedPipe` is not about establishing a pipe connection; opening the file already does that. `ConnectNamedPipe` allows the pipe server to wait for a client to connect.

`ConnectNamedPipe` also expects to be called with the pipe server handle, not a client pipe handle, so I think that calling `.connect()` in this fashion would actually return Windows API errors if it ever got past the initial check that makes `.connect()` return `WouldBlock`.
" =||= Will do once travis is finished.davidhewittDavid Hewitt12/22/19 10:07:34 AM"Remove unneeded NamedPipe::connect() calls

In the way the code was set up, these calls would always do nothing
and return io::ErrorKind::WouldBlock, so they can be safely removed."1
312107/09/20 09:45:23 PMNathan LilienthalScrollback Buffer Search"Once we have scrollback (#124), it's pretty reasonable to want to be able to search that. The challenge here is building something that works well, while still feeling simple, clean and lightweight. This is I believe the first ""mode"" proposed to alacritty. As in I hit some key binding and suddenly the rules for what my keys do has changed. I can't think of any other modes right now, but maybe that helps inspire the design.

Anyway sorry for getting ahead of things here, but this is a feature I'm dying to have. For now re-running the command and passing it to `rg` will have to suffice."01/05/20 01:54:15 AMAdd minimize action"Fixes #2534

PR is blocked by winit bump, however it's reviewable, since after winit bump we should change only 1 name(we should call `set_minimized(minimized)` instead of `
set_maximized(minimized)` in `alacritty/src/window.rs`)."4Awesome. I was looking for this feature and it is coming soon. Thanks @chrisduerr !kchibisovKirill Chibisov01/05/20 01:06:42 AMSync PR1
312201/11/18 04:12:07 PMCevadoerror: Could not compile `bitflags`."OS: Gentoo stable
Kernel: x86_64 Linux 4.14.13-gentoo
WM: awesome(X11)
CPU: Intel Core i7-4500U @ 4x 3GHz
GPU: Intel HD Graphics 4600
rustc 1.19.0

using the ebuild instructed [here](https://github.com/jwilm/alacritty#gentoo) with the useflag `fetch-crates` enabled. apparently it is fetching bitflags-1.0.1
full stacktrace:
```
Running `rustc --crate-name bitflags /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=2 --cfg 'feature=""default""' --cfg 'feature=""example_generated""' -C metadata=b1e128976cae9d5b -C extra-filename=-b1e128976cae9d5b --out-dir /var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps -L dependency=/var/tmp/portage/x11-terms/alacritty-9999/work/alacritty-9999/target/release/deps --cap-lints allow`
error: expected ident, found #
   --> /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs:423:29
    |
423 |                               #[allow(deprecated)]
    |                               ^
    | 
   ::: /usr/portage/distfiles/cargo-src/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/example_generated.rs
    |
4   | / bitflags! {
5   | |     /// This is the same `Flags` struct defined in the [crate level example](../index.html#example).
6   | |     /// Note that this struct is just for documentation purposes only, it must not be used outside
7   | |     /// this crate.
...   |
13  | |     }
14  | | }
    | |_- in this macro invocation

error: Could not compile `bitflags`.
```"12/24/19 08:51:07 PMFix screen reset not clearing cell flags"TODO:
 - [x] Add reftest"3sorrychrisduerrChristian Duerr12/24/19 01:59:42 PMFormat code1
312611/14/20 05:52:09 PMSteven Luallow binding right opt to ctrl"Requesting this use of this feature from iTerm. 

![image](https://user-images.githubusercontent.com/1542910/34837584-3d8a6268-f6c9-11e7-852e-17dbfa0b5e60.png)

It seems like in order to replicate this functionality I would need to manually repeat all of my ctrl binds with opt binds. Which brings me to the next point:

I wonder if it is even possible to differentiate the two opt modifier keys yet. 
"01/06/20 03:24:22 PMAdd Text Objects"This adds 'Text Objects' which lift plain text into interactive items that
can trigger actions on click. Similar to URLs but with customization."29For readers out there (wow, 99 thumbs up in the linked feature request), what I've done was just perform this map globally on macOS using karabiner. It works for me and might be an even better approach than doing it only for a terminal emulator. rodolf0Rodolfo Granata01/06/20 06:23:25 AMtmp: trigger rendre of text objects when display is dirty but not more than every 50ms1
312701/21/18 09:29:58 PMAntonio VivaceWrong font width (maximum advance freetype2 value)"debian Sid, x11

`maximum advance` via freetype2 is too wide for some fonts.

Same issue as #902 and #990 and I'm still unable to solve this.
I've tried the [workaround](https://gist.github.com/mikoim/498dfcdd39439316e3eb9b8897914302) proposed but the patch is unapplicable. I've reproduced the same modifications and applied [this](https://gist.github.com/avivace/9d3fddcb43e853d53cadbca4ed11d27e) patch. Still nothing. 

Narrow fonts like Iosevka or Pragmata Pro have this issue:
![image](https://user-images.githubusercontent.com/14352721/34877642-269e270e-f7a7-11e7-950e-bf443c7d1be5.png)

I'm currently just setting offset x to -8.0 and it looks pretty good, almost identical to my other terminal emulator.

Offsetting by `-8.0` however, causes a strange behaviour on the dimensions column  value (I have to set `1000` to see ~80 colums)

Still, what's the status of this?
"04/16/20 06:46:18 PMAdd windows font fallbacks"This is the first step for #3082

At the moment Alacritty on windows does not use any font fallbacks, so glyphs for emoji cannot be found. I suspect there are many other cases where lack of font fallbacks causes glyphs to be missing.

By adding font fallbacks, we now can rasterize (downsampled) greyscale emoji. They don't look amazing, but hey, something is better than nothing!

The remaining step to add full emoji support is to implement color font rasterizing, which will be a much bigger change and might need upstream support in the `dwrote` crate.

Perhaps others may have ideas how to improve the render quality of these greyscale emojis too.

If this PR looks like the right direction to be heading, there's a couple of things for me to finish off:
- [x] Remove hard-coding of ""en-us"" locale
- [x] Try to find fallback font in loaded fonts rather than always creating fresh

Possible bugs from testing:
- [x] ~~Figure out how to size emoji correctly - downsample?~~
- [x] ~~Investigate emoji paste issues?~~ (Upstream bug https://github.com/microsoft/terminal/issues/1503)
- [x] ~~Investigate occasional missing glyph~~ (Sounds a lot like upstream bug https://github.com/microsoft/terminal/issues/386)

Before:

![image](https://user-images.githubusercontent.com/1939362/71518263-e7b1e180-28a9-11ea-8be5-cf41af80e320.png)

After:

![image](https://user-images.githubusercontent.com/1939362/71518208-ac171780-28a9-11ea-891e-2c5c6202d905.png)

Fixes #3215."62"I'm not exactly having this problem, but when I switched to Alacritty, I noticed it seemed to make cells wider than other terminals.

For reference: this could be fixed by making the FreeType loader compute cell width like the CoreText loader currently does, i.e. the advance width of a '0'.
Or, perhaps more robustly: use the average advance width of every printable in Latin-1. libVTE more-or-less does this."davidhewittDavid Hewitt04/16/20 05:48:15 PMRename fields as suggested1
313012/17/20 03:39:42 AMNonew3mimgdisplay not working correctly"Which operating system does the issue occur on?
Void Linux

If on linux, are you using X11 or Wayland?
X11

As the title implies image previews for ranger are not behaving correctly for me. Instead of displaying the image properly the preview pane simply stays empty. I can confirm that using the same methods in the urxvt-terminal leads to the images beeing displayed properly. The issue persist whether or not I am using a composite manager (compton).

Configurations used:
`set preview_images true`
`set preview_images_method w3m`

`set preview_images true`
`set use_preview_script true`
`set preview_script /usr/share/doc/ranger/config/scope.sh`
Taken from Issue #107 "12/31/19 04:53:28 PMFix startup time on Wayland in some cases7Closing since there's no change Alacritty is going to make to better support w3m. If it doesn't work right, it's because w3m is a massive hack.kchibisovKirill Chibisov12/31/19 02:24:59 AMRemove swap buffers call for macOS/Windows1
313109/17/18 03:15:22 PMNathan LilienthalSelections don't update with faux scrolling"To replicate this issue run `man read` select some text, then ""scroll"" the man page with the arrow keys (strangely scrolling with `j` and `k` clear the selection), you'll see the selection stay in the same place despite the text moving.

After digging into the code here a bit, it seems that `event::Processor` shouldn't own the `Selection`, and instead the `Selection` should live in `Term`. This is a pretty large change, so I wanted to talk about it a bit before I started trying to hack this all together."12/29/19 10:48:27 PMRemove legacy things from README""2This issue is fixed in the scrollback branch, so it will be solved once it's merged. I've updated the comment in the scrollback PR to auto-close this issue.kchibisovKirill Chibisov12/29/19 07:50:19 PMcapitalize letters1
313204/14/19 12:25:39 AMTheodore Dubois[very WIP] Make Alacritty into a libraryMy work on #450. As far as I can tell very little progress has been made on that issue, so I'm posting this just to get a bit of code out there, that maybe others can build on. Feedback would be appreciated.12/30/19 12:17:43 PMFix live-shader-reload feature being presented in alacritty_terminal =||= "@tbodt Thanks for actually staying on top of this and not just abandoning this completely.

I'm totally in favor of doing this incrementally and I'd be happy to cooperate."kchibisovKirill Chibisov12/29/19 01:18:17 PMFix live-shader-reload feature being presented in alacritty_terminal1
313311/01/18 04:27:16 PMNathan LilienthalMake the directory the shaders live in more clear.Hopefully this kind of PR isn't more irritating that helpful. I think it might be helpful to newbs like me to name the directory where the shaders live `shaders/`.12/29/19 08:20:10 PMUpgrade winit to fix #2877This upgrades winit to include the commit merged in https://github.com/rust-windowing/winit/pull/1323 to fix #2877. Note that this does not upgrade to latest commit on the master branch of winit, as that currently results in build errors.2"@chrisduerr I've never done any ""real"" OpenGL programming, so I'm not familiar with that convention. Either way is fine then, just thought I'd throw this out there :P"jgmizeJosh Mize12/29/19 07:34:26 PMUpgrade winit to fix #28771
313512/08/18 08:28:58 PMNathan LilienthalScripts Refactor"Thought I'd clean things up a bit, add some functionality and all that jazz.

- Moved `spawn-alacritty-cwd` into a new top level `share/` directory to help people find it.
- Modified `create-flamegraph.sh` so it can be run from anywhere, and so that it hides the cloned FlameGraph repo a bit.
- Added a useful `colors.sh` script.
- Updated the README.

I didn't touch the python script because I couldn't seem to get it to work."12/31/19 08:56:28 PMRemove C1 escape support"Fixes #2981."6@chrisduerr thanks for getting around to this, it fell off my radar.chrisduerrChristian Duerr12/31/19 07:57:53 PMImprove change log message1
313707/15/18 07:47:08 PMChristian DuerrAdd bright foreground color option"It was requested in jwilm/alacritty#825 that it should be possible to
add an optional bright foreground color.

This is now added to the primary colors structure and allows the user to
set a foreground color for bold normal text. This has no effect unless
the `draw_bold_text_with_bright_colors` option is also enabled.

If the color is not specified, the bright foreground color will fall
back to the normal foreground color.

This fixes #825."01/03/20 12:17:22 AMReplace deprecated Error methods"- Display::fmt instead of Error::description
- Error::source instead of Error::cause
- Adjacent linting opportunities performed."1Ahh, that makes perfect sense, sorry for the confusion. I've never heard of or used a bright foreground then lol.sterlingjensensterlingjensen01/02/20 10:52:30 PMdrop const and read_to_string import1
314001/14/18 05:15:45 PMMaxim BazAuto-generated alacritty.yml doesn't match the default alacritty.yml in this repo"Linux, X11, f6839a8794f3a60a4a9086a5015e5b3ab2010562

Compare [github.com/jwilm/alacritty/alacritty.yml](https://github.com/jwilm/alacritty/blob/master/alacritty.yml) and the config generated by alacritty itself, when you remove `~/.config/alacritty/alacritty.yml` and start a new instance of alacritty.

I'd expect that they are identical, but they are not. Why, and what is the true default config then?

<details>
<summary>Click to see the diff</summary>

```diff
diff --git a/.config/alacritty/alacritty.yml b/.config/alacritty/alacritty.yml
index 90a2725..3e69279 100644
--- a/.config/alacritty/alacritty.yml
+++ b/.config/alacritty/alacritty.yml
@@ -14,24 +14,24 @@ env:
   # `infocmp xterm-256color`.
   TERM: xterm-256color
 
-window:
-  # Window dimensions in character columns and lines
-  # Falls back to size specified by window manager if set to 0x0.
-  # (changes require restart)
-  dimensions:
-    columns: 80
-    lines: 24
-
-  # Adds this many blank pixels of padding around the window
-  # Units are physical pixels; this is not DPI aware.
-  # (change requires restart)
-  padding:
-    x: 2
-    y: 2
-
-  # Window decorations
-  # Setting this to false will result in window without borders and title bar.
-  decorations: true
+# Window dimensions in character columns and lines
+# Falls back to size specified by window manager if set to 0x0.
+# (changes require restart)
+dimensions:
+  columns: 80
+  lines: 24
+
+# Scrollback buffer
+scrollback:
+  enabled: true
+  max_lines: 10000
+
+# Adds this many blank pixels of padding around the window
+# Units are physical pixels; this is not DPI aware.
+# (change requires restart)
+padding:
+  x: 2
+  y: 2
 
 # Display tabs using this many cells (changes require restart)
 tabspaces: 8
@@ -198,29 +198,12 @@ mouse_bindings:
   - { mouse: Middle, action: PasteSelection }
 
 mouse:
-  # Click settings
-  #
-  # The `double_click` and `triple_click` settings control the time
-  # alacritty should wait for accepting multiple clicks as one double
-  # or triple click.
   double_click: { threshold: 300 }
   triple_click: { threshold: 300 }
 
-  # Faux Scrollback
-  #
-  # The `faux_scrollback_lines` setting controls the number
-  # of lines the terminal should scroll when the alternate
-  # screen buffer is active. This is used to allow mouse
-  # scrolling for applications like `man`.
-  #
-  # To disable this completely, set `faux_scrollback_lines` to 0.
-  faux_scrollback_lines: 1
-
 selection:
   semantic_escape_chars: "",│`|:\""' ()[]{}<>""
 
-dynamic_title: true
-
 hide_cursor_when_typing: false
 
 # Style of the cursor
@@ -238,12 +221,12 @@ live_config_reload: true
 #
 # You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
 # Entries in shell.args are passed unmodified as arguments to the shell.
-#
 # shell:
 #   program: /bin/bash
 #   args:
 #     - --login
 
+
 # Key bindings
 #
 # Each binding is defined as an object with some properties. Most of the
@@ -253,9 +236,6 @@ live_config_reload: true
 # `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
 # etc.  These all match the glutin::VirtualKeyCode variants.
 #
-# A list with all available `key` names can be found here:
-# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
-#
 # Possible values for `mods`
 # `Command`, `Super` refer to the super/command/windows key
 # `Control` for the control key
@@ -286,20 +266,24 @@ live_config_reload: true
 key_bindings:
   - { key: V,        mods: Control|Shift,    action: Paste               }
   - { key: C,        mods: Control|Shift,    action: Copy                }
-  - { key: Q,        mods: Command, action: Quit                         }
-  - { key: W,        mods: Command, action: Quit                         }
-  - { key: Insert,   mods: Shift,   action: PasteSelection               }
-  - { key: Key0,     mods: Control, action: ResetFontSize                }
-  - { key: Equals,   mods: Control, action: IncreaseFontSize             }
-  - { key: Subtract, mods: Control, action: DecreaseFontSize             }
+  - { key: Q,        mods: Command,          action: Quit                }
+  - { key: W,        mods: Command,          action: Quit                }
+  - { key: Insert,   mods: Shift,            action: PasteSelection      }
+  - { key: Key0,     mods: Control,          action: ResetFontSize       }
+  - { key: Equals,   mods: Control,          action: IncreaseFontSize    }
+  - { key: Subtract, mods: Control,          action: DecreaseFontSize    }
+  - { key: Up,       mods: Control|Shift,    action: ScrollUp            }
+  - { key: Down,     mods: Control|Shift,    action: ScrollDown          }
+  - { key: PageUp,   mods: Shift,            action: PageUp              }
+  - { key: PageDown, mods: Shift,            action: PageDown            }
   - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
   - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
   - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
   - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
   - { key: PageUp,   mods: Shift,   chars: ""\x1b[5;2~""                   }
-  - { key: PageUp,   mods: Control, chars: ""\x1b[5;5~""                   }
+  #- { key: PageUp,   mods: Control, chars: ""\x1b[5;5~""                   }
   - { key: PageUp,                  chars: ""\x1b[5~""                     }
-  - { key: PageDown, mods: Shift,   chars: ""\x1b[6;2~""                   }
+  #- { key: PageDown, mods: Shift,   chars: ""\x1b[6;2~""                   }
   - { key: PageDown, mods: Control, chars: ""\x1b[6;5~""                   }
   - { key: PageDown,                chars: ""\x1b[6~""                     }
   - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
```
</details>"01/02/20 07:19:33 PMImprove performance benchmark documentationFixes #3136. =||= "I see, I was fairly certain I that I upgraded recently to https://github.com/jwilm/alacritty/commit/f6839a8794f3a60a4a9086a5015e5b3ab2010562, but unfortunately `alacritty --version` doesn't print commit hash anymore so I'm not 100% sure. Just reinstalled to latest master via AUR package and seems like I can't reproduce the issue anymore. Thanks 🙂
"chrisduerrChristian Duerr01/01/20 10:46:55 PMAdd compiler version notice to performance docs1
314101/15/18 04:19:33 PMChristian DuerrSpawn alacritty window as invisible"This change initially spawns alacritty as in invisible window, this
makes it possible for the pty to already access data like `window_id`
without having to wait for the window manager to actually open the
window.

This fixes #875."01/02/20 11:43:11 AMUpdate winit to 0.20.0-alpha5"I decided to do `cargo update` today before building and ran into some compile-errors due to a winit update. This PR fixes those.

I get a new warning `use of deprecated item 'winit::event::KeyboardInput::modifiers': Deprecated in favor of DeviceEvent::ModifiersChanged`, though rust-windowing/winit#1151 is still open (for iOS and WASM) so I think it's good to keep using that field for now."1To be clear, no more flickering issues since 02da565 🙂gin-ahirschAlexander Hirsch01/02/20 09:19:28 AMUpdate winit to 0.20.0-alpha51
314201/21/18 09:29:58 PMRachel KnightBetter character cell width with FreeType"This should fix #1020, #710, and #902 

I'm happy to rework this if there are any problems with it."01/04/20 12:19:07 AMFix macOS OpenGL context resize ordering"Fixes #2226."4"@rkanati thank you for this PR! I'm excited this closes all of those issues at once. 😄 

If you are interested in some follow-up work, I was thinking it might make sense to cache the statistics computed here so they aren't reloaded/calculated every time `full_metrics` is called. I filed #1045 to track this."chrisduerrChristian Duerr01/02/20 08:37:42 PM"Fix macOS OpenGL context resize ordering

Fixes #2226."1
314801/16/18 05:06:49 AMLeonard LausenWayland - Use seat interface version 5"Which operating system does the issue occur on?
Gentoo Linux with Wayland and Plasma 5.12 (Beta)

Currently alacritty will crash with the following error.
```
wl_registry@2: error 0: invalid version for global wl_seat (6): have 4, wanted 5 
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 71, message: ""Protocol error"" } }', src/libcore/result.rs:906:4
```

Edit: Or well, the problem seems to be the other way round. Sorry for the noise."01/04/20 11:55:11 PMUpdate old ref tests"I was basically doing `alacritty --config-file ~/alacritty.yml --ref-test  -e bash -c  ""sleep 2; cat alacritty.recording;sleep 2""` to rerecord tests properly." =||= Pretty sure he means that alacritty wants 5 but Plasma only supports 4. Instead of alacritty not supporting the highest version.kchibisovKirill Chibisov01/04/20 10:59:52 PMAdd more science1
314901/16/18 08:29:55 PMChristian DuerrUpdate lockfileThe lockfile has been updated to make clippy work with nightly again.01/05/20 01:00:51 AMBump winit to 0.20.0 Alpha 6"" =||= Pretty sure he means that alacritty wants 5 but Plasma only supports 4. Instead of alacritty not supporting the highest version.chrisduerrChristian Duerr01/04/20 11:53:43 PM"Add change log entries

Fixes #3070.
Fixes #2893.
Fixes #2877.
Fixes #2829.
Fixes #2767.
Fixes #2271."1
315101/26/18 08:20:42 PMNoneUpdate dependencies"- log 0.3 -> 0.4
- freetype-rs 0.13 -> 0.16

- gl_generator 0.7 -> 0.8
- env_logger 0.4 -> 0.5
- cgmath 0.15 -> 0.16"01/05/20 02:42:11 PMBump master to 0.4.2-dev"" =||= Pretty sure he means that alacritty wants 5 but Plasma only supports 4. Instead of alacritty not supporting the highest version.kchibisovKirill Chibisov01/05/20 11:06:25 AMBump master to 0.4.2-dev1
315301/18/18 05:27:08 PMNathan LilienthalReset Doesn't Show Cursor"If the cursor gets hidden with a CSI escape sequence `\e[?25l` then I would expect a call to `reset` to show it again, but it doesn't."01/10/20 12:44:42 AMForce exact modifiers match for mouse bindings"Fixes #3152."4Pretty sure he means that alacritty wants 5 but Plasma only supports 4. Instead of alacritty not supporting the highest version.chrisduerrChristian Duerr01/09/20 12:26:51 AMRefine mouse binding documentation1
315501/18/18 05:27:08 PMChristian DuerrImplement `reset_state` of Term struct"Up to this point the `reset_state` method of the `Term` struct has been
just a placeholder. This has been changed and all important state has
been reset.

The only state that has not been reset is stuff which is retrieved from
the config and isn't stored as default on the `Term` struct either. From
what I can tell these are all never changed though.

This fixes jwilm/alacritty#1033.

After doing some more testing trying to figure out how to fix that all
glyphs are messed up after doing `cat /dev/urandom`, I was able to
confirm that resetting `Term::cursor` fixes the glyphs and restores
everything to normal.

So this also fixes jwilm/alacritty#804."01/06/20 04:15:00 PMFix incorrect config path in --help"Fixes #3154."4Pretty sure he means that alacritty wants 5 but Plasma only supports 4. Instead of alacritty not supporting the highest version.chrisduerrChristian Duerr01/05/20 11:46:50 PMFix config location in manpage1
315701/21/18 11:27:33 PMDavide CasellaXOpenIM error - fcitx related"Operating system: Debian GNU/Linux testing (buster) x86_64
Using X11 and i3-gaps.
Alacritty built from source with the latest stable rustc (rustc 1.23.0 (766bd11c8 2018-01-01)).

I used to run Alacritty on startup by having `exec --no-startup-id alacritty -t ddterm -e tmux` in my i3 config.
This doesn't work anymore since https://github.com/jwilm/alacritty/commit/2b5de00241465a77b90d48b9a140e3ce5e531ff4 (see Edit 1).
I've tried changing the command to a simple `exec alacritty` and `exec --no-startup-id alacritty`: no changes.

Running `ps aux | grep alacritty` right after startup shows no results (even if in the i3 log file it's clearly stated `01/17/2018 11:46:39 PM - executing: alacritty -t ddterm -e tmux`).

Manually starting Alacritty from a terminal or drun works fine (even with `-t ddterm -e tmux` options).
Starting Alacritty with `Mod4+Return` in i3 (as you can see below in the log file, it's a binding in my i3 config) works fine as well.

Changing the command to `exec --no-startup-id alacritty -v > ~/alacritty.log` instead produces the following file:
```
Welcome to Alacritty.
Configuration loaded from /home/dcasella/.config/alacritty/alacritty.yml
```

Lines obtained from the i3 log file by running `grep i3logfile -e alacritty` (nothing useful, but it may still be worth sharing):
```
01/17/2018 11:46:39 PM - config_parser.c:parse_config:267 - CONFIG(line  28): bindsym Mod4+Return exec --no-startup-id alacritty
01/17/2018 11:46:39 PM - config_parser.c:parse_config:267 - CONFIG(line 203): exec --no-startup-id alacritty -t ddterm -e tmux
01/17/2018 11:46:39 PM - workspace.c:extract_workspace_names_from_bindings:140 - binding with command exec --no-startup-id alacritty
01/17/2018 11:46:39 PM - auto-starting alacritty -t ddterm -e tmux
01/17/2018 11:46:39 PM - executing: alacritty -t ddterm -e tmux
```

Zipped Alacritty config file:
[alacritty.zip](https://github.com/jwilm/alacritty/files/1640979/alacritty.zip)

If you need more informations plese let me know.

[Edit 1]
I can confirm Alacritty autostart on i3 worked correctly before https://github.com/jwilm/alacritty/commit/2b5de00241465a77b90d48b9a140e3ce5e531ff4:
```
$ git checkout 8aa8422
$ cargo build --release
# mv target/release/alacritty /usr/local/bin/alacritty
$ cp Alacritty.desktop ~/.local/share/applications
$ sudo reboot
```
and Alacritty shows up again."01/06/20 10:06:10 PMRemove winit key remappings =||= "Removing fcitx package resolves the issue.

Installing another IM (like SCIM) doesn't break Alacritty on autostart.

[Edit]
Since I'm gonna stick with SCIM I won't have this issue anymore. I am leaving the issue open for a while to see if anyone else had the same problem (feel free to close it anytime)."chrisduerrChristian Duerr01/06/20 01:25:12 AMRemove winit key remappings1
316201/18/18 11:32:19 AMStéphane Campinasbuild fails on arch linux"When trying to build the archlinux aur package, I get the following message:

```
error: failed to parse lock file at: /home/.../alacritty/Cargo.lock

Caused by:
  expected a section for the key `root`
```

If I remove that file within the pkgbuild file, the error above is gone but I get this other problem:

```
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/unix.rs:61:27: 61:65 error: the `?` operator is not stable (see issue #31436)
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/unix.rs:61         Handle::from_file(OpenOptions::new().read(true).open(p)?)
                                                                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/unix.rs:65:18: 65:34 error: the `?` operator is not stable (see issue #31436)
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/unix.rs:65         let md = file.metadata()?;
                                                                                                            ^~~~~~~~~~~~~~~~
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/lib.rs:370:8: 370:33 error: the `?` operator is not stable (see issue #31436)
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/lib.rs:370     Ok(Handle::from_path(path1)? == Handle::from_path(path2)?)
                                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/lib.rs:370:37: 370:62 error: the `?` operator is not stable (see issue #31436)
/home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/lib.rs:370     Ok(Handle::from_path(path1)? == Handle::from_path(path2)?)
                                                                                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~
error: aborting due to 4 previous errors
Build failed, waiting for other jobs to finish...
error: Could not compile `same-file`.

Caused by:
  Process didn't exit successfully: `rustc /home/yfful/.cargo/registry/src/github.com-1ecc6299db9ec823/same-file-1.0.2/src/lib.rs --crate-name same_file --crate-type lib -C opt-level=3 -g -C metadata=ae4d9bffd8b28b48 -C extra-filename=-ae4d9bffd8b28b48 --out-dir /home/yfful/.cache/pacaur/alacritty-git/src/alacritty/target/release/deps --emit=dep-info,link -L dependency=/home/yfful/.cache/pacaur/alacritty-git/src/alacritty/target/release/deps -L dependency=/home/yfful/.cache/pacaur/alacritty-git/src/alacritty/target/release/deps --cap-lints allow` (exit code: 101)
```

> Which operating system does the issue occur on?

arch linux

> If on linux, are you using X11 or Wayland?

X11"01/07/20 03:59:24 PMFix keybinding deserializationFixes #3160.3"This problem was due to the old version of rust.
It passed with no problem with:

```
❯ rustc -V
rustc 1.23.0 (766bd11c8 2018-01-01)
```"chrisduerrChristian Duerr01/07/20 03:19:59 PMFormat code1
316311/14/20 04:15:25 PMNoneSegfault on dead keys"Alacritty just disappears (probably segfaults) when typing a character with a dead key. Keyboards with dead keys are for example ""US alt intl"". or ""US intl. with dead keys"". To get for example  quotation marks "", you type first "" followed by space. "" followed by a gives ä. The terminal vanishes after typing the key after a dead key. In case of ä, ö, ... I can see the ä, ö, ... briefly appearing before the terminal vanishes.

Which operating system does the issue occur on?

On Fedora 27. I built Alacritty myself following the instructions.

`$ rustc --version
rustc 1.23.0 (766bd11c8 2018-01-01)`

If on linux, are you using X11 or Wayland?

X11
"01/27/20 12:54:33 AMRework fontconfig fallback to use fallback list computed from font_sort"Attempt to improve fontconfig fallback mechanism to be faster and more predictive for users. The idea is to use a fallback list from font_sort.

Probably should fix:
#3134
#2657
#1560
#2935
#965
Some fallback problems there #153
Concerns there #2706
Improve Linux/BSD parts of #511?

cc @nixpulvis 

P.s. I've just published some initial attempt to solve mentioned issues, so feedback and testing is welcome.

TODO:
- [x] Check fallbacks for styled glyphs.
- [x] Bitmap fonts?
- [x] ~Hash set self.keys(&path) could be ~2micro seconds, should be in `nano`!~ not true, and using a different thing doesn't change anything...


Out of scope:
- Apply fixup factor for metrics
- Gray, etc downsampling?"2Closing. If you still can repro, please open a new issue.kchibisovKirill Chibisov01/26/20 11:31:03 PMMerge branch 'master' into rework-fc-fallbacks1
316407/21/18 06:05:15 PMStéphane Campinasmain thread panicked"rust: rustc 1.23.0 (766bd11c8 2018-01-01)

```
1 ❯ RUST_BACKTRACE=1 alacritty
thread 'main' panicked at 'unhandled pixel mode: LcdV', font/src/ft/mod.rs:481:24
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: <unknown>
  10: __libc_start_main
  11: <unknown>
```

Which operating system does the issue occur on?

arch linux

If on linux, are you using X11 or Wayland?

X11"01/10/20 01:51:38 AMBump winit to 0.22.0Fixes #3165.3"I added this to alacritty.yml but still no change.

```
font:
  options:
    antialias: lcd
    hinting: lcd
```

@jwilm was this what you meant ?

> does your display have vertically decimated RGB sections?

No idea how to check that.
"chrisduerrChristian Duerr01/09/20 02:27:06 PM"Add changelog for #3165

Fixes #3165."1
316705/29/18 04:50:51 PMManuel ReinhardtCannot input characters with dead keys"Which operating system does the issue occur on?
MacOS 10.13.2

I cannot input characters requiring dead keys (e.g. with US International layout ñ or é or even "" ). After pressing the dead key nothing happens. The next character is just printed normal."01/08/20 11:31:55 PMBuild releases on Windows stable =||= @francesca64 what happened to the branch? really need it for ubuntuchrisduerrChristian Duerr01/08/20 09:06:33 PMBuild releases on Windows stable1
317003/20/18 09:28:54 AMDanil AntoshkinThe problem with the displayed font"I use a Font Nerd Hack, the problem lies in the distance between the characters, I tried to edit the config and put different values on the X-axis, but it looks ugly because the distance between some of the characters still differ

![Image](https://i.imgur.com/C9EfWQ7.png)"01/09/20 02:27:24 AMAdd separate deployment for Windows releases1"The problem is only if I use Hack Bold, the problem is solved if you just use a configuration Hack for Bold and Italic

фщы - Maybe even have characters that can cause problems, x offset and I have not helped so the configuration looks like this

![Image](https://i.imgur.com/sR1fk5n.png)

P.S. Project Nerd just uses a different name for the font Hack after adding symbols"chrisduerrChristian Duerr01/09/20 02:23:30 AMAdd separate deployment for Windows releases1
317801/21/18 08:02:03 PMColeman McFarlandToo wide, spaced out fonts when running under i3"Which operating system does the issue occur on?
Arch

If on linux, are you using X11 or Wayland?
X11

Full disclosure: I am brand new to i3, but I've been using alacritty for a while on Arch.

My alacritty config is default, and my i3 config is nearly default. I only changed it to launch alacritty via `/home/<me>/.cargo/bin/alacritty`.

Please see screenshot. Is there a configuration to make this better? Is this a symptom of a system-level font config?

![img_20180120_181942](https://user-images.githubusercontent.com/396004/35190450-e94ddc70-fe16-11e7-86bf-02ed884c9487.jpg)



"04/14/21 01:12:56 AMImproved Numpad Enter support"The default binding for NumpadEnter doesn't work in some cases like `vifm` or `fzf`.
With this change Numpad Enter is perfectly fine everywhere (as far as I tested)."14As mentioned in the linked PR, this seems to be a system-level font config problem. I'll re-open if installing an appropriate font doesn't fix this.zoxveszoxves01/10/20 06:56:20 PMImproved Numpad Enter support1
318004/13/21 09:42:37 AMJoe WilmCache FreeType metrics"They are currently recomputed every time [`ft::Rasterizer::full_metrics`] is called. This seems like an easy performance improvement.

This is follow-up work to #1029.

[`ft::Rasterizer::full_metrics`]: https://github.com/jwilm/alacritty/blob/59b561b440060e7b0d13160fb69519d127e6c687/font/src/ft/mod.rs#L161"01/10/20 10:14:08 PMFix copypasta compilation on ios"Fixes: #3179"2The font metrics have been cached for a while now.kchibisovKirill Chibisov01/10/20 10:01:23 PM"Fix copypasta compilation on ios

Fixes: #3179"1
318102/09/18 03:05:30 AMZac StewartMacOS `open` command and potentially other things not launching right"I'm on MacOS 10.13.2 (17C88) High Sierra.

Using the MacOS `open` utility does not work as expected when using Alacritty, but works fine in other terminal emulators. I suspect this may be a somewhat recent regression because I just upgraded, and I use `open` so frequently that I feel like I would have noticed it if it was not working before.

The behavior is a little hard to explain, but it seems like it's not forking and detatching from the process right or something. If I `open .` to open the current dir in Finder, I get the following error:

```
~/Code/zacstewart/comm-rs $ open .
LSOpenURLsWithRole() failed with error -600 for the file /Users/zacstewart/Code/zacstewart/comm-rs.
```

But if I try to open a markdown file  (which should open with Marked), it works kinda. It launches Marked, but then blocks until Marked quits.

The potential ""other things"" that I mention is that a GTK-based GUI app I'm working on in Rust launches just fine from other emulators by running `cargo run`. But in Alacritty, it launches, but Alacritty stubbornly remains ""in front"" of it. I can exposé the windows, grab the GTK app, and it briefly flashes to the front, but Alacritty quickly jumps back in front. If I move them side-by-side, I still can't interact with the GTK app by either keyboard or mouse.

Thanks a ton for all the great work on Alacritty. I love the simplicity and performance!"01/11/20 01:23:14 AMMove Alacritty to organization"This fixes various outdated links pointing to the old jwilm/alacritty
repository.

Since `copypasta` now has its own github repository at
https://github.com/alacritty/copypasta, the sources have been removed
from Alacritty."3Seems like this had something to do with tmux. After quitting all tmux sessions and starting a new one, it works.chrisduerrChristian Duerr01/10/20 11:12:13 PMUpdate lockfile1
318402/04/18 08:43:38 PMSteven NobleHow to bind cmd-K to clear"Which operating system does the issue occur on? Latest Mac OS X; latest Alacritty; latest Rust

Why is this not working? Thanks
```
 - { key: K,        mods: Command, command: { program: ""/usr/bin/clear"" } }
```"01/11/20 04:19:41 AMFix font size reset when moving between screens"Fixes #3183." =||= "Thanks @falood. I had been using Key Codes but I hadn't been able to find a reference that explains how to go from the Unicode value in Key Codes (e.g. `8 / 0x8` in your example) to the equivalent for `alacritty.yml` (e.g. `\x08`).

Without a reference, I decided to do a straight substitute -- i.e. any instance of `* / 0x` becomes `\x0`. It worked :-) -- wish I could find an explanation of why though.

I now have:

`tmux.conf`: `bind -n C-k send-keys -R`, so I can clear the screen without a prefix.

`alacritty.yml`: ` - { key: K, mods: Command, chars: ""\x0b"" }` (etc), so everything still works if I reflexively use Mac-standard system shortcuts."chrisduerrChristian Duerr01/11/20 02:54:06 AMRemove useless conditional1
319001/27/18 09:07:32 AMNoneCompiling on osx 10.13.2 yields error ld: framework not found AppKit"Compiling with rustc 1.23.0 (766bd11c8 2018-01-01) on osx 10.13.2 ends in an error
```
error: linking with `cc` failed: exit code: 1
  |
  = note: ""cc"" ""-m64"" ""-L"" ""/Users/mao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib"" ""/Users/mao/Documents/Src/alacritty/target/release/deps/alacritty-7be6d35c576f57b8.alacritty0.rcgu.o"" ""-o"" ""/Users/mao/Documents/Src/alacritty/target/release/deps/alacritty-7be6d35c576f57b8"" ""-Wl,-dead_strip"" ""-nodefaultlibs"" ""-L"" ""/Users/mao/Documents/Src/alacritty/target/release/deps"" ""-L"" ""/Users/mao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib"" ""/var/folders/db/8jrwbcyx73375g6d3pzzzlg40000z7/T/rustc.6hV6B4f0RvdP/libstd-826c8d3b356e180c.rlib"" ""/var/folders/db/8jrwbcyx73375g6d3pzzzlg40000z7/T/rustc.6hV6B4f0RvdP/liballoc_jemalloc-f884a0c3f8f15a2d.rlib"" ""/Users/mao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/libcompiler_builtins-f6c69d64299ff1c7.rlib"" ""-framework"" ""AppKit"" ""-framework"" ""AppKit"" ""-framework"" ""Foundation"" ""-framework"" ""Foundation"" ""-framework"" ""AppKit"" ""-framework"" ""Foundation"" ""-l"" ""System"" ""-l"" ""objc"" ""-l"" ""objc"" ""-l"" ""objc"" ""-framework"" ""CoreServices"" ""-framework"" ""CoreServices"" ""-framework"" ""CoreText"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreGraphics"" ""-framework"" ""CoreFoundation"" ""-framework"" ""OpenGL"" ""-l"" ""System"" ""-l"" ""resolv"" ""-l"" ""pthread"" ""-l"" ""c"" ""-l"" ""m""
  = note: ld: framework not found AppKit
          clang-4.0: error: linker command failed with exit code 1 (use -v to see invocation)


error: aborting due to previous error

error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/main.rs --crate-type bin --emit=dep-info,link -C opt-level=3 -C lto -C debuginfo=2 --cfg feature=""default"" -C metadata=7be6d35c576f57b8 -C extra-filename=-7be6d35c576f57b8 --out-dir /Users/mao/Documents/Src/alacritty/target/release/deps -L dependency=/Users/mao/Documents/Src/alacritty/target/release/deps --extern objc=/Users/mao/Documents/Src/alacritty/target/release/deps/libobjc-c18b3163b9020892.rlib --extern libc=/Users/mao/Documents/Src/alacritty/target/release/deps/liblibc-bf13222543729d48.rlib --extern serde_json=/Users/mao/Documents/Src/alacritty/target/release/deps/libserde_json-4d5fe0cbf7056e4a.rlib --extern arraydeque=/Users/mao/Documents/Src/alacritty/target/release/deps/libarraydeque-8a4afd7dd2e9083d.rlib --extern serde_yaml=/Users/mao/Documents/Src/alacritty/target/release/deps/libserde_yaml-afced5469f68d270.rlib --extern bitflags=/Users/mao/Documents/Src/alacritty/target/release/deps/libbitflags-d5dae01ccaf46257.rlib --extern log=/Users/mao/Documents/Src/alacritty/target/release/deps/liblog-269d6acbcfe89dec.rlib --extern notify=/Users/mao/Documents/Src/alacritty/target/release/deps/libnotify-db1e17a95fae9a70.rlib --extern glutin=/Users/mao/Documents/Src/alacritty/target/release/deps/libglutin-c6abf878675dbb58.rlib --extern copypasta=/Users/mao/Documents/Src/alacritty/target/release/deps/libcopypasta-55d46687fc9e4528.rlib --extern cgmath=/Users/mao/Documents/Src/alacritty/target/release/deps/libcgmath-138708100294e5a0.rlib --extern unicode_width=/Users/mao/Documents/Src/alacritty/target/release/deps/libunicode_width-f5ae591fadcfcff1.rlib --extern font=/Users/mao/Documents/Src/alacritty/target/release/deps/libfont-bb3228e4ae0c77d1.rlib --extern xdg=/Users/mao/Documents/Src/alacritty/target/release/deps/libxdg-04d61ac76894cad0.rlib --extern fnv=/Users/mao/Documents/Src/alacritty/target/release/deps/libfnv-323a1aef87352299.rlib --extern errno=/Users/mao/Documents/Src/alacritty/target/release/deps/liberrno-501212f98688430c.rlib --extern env_logger=/Users/mao/Documents/Src/alacritty/target/release/deps/libenv_logger-b46dbb853ac88c4e.rlib --extern vte=/Users/mao/Documents/Src/alacritty/target/release/deps/libvte-b1684c2b781e0ac2.rlib --extern parking_lot=/Users/mao/Documents/Src/alacritty/target/release/deps/libparking_lot-e59ff75cb943b4d6.rlib --extern serde_derive=/Users/mao/Documents/Src/alacritty/target/release/deps/libserde_derive-9b6095d9122ba4d7.dylib --extern mio=/Users/mao/Documents/Src/alacritty/target/release/deps/libmio-12c5ce490fff0639.rlib --extern mio_more=/Users/mao/Documents/Src/alacritty/target/release/deps/libmio_more-c768558c6ed3c812.rlib --extern serde=/Users/mao/Documents/Src/alacritty/target/release/deps/libserde-8be370bc1ef1c1aa.rlib --extern clap=/Users/mao/Documents/Src/alacritty/target/release/deps/libclap-12cb0791d29d0aee.rlib --extern base64=/Users/mao/Documents/Src/alacritty/target/release/deps/libbase64-303959c6cf7dc1e3.rlib --extern alacritty=/Users/mao/Documents/Src/alacritty/target/release/deps/libalacritty-0a0d8a6322621d1b.rlib` (exit code: 101)
```"01/12/20 12:24:56 AMFix crash with invalid working directory =||= "The problem was the interference from my nix environment. I've managed to compile alacrity in the clean environment so I'm closing this issue.
@sandersantema Many thanks for sharing the binary. It works fast indeed; even faster than iTerm when it comes for scrolling. "chrisduerrChristian Duerr01/11/20 11:38:46 PMFix Windows ownership errors1
319401/20/19 05:55:55 PMYOSHIOKA TakumaSupport config to control width of ambiguous width characters"Fonts for some languages (mainly CJK) expects east asian width characters to be full-width.
This pull request provides a way to let users choose width for such characters.

For example, Ricty font with `east_asian_fullwidth: true`, seems correct:
![ambiwidth=full](https://user-images.githubusercontent.com/1246590/35299227-fc5c3e3e-00c7-11e8-958c-1c35001ca2b3.png)
Ricty font with `east_asian_fullwidth: false`:
![ambiwidth=half](https://user-images.githubusercontent.com/1246590/35299241-06051bae-00c8-11e8-96ce-6cd8780c2fec.png)

`east_asian_fullwidth: false` is behaviour before this PR (and default config value).
In this example, `…` has full-width for the font but treated as half-width on terminal, so display is broken and cursor doesn't works correctly."01/12/20 04:28:41 PMBump VTE to 0.5.0"This change includes dynamic escape buffer support in VTE, which allows
us to have arbitrary escape sizes.

Since tmux could potentially use very long escapes for the clipboard
escape, this allows copying more text.

Fixes #1002." =||= Closing because the solution proposed in #1295 is preferred. Thanks for your work, sorry for not being able to include it in this form!chrisduerrChristian Duerr01/12/20 03:57:52 PMFix 1.36.0 build failure1
320001/24/18 08:49:40 PMMarco Fernández PrannoCannot find binaries (brew, nvim, ...) after install"Which operating system does the issue occur on?
macOS High Sierra 10.13.2 

1. Installed Alacritty and created the desktop application.
2. Opened Alacritty and found that no binaries are recongnized: brew, nvim, vim, ...

Am I missing something? Is it not loading the proper path for the binaries?


"01/18/20 12:48:35 PMForce application symlink on macOS make build"macOS packaging would fail on repeat builds due to the existence of the Application symlink. Forcing its creation allows for repeat builds without manually clearing the link."1That should do it, thank you :+1: jjcomerChristian Duerr01/18/20 02:47:12 AMImprove changelog entry1
320401/24/18 08:01:37 PMAhmed El Gabri[Feature] Simple fullscreen"I'd really like to move to alacritty but I use iTerm in fullscreen all the time & there are two things that I can't get used to with alacritty:

- #168 
- And using macOS native fullscreen (it distracts me & I can't use it) I use iTerm2 every day in fullscreen but not the native fullscreen (don't know what to call it) but it doesn't use separate space, can alacritty support for something like this?"01/14/20 04:01:44 PMRemove synthetic keyboard event handling"Fixes #3109."3Just knew about [`decorations`](https://github.com/jwilm/alacritty/blob/59b561b440060e7b0d13160fb69519d127e6c687/alacritty_macos.yml#L32) & that's already awesome!chrisduerrChristian Duerr01/13/20 05:43:57 PM"Remove synthetic keyboard event handling

Fixes #3109."1
320710/02/18 09:21:46 PMStephen HicksLarge negative horizontal offsets cause problems"Which operating system does the issue occur on?
linux

If on linux, are you using X11 or Wayland?
X11

59b561b seems to have broken my alacritty.yml config.  I previously had the following:

```yaml
font:
  normal:
    family: Monofur Nerd Font
    style: Book

  bold:
    family: Monofurbold Nerd Font
    style: Bold

  italic:
    family: Monofuritalic Nerd Font
    style: Italic

  size: 11.0

  offset:
    # NOTE: We seem to need a big negative offset to counteract the fact
    # that there are double-wide glyphs in the font.  On top of that, we
    # also add a couple extra pixels to tighten things up and to eliminate
    # ugly vertical lines between powerline glyphs.
    x: -13.0
    y: 0.0
```

I wrote this config a while back, but a little experimentation reveals that, indeed, without the large negative offset, I get pretty horrible spacing between glyphs when the font is not strictly monospaced (in my case, monofur has a few double-width glyphs).  I assume the terminal was just taking the maximum width and using that for everything.  But after 59b561b there seems to be a threshold (for Monofur 11, it's -8) and when I start the terminal, I get one of three outcomes:

  * offset is less negative than the threshold: works as expected, though the offset is a lot more noticeable (probably because it's working correctly)
  * offset is exactly the threshold: terminal immediately crashes with this error:
    ```
    thread 'main' panicked at 'capacity overflow', /checkout/src/libcore/option.rs:874:4
    note: Run with `RUST_BACKTRACE=1` for a backtrace.
    ```
  * offset is more negative than the threshold: window appears but is completely blank and does not (seem to) respond to keypresses (i.e. Ctrl-D does not quit)

In my case, it was an easy fix to just stop using the weird large negative offset, but it took a lot of effort to discover that this was the culprit.  At the very least, we should detect this case and report a more useful error message."01/15/20 04:36:34 PMExpand line selection across wrapped linesThis is a follow-up to https://github.com/alacritty/alacritty/pull/2717. =||= "On the latest master this should actually print the error `font offset is too small`. 

This should resolve this problem by providing a better error which makes it obvious what exactly is going wrong."chrisduerrChristian Duerr01/15/20 03:20:50 PMImprove function documentation1
321001/25/18 04:35:41 PMMathew AttleeDoesn't start if I specify Fira Mona as font family"Which operating system does the issue occur on? OS X

I am trying to specify the font family of Fira Mono in my configuration when I do Alacritty doesn't start.

```yml
# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: ""Fira Mona""
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: ""Fira Mona""
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: ""Fira Mona""
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 12.0

```
"01/15/20 12:47:16 PMRemove fs::canonicalize from Windows pty startup"I was looking further at #3198

`std::fs::canonicalize()` is the call responsible for creating the UNC paths. But I think we don't actually need to canonicalize paths for either of the the ConPTY or WinPTY backends. For example, I tested both with relative paths and they work fine.

So I suggest that rather than making some dance with `canonicalize()` followed by working out how to remove the UNC prefix ourselves, we just faithfully pass the user's input `working_directory` on to the PTY. In that case if there's a problem, that's entirely at the hands of the user's config or command line options.

Related but not necessary for this PR: I also thought it would be wise to check that the `working_directory` in the user's config file is an absolute path. (Relative paths in the config don't seem to be meaningful to me.)

I haven't yet updated the changelog; will write an appropriate message if you agree that this is the right solution for #3198 

Closes #3198 "5Right you are. Very embarrassing on my part.davidhewittDavid Hewitt01/15/20 11:05:33 AMRemove fs::canonicalize from Windows pty startup1
321105/05/18 03:12:59 PMGomme_Bidule"Ncurse lines strangely ""stripped"" (with Inconsolata font)""Which operating system does the issue occur on?
Archlinux

If on linux, are you using X11 or Wayland?
Wayland, and I start Alacritty with `env WAYLAND_DISPLAY= alacritty`

I am using the Inconsolata font and I have noticed that lines in ncurses are ""stripped"", here is an image : 
![alacritty_ncurse_lines](https://user-images.githubusercontent.com/9958466/35442209-b26a0b7c-02a6-11e8-8acc-4eda62fea593.png)

I tried other terminal to be sure it was not a problem with my config but I didn't get that. 

Do I miss something to set or configure?"01/15/20 10:14:08 PMUpdate font crate to 2018 edition"I've updated the font crate to 2018 edition, which will ease some of the path pain working on #3127.

All I've done is:
- Set the edition in `Cargo.toml`
- Remove all `extern crate` declarations
- Remove all `self::` where unneeded
- Add macro imports where needed"3This is a duplicate of #118 davidhewittDavid Hewitt01/15/20 09:05:06 PMFix compile failures on macOS1
321301/29/18 07:22:12 PMErikClose/Crash on Startup"Which operating system does the issue occur on?
OS X 10.12.6

I installed according to the README and am seeing Alacritty close immediately on startup.  I see this in the system log:
```
com.apple.xpc.launchd[1] (io.alacritty.120860[1579]): Service exited with abnormal code: 1
```
I have made no changes to `alacritty.yml`, just copied it into `~/.alacritty.yml`"01/17/20 09:28:35 PMModded alacritty.ico to be highres non blurry"I took the  `/extra/logo/compat/alacritty-term.svg` (the one without scanlines) and converted it to a 256x256 ico.

This is the result:

![before_after_icon_change](https://i.imgur.com/IwnI8XN.png)

(before / after)

---------------------

I used [this](https://gist.github.com/michaelfresco/1f7501b190f1a0bee7d598ceee9cb066) bash script to generate the icon file. (requires both inkscape and magick to be installed)"3"Thanks!

@mjburling Indeed, that was my problem.  I hadn't noticed the `alacritty_macos.yml` file.  I was following the README and it wasn't mentioned.

@sandersantema The README says the configuration can be in any of these places:
1. `$XDG_CONFIG_HOME/alacritty/alacritty.yml`
2. `$XDG_CONFIG_HOME/alacritty.yml`
3. `$HOME/.config/alacritty/alacritty.yml`
4. `$HOME/.alacritty.yml`"michaelfrescoMichael Fresco01/17/20 02:10:08 PMmerged and resolved conflict changelog1
321603/13/18 06:21:20 AMPat BurroughsExtend SGR and VT200 (normal) mouse support (fixes #714, #506)"This PR extends Alacritty's mouse handling to handle:
* Reporting all three of the left, right, and middle mouse buttons.
* Reporting mouse dragging events with all three buttons.
* Reporting mouse movement events when no button is pressed.

This PR does *not* report modifier keys with clicks/drags, because I'm unsure what modifiers (if any) we want or need to handle. We *can't* report Shift, as that is the de-facto standard modifier for ignoring application mouse handling (and Alacritty already treats it as such). The vast majority of CLI applications out there don't *expect* Ctrl to be reported, because xterm mandates Ctrl-Click to access its menus. They also do not generally expect Alt, as the de-facto standard modifier for moving and resizing windows with the mouse. The Windows key, of course, is also generally ignored.

This PR also does not support more than three mouse buttons (plus the wheel). While Glutin reports them, VT200/SGR button codes treat 0 as left, 1 as middle, 2 as right, and 3 as either ""button release"" (VT200), ""any other button"" (SGR), or ""no button pressed"" (SGR with any-event tracking); thus, we skip supporting them entirely.

This fixes #714, fixes #506 and fixes #1145."01/16/20 11:42:27 PMFix reset CLI parameters on config reloadFixes #3197. =||= "I didn't mean that urxvt uses normal mode, but that alacritty uses normal mode with the urxvt terminfo. So my thought was that there's some reason why SGR mode can not provide the control clicks.

Manually requesting SGR mode with urxvt/kitty and comparing the output looks like this PR handles SGR mode correctly, so I don't think the implementation is wrong."chrisduerrChristian Duerr01/16/20 08:25:31 PMRemove unnecessary string iteration1
321701/28/18 03:26:33 PMRobbie HarwoodDoesn't always exit on C-d (EOF)"### Which operating system does the issue occur on?

Debian Testing

### If on linux, are you using X11 or Wayland?

X11

### Description

Sometimes (feels like most of the time), alacritty doesn't exit when Control-d is sent to the shell.  This works correctly in other terminal emulators, so I don't think this is a shell misbehavior.  When it hangs like this, it will exit when I press another key (even a non-printable one, like mod1)."01/17/20 12:59:28 AMReplace `.nth(0)` with `.next()`"Clippy says that `.next()` is more readable than `.nth(0)`, and I am
inclined to agree.

https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero"2Closing this as a duplicate of #915.cole-hCole Helbling01/16/20 09:29:08 PM"Replace `.nth(0)` with `.next()`

Clippy[1] says that `.next()` is more readable than `.nth(0)`.

[1]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero"1
321801/11/21 12:15:37 PMKiyoshi MurataStrange background opacity behavior on X11 Linux + NVIDIA"OS: `Linux 4.14.13-300.fc27.x86_64 #1 SMP Thu Jan 11 04:00:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux`
Distro: Fedora 27
OpenGL info: https://gist.github.com/13k/58ec3d41dfcc038aaf48862028e50e77
alacritty version: git b82622e9948d1c90fc628739c7f328816214fb33

---

Background is completely transparent, regardless of `background_opacity`'s value.

Screenshot:

![selection_007](https://user-images.githubusercontent.com/4762/35474876-98db1acc-037b-11e8-8ba9-7f805c20bca2.png)"01/24/20 10:57:23 PMFix selection rotating outside of scrolling regionFixes #2983.1As stated by @13k this is an issue with having FXAA enabled with the Nvidia drivers. So it should be disabled for Alacritty to make everything work correctly.chrisduerrChristian Duerr01/24/20 10:32:20 PMFix documentation1
322101/29/18 09:51:56 PMVladimir BauerWeird rendering of ncurses based app like Kakoune text editor"Which operating system does the issue occur on?
macOS 10.13.3 (17D47)

[Kakoune](https://github.com/mawww/kakoune) text editor outputs nasty characters, while rendering any pseudo graphic windows. As far as I know it is based on the ncurses lib. Is this problem on the Kakoune side or alacritty?

**alacritty**
[![cmd_bad.png](https://s25.postimg.org/hyl2l2dkf/cmd_bad.png)](https://postimg.org/image/mkh6tez3f/)

**iterm2**
[![cmd_good.png](https://s25.postimg.org/wujlsn9jj/cmd_good.png)](https://postimg.org/image/wujlsn9jf/)

**alacritty**
[![goto_bad.png](https://s25.postimg.org/mkh6terdr/goto_bad.png)](https://postimg.org/image/v2qmxqxwb/)

**iterm2**
[![goto_good.png](https://s25.postimg.org/5jyakpywv/goto_good.png)](https://postimg.org/image/k35fm4s1n/)

"01/20/20 11:56:11 PMFix first cell selected with offscreen selectionFixes: #32233"Well indeed setting following in config, has fixed this.
```yaml
env:
  LANG: en_US.UTF-8
  LC_CTYPE: UTF-8
```
Sorry it's my bad, not checking this out first.
The issue could be closed now, thank you all for support!"chrisduerrChristian Duerr01/20/20 12:51:15 PMReplace Point + Side with Anchor1
322401/31/18 05:03:24 PMJeff MuizelaarUpdate core-textThis cleans up a bunch of code.01/20/20 09:13:40 PMDefault `draw_bold_text_with_bright_colors` to `false`"The option has some ""historical"" background, for example it could break
ncurses applications like alsamixer, however the default to `true`
seems strange nowadays, because it makes impossible to draw bold text in
a ""normal"" color. Some other terminals (e.g. vte, kitty) also started default to
`false` here.

We're not removing the option, but just flipping a bit, and knowing that users
tend to copy paste our config in a past, will likely continue to have it
defaulted to `true` in their configuration files. The only problem is the users
who don't have this option in a config file now or new users, however the change
in color is noticeable and it also stated very clear in our configuration file,
so it shouldn't be a problem to flip things back.

Implements #2779

I think keeping this around isn't a good idea, so let's just push it."1This is great. Thank you for sending the PR!.kchibisovKirill Chibisov01/20/20 08:04:28 PMMerge branch 'master' into flip-bold-text-with-bright1
322511/14/20 04:13:22 PMRobbie HarwoodHeld and repeated keys with modifiers don't work right"### Which operating system does the issue occur on?

Debian testing

### If on linux, are you using X11 or Wayland?

X11

### Description

I encountered this with emacs, but it seems to happen elsewhere, like in my shell.  If I press a keybinding with multiple modifiers (in this example, I'm using mod1+shift+[, or mod1-{ depending on how one thinks about it) it gets sent properly.  However, if I then release *only* the [ key and then press it again, alacritty sends the program just a { instead of the proper mod1+{.  This also occurs if I hold the key down: the program is sent the key correctly once, and then the repeats are all wrong.

This is just with pressing it twice:

```
rharwood@seton:~/alacritty$ cargo run --release -- --print-events
    Finished release [optimized + debuginfo] target(s) in 0.0 secs
     Running `target/release/alacritty --print-events`
error: XDG_RUNTIME_DIR not set in the environment.
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: Resized(1024, 768) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: Moved(0, 0) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: Resized(478, 1062) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: Refresh }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: Focused(true) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(38654705795))), event: CursorMoved { device_id: DeviceId(X(DeviceId(3))), position: (1387, 585), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } }
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 100, state: Pressed, virtual_keycode: Some(RAlt), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 100, state: Pressed, virtual_keycode: Some(RAlt), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 54, state: Pressed, virtual_keycode: Some(RShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 54, state: Pressed, virtual_keycode: Some(RShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: true, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: Some(LBracket), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: false, alt: true, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: ReceivedCharacter('{') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 26, state: Released, virtual_keycode: Some(LBracket), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Released, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: false, alt: true, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: Some(LBracket), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Pressed, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: false, alt: true, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: ReceivedCharacter('{') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 26, state: Released, virtual_keycode: Some(LBracket), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(14680067))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 26, state: Released, virtual_keycode: None, modifiers: ModifiersState { shift: true, ctrl: false, alt: true, logo: false } } } }
```"01/19/20 03:27:25 PMBump minimum Rust version to 1.37.0 =||= This is fixed for a long time I think, if not please open a new issue.chrisduerrChristian Duerr01/19/20 03:01:41 PMBump minimum Rust version to 1.37.01
322601/19/20 03:15:49 PMBahtiyar BiksayevCan't type russian characters"Cannot reopen #793, so opening new issue.

macOS High Sierra 10.13.2

Cannot type any cyrillic letters 
```
-->Hello
bash: Hello: command not found
-->
-->:\237\321\320\320\320\321

-->locale
LANG=""ru_RU.UTF-8""
LC_COLLATE=""ru_RU.UTF-8""
LC_CTYPE=""ru_RU.UTF-8""
LC_MESSAGES=""ru_RU.UTF-8""
LC_MONETARY=""ru_RU.UTF-8""
LC_NUMERIC=""ru_RU.UTF-8""
LC_TIME=""ru_RU.UTF-8""
LC_ALL=
```

`en_US.UTF-8` did not solve problem

**Update**:
Terminal.app (iTerm2 as well):
```
-->:~ $ locale
LANG=""ru_RU.UTF-8""
LC_COLLATE=""ru_RU.UTF-8""
LC_CTYPE=""ru_RU.UTF-8""
LC_MESSAGES=""ru_RU.UTF-8""
LC_MONETARY=""ru_RU.UTF-8""
LC_NUMERIC=""ru_RU.UTF-8""
LC_TIME=""ru_RU.UTF-8""
LC_ALL=
```

Alacritty:
```
-->locale
LANG=""en_RU.UTF-8""
LC_COLLATE=""C""
LC_CTYPE=""C""
LC_MESSAGES=""C""
LC_MONETARY=""C""
LC_NUMERIC=""C""
LC_TIME=""C""
LC_ALL=
```

setting `ru_RU.UTF-8` env variables in `~/.bashrc` (which shows `locale` output as in Terminal.app) doesn`t help"01/20/20 08:03:55 PMRemove scrolling.auto_scroll featureFixes: #18731This is likely a locale issue and is tracked now there #2566. The locale should be set in `alacritty.yml` and not in shell to make it work, like it was initially attempted here.kchibisovKirill Chibisov01/20/20 07:44:53 PMrustfmt1
323611/11/18 08:24:42 PMLordCentering the working space inside the window"Alacritty only display an *integer number* of characters in its window.
If the window's horizontal size and vertical size aren't exactly divisible by the *integer number* there are some pixels at the bottom and at the right of the window to fill the empty space.

**Centering the *working space*** (where the characters are) inside the window would be a bit more beautiful."01/21/20 09:17:26 PMFix oob error during semantic selection"Fixes #3233." =||= This is likely a locale issue and is tracked now there #2566. The locale should be set in `alacritty.yml` and not in shell to make it work, like it was initially attempted here.kchibisovKirill Chibisov01/21/20 06:59:02 PM"Fix oob error during semantic selection

Fixes #3233."1
323701/30/18 04:20:53 PMSander MaijersImprove Rust toolchain selectionSimplify instructions and enforce expected toolchain selection.01/22/20 08:48:00 PMFix underline position for bitmap fontsFixes #3235. =||= Might be interesting to see if @jwilm thinks the same. We could just remove it then.kchibisovKirill Chibisov01/22/20 07:34:51 PMUse better computation for underline position1
323901/30/18 06:59:18 PMChristian DuerrUpdate lockfile"Updated the lockfile to make sure clippy is building properly with the
latest nightly toolchain."01/21/20 10:36:45 PMFix stack overflow when printing shader errorFixes #3238. =||= Might be interesting to see if @jwilm thinks the same. We could just remove it then.kchibisovKirill Chibisov01/21/20 09:18:29 PMMerge branch 'master' into fix-crash-from-shader-message1
324101/07/19 06:15:39 PMPeter MajchrakProtocol error, panic on wayland"Just trying to start alacritty but it panics every time.

OS: linux (manjaro/arch)
Display server: Wayland (way-cooler)
Exit code: 101
```shell
> env RUST_BACKTRACE=1 alacritty 
wl_registry@2: error 0: invalid version for global wl_seat (5): have 4, wanted 5
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 71, m
essage: ""Protocol error"" } }', /checkout/src/libcore/result.rs:916:5
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::print
             at /checkout/src/libstd/sys_common/backtrace.rs:68
             at /checkout/src/libstd/sys_common/backtrace.rs:57
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/panicking.rs:381
   3: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:397
             at /checkout/src/libstd/panicking.rs:577
   4: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:538
   5: std::panicking::begin_panic_fmt
             at /checkout/src/libstd/panicking.rs:522
   6: core::panicking::panic_fmt
             at /checkout/src/libstd/panicking.rs:498
             at /checkout/src/libcore/panicking.rs:71
   7: core::result::unwrap_failed
             at /checkout/src/libcore/macros.rs:23
   8: winit::platform::platform::wayland::window::Window::new
             at /checkout/src/libcore/result.rs:782
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.10.0/src/platform/linux/wayl
and/window.rs:75
   9: winit::window::<impl winit::WindowBuilder>::build
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.10.0/src/platform/linux/mod.
rs:116
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.10.0/src/window.rs:119
  10: glutin::platform::platform::wayland::Context::new
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.12.0/src/platform/linux/way
land.rs:23
  11: glutin::GlWindow::new
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.12.0/src/platform/linux/mod
.rs:47
             at ./.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.12.0/src/lib.rs:323
  12: alacritty::window::Window::new
             at src/window.rs:204
  13: alacritty::display::Display::new
             at src/display.rs:140
  14: alacritty::main
             at src/main.rs:104
             at src/main.rs:62
  15: std::rt::lang_start::{{closure}}
             at /checkout/src/libstd/rt.rs:74
  16: std::panicking::try::do_call
             at /checkout/src/libstd/rt.rs:59
             at /checkout/src/libstd/panicking.rs:480
  17: std::rt::lang_start_internal
             at /checkout/src/libpanic_unwind/lib.rs:101
             at /checkout/src/libstd/panicking.rs:459
             at /checkout/src/libstd/panic.rs:365
             at /checkout/src/libstd/rt.rs:58
  18: main
  19: __libc_start_main
  20: _start

```"01/22/20 10:48:47 PMAdd debug log for missing config"We currently log whenever we fall back to the default config because of
an error in the config itself. We also log when the config was
successfully loaded and where it was loaded from. The only scenario
where no config related message is logged is when there is no
configuration file present.

Logging this case should make it easier to debug issues like #3240,
without requiring any knowledge from maintainers about this edgecase."2No... I switched to sway and the current version of sway seems to launch without the crash... its still not usable and doesn't look right under wayland but that's another issue.chrisduerrKirill Chibisov01/22/20 08:48:19 PMMerge branch 'master' into improved-config-error-logging1
324401/31/18 06:44:01 PMjsd1982Moving alacritty between Retina and non-Retina displays"Which operating system does the issue occur on?
MacOS 10.12.3

Spawning alacritty initially on a retina display (builtin macbook pro display) looks fine initially, but moving the window to an external 1080p non-retina display causes the fonts to be scaled by 4x or more while the window dimensions remain the same. Basically, moving between monitors of different dpi settings is not accounted for and only retains the dpi of the monitor initially opened on."01/24/20 11:42:24 PMUse cached metrics value =||= dupe of https://github.com/jwilm/alacritty/issues/71kchibisovKirill Chibisov01/24/20 10:56:08 PMadd changelog entry1
324601/31/18 04:22:47 PMAndy BellDifferent versions of ZSH being reported between the packaged app and running the binary"Which operating system does the issue occur on? OS X 10.13.2

(Using alacritty built from master: commit 53a5a96fdd49975b4eb8072380a5573d8dd62263 )

When running `which -a zsh` on a non-alacritty terminal, it will report:
```
/usr/local/bin/zsh
/bin/zsh
```

To reproduce (assuming the above is true):

1. In non-alacritty terminal, start instance of alacritty
2. In this alacritty window, run `which -a zsh`
3. Check it matches the above result
4. Close alacritty window
5. Open alacritty via the 'spotlight search'
6. In this new window, run `which -a zsh`
7. Output should read only `/bin/zsh`

Somehow alacritty is using a different shell in the bundled form than when being ran as a binary. I think this is the key behind several issues I am encountering with this terminal (not respecting fonts/ unable to run certain programs/ etc.) and if it is resolvable should clear up the other issues."01/24/20 05:16:10 PMFix: OpenBSD build error / BUMP nix crate from 0.15.0 to 0.16.1"minimal PR, BUMP nix crate from 0.15.0 to 0.16.1 to fix OpenBSD compilation bug impacting alacritty build.

for more details please follow:
https://github.com/nix-rust/nix/issues/1125

HTH.
Cheers." =||= Thanks @JamesDunne that has fixed this issue, closing here in favour of #1071 eau-u4feau01/24/20 11:01:18 AM"BUMP nix crate from 0.15.0 to 0.16.1 to fix OpenBSD compilation bug impacting alacritty.
for more details please follow:
https://github.com/nix-rust/nix/issues/1125"1
325312/03/18 10:27:00 PMjsd1982Default shell on macOS should use `login`"Which operating system does the issue occur on?
MacOS 10.12.3

Default process for a shell on MacOS should use `login -fp $USERNAME` and not a direct invocation of `/bin/bash` because the user's environment gets set up differently with `login`. iTerm2.app and Console.app both use `login` and share a consistent environment for my user account but alacritty's environment differs with a buggy $PATH among other oddities."01/26/20 11:30:24 PMSwitch to flamegraph-rs script"This cleans up the Alacritty scripts a bit by removing some of them
which are not recommended to be used anymore and switching from the
official FlameGraph tool to the more specialized Rust FlameGraph
implementation." =||= I think a good example of how this can be fixed in Alacritty can be seen in how it was fixed in kitty: https://github.com/kovidgoyal/kitty/issues/247chrisduerrChristian Duerr01/26/20 10:12:07 PMRemove outdated gitignore entry1
325908/14/20 09:40:48 PMPat BurroughsAlacritty does not report BELs to X11"I realise that this is perhaps a *desired* feature for many people, who just use Alacritty's built-in visual bell and are happy about it, but a visual bell built into the terminal is, well, only noticed when you're looking at the terminal.

For quite a while now, I've been using [xvisbell](https://github.com/rianhunter/xvisbell) to flash the *entire* screen (not just my terminal) when an X11 bell is received, and further supplementing that using xkbevd to play an audio signal if a bell is received and the system is idle or the screen is locked (i.e., I still am signalled even when not paying attention to the system and won't see a visual bell).

Alacritty unfortunately breaks that workflow. Would a PR that modifies the `bell()` method on Handler to report them to X11 (in addition to the built-in visual bell functionality) be accepted?"01/28/20 12:32:36 PMFix inconsistent test module names =||= The urgent hint should be set automatically, that's a different problem. But it is true that the subprocess will be a child of init, not Alacritty.chrisduerrChristian Duerr01/27/20 11:25:50 PMFix inconsistent test module names1
326002/11/18 05:50:53 PMSteven NobleFixed a typo in the ANSI docFixed a typo in the ANSI doc: `starting` not `staring`03/01/20 04:07:37 AMRemove `tabspaces` config option16thanks!chrisduerrKirill Chibisov03/01/20 03:40:29 AMSmall style issue1
326403/02/18 01:15:18 AMNoneBuilding HEAD (2466f81) on MacOS fails (euclid)"Building current HEAD (2466f81) in High Sierra using rustc v1.23.0 fails with the following message:

```
error: proc-macro derive panicked
  --> /Users/zaript/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.16.4/src/rotation.rs:20:74
   |
20 | #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Hash, Serialize, Deserialize)]
   |                                                                          ^^^^^^^^^^^
   |
   = help: message: proc_macro::__internal::with_sess() called before set_parse_sess()!

error: Could not compile `euclid`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```"01/30/20 10:16:31 PMFix backspace deleting chars when IME is open"Fixes #1606."7This is a problem with home brew Rust compilerchrisduerrChristian Duerr01/29/20 10:25:23 PM"Fix backspace deleting chars when IME is open

Fixes #1606."1
326802/09/18 09:44:33 AMLuke Berry"Terminal text goes in the ""wrong place""""Which operating system does the issue occur on?
Mac OSX 10.13.2 Beta

I've only experienced this bug when in tmux with irssi running but I'll have a look to see if it occurs elsewhere.

I'm not sure how to explain this, so I've attached a video - but basically when writing the terminal seems to be typing in the ""wrong place"", this will explain it better than I can. Feel free to edit the title to something that more aptly describes the issue.

https://dsh.re/ea0a6

I know nothing about rust or how terminals operate so I'm afraid I can't be of much assistance with this bug, always eager to learn though."01/31/20 12:00:24 AMMirror OSC query terminatorFixes #3091. =||= Closing as this issue was specifically related to my janky af tmux config. chrisduerrChristian Duerr01/30/20 11:33:26 PMDowngread winpty-sys1
327005/04/18 08:50:13 PMLuke BerryWhen resizing, the terminal becomes transparent"Which operating system does the issue occur on?
Mac OSX 10.13.2 Beta (17C83a)


When resizing the window the entire terminal becomes transparent, it reappears when resizing stops. I've uploaded a video displaying this issue.

https://dsh.re/a1d20

Also, resizing itself seems sluggish - this may be a different issue."01/31/20 02:54:03 PMFix handling of OpenType variable fonts"Fixes #3257." =||= Closing as a duplicate, let's keep the discussion of this issue to #869 and #969.kchibisovKirill Chibisov01/30/20 10:07:29 PMMinor style issue1
327412/22/18 05:16:55 PMChristian DuerrAdd proper underline and strikethrough support"Support for strikethrough has been added by inserting and removing a
`STRIKE_THROUGH` flag on the cell.

Now all strikethrough and underline drawing is also done through the
rectangle renderer. So no glyphs are used to render underlines and
strikethrough.
The position is taken from the font metrics and should be accurate for
linux, however is not yet tested on macos.

It works by checking the underline state for each cell and then drawing
from the start until the last position whenever an underline ended. This
adds a few checks even if no underline is rendered but I was not able to
measure any significant performance impact.

Fixes jwilm/alacritty#806.
Fixes jwilm/alacritty#31.

Demo:
![](https://u.teknik.io/Nwzo3.png)

TODO:
 - [x] Account for font and glyph offsets
 - [x] Account for window padding
 - [x] Test (and potentially fix) DPI
 - [x] Refactor code and extract it into separate files
 - [x] Add Windows support"01/31/20 10:43:04 PMUpdated Clear Linux Installation Instructions"Changed the `swupd bundle-add` command to include missing dependencies, and added instructions to fix issues with finding fonts.conf.

In response to (https://github.com/alacritty/alacritty/issues/2990).

Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage." =||= Wasn't sure about it being a bug or a problem on my part, so I presumed commenting on the PR that introduced the change was the most appropriate.a-lakhania-lakhani01/31/20 10:38:45 PM"Updated Clear Linux Installation Instructions

Changed the `swupd bundle-add` command to include missing dependencies, and added instructions to fix issues with finding fonts.conf.

In response to [issue 2990](https://github.com/alacritty/alacritty/issues/2990)."1
327507/15/18 01:10:33 PMPatrycja BalikAdd config for unfocused window cursor changeCurrently Alacritty changes the cursor to a hollow block shape when the window loses focus. While it's a reasonable default, some may prefer their normal configured cursor. This PR adds a config toggle for this, defaulting to using the hollow block.02/23/20 09:12:15 PMFixed Clear Linux installation instructions"Changed the swupd bundle-add command to include missing dependencies, and added instructions to fix issues with finding fonts.conf.

In response to #2990."1Wasn't sure about it being a bug or a problem on my part, so I presumed commenting on the PR that introduced the change was the most appropriate.a-lakhania-lakhani02/01/20 12:57:30 AM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
327611/01/18 05:23:49 PMChristian DuerrCreate a separate `cursor` field in the config"So after the #1079 PR had some interesting ways to name the variable it introduced, I kinda thought a bit about how I would have named it and came to the conclusion that the current cursor configuration could be simplified a bit.

### Current state

```yml
cursor_style: Block
hide_cursor_when_typing: true
custom_cursor_colors: false

colors:
    cursor:
        text: '0x000000'
        cursor: '0xffffff'
```

### Proposal
```yml
cursor:
    style: Block
    hide_when_typing: false

colors:
    cursor:
        custom_colors: true
        text: '0x000000'
        cursor: '0xffffff'
````

### Idea
The idea behind this new way to handle cursor settings in the alacritty yml is to make it simple to read and find the current cursor settings and allow expansion without any confusion.
By making the location and structure uniform, instead of having `cursor` at the start, middle or end, it might help users with finding the config variables they are looking for. If they are looking for a config setting and it's not in `cursor`, it probabl doesn't exist.

### Alternatives
A different solution than my proposal could be adding a `color` block inside the `cursor` block, so really everything related to `cursor` is inside of `cursor`. However then not everything related to `color` is in `color` and it might make the colorschemes in the wiki harder.

### Transition Period
If we would just switch to this new format, or any other format, the current config file would break. I don't think it's a good idea to completely break the config without giving users a timeframe where they can fix existing issues.

My recommendation would be to support both variants in an initial transition period and warn the user when using the ""old"" way of doing things. Then after a certain while we could remove support for the old way to use these settings.

Alternatively we could rewrite the config ourselves when detecting the old values for a certain amount of time and then remove this auto-converter once the transition period is over."02/13/20 05:59:49 AMV1 Refactor font crate a bitJust an idea on how to refactor things in font crate. =||= "I too think foreground and background make more sense, but if it was changed in the past for good reason I'm not trying to start a whole thing ;)

Either way I'd clearify the comment a little."kchibisova-lakhani02/01/20 12:57:30 AM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
327702/02/18 12:27:27 PMTrevor BentleySupport dead keys and AltGr on macOS02/02/20 09:17:05 PMFix non-scalable font resize issue =||= Didn't mean to open this.kchibisovKirill Chibisov02/02/20 05:47:26 PMUpdate style1
328001/19/20 03:41:37 PMBill Millbackground transparency goes away when I enter vim"Which operating system does the issue occur on? Mac OS X 10.13.3, alacritty `2466f81`

To reproduce:

1. Set up base16 colors in your terminal: https://github.com/chriskempson/base16-shell
2. Load up a base16 color scheme in vim: https://github.com/chriskempson/base16-vim/blob/master/colors/base16-twilight.vim is the particular one I use
3. notice that your vim background is no longer transparent. If you quit and return to the shell, the transparency returns
  a. in iterm2, with the same vimrc and bashrc, vim remains transparent"02/04/20 05:47:55 PMStart window invisible on Windows"It should make our Windows window creation follow other backends and start window invisible. However it was started visible on purpose, so I'm not sure whether it breaks something or not.

Could Windows folks test whether it breaks anything for them or not?"4"I have neovim `nvim 0.4.3` and `alacritty 0.7.2 (5ac8060)`

I tried (sequentially) the following lines after `colorscheme` in the `.vimrc` without success: 
```
hi Normal guibg=NONE ctermbg=NONE
hi Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE guifg=NONE ctermfg=NONE
```

I'm also sourcing the `.vimrc` in `vim ~/.config/nvim/init.vim` with the following lines
```
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
"" call plug#begin(g:plugged_home)
""     "" other plugins...
""     "" --------- adding the following three plugins for Latex ---------
""     Plug 'lervag/vimtex'
""     Plug 'Konfekt/FastFold'
""     Plug 'matze/vim-tex-fold'
""     "" other plugins...
"" call plug#end()
source ~/.vimrc
```

Edit: I just commented out the colorscheme line (namely from `colorscheme onedark` to `""colorscheme onedark` and the problem disappeared. At the same time I would like to not have to give up on the colorscheme. What should I do?

Edit 2: I found the solution: I simply had to add the following lines  in the `onedark` vim file according to the developper of the   
[onedark colorscheme](https://github.com/joshdick/onedark.vim)

```
if (has(""autocmd"") && !has(""gui_running""))
  augroup colorset
    autocmd!
    let s:white = { ""gui"": ""#ABB2BF"", ""cterm"": ""145"", ""cterm16"" : ""7"" }
    autocmd ColorScheme * call onedark#set_highlight(""Normal"", { ""fg"": s:white }) "" `bg` will not be styled since there is no `bg` setting
  augroup END
endif
```"kchibisovKirill Chibisov02/03/20 09:49:21 PMMerge branch 'master' into windows-visible1
328202/22/18 05:14:32 PMBulat MusinError creating GL context; Some of the requested attributes are not supported"I built(release) according to instructions.
When I run, it outputs message:
`Error creating GL context; Some of the requested attributes are not supported`
Ubuntu 17.10 - Wayland."02/07/20 06:50:19 AMFix selection expansion across full-width glyphs"Instead of trying to expand the start and end of a selection across
full-width glyphs, the selection should now only go from its origin to
the end without any kind of expansion.

Instead, the expansion is now done where the cells are actually checked
for their selection status, expanding across the entire full-width glyph
whenever any part of it is selected.

Fixes #3106."1@asymmetric, `env WAYLAND_DISPLAY= alacritty` worked.chrisduerrKirill Chibisov02/06/20 11:30:01 PMMerge branch 'master' into autoexpand-across-doublewidth1
328301/19/20 03:59:17 PMMaik KleinFlickering in neovim with completions"Which operating system does the issue occur on?

Arch

If on linux, are you using X11 or Wayland?

X11

I get flickering with alacritty when neovim draws the completion window. I tried to record it but the flickering does not appear in the gif below. This does not happen in urxvt.
![](https://i.imgur.com/VBalltx.gif)
Any ideas? It looks as if the completion window does not get drawn in the first frame after an redraw update."02/03/20 02:40:39 AMRemove unsetting of dirty flag on key press"There's no reason why we should ever manually set the terminal to not be
dirty, since this can lead to a lot of other logic being affected. This
also does not have any benefit and was likely added in the event loop
rework as a bug (probably should have been dirty = true)." =||= I've never seen a flickering in vim/neovim with completion recently, in any way, this issue seems like vim/neovim don't write content during one write call, which is really hard to do, and since alacritty drawing things fast you can see some flicking some times. However there're some escapes proposed in terminal-wg to solve it and it tracked here #2919 .chrisduerrChristian Duerr02/03/20 02:03:44 AM"Remove unsetting of dirty flag on key press

There's no reason why we should ever manually set the terminal to not be
dirty, since this can lead to a lot of other logic being affected. This
also does not have any benefit and was likely added in the event loop
rework as a bug (probably should have been dirty = true)."1
329602/18/18 07:58:13 PMDeleted usermac alt modifier broken"macOS 10.13.3

holding `alt + / => |` or `alt + n => ~` does somehow not work for me anymore 
"02/05/20 10:59:16 PMAdd notes about multiple bindings for the same keys + mods + mode. Adding a line in the alacritty.yml to mention the ability to assign multiple actions to a trigger. As requested by #3273. =||= There's an outstanding bug in winit to properly support non-US-QWERTY layouts. The bug is basically that the keymap is applied for _received characters_, but not for _key codes_. I believe this is a duplicate of #458.Brainface1BrainFace02/05/20 09:21:26 PM"Update alacritty.yml

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
330602/07/18 04:53:59 PMThomas BonkSome unicode characters aren't displayed anymore since #1061 has been merged"Which operating system does the issue occur on?
Mac OS

Some unicode characters aren't displayed anymore since #1061 has been merged. Pasting or echoing ✖ (U+2716) used to display the right symbol. Now an empty space is rendered instead. 
"02/07/20 06:44:23 AMUpdate glutin dependency to 0.23.0"An update was pushed to the dependency [`glutin`](https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md#version-0230-2020-02-06), which fixes https://github.com/alacritty/alacritty/issues/3191.

Tested with Sway on Linux, and it fixes that issue for me."1There's an outstanding bug in winit to properly support non-US-QWERTY layouts. The bug is basically that the keymap is applied for _received characters_, but not for _key codes_. I believe this is a duplicate of #458.doublej472Jonathan Frederick02/07/20 06:12:47 AM"Update glutin dependency to 0.23.0

This includes an update from winit, which fixes issue #3191"1
330705/14/18 07:37:15 PMJoe MoonSet $LANG env var using languageCode, countryCode"fixes #993 

Using logic from https://github.com/gnachman/iTerm2/blob/79aff4d59fd591e7628649bcabe5f27541740bf6/sources/PTYSession.m#L1703"02/07/20 01:44:13 PMUpdate glutin to v0.23.0"Fixes #3191.
Fixes #3150.
Fixes #1465.
Fixes #1359."2great; thanks!kchibisovKirill Chibisov02/07/20 11:16:29 AMUpdate style1
331011/28/20 03:01:37 PMNoneWhen Capslock is remapped to Ctrl it must be pressed twice to register"Manjarro Linux, X11

I have my Control C and Control V mappings defined in Alacritty.yml and they work correctly with the Ctrl key - but when using the CapsLock key which is remapped to the Ctrl key it requires that the CapsLock be pressed twice sequentially before it will copy or paste or do anything requiring Ctrl. "02/07/20 11:39:39 PMExplicitly state that we're not creating config file"I think we should explicitly state that, since amount of questions on IRC and our issue tracker is increasing. I feel like it wasn't really obvious tbh.


cc @cole-h to check wording etc." =||= @kamranjon Can you still repro this?kchibisovKirill Chibisov02/07/20 08:05:49 PMUpdate wording1
331502/05/18 07:11:55 AMDeleted userImage display with w3mimgdisplay almost works (?)"I'm on x11, and this happens in a plain old session. Package manager says `alacritty-unstable-2017-12-29`.

Using the script from the bottom of this page: http://blog.z3bra.org/2014/01/images-in-terminal.html image display seems to almost work on alacritty. The image displays for a spit second and disappears while flickering.

Is this the current expected behavior?"03/18/20 02:35:09 AMAdd modal keyboard motion mode"This implements a basic mode for navigating inside of Alacritty's
history with keyboard bindings. They're bound by default to vi's motion
shortcuts but are fully customizable. Since this relies on key bindings
only single key bindings are currently supported (so no `ge`, or
repetition).

Other than navigating the history and moving the viewport, this mode
should enable making use of all available selection modes to copy
content to the clipboard and launch URLs below the cursor.

This also changes the rendering of the block cursor at the side of
selections, since previously it could be inverted to be completely
invisible. Since that would have caused some troubles with this keyboard
selection mode, the block cursor now is no longer inverted when it is at
the edges of a selection.

Fixes #262."43"I still think its pretty cool.

it would be neat if w3m image display stuff worked eventually because i could display network graphs in my terminal. :D"chrisduerrChristian Duerr03/17/20 12:57:16 AMClear selection on escape1
332002/05/18 10:28:13 AMPaul KnopfProvided binary build somewhere."Maybe you can occasionally create some GitHub release?

I am on Arch, and ```alacritty-git``` has many large dependencies and takes ~5 minutes to compile, all for a single ~5MiB file."02/10/20 11:41:49 PM"Revert ""Fix backspace deleting chars when IME is open""""This reverts commit 7f4dce2ee04859fb0b48f15cf808b60065778703.

Originally it was assumed that macOS always sends the \x7f on backspace
anyways, however this is not true. It seems like the character on
backspace can change even within the same terminal session, so we need
to have our own binding to reliably set the correct binding.

A solution for #1606 should be implemented in cooperation with winit.

Fixes #3317.
Breaks #1606." =||= Looks like a duplicate of https://github.com/jwilm/alacritty/issues/927. [This comment](https://github.com/jwilm/alacritty/issues/927#issuecomment-348594235) may be of interestchrisduerrChristian Duerr02/10/20 10:25:57 PMFix clippy errors1
332202/05/18 11:39:52 AMFatih ArslanPaste selection from system clipboard in Vim doesn't work"Which operating system does the issue occur on: **macOS (10.13.3 (17D2047))**

I've double checked the issue on iTerm2 with the same vimrc config and Vim version and it works as intended. I also installed latest NeoVim, it also work with it Alacritty

But I can't anymore paste anything from system clipboard to Vim (tried `""*p`as well) in Alacritty. I think something is different on Alacritty but I'm not able to find it. 

Here is my vimrc: https://github.com/fatih/dotfiles/blob/master/vimrc 
Here is my alacritty.yml: https://github.com/fatih/dotfiles/blob/master/alacritty.yml

Let me know if you need anything else. "06/23/20 09:57:16 AMAdd selection expansion"This allows for expanding the selection using the shift key. The new
selection type depends on the number of clicks and applies to both sides
of the selection.

Fixes #1554."2Seems like it was a regression on Vim side. Is fixed when I updated to`8.0.1450`chrisduerrChristian Duerr06/23/20 09:14:05 AMSeparate click state computation1
332711/01/18 05:23:49 PMChristian DuerrRework cursor configuration"The cursor configuration has been reworked based on the proposal made in
jwilm/alacritty#1080. This moves the `custom_cursor_colors` into the
`culors.cursor` struct, cleans up the deserialization of primary and
cursor colors and moves all other cursor configuration in a new `cursor`
config field.

I'm proposing this as one potential implementation to improve cursor configuration.
If there are any changes desired that haven't been stated in the RFC, I'd love to
incorporate them in this PR.

This also updates all dependencies to get back on track with clippy.

This fixes #1080."02/11/20 11:50:21 PMBump vte and urlocator"Fixes #3247." =||= "This PR initially put the `hide_cursor_when_typing` variable under
`cursor.hide_when_typing`. However this field is completely unrelated to
the cursor, but instead relates to the mouse cursor.

Since the word `cursor` is already used for the active cell in the grid
of a terminal emulator, all occurences of the word `cursor` when talking
about the mouse have been replaced with the word `mouse`.

The configuration option has also been moved to
`mouse.hide_when_typing`, to make it clear what this option is changing."chrisduerrChristian Duerr02/11/20 11:32:27 PMDowngrade winpty1
332902/05/18 05:51:37 PMDeleted userScript to convert Konsole .colorscheme to Alacritty color scheme "I made a script to convert Konsole .colorscheme files to Alacritty's yaml format.
Putting it here so that maybe it's useful for someone. (I don't know where else to put it.)
It needs python 3 and pyyaml. You run it on files like `python3 converter.py /share/konsole/Linux.colorscheme`.

I don't know if there's any other tools that use a similar (ini) format for colors, so this probably won't be useful for anything else. 

```python
#Note this does not generate the 'cursor:' section becuase I don't know what would correspond to that.
#I also dont know if theres an equivalent light/dark for the foreground/background so those are ignored.
#Also alacritty does not have ""dark"" colors. (?)

import sys
import configparser as confp #ini format
import yaml
import collections

#fixes extraneous stuff when yaml-ing a defaultdict
from yaml.representer import Representer
yaml.add_representer(collections.defaultdict, Representer.represent_dict)

confpath = sys.argv[1]
c = confp.ConfigParser() 
c.read(confpath)

colormap = {
	'Color0':'black',
	'Color1':'red',
	'Color2':'green',
	'Color3':'yellow',
	'Color4':'blue',
	'Color5':'magenta',
	'Color6':'cyan',
	'Color7':'white',
	'Foreground':'foreground',
	'Background':'background',
	}

typemap = {
	'Intense':'bright',
	'Faint':'dark',
	'#default#':'normal'
	}

def stype(s):
	for k,v in typemap.items():
		if s.endswith(k):
			return v
	return typemap['#default#']

def ctype(sb):
	for k,v in colormap.items():
		if s.startswith(k):
			return v
	raise NotImplementedError

def hexcolor(s):
	tohex = lambda x: ""{0:02x}"".format(int(x))
	return ""0x%s"" % """".join([tohex(x) for x in s.split("","")])

data = { 'colors' : collections.defaultdict(dict) }

for s in c.sections():
	if ""color"" in c[s] and stype(s) is not ""dark"":
		if ctype(s) in [""foreground"",""background""]:
			if stype(s) == ""normal"":
				data['colors'][""primary""][ctype(s)] = hexcolor(c[s]['color'])
			else:
				pass
			continue
		data['colors'][stype(s)][ctype(s)] = hexcolor(c[s]['color'])

print(yaml.dump(data, default_flow_style=False))
```

Example output is:
```yaml
colors:
  bright:
    black: '0x686868'
    blue: '0x5454ff'
    cyan: '0x54ffff'
    green: '0x54ff54'
    magenta: '0xff54ff'
    red: '0xff5454'
    white: '0xffffff'
    yellow: '0xffff54'
  normal:
    black: '0x000000'
    blue: '0x1818b2'
    cyan: '0x18b2b2'
    green: '0x18b218'
    magenta: '0xb218b2'
    red: '0xb21818'
    white: '0xb2b2b2'
    yellow: '0xb26818'
  primary:
    background: '0x000000'
    foreground: '0xb2b2b2'
```
to which you should add something like
```yaml
  cursor:
    text: '0x2E3440'
    cursor: '0xD8DEE9'
```"02/13/20 05:02:24 PMAdd a new cursor style: Glass."Glass looks like just a Hollow cursor (unfocused window), except the
interior is semi-transparent.

Subjectively this is a fancier looking cursor compared to other variants. 

Disclaimer: I have 0 clue about Rust - - the change seemed easy enough and the compiler didn't really complain :)"7"Well, I didn't know about https://github.com/stayradiated/termcolors , I guess if I were to add ""konsole"" import it would probably be able to do the conversion."pinkfluidMitja HORVAT02/12/20 08:46:21 AM"Add a new cursor style: Glass.

Glass looks like just a Hollow cursor (unfocused window), except the
interior is semi-transparent."1
333008/25/18 10:51:16 AMDeleted userWorkaround until pasting is fixed"I've noticed a few open issues related to pasting, and some things are strange for me as well, so until that's fixed I've come up with a workaround involving tmux.

A recent (1 month ago) version of tmux is necessary since the functionality of this to work properly was only just added: https://github.com/tmux/tmux/commit/5849b73b81c1218e57e9931c44e82f0d7c468cb1

My solution is to create a key binding in my `.tmux.conf` that pastes from xclip:
```
#hack fix alacritty pasting
bind -n C-v pipe-pane -I ""xclip -o -selection clipboard""
```

~~I can't bind the default C-shift-v key because tmux doesn't support that, and terminal emulators don't really either I guess. :P~~ You can bind actions in .alacritty.yml! I'm open to suggestions on how to make this work.

This seems to work pretty well. Caveat emptor?"02/12/20 08:24:25 PMFix display_offset computation when on top of scrollback"Regression was introduced in 4cc6421daa4ff5976ab43c67110a7a80a36541e5,
however it was working before only due to grid.len() bug."1I don't quite see the origin of this issue and it should be possible to automate it with the Alacritty config. So since the user has been deleted, I'm closing this issue.kchibisovKirill Chibisov02/12/20 10:36:48 AM"Fix display_offset computation when on top of scrollback

Regression was introduced in 4cc6421daa4ff5976ab43c67110a7a80a36541e5,
however it was working before only due to grid.len() bug."1
333403/09/18 06:48:14 PMChristian DuerrRename `faux_scrollback_lines` to `_scrolling_`"I've noticed that in the config the setting for the faux scrolling is
called `faux_scollback_lines`. I've probably got confused when writing
that PR because it should be `faux_scrolling_lines` since this has
nothing to do with a scrollback buffer.

This is just a tiny nitpick about a name I've made up myself, but I feel
like it could help making things a lot more clear in the future.

Currently both options are still available, but `faux_scrollback_lines`
has been deprecated.

This also updates all dependencies to make the travis clippy check work."02/13/20 10:22:03 PMBeam and Underline cursors width computation to be more visible"" =||= I don't quite see the origin of this issue and it should be possible to automate it with the Alacritty config. So since the user has been deleted, I'm closing this issue.kchibisovChristian Duerr02/13/20 08:44:49 PMFix English1
333601/19/20 04:15:20 PMNonesetting decorations to false crashes Gnome under Linux"When I'm setting `decorations: false` GNOME crashes.

Which operating system does the issue occur on?
I'm on Arch using the aur repo install

If on linux, are you using X11 or Wayland?
Yes, GNOME/Wayland

I'm happy to provide more info if necessary
"02/26/20 09:29:15 PMCache FreeType faces instead of loading new"This commit introduces a cache for all loading faces, and replaces `Face` with `FaceLoadingProperties`, since we don't need to carry faces around, only loading options for them. It also removes `FontID` in favor of building `FontKey` right away.

I'd also like to test an idea of returning `FaceLoadingProperties` over `FontKey`, however it'll likely require to use `Rc` boxes or cloning them. So I'd like to test performance of the solution mentioned in this paragraph.

In addition, I think it'll be nice to add an API for rasterizer to remove curtain keys from use, since now they're kind of persistent, but I'm not sure that it's up to this PR." =||= Gnome on Wayland + Gnome on X11 works with recent version of alacritty fine without decorations.kchibisovKirill Chibisov02/26/20 03:39:37 AM"Update font/src/ft/mod.rs

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
333707/28/18 11:13:50 AMSven GrunewaldtPressing the global hotkey for 1password causes a 'c' to appear in Alacritty"I don't think this is specific to 1password, but that hotkey is the only one where I experience issues.

Pressing `Alt + Cmd + \` opens the global 1password overlay. I use this frequently to copy server passwords for SSH/sudo. Pressing this key combination in Alacritty causes a `c` to appear in the terminal, obviously messing with a paste in hidden inputs like sudo.

Alacritty rev 2466f81d, macOS 10.13.3"02/14/20 07:35:35 AMAdd seconds and nanoseconds to log output1Sorry, I stopped using Alacritty a while ago since iTerm2 supports metal rendering so I can't confirm this is still happening.chrisduerrKirill Chibisov02/14/20 04:15:08 AMMerge branch 'master' into log-seconds1
334202/06/18 07:05:19 PMVlad TutuneaTmux and Nvim not found - even though they are installed"Which operating system does the issue occur on?
macOS High Sierra - latest updates

As per screenshot
<img width=""243"" alt=""screen shot 2018-02-06 at 09 12 29"" src=""https://user-images.githubusercontent.com/3762924/35850827-ff97aa10-0b1d-11e8-985b-1aa9ec3b63a4.png"">

If I use the Terminal.app or iTerm, those apps work fine. Is it a zsh issue?

"02/15/20 10:25:03 AMAdd custom merge strategy for CHANGELOG.md"The merge strategy `union` should hopefully reduce the number of
conflicts when trying to rebase the configuration file, since most of
the changes are simple additions anyways." =||= This is likely to be the issue, thanks for pointing that out. Closing as duplicate, please reopen if it is a different problem.chrisduerrChristian Duerr02/15/20 02:20:36 AM"Add custom merge strategy for CHANGELOG.md

The merge strategy `union` should hopefully reduce the number of
conflicts when trying to rebase the configuration file, since most of
the changes are simple additions anyways."1
334302/07/18 04:53:59 PMJoe Moonfix fallbacks in macosfixes #108602/15/20 08:00:54 PMFix parser stopping at unknown modes"This resolves an issue in the parser where it would stop as soon as the
first unknown value is encountered in private mode/sgr attribute
escapes.

Fixes #3339."2Thanks!chrisduerrChristian Duerr02/15/20 05:51:10 PMAdd cognitive complexity exception1
334609/28/18 08:29:50 PMClemens SchwaighoferDoes not render some UTF8 characters"Which operating system does the issue occur on?

macOS 10.12.6

sample line from Terminal.app visible:
set listchars=tab:\→\ ,trail:▫︎,nbsp:•,eol:¶,extends:»,precedes:«

in Alcritty
listchars=tab:\�F~R\ ,trail:�V�N,nbsp:�@,eol:¶,extends:»,precedes:«
"02/17/20 04:24:28 PMExtract winpty crate"The winpty crate and its winpty-sys depedency have been moved to
https://github.com/alacritty/winpty." =||= Seems like the locale issue has been fixed in #1087. Closing as resolved.chrisduerrChristian Duerr02/17/20 01:37:08 AMUpdate lockfile1
335210/02/18 09:13:32 PMVijay BambhaniyaCreate twitter handle for updates and changes."This less of an issue and more of a request.

I am really interested in `Alacritty`, but lack of information update whats new and new updates and stuff is kinda making me not to use. because i am always waiting for the stable version. So, if possible, please create twitter handle for `alacritty` to provide updates about project and production use cases and some `config` tricks. 

sorry, for raising the issue, but I couldn't find any other place to put this request.  "02/18/20 12:15:06 AMUpdate README.mdadded alpine instructions to readme =||= "I think the new CHANGELOG file should resolve problems with not knowing exactly what changed in the recent versions of Alacritty.

New releases should also advertise new versions on github, see #80 for tracking that.

Jwilm has also created two blog posts already for the major Alacritty updates, you can find it on jwilm.io and it also links to his twitter handle, where you should be able to see when new blogs are released.

The subreddit /r/alacritty exists, however it is not active. However if you want to see more activity there, feel free to contribute.

If you want to discuss Alacritty, ask questions and follow the current development, the #alacritty IRC channel is also available and always active.

I think all these channels should provide sufficient means to stay up-to-date with Alacritty. Also please note that any additional channels always introduce additional work which can't be put into improving Alacritty itself. I'm not active on Twitter at all for example, so that wouldn't be an option for me. However I think that the channels Alacritty provides are sufficient for getting informations about all important changes."bgkillasbgkillas02/17/20 11:33:17 PMUpdate README.md1
335909/28/18 08:40:41 AMSeweryn NiemiecAlacritty hangs in a loop consuming all memory when font.offset.x is too low"OS: Linux/X11 (Ubuntu 16.04)
Version: git master/cc87390edee9d28d9e7456c6ac0cf3a6b7a096c2

For my previous version of Alacritty I have configured `font.offset.x = -12` to get a nice looking UbuntuMono Nerd Font. The current version doesn't like it. Changing value to '-5' or more solves the problem, but eating all available memory is not a good behaviour for any app."02/19/20 09:24:51 PMFix discarding of FreeType loading flagsFixes #3355. =||= This has been fixed a while ago. Alacritty should now panic with an appropriate error message.kchibisovKirill Chibisov02/19/20 05:34:21 PMRemove historical artifact1
336207/21/18 06:05:15 PMyshuiSupport PixelMode::LcdVThis fixes #1039.02/22/20 11:09:23 PMDon't round pixelsize before quering5works for me and would close #1039kchibisovKirill Chibisov02/22/20 06:43:25 PM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
336602/08/18 07:15:15 PMSteven Ludual width characters break rendering"Which operating system does the issue occur on? macOS El Capitan (also seen on High Sierra)

Any time this character gets echoed it messed up spacing and lines. You can just run `echo '⚡'` or something and it will screw things up. Seems like it gets rendered as a dual width character but not really. Anyway, it's weird. This char appears in my oh-my-zsh gitstatus $RPROMPT. 

It also does occur to me that this could be a quirk related to the exact font that i'm using, however iTerm with the same font does not have a problem.

For now I am hacking my omz git status plugin config to switch the char for a different one. "02/21/20 11:04:25 PMAdd two missing cursor styles in the documentation3"I believe i have seen this issue before, years ago, in different terminals. Mainly the curses style logic tends to get broken if a character is assumed to be single width but consumes two spaces in the terminal, as that affects wrapping. 

So maybe the real error is actually in the font. I don't know... this casts doubt on the terminal emulator being the culprit. "r00ster91r00ster02/21/20 10:06:51 PMAdd two missing cursor styles in the documentation1
336807/15/18 01:11:20 PMyshuiPass right and middle clicks to the application02/22/20 02:42:45 AMFix block selection including last column"The block selection will now only insert extra newline characters after
each line if the last line isn't already included. This resolves an
issue with duplicate newlines, since newlines are automatically appended
when the last column is part of a selection.

Fixes #3304." =||= Closing this since it's implemented in fb43c73 and there has been no comment stating otherwise.chrisduerrChristian Duerr02/22/20 01:53:36 AM"Fix block selection including last column

The block selection will now only insert extra newline characters after
each line if the last line isn't already included. This resolves an
issue with duplicate newlines, since newlines are automatically appended
when the last column is part of a selection.

Fixes #3304."1
336902/13/18 06:14:35 PMBrett JonesCTRL+6 does not work"Which operating system does the issue occur on?
macOS

In ViM, `CTRL+6` is used to toggle between two most recent buffers. This key combo doesn't register with Alacritty. I've looked for conflicting key combos and I don't see any. Here is my config. 

```yaml
---
# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 116
    lines: 38

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 15
    y: 15

  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: true

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Fira Code
    style: Regular

  # The bold font face
  bold:
    family: Fira Code
    style: Regular

  # The italic font face
  italic:
    family: Fira Code
    style: Regular

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0.0
    y: 0.0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0.0
    y: 0.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false

colors:
  primary:
    background: '0x2E3440'
    foreground: '0xD8DEE9'
  cursor:
    text: '0x2E3440'
    cursor: '0xD8DEE9'
  normal:
    black: '0x3B4252'
    red: '0xBF616A'
    green: '0xA3BE8C'
    yellow: '0xEBCB8B'
    blue: '0x81A1C1'
    magenta: '0xB48EAD'
    cyan: '0x88C0D0'
    white: '0xE5E9F0'
  bright:
    black: '0x4C566A'
    red: '0xBF616A'
    green: '0xA3BE8C'
    yellow: '0xEBCB8B'
    blue: '0x81A1C1'
    magenta: '0xB48EAD'
    cyan: '0x8FBCBB'
    white: '0xECEFF4'

# Visual Bell
#
# Any time the BEL code is received, Alacritty ""rings"" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  faux_scrollback_lines: 1

selection:
  semantic_escape_chars: "",│`|:\""' ()[]{}<>""

dynamic_title: true

hide_cursor_when_typing: false

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor_style: Block

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /usr/local/bin/zsh
  args:
    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: ""alacritty"", args: [""-e"", ""vttest""] } }
key_bindings:
  - { key: Space,    mods: Control,   chars: ""\x00""                      }
  - { key: F,        mods: Alt,       chars: ""\x1bf""                     }
  - { key: B,        mods: Alt,       chars: ""\x1bb""                     }
  - { key: D,        mods: Alt,       chars: ""\x1bd""                     }
  - { key: Period,   mods: Alt,       chars: ""\x1b.""                     }
  - { key: Key8,     mods: Alt|Shift, chars: ""\x1b*""                     }
  - { key: Key3,     mods: Alt|Shift, chars: ""\x1b#""                     }
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Back,     mods: Alt,     chars: ""\x1b\x7f""                    }
  - { key: Insert,                  chars: ""\x1b[2~""                     }
  - { key: Delete,                  chars: ""\x1b[3~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: F1,       mods: Shift,   chars: ""\x1b[1;2P""                   }
  - { key: F2,       mods: Shift,   chars: ""\x1b[1;2Q""                   }
  - { key: F3,       mods: Shift,   chars: ""\x1b[1;2R""                   }
  - { key: F4,       mods: Shift,   chars: ""\x1b[1;2S""                   }
  - { key: F5,       mods: Shift,   chars: ""\x1b[15;2~""                  }
  - { key: F6,       mods: Shift,   chars: ""\x1b[17;2~""                  }
  - { key: F7,       mods: Shift,   chars: ""\x1b[18;2~""                  }
  - { key: F8,       mods: Shift,   chars: ""\x1b[19;2~""                  }
  - { key: F9,       mods: Shift,   chars: ""\x1b[20;2~""                  }
  - { key: F10,      mods: Shift,   chars: ""\x1b[21;2~""                  }
  - { key: F11,      mods: Shift,   chars: ""\x1b[23;2~""                  }
  - { key: F12,      mods: Shift,   chars: ""\x1b[24;2~""                  }
  - { key: F1,       mods: Control, chars: ""\x1b[1;5P""                   }
  - { key: F2,       mods: Control, chars: ""\x1b[1;5Q""                   }
  - { key: F3,       mods: Control, chars: ""\x1b[1;5R""                   }
  - { key: F4,       mods: Control, chars: ""\x1b[1;5S""                   }
  - { key: F5,       mods: Control, chars: ""\x1b[15;5~""                  }
  - { key: F6,       mods: Control, chars: ""\x1b[17;5~""                  }
  - { key: F7,       mods: Control, chars: ""\x1b[18;5~""                  }
  - { key: F8,       mods: Control, chars: ""\x1b[19;5~""                  }
  - { key: F9,       mods: Control, chars: ""\x1b[20;5~""                  }
  - { key: F10,      mods: Control, chars: ""\x1b[21;5~""                  }
  - { key: F11,      mods: Control, chars: ""\x1b[23;5~""                  }
  - { key: F12,      mods: Control, chars: ""\x1b[24;5~""                  }
  - { key: F1,       mods: Alt,     chars: ""\x1b[1;6P""                   }
  - { key: F2,       mods: Alt,     chars: ""\x1b[1;6Q""                   }
  - { key: F3,       mods: Alt,     chars: ""\x1b[1;6R""                   }
  - { key: F4,       mods: Alt,     chars: ""\x1b[1;6S""                   }
  - { key: F5,       mods: Alt,     chars: ""\x1b[15;6~""                  }
  - { key: F6,       mods: Alt,     chars: ""\x1b[17;6~""                  }
  - { key: F7,       mods: Alt,     chars: ""\x1b[18;6~""                  }
  - { key: F8,       mods: Alt,     chars: ""\x1b[19;6~""                  }
  - { key: F9,       mods: Alt,     chars: ""\x1b[20;6~""                  }
  - { key: F10,      mods: Alt,     chars: ""\x1b[21;6~""                  }
  - { key: F11,      mods: Alt,     chars: ""\x1b[23;6~""                  }
  - { key: F12,      mods: Alt,     chars: ""\x1b[24;6~""                  }
  - { key: F1,       mods: Command, chars: ""\x1b[1;3P""                   }
  - { key: F2,       mods: Command, chars: ""\x1b[1;3Q""                   }
  - { key: F3,       mods: Command, chars: ""\x1b[1;3R""                   }
  - { key: F4,       mods: Command, chars: ""\x1b[1;3S""                   }
  - { key: F5,       mods: Command, chars: ""\x1b[15;3~""                  }
  - { key: F6,       mods: Command, chars: ""\x1b[17;3~""                  }
  - { key: F7,       mods: Command, chars: ""\x1b[18;3~""                  }
  - { key: F8,       mods: Command, chars: ""\x1b[19;3~""                  }
  - { key: F9,       mods: Command, chars: ""\x1b[20;3~""                  }
  - { key: F10,      mods: Command, chars: ""\x1b[21;3~""                  }
  - { key: F11,      mods: Command, chars: ""\x1b[23;3~""                  }
  - { key: F12,      mods: Command, chars: ""\x1b[24;3~""                  }

```"06/22/20 12:39:58 AMFix rotation of ongoing selection"This makes sure that the beginning of the selection is not rotated when
the mouse button is still pressed.

Fixes #3232."2"@quinoa42 that did the trick! Thanks!

```
  - { key: Key6,        mods: Control, chars: ""\x1e""                     }
```"chrisduerrChristian Duerr02/22/20 05:23:34 PMFix rotation of keyboard mode1
337102/10/18 02:32:51 PMPatryk MałekGit pretty format white color is displayed as grey"Which operating system does the issue occur on? Ubuntu 14.04

If on linux, are you using X11 or Wayland? X11

when using the following `git` command:

    git log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim blue)- %an%C(reset)'

I get:

![image](https://user-images.githubusercontent.com/739996/36061434-76948e1e-0e5a-11e8-9c0b-b7c8c7a21889.png)


when I change it to:

    git log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(reset)%s%C(reset) %C(dim blue)- %an%C(reset)'

![image](https://user-images.githubusercontent.com/739996/36061440-8512a796-0e5a-11e8-8f10-5d048be0ac72.png)


The difference in commands is that when commit message is displayed greyed out I use `white` as color format. When it's properly displayed as white I use `reset` color.

I use alacritty `cc87390` with 

```
rustc -V
rustc 1.23.0 (766bd11c8 2018-01-01)
```"02/23/20 01:55:30 AMFix config reload updating incorrect grid =||= "Ok, well it seems I have forgotten about my config in home directory...
It's all perfectly fine after I have merged those 2.

Thanks a lot for support and keep up the good work : )"chrisduerrChristian Duerr02/23/20 01:19:16 AMFix config reload updating incorrect grid1
337202/25/18 09:13:11 PMEyvind Bjarti AndersenCall from script"How would you call Alacritty from a script?.  In urxvtc you'd for example do:` urxvtc -e sh -c ""your command""`"02/23/20 08:54:44 PMExplicitly state default TERM value in configWell, since the first value is `alacritty` and not `xterm-256color` we should likely explicitly state it in alacritty.yml placeholder value.2Closing this because it seems solved to me. If you can't make this work, please re-open.kchibisovKirill Chibisov02/23/20 04:13:11 AMMerge branch 'master' into config-term1
337803/13/18 01:39:23 AMMarcel RobitailleNo window decorations in openbox after update"Ever since a resent system update, Alacritty does not have window decorations. Even if I press Alt+Space to get the openbox window menu and I click ""Un/Decorate"", there are still no decorations.

Which operating system does the issue occur on?
`uname -a`:
```
Linux Zeus 4.15.2-2-ARCH #1 SMP PREEMPT Thu Feb 8 18:54:52 UTC 2018 x86_64 GNU/Linux
```

If on linux, are you using X11 or Wayland?
X11

`alacritty -V`:
```
alacritty 0.1.0
```"03/02/20 05:32:19 AMfix #3377 changing scroll px info to f32"`fn scroll_terminal(&mut self, new_scroll_px: f32) ` used a `i32` as the parameter. when scrolling slowly the inputs were ignored because 
```rust
MouseScrollDelta::PixelDelta(lpos)
print!(lpos.y) //this prints values less than 1 when scrolling really slow....
print!(lpos.y as i32) // this prints 0 when scrolling really slow
```"2I think it was a problem with my config. I did a `git reset --hard HEAD` in my dotfiles (so unfortunately I don't know what the problem was) and now everything is fine.toger5Timo Kandra02/26/20 08:04:51 AMFix ignoring of slow touchpad scrolling1
337902/13/18 04:36:26 PMOliver Jan KrylowInstall instructions via cargo --git03/01/20 03:55:29 PMAdd kinetic scrolling"Kinetic scrolling when using the trackpad as the input device.

I am not at all certain about the implementation (new to both: the codebase of alacritty and winit...)
Feedback is very welcome."9I think it was a problem with my config. I did a `git reset --hard HEAD` in my dotfiles (so unfortunately I don't know what the problem was) and now everything is fine.toger5Timo Kandra02/26/20 07:47:50 AMAdd kinetic scrolling1
338201/07/19 12:44:06 PMDaniel BluhmKorean input causes panic"Which operating system does the issue occur on?
Fedora 27, using `cargo run` from a fresh git clone
If on linux, are you using X11 or Wayland?
On Wayland but used `WAYLAND_DISPLAY= `

![alacritty-hangeul](https://user-images.githubusercontent.com/22032832/36083622-95d7ad84-0f71-11e8-8fc3-f9e6d7b0318e.gif)

Hopefully this gif makes it clear what happens. On completion of a block in Korean, the terminal crashes with the error shown above.

Any thoughts? Thanks for your help!"02/27/20 11:42:39 PMRemove unnecessary macos focus check"Since winit now filters out clicks on unfocused windows on macOS
anyways, we don't need to implement this logic ourselves anymore."1The upstream issue has been fixed.chrisduerrChristian Duerr02/26/20 09:26:51 PM"Remove unnecessary macos focus check

Since winit now filters out clicks on unfocused windows on macOS
anyways, we don't need to implement this logic ourselves anymore."1
338302/28/18 07:52:42 PMSam RijsUpgrade dependencies"This patch updates `Cargo.lock` to pick up in-range updates, and bumps the `euclid` and `gl_generator` dependencies.

As a suggestion, it also includes a dependency status badge in the `README.md`. Let me know if you want to keep it!"02/27/20 10:33:29 PMAdd notes about '#rrggbb' notation3"Updated `glutin` to prevent a ""Backend not found"" bug on machines with ancient XRandr versions.

Clippy for this build will probably fail due to https://github.com/rust-lang/rust/issues/48551. This should be fixed with the next nightly release."kchibisovKirill Chibisov02/27/20 01:20:25 AM"Update alacritty.yml

Co-Authored-By: Cole Helbling <cole.e.helbling@outlook.com>"1
338402/05/19 11:00:14 PMJTFails to build with incremental compilation turned on"Which operating system does the issue occur on?

macOS

```
Jonathans-MacBook-Pro:alacritty jonathanturner$ cargo build --release
   Compiling alacritty v0.1.0 (file:///Users/jonathanturner/Source/alacritty)
error: can't perform LTO when compiling incrementally
```

That's with CARGO_INCREMENTAL=""1"".  Since incremental compilation will likely be the default in the future, this is probably worth fixing.  (of course, I might have something wrong in my own configuration that's causing it...)"02/28/20 02:28:16 AMFix message bar not hiding after fixing color in config"" =||= "@peddermaster2 I would have thought they'd change this to automatically imply `incremental = false` once this lands for releases, but looks like that's not the case for nightly? Which is odd since this would qualify as a breaking change imho.

I've written a PR to fix it here: https://github.com/jwilm/alacritty/pull/2081.

No matter what happens in stable, this should keep us on the safe side."kchibisovChristian Duerr02/28/20 01:55:42 AMFormat code1
338502/15/18 11:42:16 AMNoneCompile times. Weird linkage?"I just installed Alacritty from the AUR. The build time was *very* slow:
```
    Finished release [optimized + debuginfo] target(s) in 875.61 secs
```

Is this expected?

I thought it had hanged or something the first time, so I build it with `RUSTFLAGS=""-Z time-passes""`, and what's weird is that most of the time (600s) is spent in the last `LLVM passes`, in which there is first a block of these
```   
    time: 0.000; rss: 575MB	decode freetype-f892061e85bc67cd.freetype0-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 575MB	decode freetype-f892061e85bc67cd.freetype1-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 575MB	decode freetype-f892061e85bc67cd.freetype10-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 575MB	decode freetype-f892061e85bc67cd.freetype11-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 575MB	decode freetype-f892061e85bc67cd.freetype12-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype13-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype14-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype15-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype2-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype3-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype4-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype5-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype6-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype7-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype8-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype-f892061e85bc67cd.freetype9-450509bceb3fae04fb853f6a119864c9.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode bitflags-fee6d332a25cca0f.bitflags0-ae9ec4c1325a0e8459b9db5af6da137a.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode fontconfig-09cc6a751bfafb68.fontconfig0-30edfe1c4860aa9f637f6a31f7640c1.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode fontconfig_sys-0bf785c3735e81bc.fontconfig_sys0-f901e294a35b9b3d612598fca6e4bd44.rs.rcgu.bc.z
    time: 0.000; rss: 576MB	decode freetype_sys-ca7866cc9a2858d2.freetype_sys0-5ab4048ede8755cabb4ed16a48eddc72.rs.rcgu.bc.z
```

followed by a block of these:

```
    time: 0.287; rss: 832MB	ll link ""mio_more0-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.310; rss: 832MB	ll link ""mio_more1-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.274; rss: 832MB	ll link ""mio_more10-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.291; rss: 832MB	ll link ""mio_more11-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.274; rss: 832MB	ll link ""mio_more12-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.259; rss: 832MB	ll link ""mio_more13-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.268; rss: 832MB	ll link ""mio_more14-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.261; rss: 832MB	ll link ""mio_more15-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.261; rss: 832MB	ll link ""mio_more2-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.260; rss: 832MB	ll link ""mio_more3-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.269; rss: 832MB	ll link ""mio_more4-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.261; rss: 832MB	ll link ""mio_more5-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.261; rss: 832MB	ll link ""mio_more6-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.259; rss: 832MB	ll link ""mio_more7-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.260; rss: 832MB	ll link ""mio_more8-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.315; rss: 832MB	ll link ""mio_more9-a95bb7e5d0a7b0e0b7c68210e76d9013.rs""
    time: 0.261; rss: 832MB	ll link ""lazycell0-746a27a02c3dba2e531f560891cc9cdf.rs""
    time: 0.268; rss: 832MB	ll link ""mio0-e71b4ee8ec3c664c9699c68e87afefe8.rs""
    time: 0.266; rss: 832MB	ll link ""mio1-e71b4ee8ec3c664c9699c68e87afefe8.rs""
    time: 0.321; rss: 832MB	ll link ""mio10-e71b4ee8ec3c664c9699c68e87afefe8.rs""
    time: 0.280; rss: 832MB	ll link ""mio11-e71b4ee8ec3c664c9699c68e87afefe8.rs""
    time: 0.264; rss: 832MB	ll link ""mio12-e71b4ee8ec3c664c9699c68e87afefe8.rs""
```

for pretty much all dependencies. I have never seen this before. Is this also expected?"02/27/20 03:08:00 AMAdd missing angled bracket to emailNow `alacritty --help` will not look as strange. =||= Ah, right! Thanks cole-hCole Helbling02/27/20 02:02:13 AM"Add missing angled bracket to email

Now `alacritty --help` will not look as strange."1
338802/13/18 04:20:58 PMSaugat AcharyaAdd info about default configuration for macOSUpdated README.md to include information for default macOS configuration file: `alacritty_macos.yml`02/27/20 08:44:37 PMRevert caching of font pixelsize"We can't reliably do that, because some fonts are bitmap, but marked
as scalable.

Fixes #3387." =||= Here. https://github.com/jwilm/alacritty/pull/1131kchibisovKirill Chibisov02/27/20 07:57:40 PMFix rustfmt1
339003/10/18 02:04:32 AMAshwinAdd centos missing dependencyCentOS was missing the development tools dependency to build alacritty.02/27/20 10:02:35 PMFix crash on Weston 8.0 during startup4Thanks!kchibisovKirill Chibisov02/27/20 08:48:34 PMMerge branch 'master' into weston-fix1
339201/07/19 12:43:09 PMBehrangSupport drop down windows similar to Guake and iTerm"![Drop Down Terminal](https://user-images.githubusercontent.com/18451/36287326-45e1db48-1308-11e8-949b-6e9cb7f1bbd7.png)"02/27/20 11:06:05 PMRemove 0xRRGGBB color notationCloses #3383.2"I hacked up a script that can help anyone using a Linux system under X11.

https://blog.edwinclement08.com/post/want-any-window-to-work-like-guake-appearing-and-disappearing-with-a-hotkey-use-this-script/"chrisduerrChristian Duerr02/27/20 08:38:28 PMRemove 0xRRGGBB color notation1
339603/14/18 04:43:28 PMNoneApp crash when open image, reopen config not apply"Hi, 
App crash when open images big size, and then I reopen app again the config not apply.
File config still in .config/alacritty/alacritty.yml

OS: mac os high sierra"03/01/20 09:41:06 PMMove debug to bottom of config"Since this information is the least relevant to the user, it should be
the last thing in the configuration file." =||= "I opened images with vim.
I fixed by reinstall alacritty"chrisduerrChristian Duerr02/28/20 04:25:21 AM"Move debug to bottom of config

Since this information is the least relevant to the user, it should be
the last thing in the configuration file."1
339808/20/19 05:15:22 PMJaime PiñaHow to install with snap"I noticed you have a `snapcraft.yaml` file in your repo.

But, searching in the terminal for alacritty shows this.

```
$ snap search alacritty
No matching snaps for ""alacritty""
```

Is a snap install supported?"03/01/20 03:27:24 AMFix tabs across linewrap"This resolves an issue with tabs not breaking across line boundaries,
instead the characters would just all get written to the last column and
thus be lost.

It also tweaks the behavior of what happens when the terminal resizes
with the default tabspaces changed, using something like the `tabs`
program. Previously all tabstops would be reset to the default on
resize, which is what URxvt does. Now the tabspaces are kept and the new
columns are filled with the default tabstops, which emulates Termite." =||= There currently is no intention to maintain an official Alacritty snap.chrisduerrKirill Chibisov03/01/20 02:42:27 AMMerge branch 'master' into fix-tabs1
339903/05/18 04:16:54 PMMichal 'vorner' VanerPanic with 'capacity overflow'"On one of my systems, current alacritty crashes at startup:

```

thread 'main' panicked at 'capacity overflow', libcore/option.rs:917:5
stack backtrace:
   0:     0x55912e09fd73 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h5be622d6bae271e4
                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x55912e09e76d - std::panicking::default_hook::{{closure}}::h3dad42fd5277700a
                               at libstd/sys_common/backtrace.rs:71
                               at libstd/sys_common/backtrace.rs:59
                               at libstd/panicking.rs:380
   2:     0x55912e09d176 - std::panicking::rust_panic_with_hook::h17668d919cb963a0
                               at libstd/panicking.rs:396
                               at libstd/panicking.rs:576
   3:     0x55912e09cc02 - std::panicking::begin_panic::hc486239aa11674a1
                               at libstd/panicking.rs:537
   4:     0x55912e09cb79 - std::panicking::begin_panic_fmt::h2d2bb54c3df78ea1
                               at libstd/panicking.rs:521
   5:     0x55912e0b998a - core::panicking::panic_fmt::hee07a740495be6a3
                               at libstd/panicking.rs:497
   6:     0x55912e0c02a8 - core::option::expect_failed::h8c28a7270985f5ac
                               at libcore/option.rs:917
   7:     0x55912dec0e24 - <std::collections::hash::table::RawTable<K, V>>::new::h9be5b206095a0292
                               at /checkout/src/libcore/option.rs:302
                               at /checkout/src/libstd/collections/hash/table.rs:776
                               at /checkout/src/libstd/collections/hash/table.rs:816
   8:     0x55912deb825a - <std::collections::hash::map::HashMap<K, V, S>>::resize::hfcf2613f008e9ae5
                               at /checkout/src/libstd/collections/hash/map.rs:777
   9:     0x55912deb7fec - <std::collections::hash::map::HashMap<K, V, S>>::entry::h5422f5e504c51b41
                               at /checkout/src/libcore/cmp.rs:0
  10:     0x55912dea653b - alacritty::renderer::QuadRenderer::with_loader::hf63d8fc8d3d62172
                               at src/renderer/mod.rs:282
                               at src/renderer/mod.rs:214
                               at src/renderer/mod.rs:200
                               at src/display.rs:227
                               at src/renderer/mod.rs:686
  11:     0x55912ded5f4b - alacritty::display::Display::new::h18ace9deaccdd433
                               at src/display.rs:226
                               at src/display.rs:153
  12:     0x55912de09755 - alacritty::main::h023b5d1d018376be
                               at src/main.rs:104
                               at src/main.rs:62
  13:     0x55912e0f49f5 - std::rt::lang_start::{{closure}}::h924495c33c565557
                               at /checkout/src/libstd/rt.rs:74
  14:     0x55912de14f82 - main
  15:     0x7f30e925e010 - __libc_start_main
  16:     0x55912ddfaa39 - _start
  17:                0x0 - <unknown>
```

On others it is OK. Maybe it is related to the graphics card? The broken system is intel integrated card, while the others have AMDs.

Which operating system does the issue occur on?

Linux

If on linux, are you using X11 or Wayland?

X11."02/29/20 06:10:52 PMUpdate terminfo dependency1Closing this because it seems like a rust issue.kchibisovKirill Chibisov02/29/20 04:01:54 AMUpdate terminfo dependency1
340102/28/18 08:33:30 PMAndy LokUpdate dependencyThis patch updates `arraydeque` dependency to v0.4.1. It removes indirect dependency of `odd` and `nodrop`, and it also reduced one cell memory usage. 03/01/20 01:33:37 AMAdd GNU Guix installation and development info to README and INSTALLHey Alacritty! I've packaged the best terminal emulator in the world for Guix and figured out it would be a good thing to add the info about it to readmes.1"I have no say in this project but if I were to use Dependabot I'd like to have a weekly automatic summarized PR of low hanging fruit easy to merge (=passing CI) PRs.
But I'll not spam this thread further. ⏳ sorry chrisduerr 😄 "valignatevValentin Ignatev03/01/20 01:05:06 AMCopy Guix entry wording from NixOS entry1
340503/12/19 03:09:23 PMSeveren RedwoodFlag to set window position on screen"Seeing as Alacritty already has a flag for setting the dimensions of the window, adding a flag for setting its *location* on screen would also be fitting.

My use case for this is writing a script like this [one](https://github.com/f0x52/dots/blob/master/bin/bin/select_st) ([video](https://www.reddit.com/r/unixporn/comments/7snf2z/bspwm_drawing_terminals/))."03/02/20 01:19:07 AMFix DCS parsing crash"This resolves a problem with the vte depedency, where the parser would
crash when trying to parse a DCS escape with more than 16 parameters." =||= https://github.com/jwilm/alacritty/pull/2163 implementing this feature landed on master earlier today.chrisduerrChristian Duerr03/02/20 12:59:19 AMFix Windows build failure1
341010/05/19 12:29:28 AMJacques Kvamfocused terminal turns invisible with chunkwm when opening another application"Which operating system does the issue occur on? MacOS 10.13.3
Alacritty version: 03f9e0cd9a417550d53f34f7b9671a488363d411

A focused alacritty terminal turns invisible when another app is opened. I'm using [chunkwm](https://github.com/koekeishiya/chunkwm) (a tiling window manager) so the alacritty terminal gets resized when I open another app. The contents of the alacritty terminal become visible when I focus the window again. I attached a gif showing this in action, the red outline shows which window has focus.

If I had to guess, this weird combination of a window being resized but losing focus that causes the terminal to stay invisible.

This is really just an annoyance :)

![alac](https://user-images.githubusercontent.com/86304/36497669-ce8a28ce-16f0-11e8-970a-3477855cbdb9.gif)
"03/02/20 08:41:27 PMDon’t allow setting HollowBlock and Hidden cursors in config"Fix #3367

I'm not sure if it warrants a Changelog entry, as users were not supposed to use these variants." =||= I've noticed that https://github.com/jwilm/alacritty/pull/2438 seems to fix this issue. If anyone is interested in confirming this for other WMs (I've been using yabai), please let me know.enizorRémi Garde03/02/20 07:14:18 PM"Don’t allow setting HollowBlock and Hidden cursors in config

Fix #3367"1
341506/19/18 09:27:48 PMNoneChanged green implementation to use the macro03/04/20 11:32:08 AMRemove `ref_test` option from configuration file"This removes the `debug.ref_test` option from the configuration file,
after this change was originally requested from kchibisov in
https://github.com/alacritty/alacritty/pull/3396.

While this option is valueable for the CLI, it provides no value in the
configuration file."1I've noticed that https://github.com/jwilm/alacritty/pull/2438 seems to fix this issue. If anyone is interested in confirming this for other WMs (I've been using yabai), please let me know.chrisduerrChristian Duerr03/04/20 11:02:37 AMSkip debug.ref_test deserialization1
341610/13/19 10:54:07 PMMathieu RochetteYAML references don't work in config file"I wanted to add switch color themes easily so I added a `themes` section :

```yaml

themes:
  # Colors (Tomorrow Night Bright)
  default: &default
    # Default colors
    primary:
      background: '0x000000'
      foreground: '0xeaeaea'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '0x000000'
      cursor: '0xffffff'

    # Normal colors
    normal:
      black:   '0x000000'
      red:     '0xd54e53'
      green:   '0xb9ca4a'
      yellow:  '0xe6c547'
      blue:    '0x7aa6da'
      magenta: '0xc397d8'
      cyan:    '0x70c0ba'
      white:   '0xffffff'

    # Bright colors
    bright:
      black:   '0x666666'
      red:     '0xff3334'
      green:   '0x9ec400'
      yellow:  '0xe7c547'
      blue:    '0x7aa6da'
      magenta: '0xb77ee0'
      cyan:    '0x54ced6'
      white:   '0xffffff'

    # Dim colors (Optional)
    dim:
      black:   '0x333333'
      red:     '0xf2777a'
      green:   '0x99cc99'
      yellow:  '0xffcc66'
      blue:    '0x6699cc'
      magenta: '0xcc99cc'
      cyan:    '0x66cccc'
      white:   '0xdddddd'

  solarized: &solarized
  # Colors (Solarized Dark)
    # Default colors
    primary:
      background: '0x002b36'
      foreground: '0x839496'

    # Normal colors
    normal:
      black:   '0x073642'
      red:     '0xdc322f'
      green:   '0x859900'
      yellow:  '0xb58900'
      blue:    '0x268bd2'
      magenta: '0xd33682'
      cyan:    '0x2aa198'
      white:   '0xeee8d5'

    # Bright colors
    bright:
      black:   '0x002b36'
      red:     '0xcb4b16'
      green:   '0x586e75'
      yellow:  '0x657b83'
      blue:    '0x839496'
      magenta: '0x6c71c4'
      cyan:    '0x93a1a1'
      white:   '0xfdf6e3'
  # Colors (Oceanic Next)
  oceanic:
    # Default colors
    primary:
      background: '0x1b2b34'
      foreground: '0xD8DEE9'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '0xec5f67'
      cursor: '0xec5f67'

    # Normal colors
    normal:
      black:   '0x343d46'
      red:     '0xEC5f67'
      green:   '0x99C794'
      yellow:  '0xFAC863'
      blue:    '0x6699cc'
      magenta: '0xc594c5'
      cyan:    '0x5fb3b3'
      white:   '0xd8dee9'

    # Bright colors
    bright:
      black:   '0x343d46'
      red:     '0xEC5f67'
      green:   '0x99C794'
      yellow:  '0xFAC863'
      blue:    '0x6699cc'
      magenta: '0xc594c5'
      cyan:    '0x5fb3b3'
      white:   '0xd8dee9'
```

and then I wanted to select the theme like that:

```yaml
colors:
  <<: *solarized
```

is that something that could be supported ?

about YAML anchors & references: http://blog.daemonl.com/2016/02/yaml.html"03/06/20 11:15:44 PMFix caching variable font facesFixes regression introduced in 84f57ac8367e3e24e0347515e6681c0478fc3d29. =||= thanks to @hexadecatrienoic for the wiki update : https://github.com/jwilm/alacritty/wiki/Color-schemes#multiple-schemeskchibisovKirill Chibisov03/06/20 08:51:50 PMUse match instead of if1
341702/25/18 02:54:30 PMAndrew BensonDuplicate Dracula color schemes in alacritty wiki"Not a user of Dracula, but I noticed that the wiki shows two slightly different color schemes labeled as Dracula and linking to the Dracula theme website: https://github.com/jwilm/alacritty/wiki/Color-schemes

I don't know much about Dracula, but I assume it isn't intentional to have duplicate Dracula color schemes in the wiki that are different.
"07/11/20 05:03:09 PMRemove gui dependencies from alacritty_terminal"This commit removes 'font' dependency from alacritty_terminal,
so it'll simplify the usage of alacritty_terminal as a library,
since you won't link to system's libraries anymore. It also
moves many alacritty related config options from it.

Fixes #3393."5"I've removed the duplicate colorscheme because I don't think having it twice will do any good.

If this might be a variation it seems like a good idea to add it again with a different name, like `Dracula - iTerm` or something like that."kchibisovKirill Chibisov07/11/20 04:46:34 PMfix warnings on Windows1
342102/26/18 05:55:44 PMOmarPerformance Issue with Alacritty in Vim/NeoVim"Which operating system does the issue occur on?
**macOS High Sierra 10.13.3**

I can't for the life of me figure out why Alacritty is so slow for me, the speed is on par with iTerm 2 at this point. I followed the instructions to compile it from the readme to the letter and have tried multiple different Macs with different macOS versions (Sierra and High Sierra). 

From existing issues, background color being different from the terminal color and using Tmux affects performance. I installed a completely vanilla NeoVim with zero configuration (Via HomeBrew) without Tmux and it's still slow.

Here's a GIF of this in action: https://imgur.com/a/9rRmO
Compare it with this: https://www.youtube.com/watch?v=vlmDm9REV2I

I've also attached my [alacritty.yml](https://github.com/jwilm/alacritty/files/1759435/alacritty.txt). (I'm using the 'Snazzy' theme)

Is there something terribly simple I'm missing, what am I doing wrong?"03/07/20 10:17:38 PMFix selection with invisible start and end =||= OMG that worked! I know it was something so simple! Yes that was the issue! Thank you and I'm so sorry for wasting your time! chrisduerrChristian Duerr03/07/20 07:28:36 PMUnify visible <-> buffer conversion logic1
342302/28/18 02:57:21 AMBirger J. NordølumFix heading for NixOS/NixpkgsThe level of heading were one to high.05/16/20 10:27:32 PMChange default colorscheme to Tomorrow Night"This is implementation of #3404 

Attached example of the colors with the default config. The first line is black and bright black, which are almost invisible.
![Screenshot from 2020-03-05 23-09-37](https://user-images.githubusercontent.com/2017002/76025902-7c822c80-5f36-11ea-862d-7fbb76c6b265.png)"57OMG that worked! I know it was something so simple! Yes that was the issue! Thank you and I'm so sorry for wasting your time! AelnorAlexey Chernyshov05/16/20 07:33:45 PMChange default color scheme to 'Tomorrow Night'1
342503/23/18 05:20:36 PMSaugat AcharyaFix typoAlso, made the the FAQ section look a bit better.03/13/20 07:17:20 PMCapitalized the .desktop Filename"As spesified by [Freedesktop's File Naming](https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s02.html), and as suggested in https://github.com/alacritty/alacritty/issues/1875#issuecomment-592994397, I've capitalized the name of our `.desktop` file, and updated the package files accordingly.

> ... the name of the application, which is conventionally written with words run together and initial capital letters (CamelCase). For example, if the owner of example.org writes ""Foo Viewer"", they might choose the name org.example.FooViewer, resulting in a file named org.example.FooViewer.desktop.

It seems like the file used to be named like this, and was changed at some point. However, I couldn't find the PR/commit that did it easily. If this was changed away from convention for a reason, I'd be curious what it was."12Thanks!nixpulvisNathan Lilienthal03/13/20 06:02:10 PM"Update CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
342703/02/18 08:10:14 PMDeleted userOnly functions when given root privileges, GL Context Error "**Which operating system does the issue occur on?**
Gentoo Linux, Kernel v4.9.76-gentoo-r1, [.config](https://github.com/jwilm/alacritty/files/1776208/config.txt)
**If on linux, are you using X11 or Wayland?**
X11 with the proprietary nvidia drivers ""x11-drivers/nvidia-drivers"".

Alacritty only launches when run as root, when run as a regular user it produces the following when using -vvv:



```error: XDG_RUNTIME_DIR not set in the environment.
Alacritty encountered an unrecoverable error:
Error creating GL context; GL context creation failed
```

It doesn't work even when the x11 opengl implementation is selected using eselect, only when run as root. Any assistance is appreciated!"03/14/20 03:09:11 PMFix live config reload for window title"This enables live config reload for the window title. This includes
updating the title after it has been pushed and popped from the title
stack.

The dynamic title option also isn't disabled automatically anymore when
the title is set in the config. If the title is set from CLI, the
behavior is unchanged and dynamic title changes are still disabled."1Issue appears to be with the nvidia proprietary drivers and their associated permissions, I have a suspicion my udev rules weren't set up correctly. Switching my system to the nouveau drivers fixed the issue completely. chrisduerrChristian Duerr03/14/20 02:41:13 PMPass Option to set_term1
343203/07/18 09:34:06 PMChristian DuerrAdd shell completions and manpage"This adds basic completions for `bash` and `zsh` to make exploration and frequent usage of alacritty's flags and options a bit easier.

The information from the README and `--help` has also been used to create this manpage:

![](https://u.teknik.io/MFvHr.png)"06/01/20 03:46:28 AM[WIP] Simplify URL matching"This is a big refactor of the URL matching procedure. Instead of
checking for all URLs whenever the terminal redraws, the URL parsing is
now only run on the line below the mouse cursor.

This means that in the best case scenario no URL parsing runs at all
when the mouse is off the screen and the usual case will lead to one
line being checked. To improve the worst case of a massive wrapped line,
the maximum number of lines searched is set to 100.

Since the parsing does not depend on the visible cells anymore, it is
now possible to click on URLs that are only partially visible.

A lot of complexity could also be removed by deleting all mouse cursor
checks from `input.rs`. Instead the current mouse cursor state is now
always checked when redrawing. Since both the terminal and input
handling can cause the cursor to change at any time, this shouldn't
perform any worse but makes it possible to centralize the logic in a
much more sensible manner."2@chrisduerr I'll update the package with this so its ready once this PR is merged, I've noted on my last update PR to the void repo to not merge the PR, so that I can ensure the new changes are ready. https://github.com/voidlinux/void-packages/pull/11390chrisduerrChristian Duerr03/21/20 01:53:02 AMWIP Search1
343504/24/18 11:08:34 AMAhmed El GabriColor differences between alacritty & iterm "Which operating system does the issue occur on?
macOS 10.3.3

There are some color differences between iterm & alacritty that sometimes makes the output not really readable. I ran this [`colortest`](https://github.com/ahmedelgabri/dotfiles/blob/4057a0cb1330d4105590cbf7ed67226d80b49c75/bin/colortest) script to generate color tables.

#### iterm (`Build 3.2.20180301-nightly`) 
<img width=""531"" alt=""iterm"" src=""https://user-images.githubusercontent.com/63876/36946300-3b620f66-1fbb-11e8-966f-59e791274a53.png"">

And inside tmux
<img width=""1680"" alt=""tmux-iterm"" src=""https://user-images.githubusercontent.com/63876/36946415-f66a4566-1fbc-11e8-8bd6-59454e522ea7.png"">


#### alacritty (https://github.com/jwilm/alacritty/commit/475ebecfc4e0648242e82e256dee1489f3a3fe81) [my `alacritty.yml`config](https://github.com/ahmedelgabri/dotfiles/blob/4057a0cb1330d4105590cbf7ed67226d80b49c75/alacritty/.config/alacritty/alacritty.yml)
<img width=""544"" alt=""alacritty"" src=""https://user-images.githubusercontent.com/63876/36946333-c4fd2238-1fbb-11e8-81f7-6b796c843c81.png"">

and inside tmux
<img width=""1714"" alt=""tmux-alacritty"" src=""https://user-images.githubusercontent.com/63876/36946418-fed0c464-1fbc-11e8-9f18-ca2816955878.png"">

You can see that some colors completely disappear from alacritty & it's even clearer in the tmux screenshots were separators are not visible & windows indicators too (top left)

I wonder how can I fix this & if it is a problem with my config or if there is a plan to fix it?

"03/09/20 11:15:31 PMBump copypasta to 0.6.3Fixes #3050. =||= Comparing iTerm to Terminal colours are quite close. Alacritty is way off.kchibisovKirill Chibisov03/09/20 10:34:26 PM"Bump copypasta to 0.6.3

Fixes #3050."1
343603/04/18 10:40:15 PMChristian DuerrRemove all instances of unwrap() from config"Unwrapping inside the config file parsing can lead to some issues that
prevent us from falling back to a default configuration file.

One instance of that issue was mentioned in #1135.

Now all instances of `unwrap()` have been removed and replaced with
proper error handling. This will make the config more robust and
prevents live reload from silently breaking while alacritty is running."03/13/20 12:33:13 AMAdd option to pick Linux/BSD backendsFixes #3340.1Comparing iTerm to Terminal colours are quite close. Alacritty is way off.kchibisovKirill Chibisov03/13/20 12:09:16 AMMerge branch 'master' into xwayland1
343802/05/19 09:38:12 PMNonemultiple instances of alacritty"Maybe I'm doing it wrong but is it possible to have more than one window of alacritty open? Yes, I'm using tmux with multiple windows but when I ssh onto another machine which also has tmux open I'm in a nested session which I prefer not to have.

Which operating system does the issue occur on?
Arch

If on linux, are you using X11 or Wayland?
Wayland"03/19/20 12:39:01 PMRemove right click deselection"Hi everyone. I'm new to Rust programming and I decided to try to take this easy issue. So now clicking only with the right button won't deselect the text.

Apparently rustfmt removed some redundant commas from input.rs.

Fixes #3144."11This is tracked together with the same issue for macOS in https://github.com/jwilm/alacritty/issues/607.stefandevaiKirill Chibisov03/19/20 12:01:21 PMMerge branch 'master' into fix-right-click-deselection1
344103/06/18 03:48:53 AMYogeshBump alacritty version on commit"Please bump minor version on commit. This is just a suggestion for good practice and not a product bug. This will help users determine if the problems they are seeing are old problems. Sure, I can see the commit ID in the build, but it'll be useful to do `alacritty --version` to check at exactly which point it has been compiled from. Right now, it stays at `alacritty 0.1.0`.

An example could be with minor version like `alacritty 0.1.0a`, `alacritty 0.1.1a` and so on. In the future, this might help with releasing defined versions against milestones. 

Operating System: MacOS 10.13 (OS independent however)"07/04/20 02:03:49 PMAdd manpage, terminfo, and completions to macOS App bundle (#2653)"- Add manpage, terminfo, and completions to macOS App bundle (#2653)
- Update README with new macOS extras/completions location (#2653)
- Update changelog

I didn't edit INSTALL.md as that's for manual installation which requires the repo anyway."8We will start doing this once we are shipping precompiled binaries0azChristian Duerr07/04/20 01:39:55 AMMove completions dir closer to completions1
344501/19/20 04:16:28 PMNoneAlt+PgUp, Alt+PgDown, Alt+Home, Alt+End, Alt+Ins, and Alt+Del don't work in alacritty."Which operating system does the issue occur on? Gentoo Linux
If on linux, are you using X11 or Wayland? X11

weechat uses Alt+PgUp and Alt+PgDown for scrolling a few line up and down.
Because alacritty doesn't support Alt+NavigationKeyCluster, I ended up mapping Shift+PgUp and Shift+PgDown to scrolling in weechat.

Alt+Left, Alt+Up, Alt+Down, and Alt+Right seem to output suspicious control codes that I don't understand, yet."03/11/20 10:32:01 PMUpdate to glutin 0.24.0"Fixes #3266.
Fixes #3248.
Fixes #3188.
Fixes #3177.
Fixes #2445.
Fixes #1574." =||= The mentioned bindings were added there #2785 chrisduerrChristian Duerr03/11/20 09:13:49 PMFormat code1
344703/07/18 03:48:56 PMDeleted userApply config changes on the flyI know it's possible to do this with colour, but is it possible to do it with other options as well? I'm primarily thinking about font settings like changing the font size.03/12/20 12:14:01 AMFix crash when selecting last column"This resolves a bug where the selection start would be set to the number
of columns, causing an out of bounds when trying to index with it.
Instead of extending the selection beyond the grid when the right side
of the last column is the start of the selection, the selection will now
start in the beginning of the next line.

Fixes #3446." =||= @cata0309 make sure that you're using the right config. You can use `alacritty -v` to find out the config, also it doesn't apply to any setting. You can try changing background color, since it the most noticeable one.chrisduerrKirill Chibisov03/11/20 10:34:45 PMMerge branch 'master' into fix_selection_crash1
344903/08/18 08:54:48 PMChristian DuerrFix SGR mouse reporting, report middle and right mouse and report modifiers"There was an issue with mouse clicks not working inside of htop which
was caused by incorrect SGR mouse reporting.

With normal mouse reporting the button codes 0/1/2 are used to indicate
which button has been pressed and button code 3 is used to indicate that
any button was released.

However in SGR mode the button codes are always 0/1/2 even when the
mouse is released (this is instead indicated through m/M at the end).

Alacritty was sending button code 3 whenever the mouse has been released
even in SGR mode, which is incorrect.
This has been fixed by only overwriting the button code on release
inside the normal mouse handling and always passing the exact button
code for mouse handling in general.

There were also a few inconsistencies with xterm.
In xterm before any mouse interaction is allowed, the normal mouse flag
always has to be set. If only SGR or MOUSE_MOTION is enabled, without
the normal mouse mode, nothing should happen.
When an application enables multiple things at once ([1006, 1000]), xterm
also enables both, alacritty only attempts to enable the first and uses
the second one as fallback.

Alacritty now adds all modes in the args array whith the 'h' flag and
removes all modes inside the array with the 'l' flag.
It also doesn't do anything with mouse motion or sgr mouse unless the
normal mouse support is also enabled.

This fixes #1142."03/12/20 10:49:47 PMRun clippy on oldest supported version"Since there were some problems with clippy suggesting changes that were
not yet available in the oldest supported Rust compiler of Alacritty,
the clippy stage has been moved from stable to 1.37.0." =||= I'm going to send a PR to @Celti in #1057 to merge these two PRs together.chrisduerrChristian Duerr03/12/20 10:19:52 PMFormat code1
345503/16/18 08:56:37 PMTerry BrashawMouse input doesn't work"**Which operating system does the issue occur on?**
Void Linux

**If on linux, are you using X11 or Wayland?**
X11

**Which version of Alacritty?**
Master (f298ebb2179eff947cdb9cb7a4bd96e9739eac5c)

Applications which accept mouse input either don't react at all or react in a broken way. For example: [Cmus](https://cmus.github.io/) and [Ranger](https://github.com/ranger/ranger); both support mouse input for selecting items in their interfaces but this doesn't work in a *bare* Alacritty terminal. However, running tmux inside Alacritty and using any mouse-enabled application through tmux, mouse input works perfectly fine.

It seems Alacritty *is* sending input, but *incorrect* input? In Neovim, with mouse input enabled, clicking a line shows `23m` in the command window in the bottom right (where ""23"" corresponds to the line being selected). And does nothing else. 

What's strange is I've been using Alacritty for about 3 weeks and I had this problem when I first installed it, but it went away after a few days and I have no idea what changed. Alacritty's been working fine until a few days ago and, again, I have no idea what changed.

Oh and for comparison, xterm works as expected on my machine (without tmux)."04/09/20 01:02:11 AMUse config colors to theme Wayland decorationsFixes #2092.4"In vim 8.1:

``` vim
if has('mouse')
    set mouse=a
endif

if !has('nvim')
  set ttymouse=xterm2
endif

```"kchibisovKirill Chibisov04/06/20 03:33:25 PMFix changelog position1
345611/17/18 02:39:13 PMChristian DuerrConfig failure should be printed in the new alacritty instance"When starting alacritty with a faulty config, the errors are printed to `stderr`. However this only helps when starting alacritty from another alacritty instance.

To make debugging more obvious on users warnings and error should also be printed to the newly launched alacritty process. This will clearly indicate to the user if something is wrong without having to launch from another terminal.

Another benefit of this could be a faster adoption of new config layouts. If deprecation warnings are printed whenever starting a new terminal, it will strongly encourage the user to actually make changes so we can quickly remove things.
"05/16/20 03:24:37 PMContinue font ligatures"this is continuation of https://github.com/alacritty/alacritty/pull/2677

however i am very new to rust, i did my best to resolve some of the compilation errors.
i have not resolved all warnings but intend to do it later."10Yeah I'm a fan of that. `/tmp/alacritty.log` and then the message that points there, good idea!roychooRoy Choo04/19/20 06:07:27 PMfix: remove duplcates due to rebase1
345703/25/18 09:42:01 PMChristian DuerrSubprocess errors should be propagated to alacritty stderr"When starting a process with `alacritty -e` or setting up a custom shell in the alacritty config and that process fails, alacritty will quit silently.

To make it obvious what happened, alacritty should print all errors from the subprocess to the `stderr` of alacritty. This could also be done for `stdout`.
"03/14/20 04:39:03 PMBump version to 0.5.0-dev"This is a bump of the development version and does not represent a
stable release." =||= Closing this because it doesn't seem like a great idea.chrisduerrChristian Duerr03/14/20 03:24:24 PM"Bump version to 0.5.0-dev

This is a bump of the development version and does not represent a
stable release."1
346103/13/18 06:21:20 AMChristian DuerrMouse modifiers should be propagated"Currently alacritty does not propagate modifiers for mouse reports. Some applications might make use of the ctrl or alt modifier, this should be propagated to the application following the xterm implementation.

Propagating shift should not be necessary because shift stops alacritty from propagating the mouse to the application.

An application that makes use of this is `kakoune`.
"03/17/20 07:37:37 PMAdd Default Keybinding for SpawnNewInstance on macOS"By default <kbd>Command+N</kbd> should open a new terminal. In addition to macOS, I'm wondering if we should add this binding on Windows too. I think on other systems it's best to avoid a default binding for this.

I'll also note here, that there seems to be a bug when running `SpawnNewInstance` on a version of alacritty outside the `PATH`."9This will require changing alacritty's terminfo, because `xterm` is not able to propagate `ctrl` to programs (it's used for a GUI popup).nixpulvisNathan Lilienthal03/17/20 05:13:26 PMMove changelog entry where it belongs.1
346311/10/18 04:08:49 PMBagus TrihatmajaScaling issues"> Which operating system does the issue occur on?
Fedora 27

If on linux, are you using X11 or Wayland?
> Wayland

![screenshot from 2018-03-08 12-52-33](https://user-images.githubusercontent.com/4593408/37167365-b7f88462-22cf-11e8-921b-39f5d0c2b943.png)


I have tried to look for the configuration on .allacrity.yml but could not find the correct configuration. Tried to increase the font size as well, but doesn't work. Did I miss something?
"03/14/20 10:09:29 PMFix changelog version =||= "Sounds like it might be related to https://github.com/jwilm/alacritty/issues/964

can you try [this](https://github.com/jwilm/alacritty/issues/964#issuecomment-382098460) to see if it fixes your issue?"chrisduerrChristian Duerr03/14/20 09:21:13 PMFix changelog version1
347009/17/18 03:15:22 PMJoe WilmScrollback"_Warning: this is under development, is missing several features, and has a number of known bugs. The progress of this feature is being tracked under the [Scrollback](https://github.com/jwilm/alacritty/projects/2) project which captures all known issues and missing functionality (to be populated after filing this PR)._

## Motivation

A while ago [I mentioned] that I had an alternative implementation of scrollback that I was working on, and here it is! First of all, some explanation of why an alternative implementation was needed in the first place is warranted. There are two main reasons,

* Performance
* Maintainability

Regarding performance, I've written a small tool, [vtebench], for testing certain performance characteristics of terminals that have a big impact on users. From the original scrollback thread, there were some benchmarks recorded which suffered under that implementation. Without diving into details, they are all resolved in this branch. To see for yourself, try running

```
time vtebench -h $(tput lines) -w $(tput cols) -b 10000000 scrolling-in-region
```

on master, this PR, and the original scrollback PR. There are some other benchmarks built into the tool that can be seen with `vtebench --help`. `scrolling-in-region` just happens to show the biggest disparity.

On the topic of maintainability, this is from the perspective of a maintainer who will be supporting this code for who knows how long into the future. Scrollback fundamentally changes how storage is implemented in the terminal, how updates work, and introduces the need for transformations between ""visible screen space"" and ""storage space"" or ""buffer space"". To help ensure we can continue to grow the project, I want to be intimately familiar with these parts of the code base.

The work @neon64 did was excellent, and the number of people I've seen on the internet claiming they use that branch every day is a testament to that. I am certainly not saying their code is unmaintainable; it's just not the way I thought about the problem, and I didn't know how to think about the problem until playing around with several approaches myself.

I am very thankful for all the work @neon64 did, and I intend to recognize that work  in a number of ways:

1. The [bounty] for scrollback should be awarded to them after this PR lands. The only reason they haven't already received it is because I've been playing around with this alternative implementation instead of landing theirs
2. Add a _Special Thanks_ section in several highly visible places. This will be a way to recognize not only @neon64 for this work but several other contributors who have had an outsized impact on the project.
    * The project README
    * The Alacritty website once it launches (does not yet exist)
    * The `--help` text
    * The `man` page.

## Approach

The approach here starts before ever considering scrollback. There were some improvements to be made in the `Grid` implementation along with cleanup, and we needed a storage layer which could support fast scrolling operations.

The new storage layer is still based on a `Vec`, but it's been abstracted behind a `struct Storage<T>` which only allows certain operations on the `Vec`. Critically, it's been optimized to make scrolling a simple addition or subtraction to an offset. In this way, the `Vec` became a circular buffer, and scrolling becomes very cheap.

There's also a new optimization with _scrolling regions_. These regions are a VT feature which fix certain _lines_ in place while allowing others to scroll; classic examples of this are the colored bar at the bottom of a `tmux` screen, or the status bar at the bottom of `vim`. The optimization here is that we can still implement scrolling as a rotation, and then we just need to swap the non-""scrolling"" lines back into their correct location.

The _scrolling region_ optimization was inspired by a request on #1000. @maximbaz was asking for the ability to ""use tmux and native scrolling"" at the same time such that a maximized tmux pane would simply have output move into the native buffer. There's a gif in the ticket for additional clarity. The nice thing about this feature is it actually leads to a very efficient implementation!

In addition to all of the tickets in the project linked at the top, there's a bit more work to do around finalizing transformations between ""screen"" and ""buffer"" space. I realized that this could be cleaned up significantly while updating selections to work with scrolling.

Finally, one really important piece to me was that the `Term` implementation doesn't have to think about conversions to/from buffer coordinates. That should all be handled inside `Grid`; said another way, `Grid` should continue to be indexable by `Line` and `Column` and do a transformation internally for those cases. This keeps the `Term` impl much simpler.

## Benchmarks

It's getting late and I still need to file tickets for outstanding issues here, but I just want to add that this branch is, for scrolling operations, about 30% faster than master is today in my testing.

Closes #124
Closes #657
Closes #1000 
Resolves #836 
Resolves #885 
Resolves #837 
Resolves #923 
Resolves #1022

[I mentioned]: https://github.com/jwilm/alacritty/pull/657#issuecomment-355662163
[vtebench]: https://github.com/jwilm/vtebench/
[bounty]: https://www.bountysource.com/issues/52061265-complete-implementation-of-scrollback"03/17/20 01:50:13 AMPreserve requested font style in Fontconfig backend =||= "@unphased Just on the matter of making it a compile-time flag. There would be no benefit to disabling this at compile time over the config setting which is already available. Since the abstractions for the scrollback buffer are already in the code, it would also introduce additional complexity.

Without putting a lot of extra work and code into Alacritty, there also wouldn't be an immediate performance benefit by switching it off at compile time. If you don't like scrollback, I'd recommend just making use of the config setting."kchibisovChristian Duerr03/17/20 12:50:42 AMMerge branch 'master' into preserve-style1
347203/13/18 06:26:20 AMJoe WilmSelection moving outside visible region results in a crashIf you generate some scrollback, select some stuff, and the scroll away from the selection, alacritty will crash. This is because the selection is not being clipped when visible or ignored when completely off-screen.03/17/20 12:50:27 AMdon't recreate std::fs::read_to_string() =||= resolved in #1172matthiaskrgrMatthias Krüger03/16/20 09:48:58 PMdon't recreate std::fs::read_to_string()1
347805/30/18 04:36:41 PMJoe WilmSelection is not cleared as storage buffer wraps"If a selection scrolls all the way to the end of the buffer, we don't update state accordingly or clear it once the entire selection is off-buffer."03/19/20 12:00:32 PMFix default keybinding documentation =||= I don't think this is actually a problem in practice. The selection checks only care if it's in the visible area, not if it's fallen off the buffer.chrisduerrKirill Chibisov03/19/20 12:31:01 AMMerge branch 'master' into fix_keybinding_docs1
347904/29/18 10:47:22 PMJoe WilmShould be able to set scrollback history to zero to disable it.I am not sure if this works, but it should certainly be tested and fixed as needed.06/14/20 06:42:19 PMFix Binding `mode`/`notmode` Matching Logic"TODO:

- [ ] Fill in more details to commit
- [ ] Add test(s)
- [ ] Changelog entry"2"Currently it seems like the scrollback history size is based on the initial window size plus the initial history size, so when the history length is set to 100 in the config and the initial window is 24 lines high the history will always be 124 lines long.

This is currently causing the issue with setting the scrollback to 0, when fixing the initial negative usize panic, the error that you will run into looks like this:
![Bug](https://u.teknik.io/ShAHt.png)

Having what I said initially in mind, this makes sense. The scrollback history is based on the initial size of the terminal + the scrollback size, so since the scrollback size is 0, the size of the grid will be set to the initial window size. Since the grid is smaller than the window now, the terminal is ""repeated"" at the top.

This will probably also break `live-config-reload` because based on my testing it does not seem like it is possible to change the scrollback size at runtime.

At this point I'm not entirely sure how to fix this so I thought I'd just write this out first. It will probably require some changes to how scrollback history size works. I'll keep playing around with this though, so if I can find out any more and make this work I'll send a PR, but if someone else has an idea this might help getting you started."nixpulvisNathan Lilienthal03/18/20 06:39:33 PMAdd two tests.1
348103/15/18 07:27:27 PMJoe WilmScrollback hotkeys"Users should be able to provide bindings for hot keys to do the following:

* Page Up
* Page Down
* Elevator to top
* Elevator to bottom"03/19/20 12:30:31 AMFix scrolling with selection outside of vimode =||= "Currently it seems like the scrollback history size is based on the initial window size plus the initial history size, so when the history length is set to 100 in the config and the initial window is 24 lines high the history will always be 124 lines long.

This is currently causing the issue with setting the scrollback to 0, when fixing the initial negative usize panic, the error that you will run into looks like this:
![Bug](https://u.teknik.io/ShAHt.png)

Having what I said initially in mind, this makes sense. The scrollback history is based on the initial size of the terminal + the scrollback size, so since the scrollback size is 0, the size of the grid will be set to the initial window size. Since the grid is smaller than the window now, the terminal is ""repeated"" at the top.

This will probably also break `live-config-reload` because based on my testing it does not seem like it is possible to change the scrollback size at runtime.

At this point I'm not entirely sure how to fix this so I thought I'd just write this out first. It will probably require some changes to how scrollback history size works. I'll keep playing around with this though, so if I can find out any more and make this work I'll send a PR, but if someone else has an idea this might help getting you started."chrisduerrChristian Duerr03/18/20 10:16:57 PMFix scrolling with selection outside of vimode1
348203/13/18 06:26:02 AMJoe WilmFaux scrolling under scrollbackHow does faux scrolling fit in with native scrollback? It's disabled on the PR right now.03/18/20 10:42:28 PMFix a minor typoextra/linux/Alacritty.desktop does not exist1resolved by #1158maluramichaelMichael Malura03/18/20 10:41:35 PM"Fix a minor typo

extra/linux/Alacritty.desktop does not exist"1
348304/02/18 09:55:52 PMJoe WilmScrollback branch should have working testsIt would be nice if we could fix this by figuring out which parts of the `Grid` we want to be serializable and adding the correct serde tags to achieve that. I would prefer not to have to modify all of the ref tests.03/23/20 11:46:34 PMAdd CopyPrimary action on Linux/BSD"This action copies into primary selection buffer."5resolved by #1158kchibisovKirill Chibisov03/23/20 09:45:48 PMMerge branch 'master' into primary-selection-binding1
349203/20/18 05:05:58 PMJoe WilmScrolling region regressionScrolling regions are broken when there's a fixed bar at top _and_ bottom. This is best demonstrated by `htop`.03/21/20 12:47:53 AMFix invisible selection"This resolves a bug where the very first/last cell would still be
selected when both the start and end were above/below the viewport." =||= Resolved.chrisduerrChristian Duerr03/20/20 03:25:18 PMRemove unnecessary boundary checks1
349803/09/18 05:54:47 PMMichael SchumacherAdd caret key"This fixes #680

It is rather old but it took some time for the winit changes to get into master + get the version bump into glutin.

Ref: https://github.com/tomaka/winit/pull/380

It allows on my germany keyboard to enter ^ (Caret) with the given configuration:

```
  - { key: Caret,                         chars: ""\x5e""                          }
```

Mainly created to use VIM like I used to :-D"06/15/20 11:18:42 PMClear Selection on ANSI Clear Line"This should fix selections staying around in applications like weechat, when the screen is changed with mouse actions, for example.

- [ ] Update `clear_screen`
  - [ ] Only clear selections that overlap with cleared lines
  - [ ] Don't clear selection when saved lines are cleared
  - [ ] Decide if we should rotate or clear the selection on `ClearMode::All` (VTE, for example rotates, however I think I'd prefer to clear)
- [ ] Update `clear_line`"4Thanks!nixpulvisNathan Lilienthal03/24/20 07:16:16 PMWIP1
350103/11/18 12:06:20 PMChristian DuerrThe config's scroll_history should be able to recover from errors"The `scroll_history` being the wrong type (like -1) will lead to the complete config failing to parse.

This should be changed so only the `scroll_history` field falls back to the default, instead of the complete config."03/23/20 08:22:32 PMAdd FreeBSD to CIFixes #2248.6This should be fixed with #1157.kchibisovKirill Chibisov03/23/20 05:43:35 PMDrop optional builds1
350203/09/18 05:47:22 PMChristian DuerrAdd `failure_default` deserializer to `scroll_history`This fixes #1156.03/23/20 04:24:48 PMAdd changelog entry for minimum Rust version bump =||= The macro sounds like a good idea. Merging this as-is for now, though.chrisduerrChristian Duerr03/23/20 03:20:13 PMAdd changelog entry for minimum Rust version bump1
350303/13/18 05:55:58 AMChristian DuerrAdd faux_scrolling back to scrollback"This should follow the behavior of VTE terminals like termite or gnome-terminal.

This fixes #1152."03/24/20 01:29:07 AMFix cursor position after alt screen resize"This fixes a regression introduced in 4cc6421, which ignored the main
grid's cursor when increasing the number of lines available, causing
incorrect cursor position after restoring to the primary screen.

Fixes #3499." =||= The macro sounds like a good idea. Merging this as-is for now, though.chrisduerrChristian Duerr03/23/20 10:04:30 PMFix clippy warning1
350703/14/18 08:55:43 PMChristian DuerrSelection in scrollback off by one"When selecting on a line and then moving the mouse to the line below, selection will move one cell to the left in the first line of the selection.

If this is done at the beginning of the line, the selection is completely messed up.

Here's a gif to make the issue obvious:
https://u.teknik.io/yAmKj.webm"07/09/20 09:45:23 PMAdd regex scrollback buffer search"This adds initial support for regex scrollback buffer search. While
searching should already be fully functional, the match is currently
only logged to stdout and not displayed in Alacritty.

However the searching should already behave as intended.

Fixes #3672.
Fixes #1017.

There are a lot of edgecases with this PR that need to be tested, I went through all of them but I doubt I've tested all permutations. So here's a list with things that would be useful to test:
 - Search from vi mode starting in last line
 - Search from vi mode above last line
 - Search without vi mode
 - Forward search
 - Backwards search
 - Goto match next start/end, previous start/end
 - Resize during search
 - Message bar
 - Start search while scrolled up
 - Search without history
 - Search with history and normal cursor at bottom
 - Search with history and normal cursor not at bottom (ctrl+l)
 - Immediate search while typing with match < 1000 lines away
 - Delayed search while typing with match > 1000 lines away

There are a few features I've intentionally left out that we should likely add in the future. I'll create issues for them as soon as this PR is merged:
 - Moving the cursor inside the search bar
 - Anchored searches using ^ and $"13"Also noticed that the error on the right side of the screen still exists (it is also present in master).

Whenever the user leaves the mouse to the right side while selecting, the last cell is not selected."chrisduerrChristian Duerr07/09/20 05:59:47 PMFix code formatting1
350903/13/18 09:53:04 PMMaxim BazScroll multiplier should be configurable"#1147 scrolls by 3 lines, which feels less smooth comparing to #657 where scroll doesn't skip any lines.

I believe it's a matter of making this constant configurable via alacritty.yml:

https://github.com/jwilm/alacritty/blob/ec49105203934a342d4aa416029ebdbbdeb1cce9/src/input.rs#L37"03/24/20 03:27:44 AMRename alt grid to inactive grid"Small change to term struct.

Renames `alt_grid` to `inactive_grid`, `alt` to `swapped` (indicating if grids have been swapped more clearly), `swap_alt` to `swap_grids` (indicating that the grids get swapped), various other variables referring to `alt` changed to `inactive`

fixes #3504 " =||= "Maybe we could have a separate field for scrollback, something like this:
```yml
scrollback:
    lines: 10_000 # Number of lines
    step: 3 # Lines per ""scroll""
```

Alternatively we could keep the number of lines in the global config and add `scroll_multiplier` (or `scroll_step` or something like that) to the mouse section next to `faux_scrollback_lines`.

If my proposal to change `faux_scrollback_lines` to `faux_scrolling_lines` is accepted, maybe put it next to that as `scrolling_lines` or `normal_scrolling_lines`."DivineGodChristian Duerr07/09/20 05:59:47 PMFix code formatting1
351003/09/18 05:51:29 PMMatthias Krüger" cargo test --features=""bench""    fails to build""````
 cargo test --features=""bench"" 

   Compiling alacritty v0.1.0 (file:///home/matthias/alacritty)
error[E0061]: this function takes 3 parameters but 2 parameters were supplied
    --> src/term/mod.rs:2103:33
     |
990  | /     pub fn renderable_cells<'b>(
991  | |         &'b self,
992  | |         config: &'b Config,
993  | |         selection: Option<&'b Selection>,
...    |
1012 | |         )
1013 | |     }
     | |_____- defined here
...
2103 |               let iter = terminal.renderable_cells(&config, None);
     |                                   ^^^^^^^^^^^^^^^^ expected 3 parameters

error: aborting due to previous error

````

@ f298ebb2179eff947cdb9cb7a4bd96e9739eac5c"05/01/20 06:35:07 AMRename alt grid to inactive grid"Small change to term struct.

Renames alt_grid to inactive_grid, alt to swapped (indicating if grids have been swapped more clearly), swap_alt to swap_grids (indicating that the grids get swapped), various other variables referring to alt changed to inactive

fixes #3504"6"This actually must have been broken by https://github.com/jwilm/alacritty/commit/6eb634a2b83a8a401973ec9e52c7c7ffb5b9fe84, the benchmarks just aren't run a lot I guess :P.

I've opened a PR that fixes this here: #1162"DivineGodAnders Rasmussen03/29/20 09:52:36 PMre-implement {save,restore}_cursor_position1
351403/09/18 05:51:29 PMChristian DuerrFix benchmarksThis fixes #1161.03/25/20 12:08:31 PMuse fs::read_to_string in tests instead of custom implementation.Should have run with --all-targets --all-features previously... :)2Thanks!matthiaskrgrMatthias Krüger03/25/20 11:44:24 AMuse fs::read_to_string in tests instead of custom implementation.1
351503/13/18 09:52:15 PMChristian DuerrMake normal scrolling line amount configurable"It is now possible to configure the amount of lines the viewport should
scroll when using the normal scrolling mode.

This fixes #1160."03/25/20 01:52:04 PMUpdate font depedencies"This updates font depedencies to make use of the newly unified
freetype-sys crate, allowing us to get rid of Alacritty's patch section
in the Cargo.toml." =||= Should be good now! I tested it again and everything still seems to work the same way. Think everything worked out (fingers crossed).chrisduerrChristian Duerr03/25/20 01:04:50 PM"Update font depedencies

This updates font depedencies to make use of the newly unified
freetype-sys crate, allowing us to get rid of Alacritty's patch section
in the Cargo.toml."1
351803/09/18 03:16:00 PMNoneAlacritty window fails to close after quitting vim"When I launch Alacritty with `alacritty -e vim` and then close vim with `:quit` (or `:exit`, `ZZ`, `ZQ`), the window remains open until I move the mouse or press something. This is what I see just after executing `:quit`: [imgur link](https://i.imgur.com/yEJWVka.png). This happens independently of how the windows are organized (stacked, tabbed or split mode in i3).

This happens all the time with my personal vimrc, 6 times out of 10 with no vimrc at all (stock vim) and never with `vim -u NONE`.

I'm not sure this is Alacritty's  fault, but it doesn't happen with any other terminal I've tried (st and termite).

System info:
- Arch Linux 4.14.15
- i3-gaps 4.14.1
- Vim 8.0.1436 
- Compton 0.1_beta2.5
"03/26/20 03:07:08 AMRemove orphan servo-freetype-proxy folderWe removed the patch section in #3515, but the folder was forgotten about. Oops. =||= Closed because this is a duplicate of #915.cole-hCole Helbling03/25/20 04:46:07 PMRemove orphan servo-freetype-proxy folder1
352110/09/19 09:37:49 PMOlivier PerretAdd support for --hold flag"The `--hold` flag is supported by many other terminal emulators and causes the terminal window to stay open after the command returns.

This is useful when using gdb to debug a console application: one can run `favorite_terminal --hold -e tty` to get the tty name and leave it open. 
Then in gdb,  call `tty <tty-name>` before running the application. It will be started on the terminal held open. 
This doesn't work if the command being run is not finished, as the terminal already has a ""session leader""."03/26/20 02:56:42 PMRemove `fs::read_to_string` reimplementations"After two previous PRs already removed some instances of
reimplementations of the `fs::read_to_string` functionality, this
removes the last remaining occurence and with it all instances of
`File::open`. So this should remove them all for good." =||= "@occivink I think I see what you mean now.

The way I'm able to get this to work is to open an instance of Alacritty, then run `alacritty&` from within the first terminal window to get another terminal window sharing the same process group. Find the `tty` of the second alacritty and then start `gdb vim` and point it to output on the second terminal with `tty /dev/pts/X`.

I think a shell only helps make this situation easier, but I suppose you may be concerned about the interaction of the shell, which a `--hold` option could help you avoid."chrisduerrKirill Chibisov03/26/20 06:39:55 AMStyle issues1
352805/06/18 06:18:09 PMChristian DuerrCreate a macro for config deserializers"The current config has a lot of custom deserializers to make sure that everything falls back to alacritty's default values. This could be simplified by macros, this proposal has been made in #1157 initially.

Example of how this might look:
```rust
// This defines deserializer_name and default_name
// deserializer_name will return 13 upon failure
// default_name will always return 13
failure_default!(name, u32, 13);

#[derive(Deserialize)]
struct Test {
    #[serde(default=""default_name"", deserialize_with=""deserialize_name"")] 
    test: u32,
}
```"03/30/20 08:46:20 AMFix tabstops not being reset with `reset` =||= This solution seems rather narrow and something a bit more ergonomic can probably be created. More discussion can be shared here: #1258.kchibisovKirill Chibisov03/29/20 10:13:00 AMFix tabstops not being reset with `reset`1
353503/13/18 06:07:40 AMNathan Ringoscrollback branch tries to allocate 85.33TiB of memory"**Which operating system does the issue occur on?** X11 Linux

**To reproduce:**

```
$ git checkout ec49105
$ cargo build
$ gdb target/debug/alacritty
(gdb) run
// Wait a few seconds
^C
(gdb) bt
#0  0x00005555558b92d4 in core::slice::from_raw_parts_mut::h3213d7e97fae6229 (p=0x7fffffff6c60, len=93824996017929) at /checkout/src/libcore/slice/mod.rs:2388
#1  0x00005555559af9e6 in _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$::deref_mut::hab5ab1f1df6e056a (self=0x7fffede84628) at /checkout/src/liballoc/vec.rs:1704
#2  0x00005555559acc60 in _$LT$alloc..vec..Vec$LT$T$GT$$GT$::push::hb33c76d0afa591e8 (self=0x7fffede84628, value=...) at /checkout/src/liballoc/vec.rs:974
#3  0x00005555558f192d in _$LT$alacritty..grid..row..Row$LT$T$GT$$GT$::grow::h953deb70ed2a2fb2 (self=0x7fffede84628, cols=..., template=0x7fffede530c0) at src/grid/row.rs:34
#4  0x00005555558fb544 in _$LT$alacritty..grid..Grid$LT$T$GT$$GT$::grow_cols::h08820c6e0414a5ba (self=0x7fffede53018, cols=...) at src/grid/mod.rs:228
#5  0x00005555558fb2d2 in _$LT$alacritty..grid..Grid$LT$T$GT$$GT$::resize::h33cc5788329c0afa (self=0x7fffede53018, lines=..., cols=...) at src/grid/mod.rs:188
#6  0x00005555558addc9 in alacritty::term::Term::resize::he039deeb904df099 (self=0x7fffede53018, size=0x7fffffff8280) at src/term/mod.rs:1110
#7  0x00005555558c0916 in alacritty::display::Display::handle_resize::h5c033a5a7104569f (self=0x7fffffff7c00, terminal=0x7fffffffc738, config=0x7fffffffd4e8, items=...) at src/display.rs:303
#8  0x000055555571dfdb in alacritty::run::h24e2fbd7586f03fc (config=..., options=0x7fffffffd1e8) at src/main.rs:200
#9  0x000055555571cbce in alacritty::main::h20ddd16791cd8a95 () at src/main.rs:62
#10 0x000055555571b5d2 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::ha242352c317848be () at /checkout/src/libstd/rt.rs:74
#11 0x0000555555f58278 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6ddc513d95d559ac () at /checkout/src/libstd/rt.rs:59
#12 std::panicking::try::do_call::h7d33aea9be52481f () at /checkout/src/libstd/panicking.rs:480
#13 0x0000555555f7bdcf in __rust_maybe_catch_panic () at /checkout/src/libpanic_unwind/lib.rs:101
#14 0x0000555555f6023a in std::panicking::try::h33108b08b6395be5 () at /checkout/src/libstd/panicking.rs:459
#15 std::panic::catch_unwind::hb0149e8b5a4339ed () at /checkout/src/libstd/panic.rs:365
#16 std::rt::lang_start_internal::h16c0c37ef62d8e5a () at /checkout/src/libstd/rt.rs:58
#17 0x000055555571b5b2 in std::rt::lang_start::hf679833d3c282db0 (main=0x55555571cb50 <alacritty::main::h20ddd16791cd8a95>, argc=1, argv=0x7fffffffdb78) at /checkout/src/libstd/rt.rs:74
#18 0x000055555571e36e in main ()
```"03/30/20 05:22:02 PMFix CHANGELOG section for v0.4.2"During bump to v0.5.0-dev it was forgotten to strip 'dev' suffix from
v0.4.2.

Also changes contributing to make `-dev` update after release." =||= Since it is possible to reproduce this issue on master, I'm removing the Scrollback label. I've opened a PR to fix this. I don't think on master it allocates a ton of memory though.kchibisovKirill Chibisov03/30/20 11:27:33 AM"Update CONTRIBUTING.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
353604/08/18 05:18:27 PMMaxim BazNever-ending visual bell when gaining/losing focus"ArchLinux, X11, https://github.com/jwilm/alacritty/commit/f298ebb2179eff947cdb9cb7a4bd96e9739eac5c

Steps:

```
$ TERM=xterm-256color ssh remote
$ # on remote, press three keys to terminate the connection: (1) Enter (2) ~ (3) .
```

Now this terminal is going to ring a bell every time it gains or loses focus, indefinitely. The only known workaround to me is to kill this instance of alacritty.

Gif:

![bell](https://user-images.githubusercontent.com/1177900/37232202-4b1f29f2-23ee-11e8-8995-ab9631ea734a.gif)

This happens not only with terminating ssh connection, for example when I close `weechat` I have the same issue. It's not a new issue, but I never got to reporting it. I'm not even sure how to debug this, what is causing this never-ending bell?"04/10/20 06:23:51 PMFix various mouse mode + vi mode interactions"This commit fixes some issues introduced by
1a8cd172e520e493bacc9c6a2ae6f80de086eaa3:

 1. Vi cursor not moving properly on double/triple click
 2. URL not launching via mouse click in vi mode + mouse mode
 3. Ability to select in mouse mode with double/triple click regardless
    of shift modifier
"1"I should have checked from the beginning, this reproduces in every single terminal. 
So... not sure what causes this, but it's not an alacritty bug."kchibisovKirill Chibisov04/09/20 01:02:36 AMMerge branch 'master' into selection-reset1
353704/02/18 05:10:23 PMJoe WilmScroll/fix testsFixes #1153 03/30/20 05:27:06 PMAdd support for background blur"Add new `background_blur` boolean configuration option for enabling background
blur effect.

This setting currently only has any effect when Alacritty is used with KWin and
X11 as the implementation relies on KWin's compositor for blurring.

This feature was requested in #972 

Considering the limited OS/WM support, I realize that you might not want to introduce this feature as-is. However, I still decide to open this PR as a sort of proof-of-concept implementation that works well enough for me. Maybe someone else will also find it useful.

![Screenshot_20200330_192224](https://user-images.githubusercontent.com/40366/77937214-b0920880-72bc-11ea-8dd1-3f5cdf1f476f.png)"3Oh that's lovely, looks like disabling the scrollback history (so history size 0) is the only thing left from blocking scrollback?SoftSamuel Laurén03/30/20 04:04:00 PM"Add support for background blur

Add new `background_blur` boolean configuration option for enabling background
blur effect.

This setting currently only has any effect when Alacritty is used with KWin and
X11 as the implementation relies on KWin's compositor for blurring."1
354611/14/20 04:12:00 PMRyan LueBELL does not sound/flash on macOS"Forgive me if this is a naive problem; I've [just read on SO that](https://stackoverflow.com/a/3456167/4865822)

> ASCII character 7 is the BELL character, and it's represented in C as \a. Some terminals will produce a beep when this character is output on the terminal; nowadays, many don't. (I'm looking at you, Ubuntu.)

Nevertheless, `printf ""\a""` produces the system bell in Terminal.app and iTerm, while alacritty does not. Below is a summary of what works and when:

|                  | system bell | visual bell (when muted) |
| ---------------- | :---------: | :----------------------: |
| **Terminal.app** | ✔           | ✔                        |
| **iTerm 2**      | ✔           | ✗                        |
| **Alacritty**    | ✗           | ✗                        |"06/04/20 09:30:46 PMConvert Shell.program from Cow to StringIn the interest of easing future efforts to simplify and decouple the config facilities, I think that this use of Cow can be changed to a String with no discernible performance impact. I've tested it as best I can, but I'd really welcome a second look at the small amount of serde related code I've touched here.1You can bind command to run on bell, thus you can make it produce sound.sterlingjensensterlingjensen04/02/20 07:29:41 PMConsume String1
354703/13/18 11:58:16 PMChristian DuerrFix selection in scrollback"There were a few issues with selection in scrollback that were mainly
off-by-one errors. This aims at fixing these issues.

This also fixes a bug that currently exists in master where the last
cell is not selected when the mouse leaves the window to the right.

This fixes #1159 and fixes #1182."04/15/20 03:50:35 AMAdd option 'cursor.thickness' to set cursor thicknessFixes #3526. =||= "I don't think the idea of `sides` is bad. Even if we wouldn't want to pass `sides`, we'd probably still do something like remove one from column when at the right under certain circumstances, which would be sides again, only handled in the method above it.

I think with my implementation I've got a bit confused by the `SpanType`. With my approach of fixing these issues it always kinda got into the way because I just wanted to go from cell XY to cellXY including everything from start to end. Properly using this might help with some edge cases.

I think by just rewriting the method from scratch without having to understand what's already there, I might be able to get a better result. Worst-case I'd probably re-implement the same thing again. It's a short method so I think it's worth exploring.

For now I'd rather keep this open and I'll get back to it this weekend or earlier when I have the time. If I didn't find any better solution until the other things are fixed, it's probably fine to merge it as-is."kchibisovKirill Chibisov04/15/20 03:20:48 AMupdate_pending1
355303/13/18 06:00:16 AMChristian DuerrFix crash when selection leaves viewport"There was an issue where alacritty tries to convert the lines in a
selection to the on-screen lines even when the selection is not on the
screen. This results in a crash.

To prevent this from happening the selection now is not shown if it is
off the screen.

There currently still is a bug that when the selection is at the top of
the screen but still half visible, it will not show the top line as
selected but start in the second line.
This bug should be resolved with
https://github.com/jwilm/alacritty/pull/1171.

This fixes #1148."04/05/20 12:00:06 AMAdding use_xrdb to config and support for xrdb on colors"Fixes #1771 **Load colors from Xresources.**

## Proposed Changes
  - **alacritty.yml**: Adds a new config option on colors: `use_xrdb: bool`
  - **alacritty_terminal/Cargo.toml**: Adds the external (and very new) crate [xrdb](https://crates.io/crates/xrdb) 
  - **alacritty_terminal/src/config/colors.rs**: Adds new field for deserialize `use_xrdb`
  - **alacritty_terminal/src/term/color.rs**: Adds a new private function
    `xrdb_colors -> bool` that will check for the `use_xrdb` option and try to
    load colors using the xrdb lib. If any of the previous is false or fails, it
    returns false, which leads to previus normal flow on fill_named. Otherwise
    it adds the expected xrdb to NamedColor.

## New dependencies?
Yes, [xrdb](https://crates.io/crates/xrdb).

### Warning:
- I am still starting to learn Rust
- This is my first serious PR ever ;)"11"I don't think the idea of `sides` is bad. Even if we wouldn't want to pass `sides`, we'd probably still do something like remove one from column when at the right under certain circumstances, which would be sides again, only handled in the method above it.

I think with my implementation I've got a bit confused by the `SpanType`. With my approach of fixing these issues it always kinda got into the way because I just wanted to go from cell XY to cellXY including everything from start to end. Properly using this might help with some edge cases.

I think by just rewriting the method from scratch without having to understand what's already there, I might be able to get a better result. Worst-case I'd probably re-implement the same thing again. It's a short method so I think it's worth exploring.

For now I'd rather keep this open and I'll get back to it this weekend or earlier when I have the time. If I didn't find any better solution until the other things are fixed, it's probably fine to merge it as-is."jhonrochaJhonRocha04/04/20 12:11:23 AMTriggering xrdb only on unix systems1
355906/18/20 01:02:57 AMChristian DuerrWhen selecting to the top of the screen, alacritty should scroll"When the user makes a selection and the mouse reaches the top of the screen, the terminal should automatically scroll up to allow selecting lines outside of the current viewport."05/03/20 11:29:12 PMUse frame callbacks instead of vsync on Wayland"Fixes #2851.

This PR should work fine on Wayland and solve some serious problems like freeze when window is offscreen or some glitches on resize. 

>~However it doesn't work nicely with winit redraw events, so it should likely be done there. Anyway I'll publish it so some folks could run it.~

>~I'm also not sure how well it plays with input latency, since it could be worse in theory, but repeat rate on my system seems way more responsive with it.~

Fixed."6"Tbh I like that Alacritty doesn't scroll by default, because this way I can control the scrolling speed myself - e.g. by holding the touchpad button and scrolling with the speed that I prefer. Usually, you have to either wait patiently if the scrolling is too slow, or it's too fast and selects everything till the beginning of history, or, you have to shake the cursor for it to perform better.

UPD: On the other hand, one doesn't confont the other: you can have automatic scrolling when the cursor already reached the top, and you can scroll manually if you want. That's how Termite works"kchibisovKirill Chibisov05/02/20 07:55:42 AMDots for comments1
356103/15/18 07:27:14 PMChristian DuerrAdd scrollback hotkeys"This offers a few additional hotkeys that can be used in combination
with scrollback. None of these are used by default yet.

This implements the following bindings:
 - ScrollPageUp: Scroll exactly one screen height up
 - ScrollPageDown: Scroll exactly one screen height down
 - ScrollToTop: Scroll as far up as possible
 - ScrollToBottom: Scroll as far down as possible

This fixes #1151."04/05/20 02:36:18 PMAdd a keybinding to open OSX Emoji & Symbols picker."This implements a call to OSX's [`orderfrontcharacterpalette()`](https://developer.apple.com/documentation/appkit/nsapplication/1428455-orderfrontcharacterpalette?language=objc) which is the aptly named function to display the standard on-screen keyboard for choosing emoji and of characters.

Similar functionality exists in an undocumented and [unexported function](https://github.com/rust-windowing/winit/blob/master/src/platform_impl/macos/util/mod.rs#L121-L124
) in the `winit` crate. A cleaner solution is to plumb this command through the crates dependencies and avoid the additional explicit dependencies on Objective-C macros in this crate.

Fixes #1895"3The default in other terminals I've used is full page, but i'm not against it as an option. Let's consider it separately.nholsteinNathan Holstein04/05/20 01:25:05 PM"Add a keybinding to open OSX Emoji & Symbols picker.

This implements a call to OSX's `orderfrontcharacterpalette()`[1] which
is the aptly named function to display the standard on-screen keyboard
for choosing emoji and of characters.

Similar functionality exists in an undocumented and unexported function[2]
in the `winit` crate. A cleaner solution is to plumb this command through
the crates dependencies and avoid the additional explicit dependencies on
Objective-C macros in this crate.

Fixes #1895

1 https://developer.apple.com/documentation/appkit/nsapplication/1428455-orderfrontcharacterpalette?language=objc
2 https://github.com/rust-windowing/winit/blob/master/src/platform_impl/macos/util/mod.rs#L121-L124"1
357603/17/18 01:17:00 AMJesse LucasKey: Left or Right mods: Alt not working"Which operating system does the issue occur on?
macOS 10.13.3

When I use alt+left or alt+right Alacritty prints `;3D` and `;3C`"04/12/20 01:27:10 AMLog critical errors to stderr instead of stdout2"This is how I solved it. 
```
  - { key: Left,     mods: Alt,     chars: ""\x1bb""                       }
  - { key: Right,    mods: Alt,     chars: ""\x1bf""                       }
```
"kchibisovKirill Chibisov04/11/20 06:17:33 AMLog critical errors error! instead of println!1
357805/06/18 06:17:04 PMChristian DuerrWrite macro for serde fallbacks"This adds a macro which makes it easy to implement a custom deserializer
for a specific field in the config.

Applying this deserializer and the default value it provides will always
make sure that this value has a valid fallback value.

This also makes a small change to the way the `mouse._*click` fields are
deserialized, because the `threshold` did not have a default value, it
leads to a complete config fallback in the current master.
However by providing 300 as the default, it is possible to fall back to
this value and make sure that the rest of the config is not ignored.

This is a proposal which should make custom deserializers a little more
straight-forward in the future, this fixes #1166."04/11/20 06:48:38 PMAdd the feature to build and copy the binary via Docker"This feature allows the user to compile the alacritty binary in release
mode, without having to install all the rust compiler."5I'm gonna close this issue because it seems more like a short-term hack rather than a long-term solution. I'm gonna try playing around with something which should make it straight-forward to have both fallback values and deprecation warnings without convoluting the complete config.rs with code.mdedonno1337Marco De Donno04/11/20 05:47:29 PM"Add the feature to build and copy the binary via Docker

This feature allows the user to compile the alacritty binary in release
mode, without having to install all the rust compiler."1
358903/11/18 08:46:59 PMNaftuli KayUbuntu 16.04: "### Environment

```
X11, Kernel 4.13.0-36-generic, Ubuntu 16.04 (elementary OS 0.4.1 Loki) amd64
```

I have installed the packages listed in the README.

### Issue

Alacritty panics on start:

```
$ alacritty
thread 'main' panicked at 'XOpenIM failed', /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.1/src/platform/linux/x11/mod.rs:959:17
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```

Backtrace:

```
$ RUST_BACKTRACE=1 alacritty
thread 'main' panicked at 'XOpenIM failed', /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.1/src/platform/linux/x11/mod.rs:959:17
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:68
   2: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:397
             at /checkout/src/libstd/panicking.rs:577
   3: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:538
   4: winit::platform::platform::x11::Window::new
             at /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.1/src/platform/linux/x11/mod.rs:959
   5: winit::window::<impl winit::WindowBuilder>::build
             at /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.1/src/platform/linux/mod.rs:120
             at /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.1/src/window.rs:119
   6: glutin::platform::platform::x11::Context::new
             at /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.13.0/src/platform/linux/x11.rs:207
   7: alacritty::window::Window::new
             at /home/naftuli/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.13.0/src/platform/linux/mod.rs:58
   8: alacritty::main
             at src/display.rs:140
             at src/main.rs:62
   9: std::rt::lang_start::{{closure}}
             at /checkout/src/libstd/rt.rs:74
  10: main
  11: __libc_start_main
  12: _start
```

Really hoping to start using Alacritty."05/30/20 08:45:45 PMRefactor Term/Grid separation 1This is a duplicate of #830, there are some workarounds in that issue that might help you out.chrisduerrKirill Chibisov05/30/20 07:57:23 PMMerge branch 'master' into re_reflow1
360703/13/18 06:11:57 AMYOSHIOKA TakumaEnable SRGB (fix #921)"This fixes #921, the error `Error creating GL context; Couldn't find any pixel format that matches the criterias.`.

I'm not sure whether this is right and ideal solution, but [this change actually fix the issue for some people](https://github.com/jwilm/alacritty/issues/921#issuecomment-372295759) including me."04/18/20 02:34:35 PMUpdate a few dependencies6Might be interesting to see how this works on MacOS. Even without the issue present it seems to work fine on my linux machine.EijebongBastien Orivel04/18/20 10:22:45 AMUpdate winit to 0.22.11
360803/13/18 06:06:06 AMJesse CookeAdd fish shell completions"- [x] `-d --dimensions`

- [x] `-e command`

- [x] add installation instructions to `README`."04/30/20 06:04:03 PMbugfix: LC_CTYPE should default to utf8"## Description
This is a proposed fix for https://github.com/alacritty/alacritty/issues/2800 and https://github.com/alacritty/alacritty/issues/2566.

## Issue
Alacritty was handling locale in a way which could lead to troubles when not setting any locales in your `bashrc`, `zshrc` or similar when running on Mac OS. Without setting any locales Alacritty would output the following:
```
$ locale
LANG=""""
LC_COLLATE=""C""
LC_CTYPE=""C""
LC_MESSAGES=""C""
LC_MONETARY=""C""
LC_NUMERIC=""C""
LC_TIME=""C""
LC_ALL=
```
This however gave problems with some `UTF-8` characters (like the nordic `æ`, `ø` and `å`). Looking at the output from the same command on both `Terminal.app` and `iTerm` shows a difference:

```
$ locale
LANG=""""
LC_COLLATE=""C""
LC_CTYPE=""UTF-8""
LC_MESSAGES=""C""
LC_MONETARY=""C""
LC_NUMERIC=""C""
LC_TIME=""C""
LC_ALL=
```
The key here is that they are both falling back to `LC_CTYPE=""UTF-8""`. `LC_CTYPE` is defined as:

> LC_CTYPE
This category applies to classification and conversion of characters, and to multibyte and wide characters

[Source](https://www.gnu.org/software/libc/manual/html_node/Locale-Categories.html).

## Solution
I propose we introduce a fallback `LC_CTYPE` value. This value should be `UTF-8`. Right now the code is trying to calculate `LANG` based on `NSLocale` from Core Foundation. While doing this we use a trick where we try to set the given locale, to see if it's a valid locale. We do it this way:

First we save the original `LC_CTYPE`.
```rust
let original = setlocale(LC_CTYPE, null());
let saved_original = if original.is_null() {
    CString::new("""").unwrap()
} else {
    CStr::from_ptr(original).to_owned()
};
```

Then we have to verify the locale we found to see if it's valid to propagate to `LANG`:
```rust
let modified = setlocale(LC_CTYPE, locale_ptr);
let result = if modified.is_null() { String::new() } else { locale_id };
setlocale(LC_CTYPE, saved_original.as_ptr());
```

And after this, the `result` will be passed to `LANG` like this: `env::set_var(""LANG"", &locale_id);`
The issue happens when we reset the `LC_CTYPE` on the last line, in the previous block. We reset it to the default value, hence we don't have a fallback solution.

I am suggesting that we still do the check to see if the locale is valid, but then not resetting back to the original `LC_CTYPE` but back to a `UTF-8`. Remember this is a case which only happens when the user is not providing any locales them self. If setting `LC_CTYPE` to something different in `alacritty.yml` it will still use that value. Ditto if overwriting locale in `bashrc`, `zshrc`, or similar it will use that.

Let me know what you guys think."14Thanks for sharing!casperstormCasper Storm04/28/20 03:01:03 PMfix: re-added doc comment char1
361010/02/18 09:04:19 PMJames Bunchtmux background colors cause windows to become completely opaque"macOS 10.13.3 with tmux 2.6

I have Alacritty's opacity level set to 80%:

```
background_opacity: 0.8
```

The resulting Alacritty window is partially opaque as desired. Then I launch tmux and the window becomes completely opaque.

I have discovered that if I stop specifying background colors in tmux's configuration, the Alacritty window remains correctly at the desired 80% opacity.

```
# original tmux configuration
set -g window-style 'fg=colour250,bg=colour233'
set -g window-active-style 'fg=colour255,bg=black'

# workaround for Alacritty opacity issue
set -g window-style 'fg=colour250'
set -g window-active-style 'fg=colour255'
```

My expectation is that a background color choice from a terminal application should not have an impact on that terminal's window opacity. If there is anything I can do currently in either Alacritty or tmux to leverage both background colors and transparency, please let me know."04/20/20 01:33:03 PMAdd deprecation warning for WINIT_HIDPI_FACTORI spent an hour wondering why `WINIT_HIDPI_FACTOR` no longer had any effect with new versions of Alacritty (my bad for not going through CHANGELOG.md). I figured it would be helpful to warn users using the environment variable that it has been renamed to `WINIT_X11_SCALE_FACTOR`.2I don't think this should be closed. There is no solution that I can find.DetegrAntti Keränen04/19/20 07:10:46 AMAdd deprecation warning for WINIT_HIDPI_FACTOR1
361803/13/18 06:07:40 AMChristian DuerrPrevent negative cell dimensions"Prevent the cell dimensions from going below 1, this bug resulted in
allocation of large amounts of memory in the scrollback PR but is also
present on master.

Currently the approach is to just `panic!`, however an `eprintln!` and
`exit` could be an alternative too. I don't think it's realistic to
check this at startup and it should have no performance impact since the
failing method is only called once at startup.

To make it a bit more clear what kind of values are accepted, the
datatypes of offsets and paddings have also been changed so that these
don't accept floats anymore and padding can never be negative.

This should allow us to be a bit more strict with the config to make
sure that errors are printed when invalid values are specified (like
negative padding).

This fixes #1167."04/20/20 11:38:26 PMFix: clear selection on grid swap"Fixes #3290 

It should merge nicely with #3510 but it could wait for it just in case.
"2I don't think this should be closed. There is no solution that I can find.enizorRémi Garde04/20/20 08:28:24 PM"Precise CHANGELOG.md

Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
362104/02/18 09:34:16 PMJoe WilmSelection moving off screen glitchWhen selection moves off the screen, it jumps around a bit right now. I think a solution which first resolves a selection to _buffer_ coordinates and then clips and transforms to screen space would not exhibit this problem.04/21/20 12:27:30 AMFix code formatting =||= This looks like it's resolved.chrisduerrChristian Duerr04/20/20 11:39:56 PMFix code formatting1
363003/13/18 11:43:16 PMYOSHIOKA TakumaTry to create window with different SRGB config when failed (solve #921, #1178)"By this patch, alacritty will try to create window with SRGB enabled at first,
but when creation failed, retry with SRGB disabled.

This may truly solve #921, and issue caused by #1178: <https://github.com/jwilm/alacritty/issues/921#issuecomment-372619121>."05/12/20 03:18:38 PMRemove prebuilt linux binaries"Fixes #3628."9perfect; thanks!chrisduerrChristian Duerr04/23/20 08:19:09 PMRemove travis docker depedency1
363103/14/18 01:11:21 PMJiří ProkopError creating GL context after update to the latest master"Few moments ago I've updated to the latest master, commit 196e60238758a473043ef5df5798c7da25e923d1 and I started getting this error:
```
Error creating GL context; Couldn't find any pixel format that matches the criterias.
```

Which is weird because I found [#1178](https://github.com/jwilm/alacritty/pull/1178) should be a fix for it but I didn't have this error before.

Is there something I have to configure?

**Which operating system does the issue occur on?**
ArchLinux (4.15.8-1-ARCH x86_64 GNU/Linux) with X11"04/23/20 07:04:15 PMUpdate depedencies"This updates all depedencies to remove a few duplicates.

I've also looked through all our dependencies and determined why existing duplications are present. Here's the full list:

```
andrew:
    rusttype 0.7.9
    rusttype 0.8.2
        -> Update andrew to 0.8.2

nom:
    arrayvec 0.4.12
    arrayvec 0.5.1
        -> Update to 6.0.0-alpha1, or ask for backport?

cocoa, core-graphics, core-text, openssl:
    foreign-types 0.3.2
    foreign-types 0.5.0
    foreign-types-shared 0.1.1
    foreign-types-shared 0.3.0
        -> Update upstream

cocoa, core-graphics, core-text:
    core-foundation 0.6.4
    core-foundation 0.7.0
        -> Update upstream

glutin_egl_sys, glutin_gles2_sys, glutin_glx_sys, glutin_wgl_sys:
    gl_generator 0.13.1
    gl_generator 0.14.0
        -> Update upstream

mio:
    miow 0.2.1
    miow 0.3.3
    winapi 0.2.8
    winapi 0.3.8
        -> Update Alacritty to mio 0.7.0

calloop, smithay-client-toolkit, smithay-clipboard, wayland-client, wayland-commons:
    nix 0.14.1
    nix 0.17.0
        -> Update upstream

winit, copypasta, glutin, smithay-client-toolkit:
    proc-macro2 0.4.30
    proc-macro2 1.0.9
    quote 0.6.13
    quote 1.0.3
        -> Update upstream
```

Since updating to mio 0.7.0 is currently not easily possible because of our depedencies, there doesn't seem to be any immediate action possible in Alacritty. However some upstream depedencies might be worth patching."1I'm still seeing this error with latest `master`, but I'm running the new mesa 18.0.0. Anybody else with mesa 18.0.0 having this issue?chrisduerrChristian Duerr04/23/20 01:20:24 AMUpdate depedencies1
363505/29/18 04:50:51 PMJiří ProkopWeird scrolling behavior"I've noticed weird janks when scrolling from the beginning I use alacritty but I wasn't sure what are the reliable steps. Now I'm able to reproduce it on 100%. I'm using i3-wm so it can be related to combination of i3, tmux & alacritty. It doesn't happen in xfce4-terminal with tmux though.

Steps:
1. open alacritty on one workspace, open Chromium on another workspace
2. open tmux and vim inside tmux with some long file, scroll in the middle of the file
3. open some long page in Chromium
4. switch to alacritty, scroll up, scroll down, remember the line and notice that scrolling is working fine
5. switch to Chromium a scroll up for some time (few page, for example)
6. switch back to alacritty and trigger single scroll down or up and notice that scrolling move several lines/pages up

It seems to me that alacritty is not handling properly focus & blur events so when I scroll in another window in the system and get back to alacritty and trigger scroll it will replay all the scroll events which happened while alacritty was in the background (blurred).

My tmux config:
```
set -g default-terminal ""tmux-256color""
set -ga terminal-overrides "",*256col*:Tc"" # See https://github.com/tmux/tmux/issues/34
set -g mouse off
set -g history-limit 100000
set -s escape-time 0
set-option -g status off
set-window-option -g xterm-keys on

bind-key m set-option -g mouse off
bind-key M set-option -g mouse on

bind-key [ copy-mode \; send-keys 0 \; send-keys H

run-shell ~/.files/tmux/plugins/extrakto/extrakto.tmux
```

Arch Linux 4.15.8-1-ARCH x86_64 with X11
xorg-server 1.19.6
mesa 17.3.6
i3-wm 4.14.1-2
tmux 2.6"08/28/20 10:26:04 PMAdd support for reporting window size in pixels and characters"This patch adds the following sequences:

* `CSI 14 t`, to report the window size in pixels.
* `CSI 18 t`, to report the area size in characters.

These sequences are described in [dtterm(5)](https://www.freebsd.org/cgi/man.cgi?query=dtterm&sektion=5&manpath=FreeBSD+12.1-RELEASE+and+Ports).
"12"I am having this behavior in alacritty 0.7.2:
(from $ alacritty --print-events | grep MouseWheel)
```
. . .
[2021-03-15 14:18:11.862878511] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.873569660] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.886251797] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.914556909] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:14.390498883] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:14.390534099] [INFO ] [alacritty] glutin event: WindowEvent { window_id: WindowId(X(WindowId(85983239))), event: MouseWheel { device_id: DeviceId(X(DeviceId(2))), delta: LineDelta(0.0, 79.0), phase: Moved, modifiers: (empty) } }
```
In i3-gaps on arch linux (virtualbox): open alacritty and firefox. scrolling in firefox produces the `DeviceEvent`s, a single scroll tic when returning to alacritty produces the `WindowEvent`, which appears to instantaneously execute 79 scroll events (tics of the mouse wheel). 
I've confirmed this behavior does not happen in gnome-terminal."ayosecAyose08/28/20 09:47:56 PMCompute width and height with usize values1
363903/16/18 12:30:48 AMChristian DuerrRefactor `span_simple` selection"The current `span_simple` selection is everything but simple. This
version should have the same functionality as the current `span_simple`
with the difference that a lot of complexity has been removed.

Not only is this code shorter, it should also be significantly easier to
understand with no ""magic"" to it. This will hopefully prevent us from
having an unmaintainable blob of off-by-one guessing in the repo.

Also removed the `out` file which I used in the original PR because
scrollback is not implemented yet. :)"04/25/20 02:39:28 PMUse embedded resource for window icon"Just a quick one to use `Icon::from_resource` to (on Windows) load the window icon from the resource embedded by the Windows manifest, rather than including it for a second time via `include_bytes`.

In my experience Windows does a slightly better job of scaling the window icon image in this case. It also leads to a binary size saving of 300KB (~6% of a release build as measured on my machine).

Before:

![before](https://user-images.githubusercontent.com/1939362/80275497-7825f480-86d9-11ea-8c4e-52869739dfff.PNG)

After:

![after](https://user-images.githubusercontent.com/1939362/80275498-7c521200-86d9-11ea-8ee3-f7640d93ad0d.PNG)

(It's subtle, but to me lines are in general a bit smoother in the ""after"" shot.)"5"I am having this behavior in alacritty 0.7.2:
(from $ alacritty --print-events | grep MouseWheel)
```
. . .
[2021-03-15 14:18:11.862878511] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.873569660] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.886251797] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:11.914556909] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:14.390498883] [INFO ] [alacritty] glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(12))), event: MouseWheel { delta: LineDelta(0.0, -15.0) } }
[2021-03-15 14:18:14.390534099] [INFO ] [alacritty] glutin event: WindowEvent { window_id: WindowId(X(WindowId(85983239))), event: MouseWheel { device_id: DeviceId(X(DeviceId(2))), delta: LineDelta(0.0, 79.0), phase: Moved, modifiers: (empty) } }
```
In i3-gaps on arch linux (virtualbox): open alacritty and firefox. scrolling in firefox produces the `DeviceEvent`s, a single scroll tic when returning to alacritty produces the `WindowEvent`, which appears to instantaneously execute 79 scroll events (tics of the mouse wheel). 
I've confirmed this behavior does not happen in gnome-terminal."davidhewittDavid Hewitt04/25/20 08:36:57 AMUse embedded resource for window icon1
364603/23/18 06:06:08 PMBooThe screen should scroll down when backspace is pressed"> **Which operating system does the issue occur on?**
> Linux Mint 18.3
> 
> **If on linux, are you using X11 or Wayland?**
> X11

I am using the Scrollback branch.

Actually, typing anything in the terminal scroll it down to see what we actually typed. However it doesn't scroll down when we press the backspace key.
Maybe is it just something forgotten or is it the desired behavior?"04/26/20 08:50:53 PMUpdate help for class option to match man page. Resolves #3615"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage." =||= Other terminals also scroll when commands like `sleep 3; ls -lah` are run. Alacritty does not do this.jeffwindsorJeff Windsor04/26/20 08:50:37 PMMerge branch 'ISSUE_3615' of github.com:jeffwindsor/alacritty into ISSUE_36151
364711/17/18 02:39:14 PMChristian DuerrPrint config error warning on startup"This change adds an error message at the bottom of the screen which will
be displayed when the config file contains any errors.

Currently deprecation warnings are unchanged but it would be possible to
add these too (maybe in yellow?) if it is desired.

The method for rendering text has been changed to always render at the
bottom of the terminal, this seems like a more reliable way of doing
this and it shouldn't cause any issues because under normal use, nothing
should be displayed.

I'd say this is still a bit rough around the edges so feedback is
welcome, maybe some things could be streamlined?
Currently if the terminal is not wide enough, nothing will be displayed,
maybe we should display the message but cut off? Not sure how important
this is because it would probably be fine to not display anything in
small terminals.

All errors are written to `/tmp/alacritty.log`, nothing is written to
stderr anymore, we could do both but I think it should not be necessary
to write anything to stderr anymore.

This fixes #1143."07/22/20 08:05:09 PMAutomatically expands tab selection to nearest tab border"Fixes: https://github.com/alacritty/alacritty/issues/2764

Things to do:
- [x] Add `CHANGELOG.md` entry
- [x] Expand visual selection
- [x] Expand clipboard selection

Potential issues:
 - Changing tab width retroactively affects printed lines with an non-contained `\t`, e.g.: 
```
$ echo '12345678\t'
$ tabs 1,40,50
```

![alactab4](https://user-images.githubusercontent.com/255721/80615750-59f52700-8a40-11ea-8f38-99fdca21bf3d.gif)"1"Instead of always keeping all logfiles, I've made the decision to delete logs by default once Alacritty is closed. If the CLI parameter `--persistent-logging` or the configuration option `persistent_logging` are set, the log file will not be deleted after closing Alacritty.

As always, feedback would be appreciated. I don't think there's any further issues I have with this PR, but I'm unsure if the additional configuration option plus CLI flag are absolutely necessary."Dav1ddeDavid Herberth04/26/20 08:42:15 PM"Expands selection, including a tab, to the nearest tab border

Fixes #2764."1
364803/27/18 04:58:20 PMShalokShalomadd freeBSD support on the top07/04/20 06:13:33 AMUpdate help for class option to match man pages"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage."2Waiting for @jwilm to accept/comment.jeffwindsorChristian Duerr07/03/20 10:30:07 PMFix app_id spelling1
364911/11/18 08:24:42 PMChristian DuerrCenter the grid inside the window"Currently alacritty always puts the grid at the top-left position of the
window. The only distance to the top-left window border is set by the
padding in the config.

However the grid always has a fixed size, and if a cell doesn't
completely fit the screen anymore, the padding at the bottom right
window corner can be significantly bigger than the padding at the top
left.

To fix this whenever there is more space left and there would usually be
a bigger padding at the bottom right, the space is now split up and
added to the padding.

This should always center the grid inside the window and make sure all
borders have the same padding from the text area.

This screenshot shows how it has been until now:
![Before](https://u.teknik.io/kRJwg.png)

Here is how it looks now:
![After](https://u.teknik.io/m4puV.png)

This fixes #1065.

This also solves a few minor clippy issues."05/02/20 01:01:23 AMscrolling:multiplier doc clarification. resolves #3189"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage." =||= @chrisduerr Thanks for the answer, I've opened an issue here: https://github.com/jwilm/alacritty/issues/1778jeffwindsorJeff Windsor05/01/20 11:42:59 PMMerge branch 'master' into issue-31891
366004/10/18 05:13:02 AMMatt Sawyertmux: when switching background color with select-pane -P, color is lost with new lines"Which operating system does the issue occur on?
macOS 10.13.3, with tmux 2.6

steps to reproduce: 
1. open a tmux session
2. press the tmux prefix key, then `:select-pane -P 'bg=red'` (at this point the background of the tmux pane should be red)
3. run a command that has multiple lines of output (e.g. `ls -la`)

results:
the background color after the newline character of each line is not red but the original background color

expected:
the background color should be applied to the whitespace at the end of the line

This works as expected in iTerm 3.1.5."05/01/20 08:57:26 PMCall glFinish right after swap_buffers on X11"It was find out that on X11 swap_buffers doesn't block with vsync on most
systems, so the block will be on the next gl command (glClear on the next
event loop tick for us), which introduces a permament one frame of delay

Fixes #3061."4OK I see the problem now. I was copying the Alacrity.app to my /Applications folder and running it that way. When I invoke alacritty from iTerm via `./target/release/alacritty` I do not see the problem in either the master or scrollback branches.kchibisovKirill Chibisov05/01/20 08:22:31 PMMerge branch 'master' into fix-x11-drawing1
366103/18/18 04:31:32 PMAmos BirdHow can I make certain font smaller"Hello, alacritty renders unicode characters larger than normal characters, ![](https://la.wentropy.com/H0iy.png) . Is there a way to fix that ? thanks!

Archlinux, X11 
"05/06/20 09:58:44 PMDon't hide cursor on modifier pressFixes: #2761.5This will be handled after #957 is implemented.Dav1ddeChristian Duerr05/06/20 09:13:48 PMFix code formatting1
366503/18/18 08:42:43 PMFrank de Jong"Ubuntu - installation fails with ""No package freetype2 found""""Ubuntu 16.04, with all the dependencies listed in the README installed. The full error is 

> --- stderr
> configure: error: Package requirements (freetype2) were not met:
> 
> No package 'freetype2' found
> 
> Consider adjusting the PKG_CONFIG_PATH environment variable if you
> installed software in a non-standard prefix.
> 
> Alternatively, you may set the environment variables FREETYPE_CFLAGS
> and FREETYPE_LIBS to avoid the need to call pkg-config.
> See the pkg-config man page for more details.
> make: *** [/tmp/cargo-install.qGDQTA1ENDff/release/build/servo-fontconfig-sys-ac2ac06b8cdaf817/out/Makefile] Error 1
> thread 'main' panicked at 'assertion failed: Command::new(""make"").args(&[""-R"", ""-f"",
>                             ""makefile.cargo""]).status().unwrap().success()', /home/frank/.cargo/git/checkouts/libfontconfig-3d5e920c02c2e53f/5c1845e/build.rs:17:5
> note: Run with `RUST_BACKTRACE=1` for a backtrace.
> 
> warning: build failed, waiting for other jobs to finish...
> error: failed to compile `alacritty v0.1.0 (https://github.com/jwilm/alacritty#6debc4f3)`, intermediate artifacts can be found at `/tmp/cargo-install.qGDQTA1ENDff`
> 
> Caused by:
>   build failed"05/12/20 01:23:36 PMRender colored emojis' true colors"As they have an alpha channel, we can use it directly for blending
instead of applying the normal text fragment shader that blends it with
the text color and ends up mixing with background as well (particularly
bad on bright background).

Instead of branching on data in the shader, it and storing an alpha
channel for the complete Atlas, it might be wiser to have a separate
Atlas and rendering phase for these glyphs.

Fixes #1864."37Manually exporting `PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig` solved it in my case.lbonnChristian Duerr05/12/20 12:54:34 PMFix code formatting1
366603/18/18 09:36:33 PMMaxim Bazalacritty with tmux with mouse=off (falsely?) detects prompt as having a faux scroll"Arch Linux, X11, scrollback branch (55ba604)

Use default configuration for zsh, tmux and alacritty.

- Open alacritty.
- Start tmux.
- Generate some output (e.g. run `$ tree`).

Mouse mode is disabled by default in tmux, but if you want to make sure, press <kbd>Ctrl+B</kbd> and type: 

```
set mouse off
```

Now scroll up and down with the mouse wheel.

**Expected**: scrollback kicks in.

**Actual**: alacritty thinks there is a faux scroll and sends arrows up/down, so instead of terminal history being scrolled I see the history of commands being scrolled:

![history_scroll](https://user-images.githubusercontent.com/1177900/37571054-0f9671fe-2af8-11e8-9b76-fafa48dbb776.gif)

There are workarounds:

- Disable faux scroll in alacritty.yml
- Disable faux scroll in `.tmux.conf`: `set -ga terminal-overrides ',*256color*:smcup@:rmcup@'`
- Hold <kbd>Shift</kbd> and scroll (@chrisduerr implemented this recently)

The first two workarounds are not very cool, because I want to use faux scroll when it really exists, for example in `man`. Constantly holding <kbd>Shift</kbd> when using tmux is annoying.

But my main issue is really this: why alacritty thinks that there is a faux scroll in prompt? Why it sends arrow keys to the prompt, causing the scroll of my previous commands?

To be fair, I tried in sakura terminal and it does the same. 

If this is could not / should not be fixed in alacritty, do you know perhaps a way to disable faux scroll in the prompt without disabling it completely? Something I could put in `.zshrc` or `.tmux.conf`?"05/01/20 07:28:44 PMclippy fixes =||= "For future Googlers, the second workaround (`set -ga terminal-overrides ',*256color*:smcup@:rmcup@'`) has an explanation here: https://superuser.com/a/314620

> fool the multiplexers into thinking that the terminal has no ""alternate screen"" mode (such as that used by pico, mutt, etc). This is accomplished by setting termcap commands for the session.
> 
> The end result is that the overflow ends up in the terminal's scrollback buffer instead of disappearing. Of course, since this is one static buffer, things will get messy as you switch between screen or tmux windows, but this is handy for quickly flicking up to see the output of an `ls` command or the such.

_(sorry for the zombie post)_"matthiaskrgrMatthias Krüger05/01/20 02:29:19 PMclippy fixes1
366805/04/18 08:47:20 PMOliver Bergerusing a composite manager makes background transparent"Which operating system does the issue occur on?
Ubuntu 16.04, awesome wm

If on linux, are you using X11 or Wayland?
I use X11

If I run one of `compton`, `xcompmgr` or `unagi` the background of an alacritty window gets transparent."05/01/20 11:03:29 PMAllows u8 as mouse binding value"Fixes: #2861

I did not remove ""5"" for compatibility reasons"4I'm gonna close this since it seems to be a duplicate of #1059. Just easier to keep the discussion in one place.Dav1ddeDavid Herberth05/01/20 05:53:43 PM"Use numbers instead of strings for additional mouse bindings

Fixes: #2861."1
367403/19/18 06:01:07 PMNoneText shrinks when moving Alacritty between 4k monitor and retina display"Which operating system does the issue occur on? OSX Sierra

If I start alacritty on my 4k monitor then drag it to my laptop the text shrinks by 4x. If I start it on my laptop then drag it to my monitor the text grows by 4x. 
"05/05/20 10:50:24 PMExtend style guideline documentation =||= This is a duplicate of #71.chrisduerrChristian Duerr05/05/20 10:26:04 PMFormat code1
368503/21/18 01:21:16 PMcsmoeselection span doesn't dispear as expected when scrolling in tmux."Which operating system does the issue occur on?
`Linux 4.14.27-1-MANJARO #1 SMP PREEMPT Thu Mar 15 19:47:13 UTC │
2018 x86_64 GNU/Linux  `
If on linux, are you using X11 or Wayland?
`X11`

When scrolling within `tmux`, the selection span always remains there.(alacritty installed from master without `ScrollBack`)
![out](https://user-images.githubusercontent.com/35686186/37696228-1646cf34-2d10-11e8-8e7f-14caa68608d9.gif)"05/05/20 09:55:43 AMjemalloc"Just testing out CI on Windows.

Jemalloc was faster on my machine on vtebench, so maybe adding it as a feature makes sense. Especially for source based distros like gentoo when you can do that already for some packages." =||= thank you, I made a mistake, it's not a bug but tmux config.kchibisovKirill Chibisov05/05/20 09:24:59 AMjemalloc1
368904/02/18 09:55:33 PMNoneCursor disappears on first column in vim"Moving the cursor down in vim while on the first column causes the cursor to disappear until moved to the second column of a non-empty line. This is on macOS or Linux, vim or neovim, on the scrollback branch at 14a76ec5c78fde8d4fbf1d78e0108ded13a7edc2.

Reproduce: `vim <(echo 'one\ntwo\n\nthree')` and scroll down."05/17/20 09:14:14 PMfeat: subpixel anti aliasing for macOS"This is a draft PR. As agreed with @kchibisov, we will try to finish it in collaboration. The reason being is that I am still very new to the language (and the code base).

The goal of this PR is to fix:
```
# Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
```
This will overwrite all apps on the system, which is not ideal. This PR aims to do it automatically, and only for Alacritty."3This was fixed.casperstormCasper Storm05/17/20 06:21:43 PMchore: imports behind cfg attr1
369303/22/18 11:54:24 PMChris CoutinhoRecent build no longer associated with terminal icon - possible mime-type issue."Which operating system does the issue occur on? I'm on OpenSUSE Leap 42.3

If on linux, are you using X11 or Wayland? X11

---

Starting `alacritty` through another terminal or using a keyboard shortcut works fine, so this is not a build issue; however, `alacritty` used to be associated with terminal icon on my desktop, and now it's a plain white 'unknown' icon.

A recent build of `alacritty` isn't associated with the `utilities-terminal` icon on my machine. I've looked into it a bit, and it seems to be related to it's mime-type. For instance, trying to execute `alacritty` through the file explorer results in the following error:

![screenshot from 2018-03-22 13-29-15](https://user-images.githubusercontent.com/12901868/37770539-0b71c17a-2dd5-11e8-80b3-74cb87709fdd.png)

I was able to fix this problem by building `alacritty` with `RUSTFLAGS=""-C relocation-model=dynamic-no-pic""` (based off a comment in [this answer](https://stackoverflow.com/a/27391580/5536001)), but I don't know enough about how applicable this is to the rest of the project to put in a PR.

Maybe others will find this useful."05/07/20 12:37:50 PMTreat Shift+Backspace as Backspace"This is a fix for #3652.
I decided not to modify the config file since this is a sane default in my opinion."2HI @jwilm thanks for your comment. Just to clarify, I didn't changed the `.desktop` file - it's the same one distributed with this project. After building `alacrirtty` using `cargo build --release`, I copied the resulting binary to `~/.local/bin` where I have other user-level packages installed. I also don't know what you mean by a config issue - do you have an idea of where to look?AelnorAlexey Chernyshov05/06/20 09:00:27 PMTreat Shift+Backspace as Backspace1
369903/23/18 05:47:39 PMChristian DuerrRework auto-scrolling options"This changes two things, the first thing it does is that now whenever a
keybinding sends an escape sequence, the viewport is automatically
scrolled to the bottom.
This is enabled by default and fixes #1187.

The second thing is automatic scrolling when a command writes to the
terminal. So when running a command like `sleep 3; ls -lah`, alacritty
will scroll to the bottom once the output is sent, even if the viewport
is currently not at the bottom of the scrollback.
Because this can have an impact on performance, and is not enabled by
default in terminals like iTerm or Termite (VTE), it is an opt-in
setting in the config."05/07/20 11:10:52 PMAdd a required package to avoid slow startup timeWhen building from sources, not having `libfontconfig-dev` can cause slow startup times (like illustrated in https://github.com/alacritty/alacritty/issues/2742). For Clear Linux, we were not suggesting to install the proper package in order to avoid slow startup times. This is a fix to suggest installing this package. =||= This looks great; thanks!phacopsChristian Duerr05/07/20 10:32:00 PMFix INSTALL.md platform ordering1
370303/23/18 01:10:33 AMChristian DuerrAlacritty's `-v` flag does not work"Alacritty's `-v` flag is used to help with debugging issues and print what is currently going on in the application. This should provide similar output to `RUST_LOG=... alacritty`.

However with recent versions of alacritty, the output of `-v` is completely empty.

This should be fixed so that `-v` outputs debug information again. The different levels of this flag (`-v`, `-vv`, `-vvv`) are all broken and should be fixed to recover the original functionality. So `-v` should print minimal debug information and `-vvv` should print everything we have.
"05/14/20 01:25:12 AMRescept embolden Fontconfig settingFixes #1754.2This looks great; thanks!kchibisovKirill Chibisov05/14/20 01:12:16 AM"Update font/src/ft/mod.rs

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
370903/23/18 01:10:28 AMHarlan Lieberman-BergExplicitly call log::set_max_level (Closes: #1201)"For some reason, log 0.4 requires that we explicitly set the log level
with log::set_max_level or it defaults to Off.  The documentation
isn't clear but suggests we must do this in addition to doing the
filtration ourselves in the Log impl."12/12/20 12:22:36 AMAllow for Commands to take visible or all text as input"Fixes #1615. (I finally got around to it!)

There are a few warts here so I don't expect this to be accepted in its current form.

I went with `ToString` as suggested in https://github.com/alacritty/alacritty/issues/1615#issuecomment-433473695, but that doesn't provide clean support for the distinction between ""only visible text"" and ""all text"". I also implemented it for all `Grid<T> where T: GridCell + ToString` which means allocating a lot of small strings, but I'm not sure if it would be acceptable to implement it only for `Grid<Cell>`. I left a TODO about this because it really feels bad to me as-is.

The ""visible text"" and ""all text"" naming doesn't seem great, but I don't know what would be better.

I changed `start_daemon`, but I've only tested this on Linux i.e. the `cfg[windows]` one is completely untested.

There are no tests for the command-spawning part or the new configuration possibilities, but that seems to be the status quo anyway?"7Thanks! This looks great. That API seems a bit surprising :upside_down_face: DeewiantMatti Niemenmaa05/10/20 05:06:39 PM"Move grid stringification from Grid to Term

To take advantage of the fact that we know it's a Grid<Cell>, so we no
longer need to use the expensive Cell::to_string."1
372205/18/18 10:37:58 PMWayne Ashley Berrydiff-so-fancy rendering strange characters"> Which operating system does the issue occur on?

macOS

> If on linux, are you using X11 or Wayland?

n/a

---

The output from [diff-so-fancy](https://github.com/so-fancy/diff-so-fancy) does not render correctly on Alacritty.

*Alacritty*

<img width=""1250"" alt=""screen shot 2018-03-23 at 17 19 08"" src=""https://user-images.githubusercontent.com/727262/37837662-797beb02-2ebe-11e8-9cc6-da81745df86f.png"">

*iTerm2*

<img width=""1382"" alt=""screen shot 2018-03-23 at 17 19 20"" src=""https://user-images.githubusercontent.com/727262/37837667-7d7839cc-2ebe-11e8-8bd1-d73239cf3827.png"">
"05/13/20 09:58:35 AM"Fix OSCs terminated by \x9c byte in unicode"Fixes #3591. =||= @unphased that was my fault, sorry about that. should be fixed in https://github.com/jwilm/alacritty/pull/1327chrisduerrChristian Duerr05/13/20 09:25:38 AMAdd changelog entry1
372310/02/18 09:02:55 PMTaylor D. LeeUbuntu: Error creating GL context; Some of the required attributes are not supported"Which operating system does the issue occur on?

Ubuntu 17.10

If on linux, are you using X11 or Wayland?

Wayland?


It seems to build fine, but when I try to execute the binary, I get this error:

Error creating GL context; Some of the required attributes are not supported"05/14/20 02:35:23 AMupdated alacritty.yml to add clarity to url launcher comments"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage." =||= Closing this as a duplicate of #1083.tsherrardTyler G. Sherrard05/14/20 01:53:42 AM"updated alacritty.yml to add clarity to url launcher comments

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
372904/02/18 09:25:11 PMChristian DuerrFix cursor not showing in first column"There was a bug in the display iterator where the first column was never
reached after the top line because it was instantly incremented to 1
after it was reset when iterator column reached the end of the terminal
width.

This has been fixed by making sure that the column is never incremented
when the column is reset due to a change in terminal line.

This fixes #1198."05/16/20 12:16:22 AMFix vi ScrollToBottom motion"This resolves an issue with the ScrollToBottom motion in vi mode where
it would jump between the first unoccupied across wrapped lines and the
first unoccupied in the current line." =||= Closing this as a duplicate of #1083.chrisduerrChristian Duerr05/15/20 11:23:02 PM"Fix vi ScrollToBottom motion

This resolves an issue with the ScrollToBottom motion in vi mode where
it would jump between the first unoccupied across wrapped lines and the
first unoccupied in the current line."1
373104/02/18 03:46:43 PMChristian DuerrFix selection tests"The latest selection changes broke a few tests, these have been
corrected.

Two of these tests were broken because they assumed different span
types, the test have been changed here because the result was correct.

One test did actually catch a bug where selection of two cells from
right to left would incorrectly mark the cells as selected even though
they should not have been, this has been fixed in the `simple_span`
method.

This is also rebased on top of the latest selection branch."05/16/20 03:23:54 PMFont ligatures"Hello everyone, 

I've never written rust before in my life, so I have no idea what I am doing here. 
I've seen [this comment on this issue](https://github.com/alacritty/alacritty/issues/50#issuecomment-629598818) about this branch that just needed to be rebased against the repo's master and thought I could help out by doing so.

I've just rebased [this](https://github.com/thunderseethe/alacritty/tree/font-ligatures) branch into my master that I've just forked out of alacritty's official repo.
I'm stepping out to run a few errands but feel free to pitch in and give feedback on the work done so far (Huge shout out to [thunderseethe](https://github.com/thunderseethe) for kicking off (and highly likely wrapping up the work in here). 

fixes #50"1Thanks @chrisduerr. I ended up cherry picking this onto the scroll/fix-tests branch after a rebase.lucazzChristian Duerr05/16/20 12:16:21 AM"Fix vi ScrollToBottom motion

This resolves an issue with the ScrollToBottom motion in vi mode where
it would jump between the first unoccupied cell across wrapped lines and the
first unoccupied cell in the current line."1
373403/28/18 06:27:18 AMKirill BobyrevIssue while using Fish + Tmux + SSH + Vim"# General information

I assume what I experience are several issues, but since I am not familiar with the alacritty internals I will describe my experience in a single issue.

## Steps to reproduce & tools usage

In my terminal emulator I use Fish. After opening alacritty I connect to a remote server via `$ ssh user@host` and these are the issues I'm having:

### Erasing text

While trying to erase text I'm typing the previous symbols are not removed. Instead, spaces are added and the text I enter after that erasure attempt comes after these spaces.

For example I try to type `$ echo $HOR` then I realise I didnt want to type ""R"" and I try to erase it to end up with `$ echo $HOME`. I press backspace and get `$ echo $HOR_` (`_` corresponds to a whitespace, otherwise it doesn't render correctly in markdown). Finally, I type `ME` and get

`$ echo $HOR ME`

Pressing enter makes the command execute and actually reveals that the real contents of last command are `$ echo $HOME`.

### Vim issues

Trying to edit something with Vim is a nightmare, too. Launching it causes a warning:

```
E437: terminal capability ""cm"" required
Press ENTER or type command to continue
```

The opened Vim buffer is messed up, text is shuffled along the lines, there is a huge offset from the beginning of each line, none of the visual effects are present. Closing it (blindly, of course) leaves the contents of that messed window in the terminal and only shows the interpreter prompt after it while leaving the following message:

```
'tmux-256color': unknown terminal type.
```

The very same message appears on any attempt to do `$ clear` or any other terminal-related stuff.

### Other terminals

I have checked `urxvt` terminal, using it none of the issues above are reproducible, the experience is satisfactory.

## Environment information

#### Which operating system does the issue occur on?

Arch Linux

#### If on linux, are you using X11 or Wayland?

X11

#### Software information & Extra

If it helps, here's the information about the software I'm using (basically all the updated Arch packages + the ones on the remote server.

* alacritty-git 0.1.0.755.g6debc4f-1 installed from AUR
* openssh 7.6p1-2
* Vim on the remote server (OpenSUSE)
```
VIM - Vi IMproved 7.4 (2013 Aug 10)                                                                                                    Validated By    : None
Included patches: 1-207, 209-326                                                                                                      
Compiled by 'http://www.opensuse.org/'
```

Again, if it helps, here are my config files:

* [alacritty.yml](https://github.com/omtcvxyz/dotfiles/blob/master/.config/alacritty/alacritty.yml)
* [.tmux.conf](https://github.com/omtcvxyz/dotfiles/blob/master/.tmux.conf)
* [.vimrc](https://github.com/omtcvxyz/dotfiles/blob/master/.vimrc)
* [.bashrc](https://github.com/omtcvxyz/dotfiles/blob/master/.bashrc)"05/16/20 11:31:02 PMBump winit to 0.22.2"Fixes #2601.
Fixes #2475." =||= Oh sweet, didnt cross my mind to put in the full path. This works. Thank you @rumpelsepp chrisduerrChristian Duerr05/16/20 09:57:22 PMBump font depedencies1
373503/27/18 05:06:18 PMDavide CasellaWrongly opened issue""05/17/20 03:32:07 PMFix crash when writing wide char in last column"This resolves an issue where trying to write a fullwidth character in
the last column would crash Alacritty, if linewrapping was disabled.

Instead of assuming that the linewrap put after the linewrapping spacer
was successful, the character writing is now skipped completely when
trying to put a wide character in the last column."1Oh sweet, didnt cross my mind to put in the full path. This works. Thank you @rumpelsepp chrisduerrChristian Duerr05/17/20 03:50:35 AMFix changelog message1
373603/28/18 09:19:15 PMMatt KeelerAlacritty is preventing automatic graphics switching"Which operating system does the issue occur on?

macOS

If on linux, are you using X11 or Wayland?

According to activity monitor, alacritty is requiring the high perf gpu in my laptop. I looked in the Info.plist and the key for claiming automatic graphics switching is in there. Should the switching work and if not I would like to request it as a new feature.
"05/20/20 08:49:12 PMPerform glClear() on-screen on X11"Fixes #3061.

On X11, `glClear()` relies on dimensions from the WM to know what portions of the screen it should color on.

These dimensions may be different for when the window is shown, and when the window is hidden. But the former tends to be more reliable (this is especially the case on tiling WMs which remap windows after they are shown).

So we only call `glClear()` when the window is on-screen.

This PR makes Alacritty call `set_visible()` earlier during init on X11 (the same behavior prior to 0815774cbfb9d1421b8077d5d9d641faf5f818c1), because this seems to be the only way I can get the window to init at the correct dimensions.

Other than that, it also makes Alacritty call `glClear()` earlier on X11 (right after `set_visible()`). This is to avoid having the window from being shown with an uninitialized surface (what 0815774cbfb9d1421b8077d5d9d641faf5f818c1 fixes) during init."10Hey, sorry about that. This issue is being actively tracked in #210. The TLDR is that an upstream patch broke support, and we are waiting on a patch.arvl130Angelo Geulin05/18/20 08:14:45 AMRework previous commits to be less obstrusive1
374710/02/18 09:01:18 PMDavid AwadDoesn't build on osx. "Which operating system does the issue occur on?
using latest macosx, 2017 13 inch macbook pro with out the touchbar. 
fish shell.
rust version
```
rustc 1.24.1 
```

I compiled the repo following the instructions in the readme and the result looks like this when running the application. 

<img width=""1440"" alt=""screen shot 2018-03-29 at 11 21 46 am"" src=""https://user-images.githubusercontent.com/4019054/38097601-cd3c32a4-3343-11e8-83fe-971b2b396c7f.png"">"05/18/20 07:29:21 PMMake cursor thicknesses individually configurableThis makes each of the cursor types' thicknesses individually configurable; a thicker beam is nice for cursor visibility in vim, but the same isn't true for the underline (a thicker underline looks a bit strange in other programs). Three configuration variables are exposed: `cursor.thickness.{beam,underline,hollow}`. This PR includes miscellaneous formatting changes made by `cargo fmt`, apparently needed for CI to pass (I can revert the ones not affecting files relevant to these changes, if that's needed).3"Since there has been no feedback on this issue and it does work on multiple macOS versions, I'm closing this as resolved.

If you should still run into this problem, please make sure that you have the latest Rust version installed (ideally with `rustup`). And if you run macOS 10.12 or lower, please try running https://github.com/jwilm/alacritty/pull/1605 instead."LawAbidingCactusLawAbidingCactus05/18/20 06:53:09 PMmake cursor thickness individually configurable1
374804/12/18 06:27:41 PMHelder S RibeiroLinking error on macOS"- macOS 10.13.3
- rustup show:

```
active toolchain
----------------
stable-x86_64-apple-darwin (directory override for '/Users/hsribei/usr/src/alacritty')
rustc 1.25.0 (84203cac6 2018-03-25)
```
- command run: `cargo build --release`

- error:

```
error: failed to link or copy `/Users/hsribei/usr/src/alacritty/target/release/deps/alacritty-d4ffa9f66d14fa87.dSYM` to `/Users/hsribei/usr/src/alacritty/target/release/alacritty.dSYM`
Caused by:
  the source path is not an existing regular file
```

- note: the file `/Users/hsribei/usr/src/alacritty/target/release/deps/alacritty-d4ffa9f66d14fa87` does exist, just not with the `.dSYM` extension."05/18/20 11:43:59 PMReadme link to alacritty.yml"Adds a direct link to alacritty.yml for convenience.

Also I changed the phrase ""default configuration"" to ""example configration"". I was caught by surprise when the ""default shell"" shown alacritty.yml is bash but Alacritty actually used zsh (supposedly because that is my macOS user default). So it seems better not to promise that alacritty.yml represents the defaults." =||= "I ran `cargo clean`, tried again, and it worked  ¯\_(ツ)_/¯"camsteffenCameron Steffen05/18/20 07:44:28 PMReadme link to alacritty.yml1
375303/30/18 02:47:40 AMBernardo MeurerFixes typos in READMEFixes a typo in the name of FreeBSD, and reorders the OS support list alphabetically.05/20/20 10:22:40 PMUpdate copypasta to v0.7.0"Fixes #3592." =||= Thanks!kchibisovKirill Chibisov05/20/20 09:40:40 PM"Update copypasta to v0.7.0

Fixes #3592."1
376105/05/18 03:10:59 PMNoneDouble pasting in vim when using mouse middle click (linux, X11)"Hi guys,

Many thanks for the hard work!

In linux, X11, using vim, I have a ""double pasting"" behaviour when pasting with the mouse middle click.
Disabling the mouse binding in the alacritty conf prevents from pasting in the term, but still works inside vim itself.

I guess this is a alacritty issue (or maybe feature if it is the intended behaviour ;-) ) as my current vim config works as expected in other term (eg xfce-terminal).

Cheers!"07/13/20 11:30:31 PMFixes the missing ₿ character"I did face a problem on Alacritty on macOS, it was not showing the `₿` character, all the issue evolution can be found here: https://github.com/alacritty/alacritty/issues/3737

With help on that issue, I manage to find a solution that is working fine for me, the solution is to change the fallback fonts to use the fonts already installed on the machine.

So I'm opening this MR in a hope that those changes can be benefic for the project."4@chrisduerr @jwilm thanks :Dademar111190Ademar Alves de Oliveira05/23/20 04:00:25 PMFixing the missing ₿ character1
376307/21/18 05:41:40 PMAleksandr PasechnikNumpadEnter sends newline on MacOS05/23/20 11:52:37 PMUpdate dependencies =||= "Hello, first of all thanks for opening this PR and contributing to Alacritty!

I'm not quite sure what the policy on adding keybindings is at this point, since there are a lot of issues currently open where workarounds exist that include just adding certain keybinds. Nobody would want a keybind to exist by default that shouldn't exist by default, but on the other hand every keybind that works in all other terminal emulators by default should also work in alacritty without having to configure anything.

Because I'm not able to answer the question what should be added and what shouldn't, it's probably going to take a while until there's any conclusive decision if this PR should be merged or not (or which changes need to be made).

I would expect this to be resolved after scrollback is merged when we can put some more thought into the little things again. In the meantime, please excuse the delay and please rest assured that this is not put off because of the quality of the PR. :+1: "kchibisovKirill Chibisov05/23/20 09:12:00 PMUpdate dependencies1
376401/07/19 12:35:49 PMClar FonAllow TOML configuration filesI personally prefer using TOML to YAML, and at least allowing an alacritty.toml instead of alacritty.yml would be nice.05/24/20 12:52:48 AMdeps: remove unused deps as of upcomming -Wunused-crate-deps1"@catastrop you should pick the configuration format that is best for your use case and not pick the configuration format that your programming language's build/package management system uses. Maybe you could convert the config file to toml and prove to us that it is a good fit for this use case.

It was some time since I looked into it. But I think this was approximately my reasoning. In toml nested tables look like:

```toml
[foo.bar.baz]
abc = ""value""
[foo.bar.qux]
abc = ""value""
```

whereas in yaml

```yaml
foo:
  bar:
    baz:
      abc: value
    quz:
      abc: value
```

arrays of tables are also horrible on toml:

```toml
[[foo]]
a = ""something""
b = ""something""
[[foo]]
a = ""something else""
b = ""something else""
```

vs

```yaml
foo:
    - a: something
      b: something
    - a: something else
      b: something else
```"matthiaskrgrChristian Duerr05/24/20 12:33:48 AMRemove unnecessary caret1
377005/05/18 03:10:59 PMChristian DuerrDon't paste selection when in mouse mode"When the mouse mode is set using either 1000h, 1002h or 1003h, the
selection should not be pasted when hitting the middle mouse button,
because it is job of the application to handle this when mouse mode is
enabled.

This has been solved by checking for the current mouse modes whenever
the `PasteSelection` binding is invoked.

This fixes #1215."05/27/20 03:24:02 PMSet IUTF8 input setting on supported platformsFixes #3769. =||= "@catastrop you should pick the configuration format that is best for your use case and not pick the configuration format that your programming language's build/package management system uses. Maybe you could convert the config file to toml and prove to us that it is a good fit for this use case.

It was some time since I looked into it. But I think this was approximately my reasoning. In toml nested tables look like:

```toml
[foo.bar.baz]
abc = ""value""
[foo.bar.qux]
abc = ""value""
```

whereas in yaml

```yaml
foo:
  bar:
    baz:
      abc: value
    quz:
      abc: value
```

arrays of tables are also horrible on toml:

```toml
[[foo]]
a = ""something""
b = ""something""
[[foo]]
a = ""something else""
b = ""something else""
```

vs

```yaml
foo:
    - a: something
      b: something
    - a: something else
      b: something else
```"kchibisovKirill Chibisov05/27/20 03:52:49 AMFix1
377107/01/18 02:22:57 PMAvindra GoolcharanREADME: opensuse package availableadds `zypper` install line07/14/20 09:03:37 AMPrevent SHELL clobbering on not macos. =||= "Sorry for the delay, I see nothing that would keep us from merging this right now. It shouldn't conflict with anything since it's just a README change.

Thanks for the PR!"MattbazookaChristian Duerr07/14/20 12:32:28 AMFix build failures1
377310/05/18 07:53:43 PMSimon ZeniBitmap glyph not affected by offsets"Hi, I'm running alacritty on Archlinux with X11, and the font [ttyp0](https://people.mpi-inf.mpg.de/~uwe/misc/uw-ttyp0/). I am using the latest version available of both alacritty and ttyp0 from AUR.

I'm using the agnoster theme with fish, and the little arrow glyph is misplaced.
![](https://sr.ht/ITKh.png)
Here is the font config that i'm using
```
font:
  normal:
    family: UW ttyp0
    style: Regular

  bold:
    family: UW ttyp0 bold
    style: Bold

  italic:
    family: UW ttyp0
    style: Italic

  size: 12.0

  offset:
    x: 0.0
    y: 0.0

  glyph_offset:
    x: 0.0
    y: -2.0
```
I tried to modify the `y` offset of the glyph to something really high, and nothing moved.


"05/27/20 02:46:53 PMFix build warnings on macOS/Windows =||= "Note that a recent change in Alacritty altered the type of the offset from a float to an integer. So to make this work you'll have to use integer values instead of floating point numbers.

To make sure that there is no problem with the configuration file, please make sure that when launching `alacritty` from the CLI, that no errors are printed to stderr.

If this should still cause issues, please report back. Otherwise if this solved the issue, please close it."kchibisovKirill Chibisov05/27/20 04:51:13 AMFix build warnings on macOS/Windows1
377608/25/18 02:36:15 PMFelipe MarcelinoPart of screen unused"Which operating system does the issue occur on? Manjaro/i3

My neovim editor has some space unused(below/right):

![1522625564_2032_01 04 2018_1366x768](https://user-images.githubusercontent.com/15383718/38178615-05d87054-35ed-11e8-91f9-3f6f0b47d2ff.png)

But, when I try another terminal, like xfce-terminal:

![1522626105_2041_01 04 2018_1366x768](https://user-images.githubusercontent.com/15383718/38178621-1eaf8298-35ed-11e8-8274-89d0a6d884e6.png)

I  don't have this space below and right.

"07/30/20 07:19:43 AMPerform glClear() on-screen on X11"This is my attempt #⁠2 at getting a fix for #3061 merged into upstream. 😅

The way we fix it is still the same. So I've chosen to reuse the title. But there's a few differences on how we do things now.

I don't think it's worth your time me explaining what I changed since then. The only things that should stand out now is that:

1) We now call `api.clear()` much later in the process (only in X11).

The reason for doing this is still as the title implies. Though, the decision to do it this way was based on a suggestion by @kchibisov in the previous thread. It was suggested that calling things nearer to `run_return` might help make the previous fix work better. And in fact, it actually does, with some tweaking. So I'm submitting it here now for further review.

2) We now do `api.clear()` behind ifs and conditionals.

The reason for doing this is to retain our previous behavior in other systems (MacOS, Windows, Unix with Wayland) where this bug doesn't exist. I'm not sure if there are better ways to do this yet. If so, please tell me.

[This was something I actually also did in my previous PR, but I failed to explain why. Hope that clears it up now why there are new ifs and conditionals everywhere]

I've done my best to comment on every change I made, but there's probably a few things I still left here and there. If so, kindly please tell me how I could improve on that. Thank you for your time.

\[[master](https://i.imgur.com/dspmolA.mp4)\]
\[[patched](https://i.imgur.com/lBQZkh8.mp4)\]"16Closing since there was no more reply and I do not believe what's reported here is an Alacritty issue (or it's something that's tracked in a different issue already).arvl130Angelo Geulin05/28/20 06:22:03 AMAdd missing braces1
377704/02/18 09:25:50 PMJoe WilmFix cursor not rendering"There is an invariant on DisplayIter than `line` and `col` always
point to the next cell, but that wasn't being upheld at the end of the
line. They were pointing to one off the current row, and then next()
would get called, and col would point to 1 at the end and never 0 for
that line."05/27/20 04:39:45 PMAdd documentation about patch releases =||= See #1205 as an alternative implementation.chrisduerrChristian Duerr05/27/20 04:00:01 PMClarify changelog review1
378804/03/18 03:21:58 PMCrypto Eraser/usr/local/bin/ is stripped from the $PATH env. variable"Which operating system does the issue occur on?
OSX 10.11.6 (15G1004)

If on linux, are you using X11 or Wayland?
(Not applicable)

Is it possible that, somehow the `/usr/local/bin/` string is stripped from the `$PATH` variable.

When  running iTerm2 or the native OSX terminal, everything is fine. However, when I fire-up Alacritty, I have noticed that `/usr/local/bin/` is not in there?

I have `npm` and `gulp` installed there, so I have noticed this issue when those stopped working inside Alacritty."05/29/20 06:22:17 AMRemove env_logger depedency"The env logger has been broken for over a year and is not used by anyone
as far as I know. This removes this option entirely in favor of
Alacritty's built-in logger level selection flags." =||= There's already an open issue capturing that: #1071chrisduerrChristian Duerr05/29/20 05:59:41 AM"Remove env_logger depedency

The env logger has been broken for over a year and is not used by anyone
as far as I know. This removes this option entirely in favor of
Alacritty's built-in logger level selection flags."1
379604/02/18 10:26:09 PMCrypto Eraserosx126"Which operating system does the issue occur on?

If on linux, are you using X11 or Wayland?
"05/30/20 07:54:57 PMUpdate dependencies =||= There's already an open issue capturing that: #1071kchibisovKirill Chibisov05/30/20 06:15:07 PMUpdate dependencies1
380212/29/20 07:06:35 PMJesse Luehrsalt-keys don't always generate the right keycode when xmodmap is used"Which operating system does the issue occur on?
linux

If on linux, are you using X11 or Wayland?
x11

in the normal case, both alt+num and alt+shift+num work properly (they send an escape character before inserting the character itself). i have a .Xmodmap which swaps the shifted state of the number row (so for instance `keycode 10 = exclam 1`), though, and with it, alt+shift+1 still sends `\e1` but alt+1 sends just `!`. alt+2 does send `\e@` though, and it looks like this is because the glutin library contains a keycode for `At`, while it doesn't for any of the other shifted num-row characters - the key event that is being processed contains `Some(At)` in this case, while it contains `None` as the `VirtualKeyCode` for the other cases. i'm not sure if this is a thing that would need to be fixed in glutin or if it can be worked around in alacritty directly, but it'd be nice if it could be made to work (all of the other terminals i've tried have handled it correctly)."06/01/20 08:05:54 AMRemove winpty reference from INSTALL.md"Windows instructions in `INSTALL.md` still refers to WinPTY which is no longer automatically built. This patch removes the reference."1Closing as duplicate of #55.BYKBurak Yigit Kaya06/01/20 08:04:27 AM"Remove winpty reference from INSTALL.md

Windows instructions in `INSTALL.md` still refers to WinPTY which is no longer automatically built. This patch removes the reference."1
380504/14/18 05:17:51 PMMatt T. Proudalacritty: add support for OpenBSD."This commit expands the conditional compilation directives to support
building Alacritty for OpenBSD.  The build succeeds, and Alacritty runs
without issue once https://github.com/rust-lang/libc/pull/957 has been
merged and added to a versioned release.

This has been tested on the recently-released OpenBSD 6.3 on amd64 with
rustc 1.24.0 from its standard ports tree.

Oligatory screenshot: https://twitter.com/khanreaper/status/981073170580017153"06/02/20 09:31:06 PMAdd feature gate for WinPTY"A feature gate for WinPTY support. This should make it easier for those who want to contribute and have Windows as a primary OS.

(`winpty-sys` crate is slow and painful to build; it needs a lot of C/C++ packages installed on your machine, including llvm, before it will compile.)"1Ready for re-review.davidhewittChristian Duerr06/02/20 08:42:28 PMFix code formatting1
380809/23/18 04:21:48 PMAustin GlaserTerminal doesn't render when resized without focus (i3)"Which operating system does the issue occur on?

Linux, Ubuntu 16.04 (w/ i3 as window manager, `compton` as compositor)

If on linux, are you using X11 or Wayland?

X11

I'm encountering an issue which seems similar to #53. As stated above, I'm using i3 on a ubuntu system. I'm also using `compton` as a compositor, but the issue is still present even if I disable it.

When the window is resized (in response to a new window being opened, the layout being changed, etc), the window is rendered incorrectly until it gets focus.

Interestingly, the window is re-rendered properly if the mouse's location is over the *new* window location. In this case, the window still seems to briefly render in the problematic state and then get fixed. Note that the window still does not get focus in this situation.

I tried applying a patch similar to the one suggested in the old issue:

```patch
diff --git a/src/event.rs b/src/event.rs
index 72cc61e69f0a..c36e688ba68d 100644
--- a/src/event.rs
+++ b/src/event.rs
@@ -339,7 +339,7 @@ impl<N: Notify> Processor<N> {
 
                         processor.on_focus_change(is_focused);
                     }
-                    _ => (),
+                    _ => println!(""Event={:?}"", event),
                 }
             },
             Event::Awakened => {
```

and got the following output when experiencing the issue:

```
Event=Moved(2, 0)
Event=Moved(1922, 18)
```

When the cursor is over the area where the window will exist after the resize, I get the following output instead:

```
Event=Moved(2, 0)
Event=CursorEntered { device_id: DeviceId(X(DeviceId(2))) }
Event=Moved(1922, 18)
```

A couple screenshots:
![broken](https://user-images.githubusercontent.com/3254886/38282582-1c99cb3a-376e-11e8-9a80-333c1c5ad009.png)
![broken2](https://user-images.githubusercontent.com/3254886/38282583-1cadf808-376e-11e8-8eef-05a25aa8beac.png)

I'm happy to attach my config as well if you think that could be helpful."06/03/20 12:01:27 AMFix dropping of multiple files"This pull request is a fix for the problem occurring in #3767 where dragging multiple files into the terminal doesn't automatically separate the file names. This just appends a space to the string being written to the pty.

Apologies if the code style isn't write this is my first contribution to a Rust project." =||= This does seem to fix the problem!FernandoPicazoChristian Duerr06/02/20 11:30:35 PMFix code formatting1
381008/11/19 03:00:58 PMMichal 'vorner' VanerMouse scrolling in nvim results in ctrl+T?"Hello. For some time I was observing some strange behaviour and assumed it was some kind of plugin in nvim responsible. But after a time I tracked it to alacritty.

I have `set mouse=a` in nvim configuration. That way, when I use the mouse scroll wheel, it should actually scroll in nvim. This is what happens if I run nvim in other terminals, like urxvt.

With alacritty, I get an error message „tag stack empty“, when scrolling either up or down (doesn't matter). The same error message appears if I press ctrl+T.

Alacritty version should be current master. Is there anything I should check out?

Which operating system does the issue occur on?

Linux (gentoo, to be specific).

If on linux, are you using X11 or Wayland?

X11."06/03/20 07:52:51 PMAdd 0.4.3 to changelog =||= "Makes sense, thanks for your explanation.
I just realized that the Solus package does not place the terminfo files in the correct location, hence `alacritty` couldn't be used as the default.
Submitting a PR for this in the Solus repo right now."chrisduerrChristian Duerr06/03/20 07:27:47 PMAdd 0.4.3 to changelog1
381110/02/18 08:54:18 PMRobert Andrew DitthardtWeird font rendering issues"Linux, xorg, awesomewm. kernel 4.13.13 on ubuntu

So...this is weird. If I start alacritty from the shell, fonts render incorrectly in the session. If I'm running it from somewhere that already has an xorg session, like from the already misrendered alacritty, it renders correctly.

[example](https://imgur.com/a/wj5r6)

"06/04/20 08:24:10 PMFix font regression on macOS"The `0.0` alpha background works great for emoji, but normal text does not render well on macOS. Instead, use `1.0` for non-pre-colored glyphs.

Fixes #3809" =||= This seems to be an issue with fontconfig fallback. This is tracked in #1560.thornjadJade Michael Thornton06/04/20 07:52:20 PMmove declaration1
381701/19/20 04:14:04 PMiximeowUnicode strikethrough weirdness"#### Which operating system does the issue occur on?
Seen on linux, dunno about others.

#### If on linux, are you using X11 or Wayland?
X11

Unicode strikethrough overlay (for me!) appear to not overlay as much as next-to-lay:
![an example](https://user-images.githubusercontent.com/4615790/38347731-10b162bc-3852-11e8-8969-24a4ca91749a.png)

Someone else saw them overlay, but with empty space where I see the standalone strikethrough in the above image.

I'm using alacritty 0.1.0, font is ubuntu mono, haven't tried to replicate elsewhere (didn't see another issue but this seems like something that might already be known or fixed)"06/04/20 10:10:32 PMRefactor Shell, Command, and Launcher to share impl =||= Should have been fixed in 1cebcd660bf0b6dc514341fe6bc7a392b1572849 to be precise.kchibisovKirill Chibisov06/04/20 09:21:29 PMRefactor Shell, Command, and Launcher to share impl1
382204/05/18 04:42:05 PMNoneUnnecessary parentheses around function argument while cargo build"Which operating system does the issue occur on?
Ubuntu 17.10 Budgie

If on linux, are you using X11 or Wayland?  
X11

```
± ../alacritty (master ✓) $ cargo build --release
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/jwilm/rust-fontconfig`          
    Updating git repository `https://github.com/jwilm/libfontconfig`
.
.
.
   Compiling wayland-window v0.13.2
   Compiling winit v0.11.2
warning: unnecessary parentheses around function argument
   --> src/grid.rs:304:35
    |
304 | #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
    |                                   ^^^^^^^^^^^
    |
    = note: #[warn(unused_parens)] on by default
help: remove these parentheses
    |
304 | #[derive(Clone, Debug, Serialize, match <Vec<T> as _serde::Deserialize>::deserialize(__e) {
305 |      ::result::Result::Ok(val) => val,
306 |      ::result::Result::Err(err) => {
307 |          return ::result::Result::Err(::convert::From::from(err))
308 |      }
309 |  }, Eq, PartialEq)]
    |

warning: unnecessary parentheses around function argument
   --> src/grid.rs:304:35
    |
304 | #[derive(Clone, Debug, Serialize, Deserialize, Eq, PartialEq)]
    |                                   ^^^^^^^^^^^ help: remove these parentheses

warning: unnecessary parentheses around function argument
  --> src/index.rs:58:82
   |
58 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^
help: remove these parentheses
   |
58 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, match <usize as _serde::Deserialize>::deserialize(__e) {
59 |      ::result::Result::Ok(val) => val,
60 |      ::result::Result::Err(err) => {
61 |          return ::result::Result::Err(::convert::From::from(err))
62 |      }
63 |  })]
   |

warning: unnecessary parentheses around function argument
  --> src/index.rs:58:82
   |
58 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^ help: remove these parentheses

warning: unnecessary parentheses around function argument
  --> src/index.rs:70:82
   |
70 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^
help: remove these parentheses
   |
70 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, match <usize as _serde::Deserialize>::deserialize(__e) {
71 |      ::result::Result::Ok(val) => val,
72 |      ::result::Result::Err(err) => {
73 |          return ::result::Result::Err(::convert::From::from(err))
74 |      }
75 |  })]
   |

warning: unnecessary parentheses around function argument
  --> src/index.rs:70:82
   |
70 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^ help: remove these parentheses

warning: unnecessary parentheses around function argument
  --> src/index.rs:82:82
   |
82 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^
help: remove these parentheses
   |
82 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, match <usize as _serde::Deserialize>::deserialize(__e) {
83 |      ::result::Result::Ok(val) => val,
84 |      ::result::Result::Err(err) => {
85 |          return ::result::Result::Err(::convert::From::from(err))
86 |      }
87 |  })]
   |

warning: unnecessary parentheses around function argument
  --> src/index.rs:82:82
   |
82 | #[derive(Debug, Copy, Clone, Eq, PartialEq, Default, Ord, PartialOrd, Serialize, Deserialize)]
   |                                                                                  ^^^^^^^^^^^ help: remove these parentheses
```
"06/05/20 10:31:58 PMFix class and thickness serializationFixes #3820. =||= Could use a deps update but no real problem herekchibisovKirill Chibisov06/05/20 09:50:18 AM"Fix class and thickness serialization

Fixes #3820."1
382504/05/18 10:57:46 PMChadwick DahlquistConfig for font.offset and font.glyph_offset no longer works"macOS 10.13.3 using this [alacritty.yml](https://github.com/bugeats/dotfiles/blob/master/src/config/alacritty/alacritty.yml)

I just recompiled from HEAD and my font rendering has changed. It appears that `font.offset` and `font.glyph_offset` config values are no longer being applied. I'm using the same DejaVu Sans Mono typeface that I always have been.

<img width=""706"" alt=""screen shot 2018-04-05 at 3 37 47 pm"" src=""https://user-images.githubusercontent.com/33055/38395335-632f4690-38e7-11e8-9e96-a7f43c910d23.png"">

On the left is iTerm 2 displaying the fonts the way I expect. On the right is Alacritty. As you can see, Alacritty has short line heights and column widths. I originally added the `font.offset` config in order to force Alacritty to match iTerm 2, but now it appears to have no effect whatsoever. I tried modifying these values to extremes -- still no change.

I suspect there's been a regression in font rendering. "11/07/20 05:44:33 AMSimplify internal DPRChanged event"Since winit guarantees to send resize after ScaleFactorChange we
don't need to manually update size in DPRChanged event.

The bug mentioned in a comment on DPRChanged is fixed in winit for some time already." =||= Yep that was it. Looks like the example config files have been updated too. I guess we're done here, thanks.kchibisovKirill Chibisov06/06/20 01:31:44 PM"Simplify internal DPRChanged event

Since winit guarantees to send resize after ScaleFactorChange we
don't need to manually update size in DPRChanged event."1
382610/04/18 12:06:35 AMAndrey PetrovImprove smart select to include :// by default"Hiya, I'm trying to improve on #368 by fixing part of #1210 and let double-click select include things that look like URLs by default (ie. include `://`). Otherwise, the `:` character breaks the selection by default which is frustrating.

I'm also very new to Rust, so please be gentle with the review. I'm happy to iterate on it.

I believe there is still room for improvement (see #1210 for a more complete outline) but I'm using this patch locally which has been a very convenient improvement and a good first step."06/06/20 09:33:20 PMRemove copypasta dependency from alacritty_terminal"Remove copypasta dependency used by alacritty_terminal,
which pulls some gui libraries like xcb." =||= "> Dragging with a double click is different than dragging without it. Smart selection does not only affect the initial double-click but also the dragging after double-clicking, so it's quite different from just normal selection.

Unfortunately, this doesn't appear to work with a touch pad; I need to use the actual left-click button to get this behavior. I'm not sure why this is, or if there's a touchpad-only workaround."kchibisovKirill Chibisov06/06/20 09:16:36 PMuse1
382704/24/18 04:59:53 PMChristian DuerrFix scrollback history size 0 bug"There was an issue where alacritty would panic whenever the scrollback
history size is set to 0, this fixes that issue.

The panic was caused by a substraction with unsigned integers which was
underflowing, this has been fixed to use `saturating_sub`.

After that was fixed there was still a bug where scrollback would not
behave correctly because the number of lines in the grid was decided at
startup.
This has been adapted so whenever the size of the terminal changes, the
scrollback history and grid adapts to make sure the number of lines in
the terminal is always the number of visible lines plus the amount of
scrollback lines configured in the config file.

This fixes #1150."06/06/20 06:49:15 PMRemove copyright notice from files"Keeping the license as part of every file bloats up the files
unnecessarily and introduces an additional overhead to the creation of
new modules.

Since cargo already provides excellent dependency management, most of
the code-reuse of Alacritty should occur through Rust's dependency
management instead of copying it source.

If code is copied partially, copying the license from the main license
file should be just as easy as copying from the top of the file and
making some adjustments based on where it is used is likely necessary
anyways." =||= "Everything should be good now, any feedback @jwilm?

These changes have been introduced:
```
There was an issue where the lines would be messed up when the terminal
was resized, this was because lines were just added/removed at the end
of the buffer instead of the actual end of the terminal (since the end
of the terminal might be in the middle of the buffer).

This has been fixed by relying on `self.zero` to determine the position
of the start of the terminal and then calculating where lines have to be
inserted/removed.

Some tests have also been added with documentation that should make it
a little easier to understand how the process works and how the raw
buffer is layed out.

This should all work no matter how big the scrollback history and even
when the currenty viewport is not at the bottom of the terminal output.
```"chrisduerrChristian Duerr06/06/20 06:19:41 PMUpdate main license file1
382905/30/18 04:34:17 PMChristian DuerrAllow changing scrollback history size at runtime"It should be possible to use `live-config-reload` to change the scrollback history size at runtime. This should allow both shrinking and growing the number of  scrollback lines available.

I can't quite estimate how complex this change would be because it's possible that a lot of structs would need to be updated. Maybe @jwilm knows if this should be easy to implement?

If this is easy to implement it could be added to the scrollback project, otherwise it's probably fine to do this after scrollback has been merged because it should not be relevant for most users."06/06/20 10:07:23 PMUpdate dependenciesbasically updates base64 and some other deps together.2:fireworks: kchibisovKirill Chibisov06/06/20 09:50:06 PMUpdate dependencies1
383409/24/18 06:40:10 PMMaxim BazScrollback memory pre-allocation and optimization"Arch Linux, X11

Please see this message by @mpe: https://github.com/jwilm/alacritty/issues/241#issuecomment-379426780

> @maximbaz thanks for looking at it.
>
> Measuring memory usage is complicated, because of shared pages etc. But your measurement using RES - SHR is probably better than mine which was just looking at RSS.
>
> I'm also running with scrollback enabled, and it seems I actually had 20,000 lines configured.
>
> So in that case I see RES ~= 130MB and SHR ~= 20MB for 90MB in total.
>
> **It's the scrollback size which accounts for most of the memory usage.**
>
> If I reduce scrollback to 100 lines, I see numbers that more or less match yours in htop.
>
> So the question is why is scrollback using so much memory? If I compare a few values (all at startup):
>
> ```
> Lines   RES  SHR
> 100,000	535M 19M
>  20,000	131M 19M
>  10,000	 82M 19M
>   1,000	 36M 19M
>     100	 32M 19M
> ```
>
> Each extra line of (empty) scrollback is using ~5K of memory?


I did my own measurements too:

* alacritty master, tmux with 20,000 lines of history configured:

    ```
    When               What         RES      SHR
    On startup         tmux         4248     3120
    After `$ tree /`   tmux         33964    3120
    ```

* alacritty scrollback, with 20,000 lines of history configured:

    ```
    When               What         RES      SHR
    On startup         alacritty    191M     20856
    After `$ tree /`   alacritty    191M     20856
    ```

My summary:

1. Tmux starts very light, while alacritty pre-allocates huge amount of memory. Can this pre-allocation be avoided? I start many instances of alacritty often, most of them will not have huge scrollback history.
1. Tmux consumes 34MB with 20k lines of history, alacritty eats 191MB for the same size. Can this be optimized?"06/08/20 02:09:08 AMCleanup window.rs imports"The window.rs imports have been extremely messy due to heavy
platform-specific import usage. While some of them are just stray
imports for a single platform, a lot of these are specific to linux/bsd.

To make these a little easier to read and maintain, the linux/bsd
specific imports were grouped together, since this allows us to just
have a single platform annotation.

Most of our imports follow the order of how relevant and foreign these
imports are to Alacritty, putting our own frequently used imports at the
far bottom and STD with things people usually don't need to care about
at the top. Since platform specific imports are generally important to
fewer people, I've decided to put them before all the other imports
rather than behind them." =||= Thank you! Some quick initial tests show that the commit makes a difference. Memory usage per fresh terminal is down to around 30MB and startup time noticeably improved.chrisduerrChristian Duerr06/08/20 01:25:50 AM"Cleanup window.rs imports

The window.rs imports have been extremely messy due to heavy
platform-specific import usage. While some of them are just stray
imports for a single platform, a lot of these are specific to linux/bsd.

To make these a little easier to read and maintain, the linux/bsd
specific imports were grouped together, since this allows us to just
have a single platform annotation.

Most of our imports follow the order of how relevant and foreign these
imports are to Alacritty, putting our own frequently used imports at the
far bottom and STD with things people usually don't need to care about
at the top. Since platform specific imports are generally important to
fewer people, I've decided to put them before all the other imports
rather than behind them."1
384205/01/18 05:58:53 PMJi Zhou'cp: /usr/share/fish/vendor_completions.d/alacritty.fish: No such file or directory' on macOS"Which operating system does the issue occur on?
macOS 10.13.4 (17E199)

If on linux, are you using X11 or Wayland?
No

---

Read from https://github.com/jwilm/alacritty#fish, but I can not install the completions for fish that installed by `brew install fish`, on the macOS, there is no directory `/usr/share/fish/vendor_completions.d` default.

Users can see the completion directories by `echo $fish_complete_path`, and I think the `$__fish_datadir/vendor_completions.d` is for `/usr/share/fish/vendor_completions.d`

I can install the completions for fish by `sudo cp alacritty-completions.fish $__fish_datadir/vendor_completions.d/alacritty.fish`.

Thanks!"06/09/20 09:25:35 PMAdd missing docs for ScrollHalfPageUp/Down"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage." =||= Thanks!kchibisovKirill Chibisov06/09/20 08:43:20 PMAdd missing docs for ScrollHalfPageUp/Down1
384606/23/18 10:23:44 AMNoneMake it possible to specify window instance and class with command line options"I compiled alacritty from the git commit 7f2b398ad2084bdaaa266e8da770a213f0a9a2eb

The available command line options are

```
$ alacritty --help
alacritty 0.1.0
Joe Wilm <joe@jwilm.com>
GPU-accelerated terminal emulator

USAGE:
    alacritty [FLAGS] [OPTIONS]

FLAGS:
    -h, --help                     Prints help information
        --live-config-reload       Enable automatic config reloading
        --no-live-config-reload    Disable automatic config reloading
        --print-events
    -q                             Reduces the level of verbosity (the min level is -qq)
        --ref-test                 Generates ref test
    -v                             Increases the level of verbosity (the max level is -vvv)
    -V, --version                  Prints version information

OPTIONS:
    -e, --command <command>...                     Command and args to execute (must be last argument)
        --config-file <config-file>
            Specify alternative configuration file [default: $XDG_CONFIG_HOME/alacritty/alacritty.yml]

    -d, --dimensions <columns> <lines>
            Defines the window dimensions. Falls back to size specified by window manager if set to 0x0 [default: 80x24]

    -t, --title <title>                            Defines the window title [default: Alacritty]
        --working-directory <working-directory>    Start the shell in the specified working directory
```

I can set title, but not instance. The following are st command line options.

```
$ st -h
usage: st [-aiv] [-c class] [-f font] [-g geometry] [-n name] [-o file]
          [-T title] [-t title] [-w windowid] [[-e] command [args ...]]
       st [-aiv] [-c class] [-f font] [-g geometry] [-n name] [-o file]
          [-T title] [-t title] [-w windowid] -l line [stty_args ...]
```

I can set window instance with `-n` and window class with `-c`. My i3 config finds windows by their classes and instance names."06/14/20 10:06:16 PMImprove documentation for macos install with brewThere is possible confusion with users who don't read entire INSTALL.md file linked to when installing with macos install with brew. This adds an instruction to clone the alacritty repo before trying to install the manual.5@kchibisov Ah okay thanks a lot for you help!sdondleyChristian Duerr06/14/20 08:46:49 PMAdd note about execution environment1
384704/10/18 11:22:18 AMNoneMake it possible to prevent alacritty from setting its own dimension."Which operating system does the issue occur on? Gentoo Linux
If on linux, are you using X11 or Wayland? X11

On i3, I can configure a tiled window to float when the window appears.
When alacritty window becomes tiled and then floated, it resizes itself to the default dimension(80x24).

This breaks i3's centering of newly floated windows because i3 centers alacritty before alacritty resizes itself.
The only workaround I can think of is to wait for a while and execute `i3-msg [title=xxx] move position center`.

suckless st doesn't have this issue because it doesn't resize itself."06/15/20 12:12:41 AMOverride default bindings when notmodes intersect"Make notmodes follow modes in terms of override behavior, so
default binding won't be pruned if and only if its modes intersect
with new binding notmodes and vise-versa.

Fixes #3476" =||= Ah, it seems that `alacritty -d 0 0` solves this issue.kchibisovKirill Chibisov06/14/20 06:36:43 PM"Rework default config binding replacement

This reworks the criteria necessary for default bindings to be
overwritten by custom user bindings. It should provide a better
heuristic which accounts for the possibility that notmodes are added
which prevent a conflict between the bindings, so the default isn't
unnecessarily removed.

It is still possible to define a new binding that intersects a default
binding without the default getting removed, if the user explicitly
specifies a mode that doesn't include the default binding's mode. This
is based on the assumption that users explicitly specifying a new mode
are trying to make a mode-specific addition and are capable of removing
the default when desired.

This helps with old modes still being present in user's config files,
since a lot of new config options just have the additional ~Vi mode set.

Fixes #3476."1
384809/17/18 03:15:33 PMAntti KorpiCould Alacritty start tagging versions?"Even if you don't feel ""worthy"" of a 1.0 for some reason, the reality is that people are using and packaging alacritty, and it would be reassuring if the commits packagers are checking in as the *current version of alacritty* into packaging systems aren't just their best guesses for okay cut points.

Even if the version is 0.x, would it be possible to start tagging versions occasionally?

My horse in this race is [getting the Void Linux alacritty package updated](https://github.com/voidlinux/void-packages/pull/11390), but I'm sure other distros' packagers would love to see versions tagged too."07/10/20 07:32:45 PMAdd option to run command on bellFixes #1528.4With #1329, we can get debian/osx builds on tags (and nightlies for that matter).kchibisovKirill Chibisov07/10/20 07:10:02 PMMerge branch 'master' into bell-command1
385009/20/18 03:24:27 PMJoe Moonchanges `decorations` config from a `bool` to an `enum`:"* update glutin dependency to 0.14
* full|transparent|buttonless|none
* `transparent` and `buttonless` are macos only (fallback to `default`
  in others)
* `bool`s in config show a deprecation message and fallback to `default`

fixes #686
fixes #1461 "06/15/20 08:01:22 PMUse compile_error! instead of panic! in build.rs"The compile_error! failure is way more readable and noticeable than
panic!." =||= Thanks for getting this merged in! It was exactly what I was looking forkchibisovKirill Chibisov06/15/20 07:25:17 AM"Use compile_error! instead of panic! in build.rs

The compile_error! failure is way more readable and noticeable than
panic!."1
385204/28/18 02:14:58 PMNoneScrollback: `reset` Still Allows Scrollback"System: X11 on Arch Linux

Using the latest scrollback branch, `reset` still allows me to scroll up afterwards, assuming you initially activate the scrollback ability by entering enough text vertically.

On a related note, `clear` may also need to be looked at, but I'm unsure if there's a spec for it, as both `xterm` and `urxvt` handle it differently. On `urxvt`, I'm able to scroll back up assuming I've filled the vertical space enough to allow scrolling, while `xterm` seems to never allow me to scroll back, regardless of the amount of text entered."06/15/20 11:02:33 PMUpdate TERMINFO in INSTALL.md"Please make sure to document all user-facing changes in the `CHANGELOG.md` file.

Draft PRs are always welcome, though unless otherwise requested PRs will not be reviewed until all required and optional CI steps are successful and they have left the draft stage."6Thanks for the report!btannousBrian Tannous06/15/20 09:53:38 PMUpdate TERMINFO in INSTALL.md1
385409/20/18 02:58:59 PMAidan EpsteinFix Bracketed Paste Mode when input contains end sequence.Should fix #800.06/26/20 04:04:56 PMClear selection on clear line/screen escapes"Selection is now cleared if clear line or clear screen escape
sequences are clearing content behind it. In addition, selection
won't be cleared on resize if the amount of columns remain the same."5Going to merge this and add a changelog entry after it's on master. Thanks @aereaux and everyone else for the feedback.kchibisovKirill Chibisov06/26/20 12:51:03 PMuse range bounds1
385605/14/18 04:50:29 PMChristian DuerrFix recording new ref-tests with scrollback"When recording new ref-tests with the scrollback branch, the grid history currently is not compared at all. This leads to incorrect behavior not causing a test failure.

To make sure it's possible to write tests that also check the state of the scrollback history, not only the content of the current viewport, this should be reworked.

To keep backwards-compatibility with old ref-tests there probably needs to be a way to check what the specific history size for a ref-test should be, this can be solved by adding a `history_size` field to the grid which is already done in #1245"06/18/20 01:02:57 AMAdd automatic scrolling during selectionFixes #1173.1PR was mergedchrisduerrChristian Duerr06/18/20 12:37:12 AMRename clipboard/scheduler methods1
385704/28/18 02:14:46 PMChristian DuerrReset grid when running `reset`"In the current scrollback PR the `reset` command does not affect the
scrollback history. To make sure the terminal is properly reset, it
should clear the scrollback history.

This commit fixes this by creating a new and empty grid whenever `reset`
is executed. It takes the current dimensions and history size from the
old grid.

Right now there's an empty ref-test called `grid_reset` without any
content, this should be implemented once #1244 is resolved.

This fixes #1242."06/18/20 01:02:57 AMEscape Windows shell command line arguments"Change the Windows command line argument handling to escape arguments according to [the rules in this article][parsing-args]. (Note the article is written in terms of parsing, but we're interested in escaping.)

[parsing-args]: https://docs.microsoft.com/en-us/cpp/c-language/parsing-c-command-line-arguments

The escaping rules are a bit insane. Each quote must be escaped with a leading backslash. Backslashes must *only* be escaped if they are in a run of backslashes preceding a quote. In that case, each backslash in the run must be escaped with its own backslash. All other backslashes must *not* be escaped and will be interpreted literally.

## Concerns

As mentioned [in this comment][concerns], it's not clear that escaping like this is *always* the correct thing to do. It depends on the shell program, and is not something we can know. I've marked this pull request WIP until we settle that.

I have added a check so that arguments are only escaped when they are required to be. This should make it safer to pass arguments to programs using &ldquo;odd&rdquo; parsing rules (e.g., `cmd.exe`), as long as those arguments are simple.

[concerns]: https://github.com/alacritty/alacritty/issues/3552#issuecomment-610710931

Fixes #3552" =||= PR was mergedchrisbouchardChris Bouchard06/17/20 02:47:07 AMFix clippy and test errors1
387304/15/18 09:44:02 AMJerry LeeCursor is auto selecting text after toggling fullscreen in macOS"**Which operating system does the issue occur on?** macOS 10.13.4

Problem as shown in the title, here's how to reproduce:

1. Open Alacritty
2. Click the green full screen button to enter fullscreen
3. Moving the cursor around ***without holding left mouse button***
4. And the selection is following the cursor

the same problem also happens when exit fullscreen

Here's a demonstration:

![cursor is auto selecting text after toggling fullscreen](https://user-images.githubusercontent.com/20783502/38736874-0b8c7262-3f60-11e8-9d2c-15e884fe301c.gif)"06/22/20 12:12:56 AMImplement dynamic copying suggested in #1919"Hi,

This PR adds the new Action::CopyDynamic that can be bound to
CTRL+C (for example) which will behave in the following way:

If there is no selection the key press will not be suppressed (and the
application will get the interrupt).

Otherwise, if there is a selection, the selection will be copied
and cleared such that a second press of CTRL+C will interrupt the
program.

Relevant configuration:

```
key_bindings:
  - { key: V,        mods: Control, action: Paste            } # Optional
  - { key: C,        mods: Control, action: CopyDynamic      }
```

The implementation is really hacky right now, so this is a draft for now.
I wanted to check with the community if this is a desired feature, so now anyone can test it out.
If this feature is desired I can clean up the implementation, document the feature and add it to the CHANGELOG.md.

Kind regards,
ambiso"2Thanks, I knew this sounded familiar. Closing as duplicate.ambisoambiso06/21/20 11:51:21 PM"Implement dynamic copying suggested in #1919

Adds the new Action::CopyDynamic that can be bound to
CTRL+C (for example) which will behave in the following way:

If there is no selection the key press will not be suppressed (and the
application will get the interrupt).

Otherwise, if there is a selection, the selection will be copied
and cleared such that a second press of CTRL+C will interrupt the
program.

Relevant configuration:

key_bindings:
  - { key: V,        mods: Control, action: Paste            }
  - { key: C,        mods: Control, action: CopyDynamic      }"1
387709/28/18 09:07:07 PMPatrick MarchandCompilation error on openbsd 6.3-current"Which operating system does the issue occur on?
OpenBSD 6.3-current

[errors.txt](https://github.com/jwilm/alacritty/files/1908867/errors.txt)

Just linking this here, I'll come back when I have time to investigate more. But if somebody wants to take a look it would be appreciated.
"06/23/20 11:13:15 AMRun rustfmt on sr.ht"This should provide more clear feedback whether rustfmt
job is failed or not." =||= "Since it seems like Alacritty builds on FreeBSD and this issue has been around without update for a while, I'm going to close it as resolved.

If there should still be issues with Alacritty even with an updated libc, please let me know and I'll re-open this issue."kchibisovKirill Chibisov06/23/20 10:46:01 AMRemove checks on nightly from CI1
387904/14/18 07:33:39 AMEyvind Bjarti AndersenSpecify working directoryIs it possible to provide a working directory e.g in urxvt: urxvt -cd /$HOME/downloads?.06/24/20 08:29:08 AMFix live right-click expansion"While the commit 43c0ad6ea9d2467ccf867a310c4f1e30f5b627c6 introduced
right click as a way to expand the active selection, it did not allow
for holding right click to continuously do so.

This commit remedies that problem by allowing live expansion with while
holding the right mouse button."3Found the solution: alacritty --working-directory /$HOME/downloads. Sorry for the redundant question.chrisduerrChristian Duerr06/23/20 10:35:41 PMMove VI cursor when expanding selection1
388405/14/18 04:50:13 PMChristian DuerrEnable history comparison in ref-tests "Previously ref-tests just ignored the scrollback history to keep
the old tests working, this would lead to new tests which rely on
scrollback history to succeeed even though they should not.

This has been fixed and it is now possible to create ref-tests with and
without scrollback history. When available the scrollback history is
compared, but the old tests still work without having to adjust them.

This fixes #1244.

This also includes #1234 and #1245."06/25/20 09:50:19 AMFix scroll down escape pulling lines from history"This works around a bug where the optimized version of the
`Grid::scroll_down` function would just rotate the entire grid down if
the scrolling region starts at the top of the screen, even if there is
history available.

Since rotations of scrolling regions should not affect the scrollback
history, this optimized version is now only called when the max
scrollback size is 0, making it impossible for the grid to have any
history while it is used.

Since the main usecase of this is the alternate screen buffer, which
never has any history, the performance should not be affected negatively
by this change.

Fixes #3582." =||= "I've reworked this PR from ground-up and it should now have a pretty efficient comparison algorithm which compares the storage are as slices in chunks.

I think this is ready for review @jwilm."chrisduerrChristian Duerr06/24/20 09:53:04 PM"Fix scroll down escape pulling lines from history

This works around a bug where the optimized version of the
`Grid::scroll_down` function would just rotate the entire grid down if
the scrolling region starts at the top of the screen, even if there is
history available.

Since rotations of scrolling regions should not affect the scrollback
history, this optimized version is now only called when the max
scrollback size is 0, making it impossible for the grid to have any
history while it is used.

Since the main usecase of this is the alternate screen buffer, which
never has any history, the performance should not be affected negatively
by this change.

Fixes #3582."1
389510/03/18 01:29:53 AMFélix SaparelliAssertion `v <= max' failed in src/intel/genxml/gen9_pack.h"Alacritty aborts on start:

#### Error message

```
alacritty: src/intel/genxml/gen9_pack.h:66: __gen_uint: Assertion `v <= max' failed.
```

#### Which operating system does the issue occur on?

ArchLinux

#### `lspci` info for CPU and GPU:

```

00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07) (prog-if 00 [Normal decode])
        Flags: bus master, fast devsel, latency 0, IRQ 16
        Bus: primary=00, secondary=01, subordinate=01, sec-latency=0
        I/O behind bridge: 0000e000-0000efff [size=4K]
        Memory behind bridge: dc000000-dd0fffff [size=17M]
        Prefetchable memory behind bridge: 00000000b0000000-00000000c1ffffff [size=288M]
        Capabilities: <access denied>
        Kernel driver in use: pcieport
        Kernel modules: shpchp

00:02.0 VGA compatible controller [0300]: Intel Corporation HD Graphics 530 [8086:191b] (rev 06) (prog-if 00 [VGA controller])
        Subsystem: Dell HD Graphics 530 [1028:06e4]
        Flags: bus master, fast devsel, latency 0, IRQ 134
        Memory at db000000 (64-bit, non-prefetchable) [size=16M]
        Memory at 70000000 (64-bit, prefetchable) [size=256M]
        I/O ports at f000 [size=64]
        [virtual] Expansion ROM at 000c0000 [disabled] [size=128K]
        Capabilities: <access denied>
        Kernel driver in use: i915
        Kernel modules: i915
```

#### If on linux, are you using X11 or Wayland?

Wayland

#### Verbose log

```
Welcome to Alacritty.
Configuration loaded from /home/.config/alacritty/alacritty.yml
device_pixel_ratio: 1
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.033365211
width: 2884, height: 1924
Cell Size: (16 x 40)
PTY Dimensions: Line(48) x Column(180)
xkbcommon: ERROR: Key ""<LFSH>"" added to modifier map for multiple modifiers; Using Lock, ignoring Shift
Font size changed: Size(48)
width: 2884, height: 1924
alacritty: src/intel/genxml/gen9_pack.h:66: __gen_uint: Assertion `v <= max' failed.
fish: “alacritty -v” terminated by signal SIGABRT (Abort)
```

#### Version

0.1.0 / 3d75c49"07/01/20 06:58:07 AMFix reflow of empty wrapped cursor line"This bug was caused by trying to grow the terminal while the cursor line
was wrapped but entirely empty. Resizing the terminal now accounts for
the position of the deleted line and moves the cursor up only when the
line deleted was above it.

The deletion of the line was caused by the shell redrawing itself
whenever the cursor is moved.

Fixes #3583."1No idea, and I haven't tried Alacritty again in months. Closing for now.chrisduerrChristian Duerr06/29/20 11:39:23 PMFix clippy errors1
389611/14/18 09:13:44 PMEyvind Bjarti AndersenDynamic title don't display title of running app in BSPWM.Expected behavior:  Title is Newsboat/Neomutt in title. Actual behavior: Title is Alacritty. Why is this?.06/28/20 07:12:38 PMRename alt_grid to inactive_grid"Since the alt_grid is not always the alternate screen buffer, the name
inactive_grid should fit much better.

Fixes #3504." =||= It's all up to the application actually sending the escape. If the application isn't sending it, we won't be able to display it.chrisduerrChristian Duerr06/28/20 03:29:33 AM"Rename alt_grid to inactive_grid

Since the alt_grid is not always the alternate screen buffer, the name
inactive_grid should fit much better.

Fixes #3504."1
389804/16/18 06:16:19 AMJohnny ChangFull screen mode ?"A full screen mode would suite programmers with a habit like mine,
where my terminal is always full screen and I use tmux to arrange the panes myself.
Do we have a timeline for full screen mode implementation as of now ? Thanks"07/03/20 08:27:19 PMDocument supported escape sequencesFixes #3440.3This issue still exists. MacOS menubar doesn't work at all in alacritty w/ fullscreen. Tested on multiple macs now. @chrisduerr @sodiumjoechrisduerrChristian Duerr07/03/20 07:58:13 PMFix icon name docs1
390004/17/18 10:09:30 PMBanstError compiling on macOS"macOS 10.13.3
rustc 1.25.0 (84203cac6 2018-03-25)

```shell
cargo build --release --verbose
    Updating registry `https://github.com/rust-lang/crates.io-index`
error: failed to fetch `https://github.com/rust-lang/crates.io-index`

Caused by:
  error inflating zlib stream; class=Zlib (5)
```

Did I forgot something ?"06/29/20 12:07:17 AMDim foreground color for truecolor text"Fixes #3766"1Ok thanks, I will investigate my Rust installationcarloabelliCarlo Abelli06/28/20 10:12:53 PM"Dim foreground color for truecolor text

Fixes #3766"1
390604/17/18 11:09:30 AMMatthias Krügeradd font fallback example to config template"Hi, I didn't manage to get a font fallback working.
I tried different things like
````
font:
  normal:
     family: hack
     family: monospace
````

````
font:
  normal:
     family: hack
       family: monospace
````


````
font:
  normal:
     - family: hack
     - family: monospace
````

but none appeared to work.
Could we have a working fallback example in the config template?

I use alacritty from the scrollback branch."07/01/20 11:24:38 AMAdd missing changelog entry"This adds a missing changelog entry for a bug fixed in
bc60782e424359d818a22ffa2ffa3c2dc88ab6fe."1It is currently not possible to specify fallback fonts like that. As a feature proposal this issue is a duplicate of #957.chrisduerrChristian Duerr07/01/20 09:18:40 AM"Add missing changelog entry

This adds a missing changelog entry for a bug fixed in
bc60782e424359d818a22ffa2ffa3c2dc88ab6fe."1
391004/20/18 08:55:21 PMWesley A. GahrEmpty titlebar optionI'd like there to be an option for the titlebar to be empty. I'm going to open a PR for this myself pretty soon. Just letting everyone know.07/09/20 02:16:21 AMFix cursor reflow"To make sure that output is consistent even while resizing the window,
the cursor will now reflow with the content whenever the window size is
changed.

Since the saved cursor is more likely to represent a position in the
grid rather than a reference to the content below it and handling of
resize before jumping back to it is more likely than with the primary
cursor, no reflow is performed for the saved cursor

Fixes #3584."3"Since there seems to be a ""reasonable"" way to get this working I'm closing this issue.

Further comments about moving the `--title` option into the configuration file can be shared in the RFC: #1258."chrisduerrChristian Duerr07/08/20 08:45:52 PMFix growths linewrap flag bug1
391604/19/18 11:36:51 PMMatei Copot"Using ""Hack Regular"" monospace font results in uneven output""Which operating system does the issue occur on?
ubuntu 16.04

If on linux, are you using X11 or Wayland?
X11

Here's a photo of the ouput:
![image](https://user-images.githubusercontent.com/6382186/39007018-15f7036c-4405-11e8-9bd9-ad7a98a2b240.png)

And the relevant config:
```yml
font:
  # The normal (roman) font face to use.
  normal:
    family: 'Hack Regular' # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular
  # The bold font face
  bold:
    family: 'Hack Regular' # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold
  # The italic font face
  italic:
    family: 'Hack Regular' # should be ""Menlo"" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic
  # Point size of the font
  size: 9.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0
  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0
  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true
```

Any clue what's wrong and what should I fix? Is an issue a good place to ask about this?"07/04/20 08:14:43 AMAdds feature to select random colors on startup"Since Alacritty watches the `alacritty.yml` file it is not possible to
modify that file on-the-fly to produce randomized colors when starting
the terminal. Additionally, it just feels kind of hacky to do it like
that.

With this commit, we preserve existing behavior for people who have not added
the random_colors option, while enabling it for those who have."10"If you start alacritty from another instance of alacritty or any other terminal, it will prent errors to stderr. There's an open pr #1188 which also writes it to the log and displays an error to the user.

However this issue isn't really an error, so it will not be displayed as one. Freetype just finds the best match and as far as alacritty is concerned everything worked out exactly as intended."cr0axcburke07/04/20 07:43:13 AMformatting1
391711/10/18 04:08:49 PMMarvin BeckersNo key repetition on sway 1.0-alpha.1 (Wayland)"Which operating system does the issue occur on?
`Gentoo Linux`

If  on linux, are you using X11 or Wayland?
`Wayland`

---

Hey there, I'm testing out sway's `1.0-alpha.1` release (first release based on wlroots) and it works quite well. Alacritty does start now too (its Wayland backend didn't work with sway `0.15`). That being said, key repetition (holding down a key and repeating the key stroke) doesn't work which makes it barely usable without going mad (navigating files in `vim` is especially painful).

I'm not sure what information should be provided to dig into this issue. Running `alacritty --print-events` gives me these events when pressing and releasing the key `x`:

```
glutin event: WindowEvent { window_id: WindowId(Wayland(WindowId(139853503294496))), event: KeyboardInput { device_id: DeviceId(Wayland(DeviceId)), input: KeyboardInput { scancode: 45, state: Pressed, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(Wayland(WindowId(139853503294496))), event: ReceivedCharacter('x') }
glutin event: Awakened
glutin event: WindowEvent { window_id: WindowId(Wayland(WindowId(139853503294496))), event: KeyboardInput { device_id: DeviceId(Wayland(DeviceId)), input: KeyboardInput { scancode: 45, state: Released, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
```

To me it looks like glutin correctly recognizes key pressing and releasing. Is this an issue with glutin or Alacritty?
"07/04/20 03:19:08 PMFix compilation on 32bit targetsFixes #3915. =||= +1kchibisovKirill Chibisov07/04/20 02:44:27 PMMerge branch 'master' into fix-32bit1
391808/22/20 08:55:28 PMChristian DuerrRFC: Allow overriding config option from the command line"### Problem
Currently it is not possible to override certain config flags from the command line. And there are flags that exist in the CLI but not in the config.

This is quite inflexible and requires implementing new command line flags separately from new config options.

### Proposal
To solve this issue I would like to propose a command line interface which will allow overriding any field of the configuration file. And every command line parameter which might be useful should not be exclusive to the command line but also be an option in the configuration file.

To override a single config file field the following syntax could be used:
```bash
alacritty --option ""window.padding.x"" ""5""
```

If overriding multiple fields is desired, this could be done by making use of multiple `--option` parameters like this:
```bash
alacritty --option ""window.padding.x"" ""5"" --option ""window.padding.y"" ""5""
```

If a command line option is specified it should always override the same field in the configuration file.

### Current CLI Flags
Many of the current CLI flags could be replaced with this system, options like `--live-config-reload` could instead be set using `--option ""live_config_reload"" ""true""`. This would simplify the CLI a bit.

These are the current command line parameters:
```bash
FLAGS:
    -h, --help
        --live-config-reload
        --no-live-config-reload
        --print-events
    -q
        --ref-test
    -v
    -V, --version
OPTIONS:
    -e, --command <command>...
        --config-file <config-file>
    -d, --dimensions <columns> <lines>
    -t, --title <title>
        --working-directory <working-directory>
```

Making use of this system they could be reduced to this:
```bash
FLAGS:
    -h, --help
        -̶-̶l̶i̶v̶e̶-̶c̶o̶n̶f̶i̶g̶-̶r̶e̶l̶o̶a̶d̶ -> --option ""live_config_reload"" ""true""
        -̶-̶n̶o̶-̶l̶i̶v̶e̶-̶c̶o̶n̶f̶i̶g̶-̶r̶e̶l̶o̶a̶d̶ -> --option ""live_config_reload"" ""false""
        -̶-̶p̶r̶i̶n̶t̶-̶e̶v̶e̶n̶t̶s̶ -> --option ""print_events"" ""true"" [NEW CONFIG OPTION!]
    -̶q̶ -> --option ""verbosity"" ""1-2"" [NEW CONFIG OPTION!]
        --ref-test
    -̶v̶ -> --option ""verbosity"" ""3-5"" [NEW CONFIG OPTION!]
    -V, --version
OPTIONS:
    -e, --command <command>...
        --config-file <config-file>
    -̶d̶,̶ ̶-̶-̶d̶i̶m̶e̶n̶s̶i̶o̶n̶s̶ ̶<̶c̶o̶l̶u̶m̶n̶s̶>̶ ̶<̶l̶i̶n̶e̶s̶>̶ -> --option ""window.dimensions.columns/lines"" ""3""
    -̶t̶,̶ ̶-̶-̶t̶i̶t̶l̶e̶ ̶<̶t̶i̶t̶l̶e̶>̶ -> --option ""title"" ""Alacritty"" [NEW CONFIG OPTION!]
        -̶-̶w̶o̶r̶k̶i̶n̶g̶-̶d̶i̶r̶e̶c̶t̶o̶r̶y̶ ̶<̶d̶i̶r̶>̶ -> --option ""working_directory"" ""~"" [NEW CONFIG OPTION!]
```

### Problems
Even though the basic concept of overriding the options in the config file with a command line parameter seems quite sane, there are some issues with moving existing parameters into the config file.

Removing options like `-v (verbosity)` would significantly impact the discoverability of these flags because a simple `alacritty --help` would not list them anymore. This could lead to confusion especially if the config file keeps expanding.

Another drawback is that the config file already is pretty big, so if an option is not necessary to be set permanently, it probably has no place in the config file. Adding all the flags to the config file as proposed, could introduce a significant amount of bloat that would go completely unused.

### RFC
This is just a rough draft based on some ideas discussed in #1255 and other issues which have come up in the past. Please share comments regarding this proposal if you have any.
If something like this is not desired, feel free to say so @jwilm."07/04/20 03:39:23 PMFix compilation on 32bit targets"This works around libc's issue of setting `c_long` to a fixed value
rather than making it depend on the architecture, which caused the patch
92ea355eeea538bd868eaebdc03469630aba281c to fail.

Fixes #3915."1I think all options from the config file should be overridable from the command line. But i think we should keep the arguments-only as arguments-only. I only see drawbacks of moving variables like verbosity and print events to the config file.chrisduerrChristian Duerr07/04/20 03:23:20 PM"Fix compilation on 32bit targets

This works around libc's issue of setting `c_long` to a fixed value
rather than making it depend on the architecture, which caused the patch
92ea355eeea538bd868eaebdc03469630aba281c to fail.

Fixes #3915."1
392104/27/18 10:08:56 AMMatthias Krügerscrollback: first character of line always bold"Which operating system does the issue occur on?
manjaro 4.14.34-1-MANJARO
If on linux, are you using X11 or Wayland?
Linux using x11
xorg-server 1.19.6+13+gd0d1a694f-2

This seems to be a bug of the scrollback branch. I can reproduce on 0d568180761d7da56e756762d5f4b1555eea6a7f

The first character of a new line seems to always be printed as bold.
![alacritty](https://user-images.githubusercontent.com/476013/39083191-d20d4fc8-4560-11e8-8667-ef9ce6996f96.png)

EDIT: for the record: I could not reproduce this on the master branch"07/06/20 07:10:07 PMFix saved cursor handling"This resolves several problems with handling of the saved cursor when
switching between primary and alternate screen. Additionally ref-tests
are also added for all common interactions to make sure the behavior
does not regress.

The behavior is based on XTerm's behavior except for interaction with
`reset`. XTerm does not reset the alternate screen's saved cursor on
`reset`, but VTE does. Since a `reset` should reset as much as possible,
Alacritty copies VTE here instead of XTerm." =||= Thanks! Unfortunately github can't close issues when the PRs haven't been merged into master yet.chrisduerrChristian Duerr07/06/20 05:26:16 AMAdd alt screen newline preservation to reftest1
392204/24/18 05:01:34 PMChristian DuerrFix bright characters in first column"This bug was introduced by the commit which fixed the invisible cursor
in the first column (54b21b6). To resolve this the alternative implementation by @jwilm has been applied which seems to work out.

This fixes #1259."07/06/20 05:08:37 AMPreserve wrapline flag across alt screen switches"While neither VTE, URxvt nor Kitty handle this, preserving the wrapline
flag across alternate screen switches seems like the correct thing to
do. XTerm also does handle this correctly, which indicates that it is a
bug and not a feature."1Looks good to me!chrisduerrChristian Duerr07/06/20 04:46:08 AMAdd changelog entry1
393104/22/18 10:10:00 AMMatei CopotImplement ctrl+shift+u unicode behaviour"In previous terminals I've used, as well as browsers and other text inputs, by using `ctrl+shift+u` you could enter a mode that lets you type the charcode for a unicode char, and would then transform it to that character. Any plans to implement this in alacritty? Right now it seems to just ignore the `ctrl+shift+u`.

Which operating system does the issue occur on?
Ubuntu

If on linux, are you using X11 or Wayland?
X11"11/23/20 11:11:03 PMImplement cursor blinking"> Please make sure to document all user-facing changes in the
> `CHANGELOG.md` file.

Done

> If support for a new escape sequence was added, it should be documented
> in `./docs/escape_support.md`.

Done
note: `CSI ? 12 h` and `CSI ? 12 l` were already marked as supported.

The default blinking rate is 500ms hide -> 500ms show -> …

TODO:
- [x] wether to blink or not by default
- [x] start blinking at startup if configuration says so
- [x] start or stop blinking at vi/normal mode change according to configuration
- [x] handle `CSI 1/3/5 SP q` (set cursor style to blinking block/underline/bar)
- [x] make the ""blinking cursor"" an option on each cursor style instead of separate new styles
- [x] make the vi cursor blink too

Optionally:
- [x] the blinking rate
- [x] completely disable blinking (ignore escape sequences), possibly by setting the rate to `0`
- [x] reinitialize the blinking cycle on user input
- (?) allow different blinking rate for the default cursor and vi cursor

Fixes #302 "14This is a dubplicate of #866, would love to have this but it might be more complicated than expected.DettorerKirill Chibisov11/23/20 09:41:19 PMMerge branch 'master' into cursor_blink1
393501/13/19 09:26:01 PMJakobEscape character is now inserted for subsequent keypresses when the A…"…lt modifier is held down

I suppose this is more of a question on reasoning than a real request for my patch to be merged, is the behavior of enforcing `self.ctx.received_count()` to be zero typical? I noticed that using Emacs in alacritty felt a little bit off, since I tried to use M-< and M-> to navigate the buffer and it would only work for the first keystroke, with any subsequent keystrokes inserting '<' into the buffer. This is the only terminal emulator I've used that does this.

To reproduce this, I would suggest running `cat` and inserting key sequences while holding the alt key.

In URxvt:
```
$ cat
^[<^[>^[<^[>^[<^[>^[<^[>
```

In alacritty:
```
$ cat
^[<><><><>
```"07/09/20 10:24:56 PMHard require system's Fontconfig on Linux/BSD"Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage." =||= "I think this has been resolved by a winit/glutin update. At least I can't reproduce it anymore. Sorry for keeping you waiting for so long, but seems like it worked out either way.

Please let me know if this issue still exists, then I'll re-open and test again."kchibisovKirill Chibisov07/09/20 08:43:30 PM"Fail compilation if Fontconfig is not installed on Linux/BSD

Statically linking Fontconfig was leading to slow startup and
various errors, so forcing the use of system's library."1
393604/26/18 03:22:04 PMMikhail MirzoyanFonts special characters don't show when start with ubuntu shortcut"> Which operating system does the issue occur on?

Ubuntu 16.04

> If on linux, are you using X11 or Wayland?

I'm not sure but 
```
_  ~ dpkg -l x11
dpkg-query: no packages found matching x11
_  ~ dpkg -l Wayland
dpkg-query: no packages found matching Wayland
```
If i start Alacritty normally (through the Applications -> Alacritty) and then run `tmux` special font characters show ok
![image](https://user-images.githubusercontent.com/10584167/39106060-78fbdcf4-46e3-11e8-9f5d-f2435f672a2f.png)
If I start it from the default ubuntu teminal with tmux `alacritty -e tmux` they also show.
But if i use my ubuntu shortcut with the same command for it, they dont:
![image](https://user-images.githubusercontent.com/10584167/39106131-e189aca6-46e3-11e8-879d-3678cfa3731b.png)
![image](https://user-images.githubusercontent.com/10584167/39106141-ed84c338-46e3-11e8-9280-3939070a57f8.png)



"07/09/20 11:26:58 PMBump urlocator to 0.1.41Looking at the code you've posted above it almost looks like `_` is actually what the character in that position is. So it might be related to your shell. But I'll close this for now, if someone else runs into this issue or you want to keep troubleshooting, I can re-open it.chrisduerrChristian Duerr07/09/20 10:31:38 PMBump urlocator and unicode-width1
393904/28/18 12:36:41 AMJake McGintysegfault on macOS on latest master with rust nightly"Which operating system does the issue occur on?
```
ProductName:    Mac OS X
ProductVersion: 10.13.4
BuildVersion:   17E199

rustc 1.27.0-nightly (ac3c2288f 2018-04-18)
```

Output (from commit 1b7ffea): 

```
$ RUST_BACKTRACE=1 cargo run

...

    Finished dev [unoptimized + debuginfo] target(s) in 157.9 secs
     Running `target/debug/alacritty`
thread 'main' panicked at '', src/locale.rs:26:9
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::print
             at libstd/sys_common/backtrace.rs:71
             at libstd/sys_common/backtrace.rs:59
   2: std::panicking::default_hook::{{closure}}
             at libstd/panicking.rs:205
   3: std::panicking::default_hook
             at libstd/panicking.rs:221
   4: <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get
             at libstd/panicking.rs:457
   5: std::panicking::try::do_call
             at libstd/panicking.rs:344
   6: <std::io::error::ErrorKind as core::cmp::PartialEq>::eq
             at src/locale.rs:26
   7: alacritty::main
             at src/main.rs:59
   8: std::rt::lang_start::{{closure}}
             at /Users/travis/build/rust-lang/rust/src/libstd/rt.rs:74
   9: std::panicking::try::do_call
             at libstd/rt.rs:59
             at libstd/panicking.rs:304
  10: panic_unwind::dwarf::eh::read_encoded_pointer
             at libpanic_unwind/lib.rs:105
  11: std::sys_common::bytestring::debug_fmt_bytestring
             at libstd/panicking.rs:283
             at libstd/panic.rs:361
             at libstd/rt.rs:58
  12: std::rt::lang_start
             at /Users/travis/build/rust-lang/rust/src/libstd/rt.rs:74
  13: alacritty::run
[1]    32617 segmentation fault  RUST_BACKTRACE=1 cargo run
```"07/10/20 06:54:36 PMSet default FreeType properties"In addition it also starts respecting Fontconfig's `autohint`
and `hinting` options.

Fixes #3534."7Thanks for the investigation @edwin0cheng! Sounds like a moot issue at least for now :).kchibisovKirill Chibisov07/10/20 06:24:22 PMstyle issues1
394510/16/18 06:46:27 PMYuri KhanSupport scancode-based key bindings"Which operating system does the issue occur on? GNU/Linux

If on linux, are you using X11 or Wayland? X11

Some keyboards have dedicated Undo/Cut/Copy/Paste keys. It would be nice to be able to bind them.

(There are multiple possible USB HID usage codes for these keys, but after kernel and XKB processing they boil down to the same keycodes.)

`alacritty --print-events` generates the following output:

```
glutin event: KeyboardInput(Pressed, 139, None, , None)
glutin event: KeyboardInput(Released, 139, None, , None)
glutin event: KeyboardInput(Pressed, 145, None, , None)
glutin event: KeyboardInput(Released, 145, None, , None)
glutin event: KeyboardInput(Pressed, 141, None, , None)
glutin event: KeyboardInput(Released, 141, None, , None)
glutin event: KeyboardInput(Pressed, 143, None, , None)
glutin event: KeyboardInput(Released, 143, None, , None)
```

I understand that one way to support these keys would be to teach glutin to decode their codes, but maybe it makes sense to implement raw keycode-based bindings in Alacritty?"07/10/20 11:41:46 PMFix crash when configured font is missingFixes #3942. =||= @chrisduerr don't mean to clutter this thread, but gigantic thanks, I had some very annoying behaviour on a japanese mac keyboard with the Underline key that wasn't mapped to anything.chrisduerrChristian Duerr07/10/20 04:37:53 PMFix code formatting1
394604/24/18 04:44:06 PMclayton craft"Passing parameters to command specified in -e results in ""spawn() failed""""> Which operating system does the issue occur on?

Arch Linux

> If on linux, are you using X11 or Wayland?

X11

When using the `-e` option with Alacritty, if you pass any parameters to the command you want to execute then alacritty fails with the following error:


```
$ alacritty -e ""/bin/bash -i""
Command::spawn() failed: No such file or directory (os error 2)
```

In the example above, if I remove the `-i`, then alacritty works as expected. I am reporting this because the example above works as expected in other terminal emulators (e.g. termite)."07/10/20 07:58:45 PMFix clipboard not working on KDE WaylandFixes #3920. =||= That seems like a good way to do it. Though you could of course put it in a separate file if you want to make execution from CLI a little easier.kchibisovKirill Chibisov07/10/20 07:33:03 PMMerge branch 'master' into fix-kde-clipboard1
394704/24/18 04:21:07 PMAnirudh BalajiFeature request: Panes"Like `tmux`.

If this is implemented, it would require changing the main data structure for the terminal buffer to something like this:
```rust

type PaneId = u32; // For now, ideally should be String

struct Term {
    ...
    panes: PaneInfo,
    pane_grids: Vec<(PaneId, Grid<Cell>)>,
    // No more Term.grid
}

// Contains the layout of the panes.
struct PaneInfo {
    vertical_sections: u32,
    horizontal_sections: u32,
    panes: Vec<Pane>
}

// A pane. Indicates length & width.
struct Pane {
    width: u32, // in vertical sections
    height: u32, // in horizontal sections
    id: PaneId
}
```"07/10/20 09:00:34 PMAdd readline bindings to searchFixes #3938. =||= "Alacritty is not likely to support panes directly. My hope is that the embedding API #450 will allow others to build applications with such features.

For now, please use a tiling WM or a terminal multiplexer."chrisduerrKirill Chibisov07/10/20 08:14:49 PMMerge branch 'master' into search_readline1
394904/24/18 04:16:47 PMJakub Łuczyńskiproblem with fonts after libfontconfig update"After system update (`debian buster`), in particular package `libfontconfig1:amd64 (2.12.6-0.1 -> 2.13.0-4)` the font from `alacritty.yml` file (`monospace`) stopped working, also I get some logs:
```
Fontconfig warning: line 5: unknown element ""its:rules""
Fontconfig warning: line 6: unknown element ""its:translateRule""
Fontconfig error: line 6: invalid attribute 'translate'
Fontconfig error: line 6: invalid attribute 'selector'
Fontconfig error: line 7: invalid attribute 'xmlns:its'
Fontconfig error: line 7: invalid attribute 'version'
Fontconfig warning: line 9: unknown element ""description""
Fontconfig warning: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 4: unknown element ""its:rules""
Fontconfig warning: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 5: unknown element ""its:translateRule""
Fontconfig error: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 5: invalid attribute 'translate'
Fontconfig error: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 5: invalid attribute 'selector'
Fontconfig error: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 6: invalid attribute 'xmlns:its'
Fontconfig error: ""/etc/fonts/conf.d/10-hinting-slight.conf"", line 6: invalid attribute 'version'
...
Fontconfig warning: ""/etc/fonts/conf.d/90-synthetic.conf"", line 5: unknown element ""its:translateRule""
Fontconfig error: ""/etc/fonts/conf.d/90-synthetic.conf"", line 5: invalid attribute 'translate'
Fontconfig error: ""/etc/fonts/conf.d/90-synthetic.conf"", line 5: invalid attribute 'selector'
Fontconfig error: ""/etc/fonts/conf.d/90-synthetic.conf"", line 6: invalid attribute 'xmlns:its'
Fontconfig error: ""/etc/fonts/conf.d/90-synthetic.conf"", line 6: invalid attribute 'version'
Fontconfig error: Cannot load default config file
```
I found simmilar issue for google-chrome and based on this [post](https://bugs.chromium.org/p/chromium/issues/detail?id=829890#c4) it seems that
> the latest version of fontconfig changes the config format in a backwards-incompatible way"07/11/20 01:01:46 AMRemove alacritty.yml mentions from font crate errors =||= "I'm a rust newbie but it looks like servo-fontconfig-sys at https://github.com/servo/libfontconfig embeds a version of the C fontconfig library that's very stale. Could that be it?

I can confirm that installing libfontconfig1-dev and rebuilding fixed my fontconfig errors and slow startup."kchibisovChristian Duerr07/11/20 12:34:06 AMRename remaining instances of `Couldn't`1
395209/17/18 03:15:32 PMJoe WilmMore efficient resize implementationResizing on scrollback branch has some O(n) (with length of buffer) operations.07/15/20 09:27:33 PMAdd support for searching without vi mode"This implements search without vi mode by using the selection to track
the active search match and advancing it on user input. The keys to go
to the next or previous match are not configurable and are bound to
enter and shift enter based on Firefox's behavior.

Fixes #3937."11Removing this from scrollback project. The updated task is to remove extra allocations in certain storage resize scenarios.chrisduerrChristian Duerr07/15/20 08:50:10 PMRemove all occurrences of *wards1
395504/24/18 05:45:19 PMGeorge KingConsider allowing alacritty to be used as an application component"Alacritty appears to be a pushing the state of the art for efficient and correct terminal functionality, and I'm optimistic about the approaches taken towards parsing and rendering. I imagine that other editors and IDEs could benefit from using alacritty as an integrated terminal.

Relatedly, I have yet to adopt Alacritty due to various issues that appear to stem from the upstream cross-platform windowing library, etc. This is not surprising; getting the the various platform details right sounds very hard. But as a Mac application developer, some of these problems strike me as sad, because the native Cocoa APIs just do the right thing for things like keyboard switching, window resize, etc. This is nothing new; details about Mac user input and windowing frequently suffer in cross-platform OpenGL libraries.

This issue is meant to explore the possibility of using alacritty as a component within another application, in one of two ways:
* as a library, in which the terminal can be initialized with an existing OpenGL context, and the existing event loop and input events will call into alacritty functions.
* as a subprocess, in which the parent communicates an IOSurface and sends events via an IPC mechanism.

Perhaps this is out of scope for the project, but given what I've read, it seems like it might align well with @jwilm's stated goal of simplicity.

The idea of an IOSurface is to let a renderer subprocess draw into a parent process window or context. This can be set up by OpenGL, Metal, Core Video, etc. This is the OS technology that enables Safari and Chrome to isolate rendering into restricted processes for security and crash resilience.

For the curious here is the reference documentation on `IOSurface`: https://developer.apple.com/documentation/iosurface. It's rather opaque, but I've looked around in the past and there is additional demo code to be found.

I have no experience with Rust, but am willing to learn. I do know Swift though, and I would happily set up a demo project with a rough draft of what the boundary would look like, for either the library or split-process approaches (or both!). If this interests the alacritty community at all, please let me know!

Lastly, this would provide a solution for supporting alacritty on iOS, as requested in #873."07/13/20 04:43:02 PMAdd a config option to disable vsync"Disabling vsync can be useful to improve input latency.  In some cases, having vsync in alacritty can be redundant, for example when using a compositor that already handles vsync.

Default is to let the vsync on, but can be explicitely disabled by the user in the config via the `window.disable_vsync` option."8Closing because duplicate, you can also see #1023 for a WIP version of this already.aruhierAnthony Ruhier07/12/20 02:03:46 PM"Add a config option to disable vsync

Disabling vsync can be useful to improve input latency.  In some cases,
having vsync in alacritty can be redundant, for example when using a
compositor that already handles vsync.

Default is to let the vsync on, but can be explicitly disabled by the
user in the config via the window.disable_vsync option."1
395711/19/18 07:32:34 PMJakub ŁuczyńskiAdded start_maximized option in config07/14/20 03:17:30 PMFix movement within search matches"Previously the SearchEndNext and SearchEndPrevious match acted exactly
like the SearchNext and SearchPrevious action, however this is not how
vim works. In vim, regardless of direction the `gN` action always jumps
to the next match start to the left of the cursor, while the `gn` action
always jumps to the next search end to the right of the cursor.

While both approaches might seem reasonable at first, vim's approach has
a significant advantage w.r.t. predictability and automation of the
movement. By always knowing which direction the motion goes to, this
allows for mappings that reliably navigate inside the current match
regardless of the global search direction. So deleting until the end of
the match would always be `dgn` for example, regardless in which
direction the user has jumped to it.

Fixes #3953." =||= Closed in favor of https://github.com/jwilm/alacritty/pull/1823 which is rebased on top of master and fixes some problems discussed with this PR. Credits to the author of the commits made here are still included. Thanks for the PR @doubleloop.chrisduerrKirill Chibisov07/14/20 02:54:49 PMMerge branch 'master' into goto_search_boundary1
396604/25/18 09:46:20 PMNonea way to disable the mouse style replacement"Which operating system does the issue occur on?
manjaro

If on linux, are you using X11 or Wayland?
X11

i am not sure if i overlooked this in the autogenerated config or if there is a issue for this already (i did not find one)

alacritty replaces the mouse mounter style ![original](https://i.imgur.com/93cSc15.png) to ![fake](https://i.imgur.com/qrY9qo1.png)

i hope this is not a technical limitation or i just overlooked the setting"07/14/20 12:30:18 AMFix crash on cursor resizeFixes #3960.1a restart fixed it apparentlychrisduerrChristian Duerr07/13/20 05:25:05 PM"Fix crash on cursor resize

Fixes #3960."1
397004/26/18 05:45:22 PMEyvind Bjarti AndersenFeature request: Static promptIs something like the gif possible: https://doughellmann.com/blog/wp-content/uploads/2018/04/demo.gif.07/15/20 02:33:49 AMFix cursor reflow"This resolves three different issues with cursor reflow.

The first issue was that the cursor could reach the top of the screen
during reflow, since content was pushed into history despite viewport
space being available. Since the cursor cannot leave the viewport, this
would insert new space between the cursor and content (see #3968).

Another issue was that the wrapline flag was not set correctly with
content being available behind the cursor. Since the cursor is not
necessarily at the end of the line, it is possible that the cursor
should reflow to the next line instead of staying on the current one and
setting the wrapline flag.

The last bug fixed in this is about reflow with content available behind
the cursor. Since that might have en effect on new lines being inserted
and deleted below the cursor, the cursor needs to be reflown based on
it.

Fixes #3968." =||= You are right. It wasn't thought through. Thanks for pointing it out.chrisduerrChristian Duerr07/15/20 01:31:46 AMFix test failures1
397703/12/19 07:44:48 PMVincent Grandealacritty processes continue running after closingOn a fully up to date Arch Linux set up on X11 with NVIDIA proprietary driver's (396.18) and the composite extension disabled, transparency and vsync disabled (via .yml), alacritty processes continue to run and don't stop even after closing the terminal windows. My CPU cores will rise to 100% and there will be many alacritty processes running, even if you shut down the X.Org display server. I have to manually kill each alacritty process with htop for my CPU to stop maxing out at 100%.07/15/20 07:59:33 PMFix padding change not being applied immediately"" =||= "Im not using a compositor, and even have the Composite extension disabled.

Alacritty defaulted to transparent windows, but I filed a bug about that, and it now determines the right options based on system settings. Kitty with my system settings, launches fine and with no transparency.

If you read my initial first post, you would know I had no compositor running. No Composite extension means no compositor. They kind of need each other, hence why it's called the Composite extension."kchibisovKirill Chibisov07/15/20 07:16:55 PMFix padding change not being applied immediately1
397904/27/18 08:08:25 AMNoneCursors Beam and Underline revert to Block during grab and drag or lose focus"Linux Mint 18.3 Sylvia, up to date.
X11 with Xinerama, with Nvidia binary driver.
No Composite extension, No Wayland.

Alacritty cloned from git Master, with src/window.rs line 211 edited to disable transparency.

Was trying the other cursors to see what they looked like, and noticed while dragging the Alacritty window, the cursor changed to a Block. Once dragging stopped, the desired cursor shape came back."07/15/20 09:02:32 PMFix docs about multiple simultaneous keybindings =||= @siiptuo thank you; that option was not in my config file and I did not find that thread when searching earlier. Cheers!chrisduerrChristian Duerr07/15/20 08:31:30 PMFix docs about multiple simultaneous keybindings1
398004/27/18 02:14:44 PMVincent Grandekeyboard bind to open alacritty"Using Wayland/Weston, there is no keybind to launch a terminal. In X11, there are different possible ways to use keybinds to launch your terminal.

Why I ask this be added, is that since Weston has no keybind to launch a terminal, you have to open a terminal via the terminal icon on the taskbar. I personally go for minimalism, so I would prefer to run Weston without a taskbar, and spawn terminals with keybinds like I do in X11.
"07/15/20 10:32:47 PMBump version to 0.5.0-rc1 =||= "I was just asking as a workaround for Weston not having many features, you could add this feature in alacritty.

Weston is just a ""reference"" compositor, it's not meant to have many features, like the ability to customize keybinds.

It would be nice if alacritty could be spawned by itself with ""super+enter"" for  example, without the need to depend on the compositor/window manager for execution."chrisduerrChristian Duerr07/15/20 10:07:13 PMBump version to 0.5.0-rc11
398212/21/18 11:17:19 PMChristian DuerrDisable live-config-reload for opacity"It is now not possible anymore to update the background opacity of
alacritty while it is running.

This is not just the removal of a feature though, there have been a lot
of issues with the `with_transparency(true)` call in the `window.rs`
module. Some of these issues are flickering on resize and alacritty
crashing on startup.

To fix these issues the transparency of alacritty is now set at startup,
if alacritty is started with opacity `1.0` the window is crated
with `.with_transparency(false)`. If the opacity is anything other than
`1.0` alacritty will function as usual, so it is possible to start
alacritty with transparency `0.99` and then change it to `0.5` at
runtime.

Even though this definitely is not a great solution, I think this should
be beneficial for most users and solve a lot of annoyances that have
been mentioned in the past.

This fixes #1268 and fixes #969."07/17/20 01:26:54 AMAdd different search label for backward search =||= "I'm gonna go ahead and make the decision to close this PR.

I've thought about it a couple of times and it just feels like this adds a dirty hack which almost introduces more problems than it resolves.

I think the best way forward would be to properly fix the underlying issues, rather than adding some workarounds which just add technical debt that will create more work in the future.

Based on what I've seen, this issue doesn't seem super critical and only a small share of people experience it. For which the `with_transparency(false)` fix should be a band-aid for now.

If I've judged this wrong and a large group of people was eagerly awaiting this, please let me know and I'll reconsider. But for now, I'm going to close this PR."chrisduerrChristian Duerr07/17/20 01:08:14 AMFix windows build failures1
398304/28/18 12:36:41 AMJoe MoonmacOS: fixes segfault on nightlyfixes #126407/16/20 01:33:41 AMRemove Ubuntu PPA installation instructions"Since the Ubuntu PPA from mmstick is apparently not maintained anymore,
people should no longer be instructed to install the outdated version
that is available from the PPA.

The System76 PPA repository still contains an up to date version of
Alacritty, but since it also comes with several other packages we cannot
recommend users to install it outside of Pop!_OS.

Fixes #3863." =||= Thanks!chrisduerrChristian Duerr07/16/20 12:28:06 AMRemove explicit Ubuntu mention1
398607/22/18 12:38:54 AMJosh Leeb-du ToitHide Window"This fixes #542 

This PR is based on the changed provided by @sorccu and @algesten in #542 in that the Alacritty window is hidden when handling `Action::Hide`. Additionally, I've updated the macos config to bind `Command+H` to emit `Action::Hide`.

Currently though, when the window is hidden, focus is maintained on Alacritty. I couldn't see a way to unfocus the window with glutin so I'm thinking it might be an upstream issue but I'll keep investigating. 

Tested on macOS"07/17/20 12:30:35 AMFix selection update in viless search =||= Thanks for this PR, sorry for the delay. This will probably be merged after scrollback since I'm not able to test it on my main machine and it's a non-trivial change.chrisduerrChristian Duerr07/17/20 12:09:25 AMClarify documentation1
399009/23/18 04:21:48 PMNone[SCROLLBACK] Rendering not fixed after initial resize for font metrics."I don't believe this is a duplicate of an open issue, although very similar. If it turns out to be covered by (or the same as) one or another of the issues I've linked below, I can close this (or someone can move it?) since as mentioned elsewhere, this may be a known race condition that hasn't been pinned down yet.

Please compare these links:
[Not quite the same as issue 459](https://github.com/jwilm/alacritty/issues/459).
[Similar to issue 699 but I don't need maximized to get the bug](https://github.com/jwilm/alacritty/issues/699) and [somewhat more similar to issue 540 though I use Metacity but that shouldn't matter](https://github.com/jwilm/alacritty/issues/540).

**OS**: Linux Mint 18.3 Sylvia (Ubuntu 16.04)
**YES**: `metacity --no-composite` + X11 + Xinerama + Nvidia 384.111
**NO**: Composite nor RandR nor Wayland

Branch I'm reporting this for: **Scrollback**
but right now also rebuilding master at the moment to see if I can repro it there too.
**UPDATE**: rebuild master done, 30+ attempts so far, no reproduce with master branch...

**Issue Describe**:
It doesn't happen every time, or even in 20 times, but eventually it will happen. I started _Alacritty-scrollback_ from another terminal 20 or 30 times to repro this; once it's open and ready to use, it is not rendered properly after the resize adjustment for font metrics.
#In photos below; first is how _Alacritty-scrollback_ looks when it opens and presents the bug. Second photo shows after I hit _ENTER_, it fixes the render.
The window is focused (freshly opened, focused) when this all is occur.

Photo to compare before _ENTER_ and after _ENTER_:
![screenshot from 2018-04-29 06-07-41](https://user-images.githubusercontent.com/38713922/39405157-65452d36-4b76-11e8-8d1b-565a6966ad54.png)
![screenshot from 2018-04-29 06-08-42](https://user-images.githubusercontent.com/38713922/39405158-655ba624-4b76-11e8-85f8-88494ca3ff31.png)"07/17/20 09:12:12 PMFix crashes during search"This fixes two crashes related to search. The first crash was due to
variable shadowing computing the incorrect length of a search as soon as
it was started, causing an overflow after attempting a subtraction.
Since overflows are only debug mode checks, in release this would lead
to an IME positioned far, far beyond the window's boundaries (likely
offscreen).

The other bug was that the search was always started from the last
column in reverse search without vi mode, but after shrinking the
terminal width that origin point is no longer a valid part of the grid.
As a result it would cause an index out of bounds. The line was already
clamped to the grid, but now the same is also done for the column.

Fixes #3987." =||= "I have a hunch that this issue might be solved with #1518, since another similar issue was fixed with it. I've added this issue to the issues which will be automatically closed once that PR is merged.

If anyone is able to reproduce this issue with #1518, please let me know and I'll remove the reference to this issue."chrisduerrChristian Duerr07/17/20 01:05:46 PM"Fix crashes during search

This fixes two crashes related to search. The first crash was due to
variable shadowing computing the incorrect length of a search as soon as
it was started, causing an overflow after attempting a subtraction.
Since overflows are only debug mode checks, in release this would lead
to an IME positioned far, far beyond the window's boundaries (likely
offscreen).

The other bug was that the search was always started from the last
column in reverse search without vi mode, but after shrinking the
terminal width that origin point is no longer a valid part of the grid.
As a result it would cause an index out of bounds. The line was already
clamped to the grid, but now the same is also done for the column.

Fixes #3987."1
399105/01/18 05:58:54 PMJi ZhouFix completion install instructions for Fish on macOS (#1237)"Install completion for Fish on macOS.

This fixes #1237."07/18/20 01:27:42 AMRename font crate to crossfont"I have not yet moved this to a separate repository, but I think it might be a good idea.
What do you think @nixpulvis / @kchibisov?

We need to rename it one way or another so we can just rename it now and potentially move it later.
But if we know that we are going to move it, we might as well just do it all in one go."1"I have a hunch that this issue might be solved with #1518, since another similar issue was fixed with it. I've added this issue to the issues which will be automatically closed once that PR is merged.

If anyone is able to reproduce this issue with #1518, please let me know and I'll remove the reference to this issue."chrisduerrChristian Duerr07/18/20 12:56:39 AMMove font library to alacritty/crossfont1
399305/30/18 04:00:22 AMChristian DuerrImprove the resizing implementation"Until now the resizing implementation with scrollback has been really
inefficient because it made use of APIs like `Vec::insert`. This has
been rewored with this commit.

A `len` property has been added to the `Storage` struct which keeps
track of the actual length of the raw buffer. This has changed both
shrinking and growing implementations.

With shrinking, no more lines are removed, only the `len` property is
updated to set all lines shrunk to an ""invisible"" state which cannot be
accessed from the outside, this effectively changes it to a O(1)
operation. The only issue with this would be memory consumption, but
since the maximum shrinkage is the number of lines on one screen, it
should be a rather small impacte (probabl <100 lines usually). If
desired it would be possible to change this to shrink the raw inner
buffer whenever there are more than X lines hidden.

Growing now works in a similar way to shrinking, if the ""invisible""
lines are enough, no new lines are inserted but rather the invisible
buffer is made visible again. Otherwise the amount of lines that still
needs to be inserted is added to the raw buffer, but instead of the
inefficient `Vec::insert`, the `Vec::push` API is used now.

This is probably not an ideal implementation, but it should get us
started on making this work properly in the scrollback PR.
Any comments appreciated @jwilm.

This fixes #1271."07/19/20 02:14:31 PMBump alacritty_terminal version"This change bumps the version of the `alacritty_terminal` crate to force
it out of sync with the Alacritty application. Since it is a library
that will be published on crates.io, it should be following semver
rather than our binary's release version.

While it would be possible to just keep it at 0.5.0 and remove the
`-dev` suffix, explicitly disconnecting it from the Alacritty version
should give it a clean starting-off point and prevent unnecessary
confusion. Bumping it to 0.10.0 instead of something like 0.6.0 should
allow for a nice gap between the different versions without being too
arbitrary. Changing the version to 0.1.0 or something similar is not an
option since decreasing semver version would likely cause a lot of
problems.

While it would be possible to further separate the Alacritty terminal
library from the Alacritty terminal emulator, by renaming it from
`alacritty_terminal` to something different, I don't think that is
necessary or a good idea at the moment. While the `alacritty_terminal`
library *can* be used for other terminals, its primary goal is still to
support the Alacritty terminal emulator and I don't see that changing.
So making that clear in its name seems like a good idea. Since there is
no plan to maintain this library separately from Alacritty, but to keep
both tied together, the naming should reflect this." =||= "Latest changes:
```
Because there is no good way to store invisible lines in a backwards-
and forwards-compatible way, they buffer now gets truncated before
dumping the state of a grid when creating a ref-test.

This involved a few workaround of which a few required adding additional
methods which are only used in ref-tests, these should be minimal
though.

Since this required the creation of a truncation method anyways, some
logic has been added which automatically truncates the invisible buffer
when there are more than X (set to 100) invisible lines. This should not
impact performance because it rarely occurs, but it could save a bit of
memory when the history size is shrunk during runtime (see #1293).

This also adds an optional `config.json` file to the ref-test output
where it is possible to manually specify variables which should override
config defaults, this has been used only for history_size so far.

Creating a new ref-test does also still work, so there was no regression
here, if history size is altered, the config.json just has to be created
manually with the content `{""history_size"":HIST_SIZE}`, where
`HIST_SIZE` is the desired history size.
```

I think this needs another review @jwilm. I'm not 100% happy with how complex this has become, but on the other hand I'm not aware of any better way to do this. Also the complexity should be understandable because there is documentation and testing. Please let me know if you have any improvement ideas!"chrisduerrChristian Duerr07/19/20 12:28:41 PMAdd instructions to PR template1
399405/02/18 03:05:02 PMTim Whitbeckadd instructions for setting as default07/18/20 06:02:06 PMFix rustfmt build failures =||= "@twhitbeck I agree with @chrisduerr that this probably shouldn't go in the README. One option might be opening an issue on the tracker like ""How do I set as the default terminal in Ubuntu x.y?"" and self answering with this info. For whatever reason, google ranks issue results pretty highly."chrisduerrChristian Duerr07/18/20 02:56:04 PMFix $PATH issue1
400008/14/20 09:36:46 PMKirill BobyrevBlink in rtv after every movement"> Which operating system does the issue occur on?

Arch Linux

> If on Linux, are you using X11 or Wayland?

X11

I'm not really sure what causes the problem, but whenever I open [rtv](https://github.com/michael-lazar/rtv) I have unpleasant experience of the terminal blinking once each time I press down the `[hjkl]` (movement) button. This doesn't happen in urxvt and the only alike thing I have encountered in Alacritty so far was blinking on the resize. I'm not really sure whether it's somehow connected, but I guess this might be some bug.

I'm using `alacritty-git 0.1.0.755.g6debc4f-1` and `rtv 1.21.0-1` from AUR."07/19/20 08:38:00 PMBump version to 0.6.0-dev =||= "Oh, sorry for not answering, I somehow missed your answer, @chrisduerr.

Thank you very much for checking and letting me know. I didn't use rtv much so I didn't encounter it again but I should've definitely just checked what you proposed.

Thanks for your answers again!"chrisduerrChristian Duerr07/19/20 08:22:19 PMFix alacritty dependency version1
401105/01/18 02:48:10 PMMartin BeckerAlacritty Can't load user fonts on MacOS"Currently running MacOS High Sierra, version 10.13.3.

The problem is that Alacritty refuses to find fonts in my `library/fonts` folder and as such won't load, all I get is:

```
Couldn't find a font with name 'Knack Regular Nerd Font Complete' and style 'Regular'
Please check the font config in your alacritty.yml.
```

font config in `~/.alacritty.yml`:
```yml
font:
  # The normal (roman) font face to use.
  normal:
    family: Knack Regular Nerd Font Complete
    # Style can be specified to pick a specific face.
    style: Regular
```

Which is a shame as I would really like to start using alacritty for it's speed as I don't need tabs as I use Tmux."07/23/20 09:55:16 PMAdd secondary DA support"This adds support for the secondary DA escape sequence response.
Alacritty's version is formatted allowing for up to 99 minor and patch
versions, which should be sufficient.

The tertiary DA is intentionally not implemented and marked as rejected
in the documentation, since a lot of terminals do not support it, or
report useless data (XTerm/URxvt/Kitty).

Fixes #3100."1It seems like this is a user configuration, rather than an alacritty issue.chrisduerrChristian Duerr07/23/20 09:41:10 PMFix environment variable1
401305/05/18 03:39:44 PMMartin BeckerTmux status line last character appears on on next line"Currently running MacOS High Sierra, version 10.13.3.

I'm using alacritty built from source into an `.app` .

Now normally this would be an issue for `Tmux` itself however this Issue only appears on Alacritty, I've added the character `|` to the end of my Tmux status line so It doesn't bother me too much. 
Without `|` the last character printed gets moved to the beginning of the last line, so you might see a number if you're using a date for example, and no, adding whitespace doesn't stop the last character from getting moved.

Here's a screenshot example (look at the first character next to the buffer tab): 

![Tmux Status line ](https://image.ibb.co/h23cpS/Tmux_Status_line.png)

P.s. I'd like to add, Alacritty is Sooooo much faster then Iterm2 and it's fixed a super aggravating, annoying problem where the powerline characters didn't line up properly, so just for this THANK YOU!"08/02/20 10:42:18 PMdocs: improve docs related to opening URLs"Before, if you searched in alacritty.yml for URL,
it was easy to miss details which are closely related to it,
like semantic_escape_chars and the ""Open"" action.

The updated docs explain what a semantic selection is and mention
""URL"" in a couple places to make these features more discoverable.
Before, if you searched in alacritty.yml for URL,
it was easy to miss details which are closely related to it,
like semantic_escape_chars and the ""Open"" action.

The updated docs explain what a semantic selection is and mention
""URL"" in a couple places to make these features more discoverable."7This is an issue with how unicode widths are calculated. Closing in favor of #1295.markstosMark Stosberg08/02/20 10:25:07 PMdocs: Document actions.1
401805/01/18 10:38:00 PMDeleted userm07/22/20 06:11:25 PMImprove selection expansion changelog entry8This is an issue with how unicode widths are calculated. Closing in favor of #1295.chrisduerrChristian Duerr07/22/20 04:19:54 PMImprove selection expansion changelog entry1
401910/28/18 08:23:40 PMJoe MoonAdd more granular padding: top,right,bottom,left07/23/20 10:32:38 PMDocument Alacritty's UI features1"Going to close this PR for now then, just to get it out of the way.

If the conclusion should ever be that we do need this, it's no problem to just re-open it or take the code and reapply the changes on top of master.

Thanks for the quick feedback @sodiumjoe."chrisduerrChristian Duerr07/23/20 09:52:29 PMReword search docs1
402706/23/18 10:13:39 AMJussi KalliokoskimacOS: Ignore first click on unfocused windows"It would be really nice of Alacritty to ignore the first click on an unfocused window on macOS. This is also the behavior that iTerm2 exhibits. The reason is mainly that it's really easy to cause an accidental selection (and possibly copy to clipboard) when switching focus using a mouse.

I've already had some close calls where I copied an identifier or URL from somewhere and didn't notice making an accidental selection upon window switching and pasted garbage into a shell. Luckily the garbage hasn't (yet) contained any harmful shell commands, but seems like only a matter of time since a lot of the stuff in terminal windows is in fact shell commands you may not want to repeat."08/07/20 02:13:42 PMRemove package installation instructions in README"Add TOC in README."9@felippemr Yeah that's looking great! Thanks for working on this.vancanhuitChristian Duerr08/06/20 08:16:52 PMFix macOS capitalization1
402905/02/18 08:30:07 PMNoneMacOS: Force uses Nvidia Graphic card."In MacOS, the alacritty force switches to the Nvidia Graphic card.

Is possible to use Intel graphic card in order to save the battery.
"07/24/20 04:29:01 PMRemove outdated sections from README =||= This is a duplicate of #210.chrisduerrChristian Duerr07/24/20 04:12:42 PMMove compat logo notice to INSTALL.md1
403005/30/18 04:33:49 PMChristian DuerrAllow changing scrollback history size at runtime "***This PR is based on #1284 and should not be merged before it.***

Making use of the changes that have been introduced in #1234 and #1284,
this allows changing the size of the scrollback buffer at runtime.

This simply changes the size of the raw inner buffer making use of the
optimized mutation algorithms introduced in #1284. As a result,
shrinking the scrollback history size at runtime should be basically
free and growing will only introduce a performance cost when there are
no more buffered lines. However, as a result there will not be any
memory freed when shrinking the scrollback history size at runtime.

As discussed in #1234 a potential solution for this could be to truncate
the raw buffer whenever more than X lines are deleted, however this
issue should not be very significant PR and if a solution is desired a
separate issue/PR should be opened.

This fixes #1235."07/25/20 02:05:12 PMFix viless search origin"When searching without vi mode the display is no longer reset when the
user hasn't jumped between matches at all. Since there's no reason to
confirm the search, we shouldn't just reset the viewport without a good
reason.

The search is now also restarted completely when the entire search regex
is deleted. While this doesn't reset to the original viewport position
if the user has jumped between matches, it should make things feel a
little less arbitrary.

Fixes #4020." =||= This is a duplicate of #210.chrisduerrChristian Duerr07/24/20 08:08:59 PM"Fix viless search origin

When searching without vi mode the display is no longer reset when the
user hasn't jumped between matches at all. Since there's no reason to
confirm the search, we shouldn't just reset the viewport without a good
reason.

The search is now also restarted completely when the entire search regex
is deleted. While this doesn't reset to the original viewport position
if the user has jumped between matches, it should make things feel a
little less arbitrary.

Fixes #4020."1
403105/30/18 04:35:37 PMChristian Duerr'Index out of bounds' on scrollback"Following index out of bounds error was recorded by jwilm while running the scrollback PR:

```
panic occurred in file '/checkout/src/liballoc/vec.rs' at line 1551:
index out of bounds: the len is 80 but the index is 80
stack backtrace:
   0:     0x555d7ceb6764 - backtrace::backtrace::libunwind::trace::h7ced725658ae3a03
                        at /home/jwilm/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.7/src/backtrace/libunwind.rs:53
                         - backtrace::backtrace::trace::h4f4d155db210226c
                        at /home/jwilm/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.7/src/backtrace/mod.rs:42
   1:     0x555d7ceb464c - backtrace::capture::Backtrace::new_unresolved::h543e009f45a0f15c
                        at /home/jwilm/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.7/src/capture.rs:88
   2:     0x555d7ceb459e - backtrace::capture::Backtrace::new::h4cac088c3aa8f584
                        at /home/jwilm/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.7/src/capture.rs:63
   3:     0x555d7ccf2804 - alacritty::main::{{closure}}::h5b43e9c1ebdd52dc
                        at src/main.rs:83
   4:     0x555d7d68bbea - std::panicking::rust_panic_with_hook::h09a7a3a353dc2f38
                        at libstd/panicking.rs:577
   5:     0x555d7d68ba6e - std::panicking::begin_panic::h8327f16bde15df70
                        at libstd/panicking.rs:537
   6:     0x555d7d68b969 - std::panicking::begin_panic_fmt::h42ff1d37404632d6
                        at libstd/panicking.rs:521
   7:     0x555d7d68b8f2 - rust_begin_unwind
                        at libstd/panicking.rs:497
   8:     0x555d7d6d5270 - core::panicking::panic_fmt::h0bd854df201d1baf
                        at libcore/panicking.rs:71
   9:     0x555d7d6d5213 - core::panicking::panic_bounds_check::hd6045bfa984e7c3a
                        at libcore/panicking.rs:58
  10:     0x555d7d0aa135 - <alloc::vec::Vec<T> as core::ops::index::Index<usize>>::index::h0759162e4bbf335b
                        at /checkout/src/liballoc/vec.rs:1551
  11:     0x555d7cfe6fa7 - <alacritty::grid::row::Row<T> as core::ops::index::Index<alacritty::index::Column>>::index::h1dd2985cf42e60f3
                        at src/grid/row.rs:98
  12:     0x555d7cff282a - <alacritty::grid::DisplayIter<'a, T> as core::iter::iterator::Iterator>::next::habdfe2081661db73
                        at src/grid/mod.rs:749
  13:     0x555d7cf9eb78 - <alacritty::term::RenderableCellsIter<'a> as core::iter::iterator::Iterator>::next::h9c258387acb74542
                        at src/term/mod.rs:396
  14:     0x555d7cfe10fb - alacritty::renderer::RenderApi::render_cells::h981abad3ac0a973e
                        at src/renderer/mod.rs:827
  15:     0x555d7d001120 - alacritty::display::Display::draw::{{closure}}::h051b3610aa4d993f
                        at src/display.rs:367
  16:     0x555d7cfe0d28 - alacritty::renderer::QuadRenderer::with_api::h96bfc716a635e271
                        at src/renderer/mod.rs:658
  17:     0x555d7cfb5316 - alacritty::display::Display::draw::h2e1e33fc5e749585
                        at src/display.rs:360
  18:     0x555d7cde0601 - alacritty::run::h15e593fa5aca56ad
                        at src/main.rs:242
  19:     0x555d7cddf1a5 - alacritty::main::h5f6a993d59a40bed
                        at src/main.rs:101
  20:     0x555d7cdddb51 - std::rt::lang_start::{{closure}}::h23a421677c768270
                        at /checkout/src/libstd/rt.rs:74
  21:     0x555d7d68b857 - std::rt::lang_start_internal::{{closure}}::ha293dd0b9fbcae9f
                        at libstd/rt.rs:59
                         - std::panicking::try::do_call::hd12baa704e255980
                        at libstd/panicking.rs:479
  22:     0x555d7d69adae - __rust_maybe_catch_panic
                        at libpanic_unwind/lib.rs:102
  23:     0x555d7d68c003 - std::panicking::try::h8f80ce4b4c3953ca
                        at libstd/panicking.rs:458
                         - std::panic::catch_unwind::h0bf512424ce1df1e
                        at libstd/panic.rs:358
                         - std::rt::lang_start_internal::h764d480f090a00ea
                        at libstd/rt.rs:58
  24:     0x555d7cdddb31 - std::rt::lang_start::hc98f607bc773aa03
                        at /checkout/src/libstd/rt.rs:74
  25:     0x555d7cde096d - main
  26:     0x7f7c028692e0 - __libc_start_main
  27:     0x555d7cc5fee9 - _start
  28: 0x0 - <unknown><Paste>
```"07/26/20 01:04:40 AMInvert fixed color cursor if it matches cell bg"This should reduce the number of times people with fixed cursor colors
run into troubles when existing text is already colored.

Using just the background color as a metric instead of both background
and foreground color should ensure that the cursor still has a clear
shape, since just changing the foreground color for a cursor might be
difficult to see. Always inverting the entire cursor instead of keeping
the fixed foreground color is important to make sure the contrast isn't
messed up.

Fixes #4016."4This was resolved in f897c998e9166a1fd9e2889ad806a7af954f754dchrisduerrChristian Duerr07/26/20 12:50:02 AMFix clippy errors1
403605/08/18 06:41:40 PMUrmish ShahGuide to uninstall alacritty completely"Which operating system does the issue occur on?
arch-linux on a Thinkpad x230i (very old laptop)

If on linux, are you using X11 or Wayland?
wayland (using gnome3)

I don't have a gpu and the laptop I am using is quite old too. There are some bugs I can't fix. E.g. In Neovim, button press for a long time only registers as 1 press. This is terrible for scrolling. And it seems like an open bug as reported here: https://github.com/jwilm/alacritty/issues/1062 
I wish to uninstall this for the time being. This seems like an otherwise great project.

pacman uninstall doesn't work because this package was installed outside of it."07/27/20 08:49:26 PMFix CellForeground and CellBackground cursor colors"This commit fixes regression introduced in
bedf5f3004e8f33011925ca471be02ead96f4581, when setting
certain CellForeground/CellBackground combinations stoppped working.

For example setting CellForeground for both foreground and background.

--
I do remember mentioning it on IRC, but I fall a sleep before commenting on PR and so it got merged, I guess." =||= "If you have any idea how to help users, please bring it forward. But right now there really shouldn't be any ""magic"" required. :)

We only have the binary, the completions and at runtime we only create the config file. That's all that needs to be removed."kchibisovKirill Chibisov07/27/20 07:05:56 PMMerge branch 'master' into fix-cursor-colors1
403705/16/18 06:10:48 AMleihuxiarchlinux input method iusse"Which operating system does the issue occur on?
Archlinux
If on linux, are you using X11 or Wayland?

x11

After upgrade ,  I cant use my input method."07/26/20 02:51:16 PMDocument rejected window ops escapesFixes #4035. =||= "I feel bad for how often @im must get pinged by mistake.

@quininer prior to tomaka/winit#515, `Window::hidpi_factor` would always return 1.0. Now it calculates the DPI factor using XRandR."chrisduerrChristian Duerr07/26/20 02:36:45 PMChange table formatting1
404111/01/18 07:35:38 PMTaupiqueurCan’t paste selection with Shift Insert when in mouse modeIt happens since #1218 has been merged.07/28/20 10:00:55 AMBump minimum supported Rust version to 1.43.0"" =||= That's completely correct and totally my fault. Fix can be found here: https://github.com/jwilm/alacritty/pull/1300.kchibisovKirill Chibisov07/27/20 01:44:08 PMBump minimum supported Rust version to 1.43.01
404204/28/19 09:10:21 PMSimon Larsson"Remove ""Error: target STRING not available"" message""Which operating system does the issue occur on?
Arch x64

If on linux, are you using X11 or Wayland?
X11

If you paste in terminal without having anything copied it automatically pastes this overly long message instead. It's just anoying and serves no purpose. Make it just paste ""?"" or nothing at all like all other terminal emulators."07/27/20 07:05:26 PMFix scrolling with selection expansion"Fixes #4040." =||= For anyone who just want this error to not be there on wayland https://github.com/brunelli/wl-clipboard-x11chrisduerrChristian Duerr07/27/20 04:23:12 PM"Fix scrolling with selection expansion

Fixes #4040."1
404511/01/18 07:35:38 PMChristian DuerrAllow mouse pasting in mouse mode with shift"It is now possible to paste in mouse mode again by making use of the
`shift` key while pressing the mouse button reserved for PasteSelection.

This fixes #1298."07/28/20 05:04:23 PMRender wide characters correctly to avoid being cut off"The commit contains a realistically tested workaround with no performance impact.

I made a few necessary changes to the shaders in the GLSL code, fixing the
background width of the wide characters and skipping everything about spacer
handling (in fact, they shouldn't be displayed on the screen at all, either
foreground or background).

This should close #791, cc #4038."3"I've reworked this PR completely. I've decided to remove the 'abstraction' for checking if the mouse mode is active since it mostly just introduced additional noise anyways.

This should now just simply fix the issue, rather than introducing some big changes. However, mouse modifiers are always matched in a relaxed way (similar to the URL checking), because additional modifiers are commonly used with the mouse."flw-cnflw07/28/20 10:52:23 AM"Render wide characters correctly to avoid being cut off

The commit contains a realistically tested workaround with no performance impact.

I made a few necessary changes to the shaders in the GLSL code, fixing the
background width of the wide characters and skipping everything about spacer
handling (in fact, they shouldn't be displayed on the screen at all, either
foreground or background).

This should close #791, cc #4038."1
405005/11/18 11:54:21 PMcodlsupport for dropping a file to insert its path"other terminals support dropping a file from a file manager onto the terminal to insert its path in quotes. this is very convenient when dealing with files that are more easily found through a file manager

it'd be nice if alacritty could support this as well"07/30/20 04:02:17 AMRemove snap packaging config"Since Alacritty should not be responsible for packaging and the
maintainers of the snap package have not kept it up to date, this
removes its configuration file." =||= Cool I will test this out tonight thanks for the quick response.chrisduerrChristian Duerr07/30/20 03:34:55 AM"Remove snap packaging config

Since Alacritty should not be responsible for packaging and the
maintainers of the snap package have not kept it up to date, this
removes its configuration file."1
405210/04/18 01:03:34 AMClark Greenfails to start with shader error"Which operating system does the issue occur on?
`arch linux 4.16.5`
If on linux, are you using X11 or Wayland?
`X11`

I've looked at issue 128 and others, but I think mine is different: 
```libGL error: unable to load driver: nouveau_dri.so
libGL error: driver pointer missing
libGL error: failed to load driver: nouveau
libGL error: unable to load driver: nouveau_dri.so
libGL error: driver pointer missing
libGL error: failed to load driver: nouveau
libGL error: unable to load driver: swrast_dri.so
libGL error: failed to load driver: swrast
Alacritty encountered an unrecoverable error:

	There was an error initializing the shaders: failed compiling shader:
```
Alacritty worked just fine until yesterday when I installed eclipse and attempted to install eclim. Other users seem to have the same issue with steam and they say there's a broken symlink somewhere. Has anyone else seen this? "07/31/20 09:01:37 PMFix 0.5.0 changelog =||= Sorry for the late responsechrisduerrChristian Duerr07/31/20 08:31:39 PM"Unify changelog section order

This clarifies the order of subsections in the changelog. All entries
are now defined in the order `Packaging`, `Removed`, `Added`, `Changed`
and `Fixed`.

The sections `Security` and `Deprecated` have been removed. Since
deprecation should always just be a soft deprecation with clear user
warnings, it's not much different from just `Changed`, so that should
make it easier to decide where to put things. The `Security` section is
often not clear enough since a lot of changes might have some form of
security impact depending on interpretation. Since there's unlikely to
be any major security advisories from the Alacritty project, that
section is not particularly useful.

The `Added`, `Changed` and `Fixed` order follows the interest of the
user and the impact on them. This puts the most interesting new features
front and center while allowing to go for a deep dive to see if specific
bugs have been fixed.

The `Removed` section was put last since realistically this should not
affect users. All options should be gradually deprecated and no major
features should just get removed. So most of the time this will just
list deprecated features that are now completely removed, which usually
means there's no impact for users that updated from the last version."1
405405/11/18 11:54:21 PMChristian DuerrPaste path into terminal when drag & dropping file"It's now possible to insert the path of a file or directory by dropping
it from the file manager into alacritty.

This fixes #1301."08/01/20 01:11:25 AMFix crates.io publishing restrictions"This works around the problem that crates pushed to crates.io cannot
reference files outside of their crate directory." =||= I'm droppping from `nemo`, and drag and drop seems to work between in and  other apps (e.g.: firefox).chrisduerrChristian Duerr08/01/20 12:36:55 AMAdd symlink for readme1
405505/12/18 07:44:34 PMJonathan DahanRename alacritty-completions.zsh to _alacritty?"I tried sourcing `alacritty-completions.zsh` and it failed, then I read the readme.md, and saw it needs to be renamed and added to fpath. It would be cool if it was just named `_alacritty` so all I had to do is add the directory to fpath.

Maybe we could put it in a subdirectory `completions` to make it clearer.

Alternatively, could the zsh file be reworked so that it could be sourced easily? I'm not sure how.

I made this hack to work around it for now https://github.com/jedahan/alacritty-completions"08/01/20 12:38:29 AM0.5.0 release master updates""3"That said, if you still feel like there would be a significant benefit for creating a `completions` directory with the fish, zsh and bash files in there, named the way you want them to be named, go for it. I generally don't think it's a bad idea to clean up the root directory of alacritty a bit.

After all the argument ""why change it?"" can be made for the other side too. There's little reason to change the way it is right now, but there's also little reason not to name it the way zsh expects it to be named. I do think the correct name would be `_alacritty` and not `_alacritty.zsh` though, which was the original reason why I didn't name it that way iirc. Just so it was clear that these were completions for the Z Shell."kchibisovKirill Chibisov07/31/20 11:49:28 PM"Add 0.5.0 announcement blog to readme

This is only an update to the readme and does not represent a stable
release."1
405610/16/18 06:46:27 PMChristian DuerrAllow the usage of scancodes in the config"This change should allow the usage of scancodes in the configuration
file.

When a VirtualKeyCode for glutin is not present, this should now allow
the user to use the scancodes instead. If the user specifiecs a key with
its scancode even though the key has a VirtualKeyCode, it should still
work.

The behavior of directly specifying a VirtualKeyCode should be unchanged
by this.

This fixes #1265."07/31/20 11:52:34 PMRemove 0.5.0 changelog suffix"This is only an update to the changelog and does not represent a stable
release."1"That said, if you still feel like there would be a significant benefit for creating a `completions` directory with the fish, zsh and bash files in there, named the way you want them to be named, go for it. I generally don't think it's a bad idea to clean up the root directory of alacritty a bit.

After all the argument ""why change it?"" can be made for the other side too. There's little reason to change the way it is right now, but there's also little reason not to name it the way zsh expects it to be named. I do think the correct name would be `_alacritty` and not `_alacritty.zsh` though, which was the original reason why I didn't name it that way iirc. Just so it was clear that these were completions for the Z Shell."chrisduerrChristian Duerr07/31/20 11:50:19 PM"Remove 0.5.0 changelog suffix

This is only an update to the changelog and does not represent a stable
release."1
405705/14/18 03:39:04 PMMichael MärzCopy Paste not not working"I'm on Ubuntu 16.04 and built from source (currently scroll back branch but tested in master, too).
I use i3 as a window manager and x11 as display manager.

Currently Alacritty is working as it should besides i cannot copy paste anything. My alacritty.yml is detected and read correctly, (e.g. if i change the modifier for copy to ctrl+c the normal behaviour (SIGINT) is not sent anymore, but it does not copy either. All other shortcuts are recognized correctly.

Here is the output of --print-events -vvv:

    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 29, state: Pressed, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 42, state: Pressed, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 46, state: Pressed, virtual_keycode: Some(C), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 46, state: Released, virtual_keycode: Some(C), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 47, state: Pressed, virtual_keycode: Some(V), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 47, state: Released, virtual_keycode: Some(V), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 29, state: Released, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 42, state: Released, virtual_keycode: Some(LShift), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 29, state: Pressed, virtual_keycode: Some(LControl), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
    glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(10))), event: Key(KeyboardInput { scancode: 46, state: Pressed, virtual_keycode: Some(C), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }

If i can provide more output, could you please tell me how.
Copy Paste does work in all other terms: gnome-terminal, xterm, konsole and kitty"08/01/20 01:02:08 AMAdd notes about version updates on master"All version updates on master branch don't represent stable releases
in anyway, so add note that it should be mentioned in the commits, which
refer to releases.

" =||= Ty, this fixed it. I must have incompletely copied the requirements.kchibisovKirill Chibisov08/01/20 12:11:39 AM"Add notes about version updates on master

All version updates on master branch don't represent stable releases
in anyway, so add note that it should be mentioned in the commits, which
refer to releases."1
405805/14/18 07:49:09 PMAhmed El GabriFont offset.y not working"Which operating system does the issue occur on? macOS

I tried it with multiple fonts, but it doesn't work. Any idea what can be the issue or if I need to change something else in combination with it?

```yaml
font:
  normal:
    family: Iosevka Nerd Font # Tried multipe fonts
    style: Regular

  bold:
    family: Iosevka Nerd Font # Tried multipe fonts
    style: Bold

  italic:
    family: Iosevka Nerd Font # Tried multipe fonts
    style: Italic

  size: 12.0

  offset:
    x: 0.0
    y: 0.0 # I tried even 20.0, didn't work

  glyph_offset:
    x: 0.0
    y: 0.0
```
"08/01/20 11:16:13 AMCorrect various config options"This resolves the following deprecation warning: ""Config dynamic_title is deprecated; please use window.dynamic_title instead"""3@ahmedelgabri There currently is an open PR that will put up a notice when errors were detected in the config file during startup. Right now you'll have to go through starting it from a different terminal emulator, but this will change eventually. :)joshukraineJoshua Steele08/01/20 10:34:30 AMCorrect search bar color config options.1
406205/14/18 08:29:40 PMAnirudh BalajiPerformance: Kitty is on par without sacrificing things like tabs & modern features"### *important(maybe):* system specs
-------

Arch Linux (VirtualBox) 4GB ram
i3 + polybar

-------

Usually, Alacritty was about ~0.5 sec faster than Kitty, but Kitty provided scroll back and ligatures, tabs & windows, image protocol, mouse protocol, extensibility, etc.
Given this, it does seem Alacritty is the fastest terminal, but Kitty provides much more for a small performance cost."08/02/20 01:25:15 AMAdd note regarding release tagsI think this is worth mentioning, now that more Linux users may decide to build from source themselves. They likely want to pick a stable release and not the current state of `master`.3Kitty doesn't even support System IME.adrian5adrian508/01/20 10:03:18 PMAdd note regarding release tags1
406505/24/18 03:33:02 PMSteven NobleRedraw issues when scrolling one line or column at a time"I'm using:
- the latest Alacritty, Rust & Cargo
- the latest Neovim, plug-ins and Python adapter
- the latest ZSH
- the latest Tmux
- the latest Mac OS X

I only see the following error in Neovim. However, the error only occurs when I scroll one line or column at a time (`h`, `l`, `j`, `k`) after long periods of use. I only do this in Neovim, which might be why I only see this problem in Neovim, rather than it being a Neovim problem itself.

The problem that occurs is that each column or row is initially redrawn one row or column out when I scroll through it. See the picture:

![image](https://user-images.githubusercontent.com/62277/40039363-726499bc-5859-11e8-8358-0981f2b47761.png)

Is this likely to be an Alacritty issue?

Cross-posted: https://github.com/neovim/neovim/issues/8390"08/02/20 10:00:06 PMFix travis release deployment"This resolves an issue with travis release deployment where tags would
cause a release deployment even if the tag did not match the `vX.Y.Z`
format."1"@snoblenet That's exactly what I expected! Looks like it's directly related to #696 and #1317.
Once those are fixed this issue should be resolved too, so closing this as a duplicate. Thanks for the follow-up!"chrisduerrKirill Chibisov08/02/20 09:09:25 PMMerge branch 'master' into fix_releases1
406605/15/18 10:25:06 PMVarununresolved import error while building latest"Which operating system does the issue occur on?
**Mac OSX**

```
error[E0432]: unresolved import `std::sync::atomic::spin_loop_hint`
  --> /Users/vakumar/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.14/src/spinwait.rs:14:5
   |
14 | use std::sync::atomic::spin_loop_hint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `spin_loop_hint` in `sync::atomic`
error: aborting due to previous error
error: Could not compile `parking_lot_core`.
```
"08/02/20 03:32:09 PMFix typo""1For those running into this issue on macOS, simply run `rustup update` (assuming you installed Rust using `curl https://sh.rustup.rs -sSf | sh`)rmschindlerRaphael Martin Schindler08/02/20 03:04:13 PMFix typo1
406706/14/18 01:47:59 AMDavid Rosscava screen cutting issue much more noticable in alacritty than gnome-terminal"Which operating system does the issue occur on? Linux, Ubuntu 18.04

If on linux, are you using X11 or Wayland? Running Wayland with XWayland (`env WAYLAND_DISPLAY= alacritty`)

When running `cava` audio visualizer, there's noticable screen cutting in alacritty which does not occur in gnome-terminal. I'm not sure what to do to debug this further, so creating an issue here in case anyone knows where to look for more information.

Screen recording of the problem: https://webmshare.com/mPQoX

glxinfo:

```console
$ glxinfo | grep OpenGL                           
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2) 
OpenGL core profile version string: 4.5 (Core Profile) Mesa 18.0.0-rc5
OpenGL core profile shading language version string: 4.50
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 18.0.0-rc5
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 18.0.0-rc5
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:
```"08/02/20 08:09:54 PMFix negative window position"This resolves an issue where negative window positions set in the
configuration file would not place the Alacritty window in the correct
location.

Fixes #4061." =||= "I do wonder how cava is implemented. It should be possible to do this without having these weird cuts inside the bars.

Thanks for updating this issue, very appreciated. :)"chrisduerrChristian Duerr08/02/20 07:52:39 PMAdd changelog entry1
406811/30/18 09:35:55 AMDavid RossAlacritty doesn't close until the first event after exiting shell"Which operating system does the issue occur on? Linux, Ubuntu 18.04

If on linux, are you using X11 or Wayland? Running Wayland with XWayland (`env WAYLAND_DISPLAY= alacritty`)

When I leave the shell with ^d or ""exit"", alacritty will stay alive until I do the next thing (move my mouse, click, type a character, or defocus). I'd expect it to die immediately after exiting the shell.

Screen recording of the issue: https://webmshare.com/DdYGG

glxinfo:

```console
$ glxinfo | grep OpenGL                           
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2) 
OpenGL core profile version string: 4.5 (Core Profile) Mesa 18.0.0-rc5
OpenGL core profile shading language version string: 4.50
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 18.0.0-rc5
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 18.0.0-rc5
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:
```"08/03/20 06:28:41 PMFix typo in example config file">Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Not sure if/how to bump for this very small typo fix" =||= Yes it is, thanks for the heads-up.AnimiVulpisAnimiVulpis08/03/20 11:18:12 AMFix type in example config file1
407806/15/18 12:19:37 PMConnor EdwardsText cursor should be more 'lazy'."_Which operating system does the issue occur on?_
Ubuntu 18.04

_If on GNU/Linux, are you using X11 or Wayland?_
X11.

I've noticed that in some cases, the text cursor will jump to the start of the line, then immediately to the end when something is printed. In Ubuntu's GNOME Terminal, the text cursor doesn't flicker/move around.

Steps to reproduce:
- Open a new Alacritty window
- Type `ls` (the behavior is not specific to this command)
- Observe that a new line is printed, and the text cursor jumps to the start of the new line, then to the end once something is printed"08/07/20 10:37:25 PMAdd support for colon separated SGR parameters"This implements the colon separated form of SGR 38 and 48.

Fixes #1485."2Looks like it's been fixed. I'm running the latest commit on the `scrollback` branch. Closing.chrisduerrChristian Duerr08/06/20 09:45:05 PMLock to specific git commit1
407907/15/18 04:02:44 PMAnthony ClaysAdd support for setting the cursor shape"This makes cursor shapes in neovim work for me.
I couldn't find any documentation or specification on these `osc_dispatch` commands, but I'm guessing this addition is simple enough not to get anything too wrong :)"08/04/20 08:49:57 AMAdd installation instructions for Ubuntu based distributions"Hey guys! 

First thing, thanks to the contributors who works on the project! I love this terminal so muich! 

I just noticed that there were no instructions on how to install `alacritty` on a Ubuntu-based distribution other than Pop!_OS. 

So here it is! " =||= Since this is currently completely unhandled in the latest master, I don't see a reason to further hold it back. If there is some problem with this change, it should be possible to fix this in a follow-up PR. But it looks good to me, thanks for the PR!JeffLabonteJean-Francois Labonte08/04/20 06:28:23 AMAdd installation instructions for Ubuntu based distributions1
408609/18/18 12:49:12 AMChristian DuerrPerformance regression in scrollback"I've just tested the scrollback PR because I wanted to make sure that scrolling is still faster than on master, and it is. However, while testing it I've noticed that there were some significant regressions comparing current master to the scrollback PR.

Test Results:

| Test | Master | Scrollback |
| - | - | - |
| scrolling | 6s | 4.4s |
| alt-screen-random-write | 8.5s | 12s |
| scrolling-in-region | 4s | 13s |

These tests are based on https://github.com/jwilm/alacritty.

I'm not sure why I haven't noticed this earlier, but it seems like these regressions have been present ever since the scrollback PR was created. Especially the regression in `scrolling-in-region` seems quite massive.

These results were captured on X11/i3/compton/amd/mesa."08/06/20 12:42:50 AMUse `tcgetpgrp` to get PID for SpawnNewInstanceFixes #4082. =||= I'm going to close this. Our alt-screen performance is already exceptional, and additional investment there may only return marginal improvements.chrisduerrChristian Duerr08/06/20 12:09:47 AMFix tcgetpgrp return value check1
408712/09/18 03:28:23 PMChristian DuerrRender zero-width characters without progressing the cursor"When zero-width characters are rendered, this should be done without actually progressing the cursor, but rather the character should be rendered above the last cell.

Not only is this important to properly render text, but it can also lead to nasty bugs in applications that manually clear the screen themselves (see #696).

There might already be an issue for this because it has been mentioned multiple times on IRC, but I haven't found one. If someone else is able to find a duplicate of this, please let me know and I can close this one."08/06/20 02:30:57 AMAdded search field to key-bindings"Added new field to key-bindings, 'search', to go with 'action',
'command' and 'char'.
Field takes either a String or a map of { string: 'regex string', direction: 'forward' |     'backward' }
Changed the start_search function to take an additional String argument with current acti    ons SearchForward & SearchBackward passing an empty string.

This is usefull for keybindings to open URLs or copy the output from the
last command, for example:

```
key_bindings:
  - { key: G, mods: Command, mode: ~Vi, action: ToggleViMode }
  - { key: G, mods: Command, mode: Vi, search: {string: 'http.?://', direction: ""backward""} }
  - { key: G, mods: Command, mode: Vi, action: Open }
  - { key: G, mods: Command, mode: Vi, action: ClearSelection }
  - { key: G, mods: Command, mode: Vi, action: ToggleViMode }
```

Linked Issue: #4073 

> Please make sure to document all user-facing changes in the
> `CHANGELOG.md` file.

Done

> If support for a new escape sequence was added, it should be documented
> in `./docs/escape_support.md`.

N/A

> Since `alacritty_terminal`'s version always tracks the next release, make sure
> that the version is bumped according to semver when necessary.

I haven't changed any versions"3I'm going to close this. Our alt-screen performance is already exceptional, and additional investment there may only return marginal improvements.adam-kerriganAdam Kerrigan08/05/20 11:53:16 PMformatting changes1
408812/08/18 07:13:15 PMJesse Luehrsfix zero-width character rendering"this adds support at the terminal representation level for zero-width characters, which should make zero-width characters not destroy the rendering of ncurses apps, for instance. it also includes a refactoring to support storing multiple codepoints in a single cell - it only renders a single one for now, but it should be a small first step towards #306.

This fixes #1317."08/06/20 01:09:47 AMFix clippy issues =||= No worries! Thanks for working on this and getting the ball rolling!chrisduerrKirill Chibisov08/06/20 12:56:22 AMMerge branch 'master' into fix_clippy1
409105/21/18 10:49:07 AM_kmzmy mouse pointer reverses left and right in tmux"env:
archlinux + i3

The cursor theme is xcursor-simpleandsoft installed from pacman.

Here is what it looks like normally (outside alacritty, or in alacritty without tmux)
![img_3579](https://user-images.githubusercontent.com/17923071/40276107-c4d79540-5c33-11e8-8123-e189546f4747.JPG)

But when entered tmux in alacritty,  it became:
![img_3578](https://user-images.githubusercontent.com/17923071/40276113-ea4f4912-5c33-11e8-998a-0393522ff893.JPG)"08/09/20 10:57:56 PMAdd ^C binding to cancel searchFixes #4089.2@Karmenzind you might be fine with just symlinking some cursors to different names. Either way this doesn't seem like an alacritty issue.chrisduerrChristian Duerr08/07/20 11:14:45 PMFix changelog1
409709/28/18 08:52:15 PMNoneWrong focus events "#Which operating system does the issue occur on?
Archlinux using X11 and i3wm

First of all: Thank you for writing and maintaining alacritty. And a big thumbs up for code quality. I have never before looked at alacritty code (or Rust code in general), but still this looks quite readable.

I noticed some incorrect focus events  when using alacritty:

# First Issue:
## Steps to reproduce:
1. On an empty workspace spawn an alacritty window
2. Go to another (empty) workspace
 - Expected: `Focus Lost` event
 - Got: `Focus Lost` event
3. Go back to the workspace with alacritty
 - Expected: `Focus Gained` event
 - Got: `Focus Gained` event, then `Focus Lost` event

# Second Issue:
## Steps to reproduce:
1. On an empty workspace spawn an alacritty window
2. Spawn some other window (takes Focus)
 - Expected: `Focus Lost` event
 - Got: `Focus Lost` event, then `Focus Gained` event
2. Close the other window (alacritty regains focus)
 - Expected: `Focus Gained` event
 - Got: sometimes `Focus Gained` event, then `Focus Lost` event

# How I measured the events:
In the alacritty window, I started neovim with the following minimal init.vim:
```
augroup i3_focus
        autocmd VimEnter             * :sleep 100m | silent !notify-send ""NeoVimEnter""        && i3-msg -q mode vim
        autocmd FocusGained          * :sleep 100m | silent !notify-send ""NeoVimFocusGained""  && i3-msg -q mode vim
        autocmd FocusLost            * :sleep   1m | silent !notify-send ""NeoVimFocusLost""    && i3-msg -q mode default
        autocmd VimLeave             * :sleep   1m | silent !notify-send ""NeoVimLeave""        && i3-msg -q mode default
augroup END
```
I cross-checked my steps with an urxvt with a perl extension to send the relevant focus escape sequences to neovim, and it worked without problems. I also removed the sleep and notify commands from the autocommands in case those were causing any interference, but to no avail.
(Side note: My i3 is configured to pass presses of the alt key (that i3 usually acts on) to my neovim so I can use mappings on the alt key in neovim. Using this, I use alt+[h|j|k|l] to switch split windows in neovim, and when for example the rightmost split window is focused, alt+l focuses the next non-neovim window to the right. Sadly, this breaks when the focus reporting for the terminal running neovim is wrong. Btw: The sleep 100m is to avoid the race condition when switching between two terminals running neovim)

If there is more testing I can do, or if you need more information, please let me know.

I looked at `on_focus_change` and `handle_event` and I think they both look all right to me. I do not quite understand where events are fed into Processor::pending_events (except when calling `process_events` with the `wait_for_event` flag set), but I guess there might be an error there.

Best regards,
mox"08/09/20 11:29:59 PMFix characters swallowed during search"This resolves a bug where characters get swallowed when pressing them
after pressing backspace before the backspace key is released." =||= "Since there hasn't been any report to the contrary, this issue should be resolved with recent updates to winit/glutin.

If this issue is still present, please let me know and I'll re-open."chrisduerrKirill Chibisov08/09/20 10:58:11 PMMerge branch 'master' into fix_suppressor1
409805/21/18 03:50:37 PMNonealt+< and alt+> doesn't work correctly"I'm trying to migrate from xfce4-terminal to alacritty for weechat, I've quickly noticed that `alt+<` does not work, which is used in weechat to navigate to the previous buffer. `alt+>` is working correctly (which navigates forward in the buffer history), but stops working when alt+shift are not explicitly released.

I use this feature heavily, in xfce4-terminal+bash it selects the oldest command of the history, in alacritty it's the same as just pressing `<`.

For `alt+>` it seems to implicitly release the modifier keys on sequential key presses, so I have to release alt+shift manually and press all 3 keys again if I want to step forward in history multiple times.

### Version
24e8a19e7d981fbc8853891ad4a17a9de2ac36bd

### Which operating system does the issue occur on?
Archlinux

### If on linux, are you using X11 or Wayland?
X11"08/15/20 02:39:11 PMUpdate spec file"Bump rust version to 1.43
Add ncurses and gcc-c++ to build requires so alacritty will build on rawhide (Fedora 33) 
~Switch to pkgconfig for freetype, fontconfig and xcb.~

COPR Build here: https://copr.fedorainfracloud.org/coprs/grumpey/sway-testing/build/1599704/

Thanks" =||= This is a duplicate of #1062. Should be resolved when that is resolved.grumpeygrumpey08/15/20 11:53:19 AMMerge branch 'master' into patch-11
410311/14/18 09:35:01 PMNoneKeyboard modifier order should be irrelevant"I think two bugs got mixed up in #1321 with one of them being a duplicate, so I've decided to file a new bug and include the feedback I've received in the original report.

**Note:** `<` is `less then`, not `arrow left`.

I'm trying to migrate from xfce4-terminal to alacritty for weechat, I've quickly noticed that `alt+<` does not work, which is used in weechat to navigate to the previous buffer. `alt+>` is working correctly (which navigates forward in the buffer history).

I use this feature heavily, in xfce4-terminal+bash it selects the oldest command of the history, in alacritty it's the same as just pressing `<`.

I assume this is because, on my keyboard layout, `>` involves the shift key (see picture below), but `<` does not. Also, this is working correctly on a US keyboard layout, where both `<` and `>` depend on the shift key.

### Version
24e8a19e7d981fbc8853891ad4a17a9de2ac36bd

### Keyboard layout
German (no dead keys)

![german keyboard layout](https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/KB_Germany.svg/550px-KB_Germany.svg.png)

### Which operating system does the issue occur on?
Archlinux

### If on linux, are you using X11 or Wayland?
X11"08/10/20 01:07:20 PMRemove copyright notice from files"This commit is a follow-up to 7aafbb757d485c5ff065324464dde8b5322cdd921
which was an effort to remove copyright notice from files.
" =||= I've just tried again and it's working correctly in a recent alacritty version :+1: kchibisovKirill Chibisov08/10/20 12:22:36 PMMerge branch 'master' into license-follow-up1
410405/29/18 09:35:18 AMDimitri Sabadieone (colorscheme) background color is wrong"The background should have value `#282c34` :yum: 
"08/10/20 12:22:12 PMRemove markdownish markup from `--help` output =||= LGTM. Thanks!kchibisovKirill Chibisov08/10/20 10:10:00 AMMerge branch 'master' into help-message1
410707/15/18 01:00:59 PMMicha GorelickUpdated Cargo.toml to build using `cargo deb`"I updated the `Cargo.toml` file and added a `package.metadata.deb`
subsection to define how to build a debian ""deb"" instal file using
`cargp deb`. This will allow debian/ubuntu users to install `alacritty`
using their systems package manager. It also will make it easier to
provide pre-built binaries for those systems."08/12/20 04:05:23 PMAdd support for double underline"This adds support for double underlines using the colon separated escape
sequence `CSI 4 : 2 m`.

Alacritty will now also always fallback to the normal underline in case
any of the other underlines like the undercurl are specified. The escape
sequence `CSI 4 : 0 m` can now be used to clear all underlines.

Some terminals support `CSI 21 m` for double underline, but since
Alacritty already uses that as cancel bold which is a little more
consistent, that behavior has not changed. So the colon separated
variant must be used."2Great! I'll play around with getting a deb build into travis for another pull request. It'll be focused on making nightlies for now, but I'm sure we can easily migrate that over to tagged releases once that's the standard.chrisduerrChristian Duerr08/12/20 03:58:34 PMFix wide char handling1
411205/24/18 12:12:00 AMSteven NobleSelection highlighting is one character off"- Tmux 2.7
- ZSH 5.5.2
- Mac OS X 10.13.4
- Alacritty @ 24e8a19

![image](https://user-images.githubusercontent.com/62277/40457416-b2d02750-5f39-11e8-89e7-10725ff7d760.png)

The letter 'c' is part of the selection (as desired) but is not highlighted.

(The error happens when selecting in the middle of a line too.)
"08/12/20 07:37:55 AMAdd `Vi` to available binding modes =||= Is your cursor on the `c`? it looks like it's highlighted properly but inverted.chrisduerrChristian Duerr08/12/20 12:35:54 AMAdd `Vi` to available binding modes1
411505/25/18 01:57:48 PMBradford BoyleOS X App not printing UTF inside of tmux"Which operating system does the issue occur on?
OS X 10.11.6

If on linux, are you using X11 or Wayland?
N/A

Running tmux 2.7 inside of Alacritty.app (24e8a19) on OS X 10.11.6 causes unicode characters to not be displayed.

"08/12/20 08:36:25 AMFix handling of wrapline flag in last line"This resolves an issue where Alacritty would crash when a wrapline flag
was present in the last column of the last line.

While it should not be possible to achieve this with normal text flow,
it is possible to rotate the content downwards using the `CSI Ps T`
escape, causing this bug to occur.

This also works around other issues like the vi cursor jumping to the
top of the screen when trying to move beyond the last column using the
`l` key. In debug mode this even lead to a crash due to the overflow.

Fixes #4109." =||= Is your cursor on the `c`? it looks like it's highlighted properly but inverted.chrisduerrChristian Duerr08/12/20 08:27:55 AMFix code formatting1
411805/25/18 01:57:48 PMBradford BoyleFix locale_id for older versions of OS X (<= 10.11)Fixes jwilm/alacritty#132608/13/20 11:59:36 AMFix message bar color being picked from background"This commit reverts the message bar coloring to an old one, so the text
is always colored with #000000 over predefined red and yellow colors.

Fixes #4116.

--

I'd not that I don't really like how it looks, as an alternative solution I'd suggest to use foreground over yellow/red colors, but having predefined colors, like we had before seems also fine."2"I’m not sure how relieve my it is now. But it had come up once. Late last Sept when I reinstalled a 5yr old mini from its carbon copy.It managed to lock mini’s firmware in one go. 

Sent from my iPhone

> On 25 May 2018, at 07:43, Joe Moon <notifications@github.com> wrote:
> 
> This actually looks right to me. I missed this line when I added the fallback to localeIdentifier.
> 
> I just tested this branch, and it works fine for 10.13, which is expected since that takes the other conditional branch. I'm surprised this didn't come up earlier.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
"kchibisovKirill Chibisov08/13/20 10:53:38 AMMove things around1
412105/25/18 12:26:43 PMNanang arsyad alfatichDisable bold font (text)"OS being used:
Ubuntu 18.04, on X11

It's not really an issue, it just that I want to disable the bold font. I know it's a silly question.
But, I've tried to search similar issue about disabling bold text (font), sadly what I found,  it was about setting bold text color.
In the end I created new issue here (I hope I didn't re-post) .
So, what should I do to disable the bold font (text)?

Thank you."08/13/20 10:55:12 AMUse user's background color for render timer"Using user's background color in pair with red color
should provide better contrast." =||= "Sorry for the late reply.
Changing the bold config font into regular font fixed the issue. I'll close this issue.
Thanks a lot. "kchibisovKirill Chibisov08/13/20 10:07:09 AM"Use user's background color for render timer text

Using user's background color in pair with red color
should provide better contrast."1
412211/03/18 03:08:31 PMMicha GorelickPublish Github releases from Travis"This release introduces some config to automatically build deploy a `.deb` and `.dmg` on the github release page using travis. The build only happens when a commit is tagged and it uses the stable version of rust.

TODO:
- Mechanism for changelog in both debian release and github release
- Mechanism for manpages in debian release
- Potential PPA upload for debian release?

BEFORE MERGE:
- In `.travis.yml`, the github api key needs to be changed to one that has write permissions for this repo

AFTER MERGE:
- Set cron task in travis to create nightlies

@chrisduerr ^

This pull request is built off of #1324"08/13/20 10:55:12 AMClose the message bar on release of button press"This is a tiny fix for the expected UX of our message bar's button. I was a little startled when the button triggered on press, so I've updated it to trigger on release.

### TODO

- [x] Changelog entry" =||= With the latest changes the CI process should now produce binaries which work on Debian, Fedora, Archlinux and Ubuntu without having to provide multiple versions.nixpulvisNathan Lilienthal08/19/20 08:58:30 PMUpdate changelog.1
412405/25/18 08:51:56 PMRandy RamosFix error message typoJust a small typo I noticed during usage.08/14/20 07:26:43 AMFix selection scrolling with message bar visible"This resolves an issue with selection scrolling which would cause the
selection to wrap to the top of the screen once the cursor enters the
padding below the message bar.

Fixes #4120." =||= Alyways appreciated, thanks!chrisduerrChristian Duerr08/13/20 09:57:48 PM"Fix selection scrolling with message bar visible

This resolves an issue with selection scrolling which would cause the
selection to wrap to the top of the screen once the cursor enters the
padding below the message bar.

Fixes #4120."1
412505/26/18 02:29:52 AMGiovanni MartinsProblem to page...I try to see (for the example) the output for the ```rustc --help``` but I can't just because I can't to roll on the terminal. Can someone help me ? :octocat: 08/14/20 09:22:03 PMAdd logging for crossfont"This refactors the logging function to clean things up a little bit and
also adds the ability to see log messages for the `crossfont` library." =||= that was exactly what I wanted :octocat: :heart: chrisduerrChristian Duerr08/14/20 08:43:35 PMMove allowed targets to const array1
412905/27/18 07:26:30 PMNoneFix semantic_escape_chars to match linksThe default config has problems selecting links using double-clicks because the `:` is not considered for the semantic select. When doubleclicking on `https://example.com/index.html` alacritty is only selecting `//example.com/index.html`, so I either have to fix the link manually or select the whole link manually.08/14/20 07:31:28 PMUpdate correct location for Windows configuration"alacritty did not load the configuration for me from `%APPDATA%\alacritty\alacritty.yml` but 
did from `%APPDATA%\Roaming\alacritty\alacritty.yml`
"2"I don't think it's accurate that most terminal emulators don't stop at the `:`. I know at least VTE doesn't which already is a huge chunk of terminal emulators in use.

Also GTK applications also stop at `:`. It makes sense because `:` is a pretty common delimiter, the only occasion where it shouldn't stop a selection is in links, so that's pretty much the exception not the rule. At least in my experience."yesudeepYesudeep Mangalapilly08/14/20 07:28:22 PM"Update correct location for Windows configuration

alacritty did not load the configuration for me from `%APPDATA%\alacritty\alacritty.yml` but 
did from `%APPDATA%\Roaming\alacritty\alacritty.yml`"1
413305/29/18 04:50:51 PMFrancesca LovebloomUpdate to glutin 0.16.0"Note that `WM_CLASS` is now set to `""alacritty"", ""Alacritty""` instead of the previous value of `""Alacritty"", ""Alacritty""`. This seems to be more standard.

This also contains some revised recommendations for installing the `.desktop` file.

Fixes #148
Fixes #372
Fixes #764
Fixes #830
Fixes #1041 
Fixes #1185"05/01/21 01:54:13 PMAdd power management config"The new power management configuration option `window.energy` should
allow users to select if they want to use the dedicated or integrated
GPU.

Until now it was not possible for people to force-enable their dedicated
GPUs when not on power on macOS. This should allow them to make the
choice themselves, allowing for better performance when temporarily
without power.

Fixes #3587."9Please do! (Pace yourself, not get burned out)chrisduerrChristian Duerr08/16/20 02:28:57 PMFix code formatting1
413805/28/18 08:28:45 PMSara PopeOpens and quits immediately on macOS High Sierra"Having an issue where once I compile Alacritty, it won't open. It opens and force quits immediately. No logs that I can find, no issues with hardware spikes (according to iStat Menus). I'm at a loss, there seems to be no reason why this happens. Potentially related to #818 somehow?

I'm on a MacBook Pro 13,2. running High Sierra 10.3.4. I added the model number because on my old MBP(12,1) it ran perfectly. Any suggestions are appreciated if someone's run into this before."08/21/20 03:48:49 PMAdd configuration file imports"This adds the ability for users to have multiple configuration files
which all inherit from each other.

The order of imports is chronological, branching out to the deepest
children first and overriding every field with that of the configuration
files that are loaded at a later point in time.

Live config reload watches the directories of all configuration files,
allowing edits in any of them to update Alacritty immediately. While the
imports are live reloaded, a new configuration file watcher will only be
spawned once Alacritty is restarted.

Since this might cause loops which would be very difficult to detect, a
maximum depth is set to limit the recursion possible with nested
configuration files.

Fixes #779."3No problem, always happy to help! :)chrisduerrChristian Duerr08/21/20 01:50:02 AMFix code formatting1
414005/25/20 07:54:31 PMDeleted user"dragging\ file\ into\ terminal\ escape\ path""https://github.com/jwilm/alacritty/pull/1304#issuecomment-392601639

spaces in the path are not escaped automatically which is a big pain, kitty does not escape them either but Mac terminal does and it makes it much easier/ faster to use
"10/01/20 03:17:21 PMUpdate winit to smithay-client-toolkit 0.10"This PR is solely for easy testing of winit's Wayland  rework https://github.com/rust-windowing/winit/pull/1653.

If anyone using Wayland system is willing to test it, it'll be appreciated."3Closing as wontfix, since it seems pretty much 50/50 on what is better depending on user's behavior. And there's no point to break Alacritty's current behavior for 50% of the users of this feature just to satisfy the other 50%.kchibisovKirill Chibisov08/28/20 02:36:41 PMTemporary commit for testing sctk 0.101
414305/29/18 11:33:33 PMMatthias Krügerscrollback: build failure"Hi, I'm at 26fd7b8 but can't build the scrollback branch
````

error[E0609]: no field `inner` on type `&mut grid::row::Row<T>`
  --> src/grid/row.rs:36:18
   |
36 |             self.inner.push(*template);
   |                  ^^^^^
error: aborting due to previous error
For more information about this error, try `rustc --explain E0609`.
error: Could not compile `alacritty`.

````

rustc 1.28.0-nightly (5bf68db6e 2018-05-28)

edit: 1337th issue!"08/18/20 12:04:05 PMAdd a cursor inspired by the Plan 9 terminal"This adds another glyph that is is similar to the beam cursor, except
both ends are slightly thicker. Like an I-beam, but the ""beams"" are
square.

I haven't updated any documentation or versions, because I'm not sure this is something that anyone wants, I just thought it could be fun to add this as an option.

How it looks with my configuration:

![image](https://user-images.githubusercontent.com/390428/90499874-649c0f00-e14a-11ea-87d2-3b72129630bb.png)

with the default configuration:

![image](https://user-images.githubusercontent.com/390428/90499982-8eedcc80-e14a-11ea-9d0d-f4f4a5058ea4.png)

Screenshot from Plan 9 for reference:

![image](https://user-images.githubusercontent.com/390428/90500060-a7f67d80-e14a-11ea-9208-76d94853651a.png)


TODO:
 - [ ] Update `CHANGELOG.md`
 - [ ] Update version of `alacritty_terminal` (?)
"1Fixed; thanks for filing the issue.laumannThomas Bracht Laumann Jespersen08/18/20 09:53:12 AM"Add a cursor inspired by the Plan 9 terminal

This adds another glyph that is is similar to the beam cursor, except
both ends are slightly thicker. Like an I-beam, but the ""beams"" are
square."1
415207/06/18 02:27:52 PMJoe WilmRemove checking on remainder op"The length of the underlying storage will *never* be zero.

This removes generated code that branches on the possibility that len is
zero.

Blocked waiting for Rust 1.27."08/20/20 10:52:40 AMadded ResetAndClear action"Resets the terminal, same as
- ""Clear Scrollback and Reset"" in xcfe4-terminal
- ""Clear Scrollback and Reset"" in konsole
- ""Reset and Clear"" in gnome-terminal

Fixes #3997 "28Sounds like this is probably not necessary now with your patchmarkwellisMark Ellis08/20/20 09:34:53 AM"added ResetAndClear action

Resets the terminal, same as
- ""Clear Scrollback and Reset"" in xcfe4-terminal
- ""Clear Scrollback and Reset"" in konsole
- ""Reset and Clear"" in gnome-terminal"1
415806/05/18 03:32:39 PMNiklas DusenlundFont sizes differ on different screens"Which operating system does the issue occur on?
Linux

If on linux, are you using X11 or Wayland?
X11

I use Ubuntu 18.04 LTS with I3.

I first noticed that my font was huge on my laptop screen after updating to latest master (765949f2). So I changed my font config from 10.0 to 6.0 (to have the same size as before). But now my font is *tiny* on the external monitor.

Launching from my laptop screen:
```
$ alacritty -v
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.yml
device_pixel_ratio: 1.6666666
width: 956, height: 1032
Initializing glyph cache
Finished initializing glyph cache in 0.043678361
width: 644, height: 388
Cell Size: (8 x 16)
PTY Dimensions: Line(24) x Column(80)
Font size changed: Size(12)
width: 956, height: 1032
```

Launching from external screen:
```
$ alacritty -v
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.yml
device_pixel_ratio: 1
width: 956, height: 1152
Initializing glyph cache
Finished initializing glyph cache in 0.045528064
width: 404, height: 220
Cell Size: (5 x 9)
PTY Dimensions: Line(24) x Column(80)
Font size changed: Size(12)
width: 956, height: 1152
```

```
niklas @ niklas-tp : ~/git/alacritty (master=)
$ git --no-pager log -1
commit 765949f256aefcc513d0bfb46b64d315f9c2f3d2 (HEAD -> master, upstream/master, origin/master, origin/HEAD)
Author: Francesca Frangipane <francesca@comfysoft.net>
Date:   Mon May 14 23:21:06 2018 -0400
    Update to glutin 0.16.0
    Note that `WM_CLASS` is now set to `""alacritty"", ""Alacritty""`
    instead of the previous value of `""Alacritty"", ""Alacritty""`. This
    seems to be more standard.
    This also contains some revised recommendations for installing the
    `.desktop` file.
```"08/22/20 12:38:10 AMFix import type error handling =||= I ran into the same issue today while using a projector. My temporary solution is spawning an alacritty instance on my laptop screen and then moving it to the projector (using i3wm). Hope it gets fixed soon!chrisduerrChristian Duerr08/21/20 10:28:31 PMFix error without import1
415905/30/18 05:23:04 PMTatsuyuki IshiReduce debug level for releaseBacktraces are useful, but line-level debuginfo bloats the binary, and has impact on compile times notably. This reduces it to function-level debuginfo which is a good compromise point.08/22/20 08:55:28 PMAdd CLI flag to override config options"This uses the facilities added in
3c3e6870dedad56b270f5b65ea57d5a6e46b1de6 to allow overriding individual
configuration file options dynamically from the CLI using the
--options/-o parameter.

Fixes #1258." =||= Thanks for the PR! I had no idea there was an intermediate option in the Cargo file. TIL :smile: chrisduerrChristian Duerr08/22/20 12:11:42 AMFix float parsing1
416306/17/18 09:19:31 AMNoneNot properly working on Ubuntu 18.04"Which operating system does the issue occur on?
Ubuntu 18.04
If on linux, are you using X11 or Wayland?
x11  
Fresh install of Ubuntu 18.04 on the newest version of Virtual Box running off my Windows 10 machine. I installed rust through rustup and followed the install process for alacritty. When running the command `alacritty`, I get an error: 
> name@hduiw10:~$ alacritty 
[winit X11 error] XError {
    description: ""BadValue (integer parameter out of range for operation)"",
    error_code: 2,
    request_code: 12,
    minor_code: 0
}  

Alacritty launches but with significant scaling issues:
![github_issue](https://user-images.githubusercontent.com/6524227/40770904-4aa37d3c-64ff-11e8-9488-3392a760ae06.png)
(screenshot taken with gnome-screenshot -wB & help was run in alacritty 3 times. Also note that when I run help, the output was printed side by side twice each time)  
No errors were present in installing anything. Let me know if you want any logs."08/25/20 06:24:17 PMUnify term dimension calls"Since the `Term` implements the `Dimensions` trait itself, we shouldn't
call `term.grid()` to call methods from the `Dimensions` trait.

This removes all instances of this that I could find in the code at the
moment." =||= "@NellyWhadsDev I'd assume you're asking because of #1378, in which case this does not apply to you.

For anyone else interested, you'd just have to run this PR: #1373. That should resolve the issue."chrisduerrChristian Duerr08/24/20 01:26:04 AM"Unify term dimension calls

Since the `Term` implements the `Dimensions` trait itself, we shouldn't
call `term.grid()` to call methods from the `Dimensions` trait.

This removes all instances of this that I could find in the code at the
moment."1
416905/31/18 01:58:24 PMSadidalacritty exiting takes a very long time"Which operating system does the issue occur on?
> Arch Linux
If on linux, are you using X11 or Wayland?
> X11

When I run `alacrity`, open `ranger` then `exit` from ranger and then `exit` from alacrity, **sometimes** it takes even 10 seconds to get closed. This happens randomly!. this is the output of my ` alacritty --print-events` (I have no such problem with either urxvt or gnome-terminal):


```
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: Resized(1920, 1033) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: Refresh }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: CursorEntered { device_id: DeviceId(X(DeviceId(2))) } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: CursorMoved { device_id: DeviceId(X(DeviceId(2))), position: (778.0, 129.0), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: Moved(0, 22) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: Focused(true) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: CursorMoved { device_id: DeviceId(X(DeviceId(2))), position: (778.0, 129.0), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 16, state: Pressed, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 16, state: Pressed, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('q') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 16, state: Released, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 16, state: Released, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 28, state: Pressed, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 28, state: Pressed, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('\r') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
[Unhandled CSI] action='t', args=[22, 0, 0], intermediates=[]
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('j') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('j') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('j') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('j') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Pressed, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('j') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 36, state: Released, virtual_keycode: Some(J), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 16, state: Pressed, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 16, state: Pressed, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('q') }
[Unhandled CSI] action='t', args=[23, 0, 0], intermediates=[]
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 16, state: Released, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 16, state: Released, virtual_keycode: Some(Q), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 18, state: Pressed, virtual_keycode: Some(E), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 18, state: Pressed, virtual_keycode: Some(E), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('e') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 18, state: Released, virtual_keycode: Some(E), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 18, state: Released, virtual_keycode: Some(E), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 45, state: Pressed, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 45, state: Pressed, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('x') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 23, state: Pressed, virtual_keycode: Some(I), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 23, state: Pressed, virtual_keycode: Some(I), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('i') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 45, state: Released, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 45, state: Released, virtual_keycode: Some(X), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 23, state: Released, virtual_keycode: Some(I), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 23, state: Released, virtual_keycode: Some(I), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 20, state: Pressed, virtual_keycode: Some(T), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 20, state: Pressed, virtual_keycode: Some(T), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('t') }
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 28, state: Pressed, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 28, state: Pressed, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: ReceivedCharacter('\r') }
glutin event: Awakened
glutin event: Awakened
glutin event: Awakened
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 20, state: Released, virtual_keycode: Some(T), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 20, state: Released, virtual_keycode: Some(T), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
glutin event: DeviceEvent { device_id: DeviceId(X(DeviceId(15))), event: Key(KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } }) }
glutin event: WindowEvent { window_id: WindowId(X(WindowId(52428803))), event: KeyboardInput { device_id: DeviceId(X(DeviceId(3))), input: KeyboardInput { scancode: 28, state: Released, virtual_keycode: Some(Return), modifiers: ModifiersState { shift: false, ctrl: false, alt: false, logo: false } } } }
```


If I launch it with `--print-events` in all cases it takes long time (usually more than 5sec)"09/13/20 09:10:45 PMUpdate example for -o flag to be more apparent."Just a small tweak to the `--help`/man page example for the newly added `--option` flag to help make the behavior more obvious to a user who simply copies and pastes the example.

P.S. I'm wondering if it would be a good idea to write our man page or CLI help text once, and generate the other. This might now be too hard with something like [rust-cli/man](https://github.com/rust-cli/man). Thoughts?" =||= "Yeah I'm pretty sure there are several other issues that are related to this. I'm gonna close this as a duplicate of #1313 and add there that it's not only a wayland issue.

Thanks for the report!"nixpulvisNathan Lilienthal08/25/20 07:35:40 PM"Improve example for the -o CLI flag

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
417111/10/18 04:08:49 PMChanning CongerDecoration free windows can't be resized after glutin 0.16"Which operating system does the issue occur on?
MacOS 10.12.6 (16G1314)

After updating building and launching the release build after the glutin update I am unable to resize the window either through conventional edge grabbing nor through window management tools.

Reverting to the build immediately prior to the glutin update resolved the problem.

I understand this might be a regression in an upstream library."08/26/20 09:29:07 PMAdd openSUSE installation instructions =||= Yes, #1403 should solve this.hennevogelHenne Vogelsang08/26/20 11:58:58 AMAdd openSUSE installation instructions1
418307/14/18 12:35:39 AMJoe Moon964 dpi change"Resolves #964.
Resolves #71."08/30/20 04:55:33 AMFix multiline URL highlightingFixes #4182. =||= Yeah, that's what I'm talking about. Then I'd move forward with that PR. Closing this one to keep things clean.chrisduerrChristian Duerr08/29/20 06:36:13 PMFix code formatting1
418506/02/18 09:44:53 PMNonekerning in man file bad config file can be closed08/30/20 06:18:02 PMUpdate smithay-clipboard to 0.5.2"Fixes #4139.
Fixes #4085.
" =||= @StrictAvacado not a big deal at all, but it's good GitHub practice to leave some history, I'd advise against editing the original description, and just leaving a note in a comment.kchibisovKirill Chibisov08/30/20 05:43:30 PM"Update smithay-clipboard to 0.5.2

Fixes #4139.
Fixes #4085."1
419008/14/20 09:31:35 PMDeleted usercrazy long vtebench time on macbook "https://github.com/jwilm/alacritty/issues/1316#issuecomment-394123226

MacBook Pro 13 Touch, i7, Iris Pro 550 integrated graphics
"08/31/20 10:30:46 PMFix compilation for windows-gnu with default features WinPTY crate supports only windows-msvc right now so leaving it enabled for windows-gnu results in build errors unless `--no-default-features` is added. =||= "Since the author of this issue is gone and there has never been anyone able to reproduce it, there's not much point in keeping it open.

Although there have been some performance improvements in the past, so it might already be fixed."mati865Christian Duerr08/31/20 09:58:13 PMSimplify cfg statements1
419504/28/20 11:19:55 PMNoneTyping at sign (@) and pipe (|) doesn’t work properly"I’m using a German keyboard. 
Usually, in macOS, it works like this:
- `@` is accessed via `alt + L`
- `|` (pipe) is accessed via `alt + 7`

Using zsh with vim mode `alt + L` seems to send an Escape, `alt + 7` also sends an Escape and moves the cursor to the beginning of the line. 

There is a way to type these two characters, however: if I first type `alt + n` (would normally make a `~`) and *then* type the combination for `@` or `|` they appear. 

---

Which operating system does the issue occur on?
macOS

"09/01/20 07:03:31 PMMake logo key convert characters to control characters, too"So I figured out this is the only thing which I need to allow me to use ctrl key everywhere around my system for the UI keyboard shortcut key, so `ctrl-c` then copies to the clipboard in all apps, including alacritty. I then configure keyboard shortcut in alacritty the same as I have them system wide. And then I can use the super key to send control characters to the terminal. With this configuration option enabled, both ctrl and super keys send control characters to the terminal, but you can override them with alacritty shortcuts which then suppress that particular combination.

I then set the following keyboard shortcuts, to match those on Mac:

```
  - { key: Add,    mods: Control|Shift,      action: IncreaseFontSize }
  - { key: K,      mods: Control, mode: ~Vi, chars: ""\x0c""            }
  - { key: K,      mods: Control,            action: ClearHistory     }
  - { key: V,      mods: Control,            action: Paste            }
  - { key: C,      mods: Control,            action: Copy             }
  - { key: Q,      mods: Control,            action: ReceiveChar      }
  - { key: W,      mods: Control,            action: Quit             }
  - { key: N,      mods: Control,            action: SpawnNewInstance }
  - { key: F,      mods: Control|Shift,      action: ToggleFullscreen }
  - { key: F,      mods: Control,            action: SearchForward    }
  - { key: B,      mods: Control,            action: SearchBackward   }
```

I in fact configure system-wide modifier keys to be in a different order (super, fn, alt, ctrl) so that the key closest to the space key behaves like Mac's command key. But this is unrelated to alacritty. For some more background on this see: https://github.com/alacritty/alacritty/issues/4193

TODO: Changing input to control in `received_char` should happen before value is being checked if it is control if search is active."9"> What helped me is to set `alt_send_esc` to false.

Worked for me as well. On macos 10.13.6 with alacritty 0.6.0 (04cbf76) installed through homebrew. German keyboardlayout. "mitarMitar09/01/20 04:38:50 PMMake logo key convert characters to control characters, too1
419606/07/18 04:53:17 PMNone`--title` flag doesn't work anymore"Arch Linux, kernel 4.16, X11

alacritty 0.1.0

    $ alacritty --title ""scratchpad""
    $ xprop # and select the alacritty window

Expected to see the window title set to ""scratchpad"", instead it is the default, ""Alacritty"".

I think it stopped working since updating to `winit 0.15`, so it may be an issue with that library."09/01/20 07:03:31 PMAllow to apply opacity to all background colors"Alacritty currently only applies the value of `background_opacity` to
the default background and not to all (e.g. #807, addressed in #847).
However this is not necessarily always desired (e.g. #1082, #1180).

This patch adds a configuration option and logic (by partly re-instating
code removed in #847) to toggle the behavior between either applying
only to the default background color, or all background colors.  For
example iterm2 also has this option and the naming of the toggle is
borrowed from there.

Fixes #741."24I'm currently working on another PR (on [this](https://github.com/nixpulvis/alacritty/tree/title-flag-1350) branch) that will ensure `--title` disables the `dynamic_title` so this flag will work as expected. For now you can use the `--title` flag by disabling that configuration manually.satlankSteffen R. Knollmann12/30/20 12:04:17 AMMerge branch 'master' into global-transparency-21
419706/07/18 04:53:17 PMNoneSet WM_CLASS to given title on supported platforms"This fixes #1350. 

I don't know how elegant this is, if you have suggestions I'd be glad to apply them."09/06/20 03:38:50 PMPersist Config file while spawning new instance"PR to address issue: [4187](https://github.com/alacritty/alacritty/issues/4187).
This is my first contribution, please let me know if this isn't the expected solution.

I have tested it on my macOS(Mojave) and the new window uses the expected config file." =||= @Tezkerek Thanks again for sending this PR, great work! :+1: RohanPoojaryChristian Duerr09/04/20 10:45:21 AMFix clippy errors1
421106/07/18 11:37:19 AMStefan CocoraPasting text using Shift-Insert doesn't work when tmux is running in alacritty"Which operating system does the issue occur on?
```
 OS: Arch Linux
 Kernel: x86_64 Linux 4.16.13-1-ARCH
 Shell: zsh 5.5.1
 WM: i3
```
If on linux, are you using X11 or Wayland?
```
Display: x11 server: X.Org 1.20.0 driver: i915 ...
```
Package versions:
```
alacritty-git 0.1.0.774.g2fcdd40-1
tmux 2.7-1
gpaste 3.28.2-1
```

**Issue description**
- unable to paste text from the system clipboard into a tmux session running inside alacritty :crying_cat_face: 
- pasting text from the system clipboard works fine when using another terminal emulator and tmux ( tested with `kitty` , `tilix`, `gnome-terminal`, `terminator` )
- pasting text from the system clipboard works fine when using alacritty **without tmux**
- when pasting text I'm using Shift+Insert in all test cases.
- I'm using `gpaste` as the clipboard manager.
"09/27/20 10:36:09 PMSupport dimensions with 2 cols and 1 lineCloses #420727@sazarkin See https://github.com/jwilm/alacritty/pull/1300 and https://github.com/jwilm/alacritty/issues/1298.ii41Christian Duerr09/27/20 12:38:41 AMFix incorrect dynamic padding size1
421606/13/18 08:43:01 PMNiklas DusenlundChange font size by half-steps with `Increase-/DecreaseFontSize` bindings"(extracted from https://github.com/jwilm/alacritty/issues/1339)

Which operating system does the issue occur on?
Ubuntu 18.04 LTS

If on linux, are you using X11 or Wayland?
X11

I noticed that if I set font size to 7.5 it reports `Size(15)` in the console. And by using the shortcuts to resize the font I can only achieve odd numbers until I go all the way down to 2. I think this means that I cannot step through all font sizes.

```
$ alacritty -v
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.yml
device_pixel_ratio: 1.6666666
width: 636, height: 1032
Initializing glyph cache
Finished initializing glyph cache in 0.040205583
width: 804, height: 460
Cell Size: (10 x 19)
PTY Dimensions: Line(24) x Column(80)
Font size changed: Size(15)
width: 636, height: 1032
Font size changed: Size(17)
width: 636, height: 1032
Font size changed: Size(19)
width: 636, height: 1032
Font size changed: Size(21)
width: 636, height: 1032
Font size changed: Size(19)
width: 636, height: 1032
Font size changed: Size(17)
width: 636, height: 1032
Font size changed: Size(15)
width: 636, height: 1032
Font size changed: Size(13)
width: 636, height: 1032
Font size changed: Size(11)
width: 636, height: 1032
Font size changed: Size(9)
width: 636, height: 1032
Font size changed: Size(7)
width: 636, height: 1032
Font size changed: Size(5)
width: 636, height: 1032
Font size changed: Size(3)
width: 636, height: 1032
Font size changed: Size(2)
width: 636, height: 1032
Font size changed: Size(4)
width: 636, height: 1032
Font size changed: Size(6)
width: 636, height: 1032
Font size changed: Size(8)
width: 636, height: 1032
Font size changed: Size(10)
width: 636, height: 1032
Font size changed: Size(12)
width: 636, height: 1032
Font size changed: Size(14)
width: 636, height: 1032
Font size changed: Size(16)
width: 636, height: 1032
Font size changed: Size(18)
width: 636, height: 1032
Font size changed: Size(20)
width: 636, height: 1032
Font size changed: Size(22)
width: 636, height: 1032
```"09/09/20 11:47:03 PM"Add config option to use ""default"" mouse cursor style instead of ""text""""Since I've upgraded from Alacritty v0.3.3 I've noticed that the [bug was fixed](https://github.com/alacritty/alacritty/commit/4dd327f0aec53d4501601281b796b1d7dda9a5d3) making the ""text selection"" mouse cursor an actual default.

I would really like an option to get back to how it was before and be able to choose whether ""text"" or ""default"" cursor style should be used.

I understand that adding a config option just for this might be excessive and I would love to hear any better/simpler ways to provide this choice for the user. Even though the ""text"" cursor [is a default in many terminals](https://github.com/alacritty/alacritty/pull/778) it still varies in my experience."1@NickeZ the pr with this change has been merged.NicholasAsimovNicholas Asimov09/09/20 11:28:15 PM"Add config option to use ""default"" mouse cursor style instead of ""text"""1
422406/07/18 03:42:42 PMDaniel FrankDisable mouse?"Is there a way to prevent applications like Midnight Commander from knowing about the mouse?
Selections in alacritty should work just as before, but any application in alacritty should just not be aware of the mouse, because the changed behaviour and cursor is very irritating to me."09/13/20 04:22:25 PMINSTALL.md MacOSAdded reassurance for macos developers =||= "Okay, there are actually a few issues here, but I think most already have reasonable solutions:

 * annoy colleagues changing configs -> user configs instead of global ones
 * inverted cursor -> configure system cursors (your theme is missing cursors #1319)
 * click when moving -> it has already been requested to ignore the first click after gaining focus (#1291)

I hope this lineup of solutions will help you out, this issue itself can not be resolved because alacritty never tells anyone it actually supports a mouse at all, this is done completely through `terminfo`."ShlomiRexShlomi Domnenko09/13/20 12:58:16 PMINSTALL.md MacOS1
422606/07/18 03:52:07 PMChristian DuerrAllow disabling DPI scaling"This makes it possible to disable DPI scaling completely, instead the
the display pixel ration will always be fixed to 1.0.

By default nothing has changed and DPI is still enabled, this just seems
like a better way than running `WINIT_HIDPI_FACTOR=1.0 alacritty` every
time the user wants to start alacritty.

It would be possible to allow specifying any DPR, however I've decided
against this since I'd assume it's a very rare usecase. It's also still
possible to make use of `WINIT_HIDPI_FACTOR` to do this on X11.

Currently this is not updated at runtime using the live config update,
there is not really much of a technical limitation why this woudn't be
possible, however a solution for that issue should be first added in
jwilm/alacritty#1346, once a system is established for changing DPI at
runtime, porting that functionality to this PR should be simple."09/22/20 08:42:17 PMAdd changelog entry for FreeType version bump8"A comment for readers from the future like me, who still struggle to disable DPI scaling on Linux with X11.

The option `scale_with_dpi` was removed on version 0.2.2 and replaced with the option to set the environment variable `WINIT_HIDPI_FACTOR` from the config. Then, on version 0.4.2, the variable ` WINIT_HIDPI_FACTOR` was renamed as `WINIT_X11_SCALE_FACTOR`. As of 2021 you can set this environment variable in the config file to disable DPI scaling.

Very much of the discussion about related issues are pointed to #71.

Hope I save you some reading :)"chrisduerrChristian Duerr09/22/20 08:08:53 PMFix changelog entry1
423206/16/18 10:11:47 AMChristian DuerrAdd Copy/Cut/Paste keys"This just adds support for the Copy/Cut/Paste keys and sets up
Copy/Paste as alternative defaults for Ctrl+Shift+C/V.

I'm not sure if this should be part of the default key bindings, but I
find this useful and don't really see anything wrong with having this
functionality work by default."09/16/20 04:44:18 AMUpdate cargo lockfile"This updates the lockfile to the new format introduced in Rust 1.41.0.
Since the lockfile has been completely regenerated, all depedencies were
updated." =||= "A comment for readers from the future like me, who still struggle to disable DPI scaling on Linux with X11.

The option `scale_with_dpi` was removed on version 0.2.2 and replaced with the option to set the environment variable `WINIT_HIDPI_FACTOR` from the config. Then, on version 0.4.2, the variable ` WINIT_HIDPI_FACTOR` was renamed as `WINIT_X11_SCALE_FACTOR`. As of 2021 you can set this environment variable in the config file to disable DPI scaling.

Very much of the discussion about related issues are pointed to #71.

Hope I save you some reading :)"chrisduerrChristian Duerr09/14/20 08:00:47 PM"Update cargo lockfile

This updates the lockfile to the new format introduced in Rust 1.41.0.
Since the lockfile has been completely regenerated, all depedencies were
updated."1
424206/18/18 05:26:55 AMNathan Lilienthal--title should override the dynamic_title config."This PR makes it so that the `--title` flag is respected regardless of your `dynamic_title` configuration, which is the intended behavior.

- `alacritty` by default, still has a dynamic title
- `alacritty --title ""<title>""` will effectively set the title to any string you like
- `alacritty --title """"` will effectively hide the title (just a special case of the last one)"09/20/20 09:58:40 AMFix CLI arguments without config file"Since we only applied the CLI arguments as overrides to the
configuration file after the file was loaded, all CLI arguments that are
stored on the config would be dropped without a configuration file in
place.

This also makes sure that all configuration file config overrides are
still loaded if the configuration file could not be loaded for any
reason, since there's no reason why we'd just drop everything in that
case." =||= Thanks a lot for working on this! :+1: chrisduerrChristian Duerr09/20/20 09:39:35 AMRemove changelog entry1
424511/10/18 04:08:49 PMJoe Moonregression: <C-Tab> keybinding no longer works"Which operating system does the issue occur on? macos 10.10.5

If on linux, are you using X11 or Wayland? n/a

the specific keybinding is:

```yaml
  - { key: Tab,      mods: Control, chars: ""\x01n"",                      }
```

`git bisect` points at [this commit](https://github.com/jwilm/alacritty/commit/765949f256aefcc513d0bfb46b64d315f9c2f3d2), which is just an upgrade of glutin/winit.

I haven't really figured out whether it's an issue with an upstream breaking change or what. Running `winit`'s `window` example, I can see the event come through on the keypress:

```
WindowEvent { window_id: WindowId(Id(140330957578608)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 48, state: Released, virtual_keycode: Some(Tab), modifiers: ModifiersState { shift: false, ctrl: true, alt: false, logo: false } } } }
```

A `println` [here](https://github.com/jwilm/alacritty/blob/master/src/event.rs#L294) also does show the event coming through, so maybe it has something to do with config parsing or something. I'm going to continue investigating, but wanted to make an issue in case anyone has ideas."09/24/20 12:08:27 AMLog new padding and cell size on 'SizeInfo' update"This makes our logging of 'SizeInfo' changes more consistent
with the one we're using when creating a new 'Display'." =||= oh great! hm, I guess I need to review my understanding of cargokchibisovKirill Chibisov09/23/20 11:32:16 PMI really want to look why 2 empty lines1
424806/08/18 03:23:13 PMGabriel CunhaSplit terminal"Is there some way to split the alacritty terminal or open some new tab?

Running on Ubuntu with X11."09/24/20 11:40:58 PMRemove Unused Linear TypeJust noticed that this new type isn't used anywhere, and I frankly can't imagine what it's purpose could be. Perhaps this is motivated by my long standing desire to remove `Line` and `Column` as well... but at least this is a smaller, and hopefully less contentious removal. =||= "From the README:
```
The simplicity goal means that it doesn't have features
such as tabs or splits (which can be better provided by
a window manager or terminal multiplexer) nor niceties
like a GUI config editor.
```

This is out of scope of the idea of the project, the focus is rather on making the simple things alacritty can do fast and efficient. However there's some ongoing work to extract parts of alacritty into a library (#1023), if this ever takes off it would be possible to have a different front-end which might come with different design goals."nixpulvisNathan Lilienthal09/24/20 04:01:37 AMRemove unused Linear newtype.1
424906/08/18 11:32:22 PMFelippe da Motta RaposoReduce change_font_size step to 0.5Fix for issue https://github.com/jwilm/alacritty/issues/135309/25/20 12:21:22 AMFix IME position with fullwidth chars in search =||= "Thanks a lot for working on this @felippemr, everything looked great now so I've merged these changes.

Congratulations on the first merged PR, good work! :+1: "chrisduerrChristian Duerr09/24/20 11:47:25 PMImprove changelog entry1
425907/13/18 07:38:25 PMChristian DuerrEnable live dpi toggling"This change makes it possible to enable/disable DPI scaling during runtime on
all platforms."09/26/20 11:51:32 PMFix selection incorrectly expanding when scrolled in history"When doing selection expansion we were checking for wide char flags
on a cells from the bottom of the terminal instead of in a current
viewport when scrolled up in history, which was leading to expanding
more than needed if we had wide chars on the same viewport cell,
but in the bottom of the terminal.

Fixes #4257." =||= This PR has been merged together with #1403.kchibisovKirill Chibisov09/26/20 10:36:00 PMStyle update1
427206/14/18 02:06:07 AMtobaloideeLogo design proposal"Good day Sir @jwilm , I'm a graphics designer and I want to contribute to your good project by proposing a logo design. I'll be doing it for free as a gift to your project. If you will permit me I will start immediately and post here after. 

Thanks and best regards!

-[Tobaloidee](https://github.com/Tobaloidee)"09/30/20 10:28:43 PMAdd additional CentOS/RHEL build dependenciesFixes #4271. =||= Closing this in favor of #967.chrisduerrChristian Duerr09/30/20 10:11:24 PM"Add additional CentOS/RHEL build dependencies

Fixes #4271."1
427506/10/18 10:30:54 AMNonepictures in terminal"i cant get w3m to work in alacritty i can see an image if a scroll i am using the scrollback branch
this is used in neofetch for images. is this an issue with scrollback? works in gnome-terminal.

https://github.com/dylanaraps/neofetch/wiki/What-is-Waifu-Crop%3F

take at look at this concept image 
https://askubuntu.com/questions/97542/how-do-i-make-my-terminal-display-graphical-pictures?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa"10/07/20 02:40:52 PMBump glutin 0.25"Fixes #4206.
Fixes #4162.
Fixes #4017.
Fixes #3998.
Fixes #3831.
Fixes #3782.
Fixes #3708.
Fixes #2734.
Fixes #2714.
Fixes #1801."1"I'm going to close this as a duplicate of #1021, there also is a hacky workaround script in the comments there that might help you out.

If you have any further questions just ask them there. :)"kchibisovKirill Chibisov10/07/20 05:49:09 AMUse constant for inactive elements opacity1
427706/10/18 04:15:03 PMEvelyn DooleyIncorrect font rendering?"I'm on Arch Linux using X11 and the alacritty-git package from the AUR.

After the most recent update, something weird started happening with my fonts. I didn't change anything in the config and they used to work correctly. I'm using the Tamzen font. I don't know if it's not finding the right font or what, but the character width is definitely wrong. Here's a screenshot, above is Termite and below is Alacritty.

![qxogwvl](https://user-images.githubusercontent.com/31457788/41203114-d0c003ce-6ca0-11e8-9920-bde9c50e5f59.png)

Here's the output of alacritty -v:

![u0phq0t](https://user-images.githubusercontent.com/31457788/41203151-2c96c714-6ca1-11e8-9a91-6ab282f47058.png)

and neofetch:

![wjv06ew](https://user-images.githubusercontent.com/31457788/41203173-6875e8e6-6ca1-11e8-9367-e5153290ca6b.png)

I'm not sure if this is a bug or just something I'm doing wrong, but any help would be appreciated. 


"10/02/20 11:00:48 AM"Correct documentation about ""saving to clipboard"" and how to install the package on ""Gentoo Linux"""Resolves #4276. =||= Wrong compared to the size it used to be, I mean. I changed my DPI in X and it looks like it did before.keks24Ramon Fischer10/02/20 07:04:26 AMstate changes1
427909/27/18 12:12:50 PMJon RouleauSelection misses first character"Selecting in alacritty often misses the first character. Other terminals (such as urxvt and xterm) always include the first character in the selection even if only part of it is selected.

Edit: I should add that this was tested on scrollback@4631ca4

Alacritty:
![alacritty_selection](https://user-images.githubusercontent.com/11533746/41203662-c6730ec4-6cc9-11e8-8bc7-17063ada0a63.gif)

Urxvt
![urxvt_selection](https://user-images.githubusercontent.com/11533746/41203932-76730916-6ccd-11e8-8411-eb5b864c4065.gif)"10/04/20 03:17:37 AMFix handling of Unicode characters in Message bar"When formating text for displaying in Message bar, allacritty was using the byte
length of the text instead of character length; this generated unnecessary blank
space at the end of lines.

Fixes #4250."6I've opened a PR which should fix this (#1389). I don't think there are going to be any issues with this, but testing is still always welcome! :)alessandroasmChristian Duerr10/04/20 02:57:49 AMRemove unused import1
429903/12/19 09:24:26 PMJames LarischStatic display notification on SIGCHLD"Ensures that the window processor wakes up upon SIGCHLD.
Otherwise, after `exit` or `logout`, the user had to trigger
a window event before alacritty closed.

Fixes #1313.
Fixes #1276.
Fixes #915.

This may not be the best solution. It's certainly not pretty. Also, my editor is forcing rustfmt on the codebase - let me know if that's annoying. 

Relevant parts: `main.rs` :  110 - 114, `tty.rs` : 43 - 64"11/07/20 04:48:49 AMSpawn new alacritty process in CWD on macOS"fixes #1979
fixes #808 (for macOS)"7Thanks for your work, this has been implemented in https://github.com/jwilm/alacritty/pull/2114.nixpulvisNathan Lilienthal10/09/20 06:08:30 PM"Spawn new alacritty process in CWD on macOS

On macOS we can use 'proc_pidinfo' to determine the working
directory of the terminal foreground process.

Fixes #1979."1
430107/08/18 07:33:56 PMPeter van der MeulenText on color looks pixelated on non-retina OSX display"When looking at Alacritty from my retina display things look pretty good and crisp, though a bit fatter than what i was used to in Iterm2 (when it comes to non-bold text). when however opening an Alacritty session on my non-retina connected 4k display text warps around, becomes pixelated and looks really awful (at sub 15px sizes). screenshot below is a zoomed in example: 

![screen shot 2018-06-11 at 11 30 46](https://user-images.githubusercontent.com/3583395/41224155-0a267dac-6d6c-11e8-9d83-9225a62737e4.png)

On blacks everything works pretty fine and the color distortion is not noticeable. when however dealing with coloured backgrounds things become ugly fast.

I tried tweaking with ""scale:with_dpi"" and ""use_thin_strokes"" false-ing or true-ing doesn't make a difference. I also tried this with the ""Hack"" font and the ""DejaVu Sans Mono for Powerline"" font. both have the same issues.

Which operating system does the issue occur on?
OSX high sierra

1:1 ratio example:
![screen shot 2018-06-11 at 11 30 19](https://user-images.githubusercontent.com/3583395/41227557-91e8f66c-6d75-11e8-9cab-7b236ad9f685.png)

vs Iterm (with same font and aliasing settings):
![screen shot 2018-06-11 at 12 48 35](https://user-images.githubusercontent.com/3583395/41227632-d00d0e4c-6d75-11e8-9d4c-3768a5c5dc6e.png)"10/09/20 09:25:39 PMFix feature checking in cross builds"Checking for target os in build.rs doesn't work, since build.rs
is running for host, so checking should be done in src. Thus moving
'compile_error!' check from build.rs to main.rs." =||= @tpict Thanks for mentioning this, I wasn't aware of #486. Closing this a as a duplicate so all discussion can be kept in one place.kchibisovKirill Chibisov10/09/20 08:40:52 PM"Fix feature checking in cross builds

Checking for target os in build.rs doesn't work, since build.rs
is running for host, so checking should be done in src. Thus moving
'compile_error!' check from build.rs to main.rs."1
430206/16/18 05:50:45 PMChristian DuerrOptimize indexing of the grid's raw buffer"The `compute_index` method in the `Storage` struct used to normalize
indices was responsible for a significant amount of the CPU time spent
while running the `alt-screen-random-write` benchmark (~50%).

The issue with this relatively simple method was that due to how often
the method is executed, the modulo operation was too expensive. However
since most of the time when a majority of the buffer changes (high
througput), it's in the alternate screen, the modulo operation can be
skipped with a simple branch. There might be some more optimization to
be done here, however this resolved all measurable issues in the
`alt-sceen-random-write` benchmark.

The whole `vtebench` suite hasn't been tested, however unless there were
some regressions, this fixes #1316. I will benchmark this a bit more in
the near future."10/12/20 09:22:37 AMMake use of glutin wayland/x11 features"This should allow users that are not using Wayland/X11
to reduce the resulted binary size and compilation times.


This honestly looks nicer than I expected, so I feel like it should be fine to merge it.

For reference striped binary sizes:
```
x11: 4.6M
wayland: 5.9M
both: 6.4M
```"5"I've changed it up a bit. So now instead of just accepting that the worst case is using a modulo operation, a modulo is never used. This shouldn't increase/decrease performance in any way, but is rather used to make it a little more clear what's actually going on and which edge-cases are being handled.

I think this is the better solution even though it might require a few more changes.

**EDIT:**
Just to clarify because ""shouldn't"" isn't really useful at all when talking about performance,
I've run all benchmarks again and there was no difference outside of margin of error (which was in favor of these changes)."kchibisovKirill Chibisov10/12/20 12:03:02 AMFix style v31
430406/12/18 07:35:25 AMTim SiegelDistribute line-height remainder amongst all lines"[Edit: I guess this proposal could cause an issue with line-drawing glyphs (and similar) that are meant to connect from one line to the next. An alternative proposal is to divide the gap-size in to, above the first row and below the last. Or, maybe this idea just doesn't work.]

Currently when the line height doesn't divide into the window height evenly, there is a gap (0 < gap-size < line-height) at the bottom of the window.
It would be nice to have the top line at the top, bottom line at the bottom, and the gap-size split between all lines. So, for example, the tmux status is always flush against the bottom of the window and the vim tab line is always flush against the top, with no black pixels drawn below or above.
This is a minor issue, of course, but I think it'd be subtly comforting.

Arch Linux, X11"10/10/20 09:24:41 PMalacritty: support enabling/disabling urgency hints"On macOS, setting the window to urgent causes Alacritty's dock icon to
bounce until the window is focused again (which removes the window's
urgency bit). This is a behavior that users have requested to be able to
turn off \[1\].

Teach Alacritty to stop setting the window as urgent upon a bell by
emulating xterm's 'bellIsUrgent' resource and relevant CSIs. When this
resource is enabled (with 'CSI ? 1042 h'), a bell event causes the
window to be marked as urgent. When the resource is disabled (with 'CSI
? 1042 l'), the window is not marked urgent in the event of a bell.

There are two wrinkles worth noting here:

  - The 'TermMode::URGENCY_HINTS' does _not_ affect the terminal's
    configured bell command, since we only want to control whether or
    not the window is marked as urgent, not anything else.

  - In xterm, the 'bellIsUrgent' resource is _disabled_ by default.
    Since bouncing the dock icon has been the default in Alacritty on
    macOS thus far, do not make an effort to change that in this patch.

This allows users to write ""\e[?1042l"" in their prompt and disable
bouncing the dock icon, if they so desire.

\[1\]: https://github.com/alacritty/alacritty/issues/2950

Signed-off-by: Taylor Blau \<me@ttaylorr.com\>

Closes: https://github.com/alacritty/alacritty/issues/2950" =||= "It looks like you're talking about an issue that is already tracked in #1065. There's even an open PR which should fix this behavior (#1190) so hopefully we'll be able to merge that soon. :)

This is a bit of a different approach than what you've proposed, however it should cause a lot less issues with gaps between columns and rows.

The idea of increasing gaps between lines and columns seems to me like it would cause a good amount of problems with glyph rendering, but if you want to discuss that further, please feel free to do so in #1065."ttaylorrTaylor Blau10/10/20 08:41:57 PM"alacritty: support enabling/disabling urgency hints

On macOS, setting the window to urgent causes Alacritty's dock icon to
bounce until the window is focused again (which removes the window's
urgency bit). This is a behavior that users have requested to be able to
turn off [1].

Teach Alacritty to stop setting the window as urgent upon a bell by
emulating xterm's 'bellIsUrgent' resource and relevant CSIs. When this
resource is enabled (with 'CSI ? 1042 h'), a bell event causes the
window to be marked as urgent. When the resource is disabled (with 'CSI
? 1042 l'), the window is not marked urgent in the event of a bell.

There are two wrinkles worth noting here:

  - The 'TermMode::URGENCY_HINTS' does _not_ affect the terminal's
    configured bell command, since we only want to control whether or
    not the window is marked as urgent, not anything else.

  - In xterm, the 'bellIsUrgent' resource is _disabled_ by default.
    Since bouncing the dock icon has been the default in Alacritty on
    macOS thus far, do not make an effort to change that in this patch.

This allows users to write ""\e[?1042l"" in their prompt and disable
bouncing the dock icon, if they so desire.

[1]: https://github.com/alacritty/alacritty/issues/2950

Signed-off-by: Taylor Blau <me@ttaylorr.com>"1
430907/06/18 02:59:12 PMDeleted userUnable to use floating point for font offset"On macOS High Sierra (10.13.2) I'm unable to set the font x-offset to a floating point like 0.5. This is unfortunate because for many fonts 1 is too wide and 0 is too thin.

I read [**here**](https://github.com/jwilm/alacritty/issues/1308) that a fairly recent change forced all font offsets to be whole integers. Is there any way to get floating points back?"10/12/20 10:13:39 PMFix incorrect X11 feature checkThanks to @aruhier for spotting this so quickly! (https://github.com/alacritty/alacritty/commit/721f789b5f98ab5c47e6e817c3c2228636ca0a1a#r43183826)1"The problem with this for us is that we rasterize glyphs aligned to the pixel grid and then simply copy them from a texture at draw time. Spreading a glyph across 2 pixels in this case will result in **terrible** appearance. Correctly doing fractional pixel offsets requires the rasterizer to know that a glyph is being shifted 0.x pixels to the side, and then it can decide to use just a fraction of neighboring pixels.

Anyway, the OP disappeared and I don't have any plans to address this."chrisduerrChristian Duerr10/12/20 09:57:23 PMFix clippy warnings1
431006/13/18 08:54:54 PMNonefont scales wrongly on different resolution monitors"Which operating system does the issue occur on?
ubuntu 18 on macbook pro

If on linux, are you using X11 or Wayland?
x11

If I create an alacritty window on a normal DPI screen (i.e. external monitor) the font size seems fine (though comes up bigger than my last build from a couple months ago), If I move that window to the built in retina display the font shows up tiny as expected due to resolution difference.
If, however, I create the window on the retina display first, the font appears ordinary size (i.e. not tiny) but becomes comically large when moved to the external display."10/14/20 04:09:21 PMUpdate dependenciesFixes #4194. =||= This seems to be a duplicate of #71, there's currently some work going on to fix this, however it will still take a bit because it depends on an external library.kchibisovKirill Chibisov10/13/20 09:53:37 PM"Update CHANGELOG.md

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
431106/17/18 09:19:31 AMChristian DuerrMove to cargo clippy"Using clippy as a library has been deprecated, instead the `cargo
clippy` command should be used instead. To comply with this change
clippy has been removed from the `Cargo.toml` and is now installed with
cargo when building in CI.

This has also lead to a few new clippy issues to show up, this includes
everything in the `font` subdirectory. This has been fixed and `font`
should now be covered by clippy CI too.

This also upgrades all dependencies, as a result this fixes #1341 and
this fixes #1344."10/14/20 04:09:21 PMFollow xterm and preserve foreground color on reset"Xterm preserves foreground color on reset, but those cells are
considered empty in it, thus we change our 'is_empty' and 'reset' logic
to match it.

Fixes #4264.
" =||= "Since this also updates all dependencies, I'd like to wait for the new winit release so all the cleanup and updating of dependencies can just be done in one commit rather than updating winit twice.

Since a new version of winit should be released pretty soon, that shouldn't block this for very long.

**EDIT:** Since the new winit version is a breaking change, waiting is a terrible idea. :P"kchibisovKirill Chibisov10/13/20 03:35:54 PM"Follow xterm and preserve foreground color on reset

Xterm preserves foreground color on reset, but those cells are
considered empty in it, thus we change our 'is_empty' and 'reset' logic
to match it.

Fixes #4264."1
431310/16/18 05:02:52 PMZac Pullar-StreckerAdd support for Windows (Fixes #28)"Primarily this:
* Adds Windows support to copypasta
* Adds rusttype as a font rendering backend
* Creates an interface to abstract over how we interact with a TTY-like thing (EventedRW)
* Adds safe winpty bindings
* Adds [winpty](https://github.com/rprichard/winpty) as a TTY shim
* Adds appveyor CI support

The windows support is not perfect yet but it's good enough that I think it makes sense to merge it. Any unresolved issues are listed [here](https://github.com/zacps/alacritty/issues).

Apologies for the unrelated formatting changes, I can dig through and remove them from the pull but it might take me a little while."10/14/20 09:59:06 PMAdding Ref Test Diffs"Show diffs on ref tests with the `pretty_assertions` crate. The one thing I'm not really sure about with this is if it's better to just fail immediately on the first non-match, or to keep things more like they were before as I've done here.

![screenshot-2020-10-13T18:10:30Z](https://user-images.githubusercontent.com/715947/95899939-4411bf00-0d5f-11eb-87d9-ff80474c3545.png)

vs before:

![screenshot-2020-10-13T18:22:46Z](https://user-images.githubusercontent.com/715947/95900256-a10d7500-0d5f-11eb-8c07-55608815f3f7.png)"10@zacps Feel free to move the issues over from your tracker and label them with `H - windows`nixpulvisNathan Lilienthal10/13/20 06:24:49 PMUpdate comparision order.1
431607/26/18 08:47:46 PMÁrni DagurTrailing colour when scrolling below initially rendered area in Vim"**System:** Arch Linux using X11
**Alacritty:** scrollback branch, latest version

I think it's best for you to look at the following video: https://www.youtube.com/watch?v=_wm4nhb3TFc&feature=youtu.be

On the left is uxterm, and on the right is Alacritty, both configured in approximately the same manner. Open on both terminal emulators is Vim with the Dracula Colorscheme and vim-airline. In Alacritty, you can see that when I scroll below the initially rendered area on the top, some of the colours (pink in this case) of vim-airline seem to trail downwards as the cursor moves.

I have done the same with Termite, and I have no problems there either.

Any ideas?"10/17/20 02:47:52 PMAdd: license symlink"To help Linux distributions' packagers fulfilling packaging requirements.
Any issue please let me know and I will address." =||= "I've opened a PR with these changes [here](https://github.com/jwilm/alacritty/pull/1469), I haven't run into any issue with this so far, but since jwilm has mentioned some concerns, I'm going to run this branch myself for a while.

If someone wants to help out with testing, it would be much appreciated."returntripreturntrip10/17/20 01:41:09 PMAdd: license symlink1
431701/19/20 04:10:52 PMNathan LilienthalSuppress Extra Characters from Last Command"Which operating system does the issue occur on?
Linux

If on linux, are you using X11 or Wayland?
X11

It would be nice to suppress extra characters from being put into the input buffer for my shell after a previous command that printed a bunch of garbage. To see this issue, run something like `cat $(which ls)` to dump a bunch of garbage. Then notice how there is some of that garbage in the next input to the shell (i.e. pressing return would execute the garbage)."10/18/20 06:36:24 AMHandling CompositionEvent"## Summary

Support `CompositionEvent` implemented on winit's [sub branch](https://github.com/rust-windowing/winit/tree/composition-event) for IME preedit support

I check work on my Arch Linux + uim(byeoru)

For now this only work on X11 because winit doesn't have implementation for other platforms


## Blocking upstream issue

https://github.com/rust-windowing/winit/issues/1497"2The terminal responce rework multiple times a while ago. As well as C1 was removed. Should be fixed.RieyRiey10/18/20 04:35:18 AMFix winit dependency position1
432209/28/18 08:49:17 PMNellyWhadsHigh DPI scaling factor/Wrong monitor dimensions"Which operating system does the issue occur on?
Ubuntu 18.04

If on linux, are you using X11 or Wayland?
(Whatever it defaults to in Ubuntu 18.04 - the output of `loginctl` was a little confusing: it showed gdm was running in Wayland, and I was logged in in X11)
![screenshot from 2018-06-15 15-57-50](https://user-images.githubusercontent.com/8030181/41487111-4d7bafe0-70b5-11e8-87b5-d4e2178c30d0.png)

X11

When I launch alacritty, it seems to set a device_pixel_ration of 1.6666...
This means my fonts show up huge on the terminal window as soon as I start it. I only have one display attached to my laptop (the laptop's inbuilt display).

I know there are other issues posted here surrounding similar DPI scaling issues, but they all seemed to be around dynamic scaling based on which monitor Alacritty is launched from. Once again, I only have one; 1920*1080.

Firstly, is there a hot-fix which allows me to override the device_pixel_ratio somewhere in the alacritty.yml (currently all values are the defaults)?
Secondly, how can I find out where along the chain this is going wrong? The OS seems to see the 1920*1080 resolution just fine.

![screenshot from 2018-06-15 15-55-29](https://user-images.githubusercontent.com/8030181/41487123-5cc0a05a-70b5-11e8-969e-6bda7e6c9f65.png)
"10/18/20 06:36:24 AMAdd polling for a new config to watch when config is deleted"Hello , this is my first PR to alacritty so I have a few questions : 
- do this needs to be documented in changelog.md  ? 
- shall I bump the version (again I am not sure) ? 

This addresses #2237. 
Regarding the implementation I am not sure what I wrote is a 100% correct : 

- Is it safe to not resolve symlinks ? 
  ```rust
              if path.symlink_metadata().is_ok() {
                  Symlink(path.clone())
              } else {
                  ConfigPath::Path(path.clone())
              }
  ```   
  The idea here is to keep symlinks in place instead of following them. This way when config is unlinked we can wait for it to be re-linked. Symlink paths are not canonicalized in the next step, instead they are checked with `Path::exist`, could this have potential side effects ? 

- How long should we wait for config to be recreated ? 
  I have set a timeout of 6s with 100ms steps, is this appropriate ?

Let me now if anything needs to be changed. 
"7Closing since it looks like the DPI calculated was correct, for overriding the DPI the environment variable `WINIT_HIDPI_FACTOR` can be used.oknozorPaul Delafosse10/20/20 05:42:44 AMAdd pollling for a new config to watch when config is deleted1
432306/16/18 08:53:45 PMTim Siegelsupport terminfo for default keybindings"Is there a plan to use terminfo for default keybinding, rather than hard-coded entries in the config? Perhaps something like mode: terminfo would work?

On my Arch Linux system, `TERM=xterm-256color tput kcuu1` gives `""\x1bOA""` but the default config maps Up to `""\x1b[A""` for `mode: ~AppCursor`."10/20/20 08:04:05 PMFix an issue where self.grid[point.line] would be out of bounds"Hi,

I got this panic when running Alacritty:

```
RUST_BACKTRACE=full alacritty
thread 'main' panicked at 'index out of bounds: the len is 4894 but the index is 18446744073709546721', /build/alacritty/src/alacritty/alacritty_terminal/src/term/search.rs:423:15
stack backtrace:
   0:     0x559289703450 - <unknown>
   1:     0x5592895ec5cc - <unknown>
   2:     0x559289702c36 - <unknown>
   3:     0x559289702500 - <unknown>
   4:     0x559289701bf2 - <unknown>
   5:     0x559289701838 - <unknown>
   6:     0x559289701804 - <unknown>
   7:     0x5592897017bd - <unknown>
   8:     0x5592895e9d50 - <unknown>
   9:     0x5592895e9be1 - <unknown>
  10:     0x559289571af8 - <unknown>
  11:     0x55928950231a - <unknown>
  12:     0x55928957a432 - <unknown>
  13:     0x5592895532e2 - <unknown>
  14:     0x559289411086 - <unknown>
  15:     0x5592894b90fb - <unknown>
  16:     0x55928953bac3 - <unknown>
  17:     0x5592894b0d58 - <unknown>
  18:     0x7f2913329152 - __libc_start_main
  19:     0x5592893e70ae - <unknown>
  20:                0x0 - <unknown>
```

This is using the [`alacritty 0.5.0-3`](https://github.com/archlinux/svntogit-community/blob/packages/alacritty/trunk/PKGBUILD) package that comes with Arch Linux, which uses the `v0.5.0` git tag.

The error was triggered by editing a `PKGBUILD` file with the [`o`](https://github.com/xyproto/o) text editor, then repeatedly alternating between frenetically resizing the window and pressing `ctrl-a` and `ctrl-e`, until Alacritty crashed. I could not find the exact steps to reproduce this, it seems to crash after crossing a certain threshold of abusive window resizing.

This small patch seems to fix the issue.

All tests pass.

Best regards,
Alexander F. Rødseth"4Clearly I don't understand how this all works, but xterm has the same behavior, so I'm pretty sure the problem is in my head rather than anywhere else.xyprotoAlexander F. Rødseth10/20/20 08:41:51 AMFix an issue where self.grid[point.line] would be out of bounds1
432806/18/18 05:45:29 AMRyleeSlow performance when outputting many lines"Which operating system does the issue occur on?
arch linux

If on linux, are you using X11 or Wayland?
x11


When running cat /dev/urandom, alacritty noticeably slows down compared to other terminals such as xiate and kitty."10/21/20 09:16:13 PMCheck viewport size after initial resize"Since the `set_inner_size` call might immediately alter the window size,
the query for the window's dimensions should be performed after the
resize has been requested." =||= "This could be related to what has slightly been discussed in https://github.com/jwilm/vtebench/pull/6.

It seems like this is also already tracked in #511, so further discussion should probably happen in there."chrisduerrChristian Duerr10/21/20 05:01:24 PM"Check viewport size after initial resize

Since the `set_inner_size` call might immediately alter the window size,
the query for the window's dimensions should be performed after the
resize has been requested."1
433106/23/18 04:09:52 AMNoneError changing shell in config"Ubuntu 16.04 and Mac OS  
In ~/.config/alacritty/alacritty.yml  

I've tried many permutations of  
```
shell:
  program: /bin/bash
  args:
    - --login  
```
  
I always get ""Error: problem with config: while parsing a block mapping, did not find expected key at line 248 column 7; Loading default config"", where 248 is ""shell: ""
So I'm not getting the uncommented default to work (this is also how a few dotfiles I found on github were formatted). I assume I'm just missing something, but if that's the case I would humbly suggest adding a note in the readme or something since it's not clear how to set the shell from the default.  

Thanks!"10/22/20 07:39:39 PMRemove unneeded `collect()` in `RenderLines.rects`"Just something I noticed while looking around and it seemed easy/safe to improve. I ran the benchmarks a couple times and it wasn't _obviously_ faster but I was just looking number-by-number in my editor because, for whatever reason, when I run `./gnuplot/summary.sh *.dat output.svg` I get `line 0: undefined variable plot` 🤷 But, if someone else can help me get the plotter set up I can confirm if this is indeed an improvement.

**This Commit**
Uses `move` semantics to copy a `Flags` instance instead of allocating a
`Vec<RenderRect>`.

**Why?**
I expect the performance is better here - `Flags` is a `u16` so making
copies of that should be very cheap while heap-allocating a
`Vec<RenderRect>` is probably more costly. Although, of course, the
compiler could be doing all sorts of witchcraft to optimize away an
unnecessary allocation.

I also used `flat_map` which
seemed more idiomatic than `.map(...).flatten()` but I believe they're
functionally equivalent."6Dunce hat for me, I didn't know yaml was sensitive to leading white space. Thanks for the help nixpulvis and chrisduerr, it's working properly with that edit.mlodato517Mark Lodato10/22/20 04:06:47 PM"Remove a Vec allocation in `RenderLines.rects`

**This Commit**
Uses `move` semantics to copy a `Flags` instance instead of allocating a
`Vec<RenderRect>`.

**Why?**
I expect the performance is better here - `Flags` is a `u16` so making
copies of that should be very cheap while heap-allocating a
`Vec<RenderRect>` is probably more costly. I also used `flat_map` which
seemed more idiomatic than `.map(...).flatten()` but I believe they're
functionally equivalent."1
433211/10/18 04:08:49 PMMichele LombardiInconsistent window size on HiDPI screen + incorrect font scaling on dpi switch"Which operating system does the issue occur on?

OsX, on a retina display with an attached (non-retina) secondary monitor

I am on the master branch, commit: f55252ec8537e68d0c98a1fac35728a2b596d328

Using the (default) configuration options:

```
window:
  dimensions:
    columns: 80
    lines: 24

scale_with_dpi: true
```

The default alacrity window is much smaller than it should be. Here's a screenshot comparing an 80x24 Terminal.app with an 80x24 alacrity window

<img width=""959"" alt=""screen shot 2018-06-18 at 10 19 14"" src=""https://user-images.githubusercontent.com/5887142/41525384-175496ba-72e1-11e8-9f2f-693a24061477.png"">

The screenshot has been obtained running alacrity with the -v flag, so that the window on the left (Terminal.app) contains also the log.

The device pixel ratio seems to be detected correctly (2x on retina displays). I cannot really make full sense of the first ""width: ..., height: ..."" line (is the size of glyph cache?), but the third (562x338) seems to be just the second (1124x676), scaled down according to the pixel ratio.

My first thought was that the window size was computed prior to the dpi scaling. If that was the case, I would expect that doubling the windows size (in terms of lines and columns) should get a correctly sized window. In practice, doubling up the size...

```
window:
  dimensions:
    columns: 160
    lines: 48
```

...gets very close to Terminal.app 80x24. There is still a slight difference (no need for a screenshot here), but I figure that could be due to minor differences in cell size between the two emulators.

Now, moving the alacrity window on a secondary (non-retina) monitor keeps its size (correctly), but results in double-sized fonts. Here is a screenshot of the two windows, once they have been moved to the secondary monitor.

![screen shot 2018-06-18 at 10 42 51](https://user-images.githubusercontent.com/5887142/41526395-67e03a1e-72e4-11e8-960b-3dc38e6ed006.png)

The log (on the left-side window) shows that moving alacrity to the secondary monitor triggered a size update.
```
width: 281, height: 169
```

Just for the record, repeating the process backwards (run on the secondary -- non retina -- monitor, move to the primary -- retina -- monitor) yields reverse results. Here's what happens when first running alacrity (the window has the correct size):

![screen shot 2018-06-18 at 10 49 09](https://user-images.githubusercontent.com/5887142/41526690-482419ec-72e5-11e8-952e-de655afd908c.png)

And here is what happens when moving both windows on the retina display (window size is kept, half size fonts):

<img width=""1184"" alt=""screen shot 2018-06-18 at 10 51 49"" src=""https://user-images.githubusercontent.com/5887142/41526827-a10b544e-72e5-11e8-866d-e02940802729.png"">

Again, the move triggered a size update.

In summary:

- When the window is created, the font size si always correct, but the window size is halved on retina displays
- When the switching to a different monitor, the window size is correctly handled, but the font size is either doubled or halved.

Even  if it looks like to issues, I suspect they are both related to the code for handling the same event. Unfortunately I am not familiar with rust, so I am not sure I would be able to provide more information by looking at the code.

Michele

BTW: guys & gals, many thanks for all your great work!"11/19/20 02:52:59 PMAdd optional configuration imports"# Optional imports

This adds the ability to mark imports as `optional`. Optional imports
will be skip loading if they do not exist. If an import is not
explicitly marked as `optional`, then there will be an error raised like
normal.

An optional import is defined as a `path` and `optional` keys. Example:

```yaml
import:
  - /normal/path/to/config.yml
  - path: /path/to/config.yml
    optional: true
```

If both these files do not exist alacritty will raise an error on the
/normal/path/to/config.yml file.

Fixes: #4330 "7"just encountered the same problem, have to set
```
window:
  dimensions:
    columns: 121
    lines: 37
```
to get 80×24 terminal
this is only necessary on a laptop on which the DPI is non-standard

will test the suggested solutions"EdenEastKirill Chibisov11/19/20 01:37:04 PMMerge branch 'master' into feat/opt-imports1
433706/18/18 05:50:22 PMJan JurecIn which use cases can an user see performance boost?"This is just a quick question. My default Ubuntu terminal emulator boots up under 100 ms. So I don't think there is a need for improvement here. So, in what situations would I need the extra speed you provide? Like 120Hz screen refreshing?"10/24/20 12:26:40 PMRemove all duplicate dependencies from Linux"This bumps andrew and removes the last duplicate dependency
(`line_drawing`) from Alacritty's Linux dependencies." =||= Thanks for asking, always happy to answer any questions! :)chrisduerrChristian Duerr10/23/20 01:44:39 PM"Remove all duplicate dependencies from Linux

This bumps andrew and removes the last duplicate dependency
(`line_drawing`) from Alacritty's Linux dependencies."1
433806/23/18 10:13:20 AMFelippe da Motta RaposoAdd settings to ignore first click on unfocused windowImplements https://github.com/jwilm/alacritty/issues/129111/05/20 04:45:15 AMUse dynamic storage for zerowidth characters"The zerowidth characters were conventionally stored in a `[char; 5]`.
This creates problems both by limiting the maximum number of zerowidth
characters and by increasing the cell size beyond what is necessary even
when no zerowidth characters are used.

Instead of storing zerowidth characters as a slice, a new `CellExtra`
struct is introduced which can store arbitrary optional cell data that
is rarely required. Since this is stored behind an optional pointer
(`Option<Box<CellExtra>>`), the initialization and dropping in the case
of no extra data are extremely cheap and the size penalty to cells
without this extra data is limited to 8 instead of 20 bytes.

The most noticible difference with this PR should be a reduction in
memory size of up to at least 30% (1.06G -> 733M, 100k scrollback, 72
lines, 280 columns)."13Thanks for looking into this! LGTM!chrisduerrChristian Duerr11/05/20 04:13:06 AMNever inline input function1
434506/26/18 06:21:43 AMZack HsiControl + Shift + Left/Right + tmux"Which operating system does the issue occur on? `macOS 10.13.5`

I am not entirely sure this is an alacritty issue, but I was hoping someone who has more expertise than I do would be able to help me out :)

I have a [tmux keybinding](https://github.com/zackhsi/dotfiles/blob/95dcb1ecfc6c44f5972c6dfb0ecf9514618bfda9/sources/tmux.conf#L60-L62) whereby I can press control, shift, and the left/right arrows in order to rearrange a session's windows. This does not work properly in alacritty, for reasons unknown to me.

I have already [updated my alacritty.yml config](https://github.com/zackhsi/dotfiles/commit/95dcb1ecfc6c44f5972c6dfb0ecf9514618bfda9), and _I believe_ that alacritty and iterm are sending the same escape sequence. My test is that when I press control+v, and then I press control+shift+arrow, I see the same thing printed to the screen for iterm and alacritty, which is:

```bash
# Control+Shift+Left
^[[1;6D
# Control+Shift+Right
^[[1;6C
```

However, the desired tmux window rearrangement does not happen. Either something is up with the escape sequence, or something peculiar is happening when tmux listens to `bind`-ed keystrokes...or something else entirely. Please help!"10/25/20 02:07:29 AMRemove rustc_tools_util dependency"Since our usage of the rustc_tools_util crate is so trivial, it seems
like we should be able to just inline it directly into Alacritty.

It's a very well trusted crate, being hosted directly by rust-lang and
it does not pull in any other dependencies, but having a dependency for
just 6 lines of code seems a bit extreme." =||= Moving all custom keybindings to the bottom of my config seems to have fixed the issue.chrisduerrChristian Duerr10/24/20 08:29:05 PM"Remove rustc_tools_util dependency

Since our usage of the rustc_tools_util crate is so trivial, it seems
like we should be able to just inline it directly into Alacritty.

It's a very well trusted crate, being hosted directly by rust-lang and
it does not pull in any other dependencies, but having a dependency for
just 6 lines of code seems a bit extreme."1
434609/23/18 11:05:15 PMChristian Duerr Implement config options for term colors 16..256 "This adds a config option which allows setting terminal colors above the
0..16 range, this is often not used so it has been added to the config
option commented out by default.

Live config reload already works for this, so it is possible to change
these colors the same way it works with the normal colors.

If a color below 16 is specified, the configuration will throw an error,
so the normal colors can't be overridden. This is just to prevent
possible complications with the settings that already exist.

I've also fixed existing clippy issues in this PR, I've chosen to do
so in a different commit to make reviews easier. All changes related
to the term colors are outside of the `Fix existing clippy issues` commit."11/01/20 05:23:08 AMAdd touchscreen support"Fixes #3671."28Moving all custom keybindings to the bottom of my config seems to have fixed the issue.ch-syChristian Seybert10/27/20 02:42:11 AMFix incorrect zoom behavior with more than two fingers1
434809/27/18 12:12:50 PMChristian DuerrFix selection start point lagging behind cursor"Since the mouse start position has been the first movement event after
the mouse button was held down, there have been some issues with the
start point lagging behind the cursor because movement events were not
reported from the initial position but there was a gap until movement
starts reporting.

To fix this whenever the mouse button is pressed, the position and cell
side is stored on the `Mouse` struct. Because of this it does not matter
anymore if the movement events are all reported and we can just start a
selection using the stored position/side whenever there currently is no
selection present.

This fixes #1366."10/25/20 08:22:22 PMSwitch to dirs-nextUpgrade to `dirs-next` since `dirs` is no longer supported.  [This comment](https://github.com/sharkdp/fd/pull/664#issuecomment-708662203) comment has more details.  I assume this doesn't need a changelog entry? =||= "Since this branch had significant merge conflicts with the master (basically everything that was change), I've opted to just reimplement the changes on top of the latest master instead of rebasing and fixing the conflict.

Everything seems to be working well, however I am not able to reproduce the original issue on my main machine since it reports events too quickly. I'll try to test it on my laptop tomorrow, but any feedback is appreciated.

**Edit:** Seems like it does resolve the issue, so everything should be good to go."lespeaAdam Lesperance10/25/20 06:54:35 PMSwitch to dirs-next1
434906/22/18 12:18:48 PMMatthias Krügerfont: manually impl PartialEq for GlyphKey"This silences #[deny(derive_hash_xor_eq)] clippy failure:
````
error: you are implementing `Hash` explicitly but have derived `PartialEq`
   --> font/src/lib.rs:156:1
    |
156 | / impl Hash for GlyphKey {
157 | |     fn hash<H: Hasher>(&self, state: &mut H) {
158 | |         unsafe {
159 | |             // This transmute is fine:
...   |
165 | |     }
166 | | }
    | |_^
    |
    = note: #[deny(derive_hash_xor_eq)] on by default
note: `PartialEq` implemented here
   --> font/src/lib.rs:149:30
    |
149 | #[derive(Debug, Copy, Clone, PartialEq, Eq)]
    |                              ^^^^^^^^^
    = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.209/index.html#derive_hash_xor_eq
````"10/25/20 08:22:18 PMUpdate to time 0.2"Upgrade to a supported version time, `0.2`.  Needed a slight change in the formatting syntax but the output should be the same.  I believe using `lazy_format` saves allocating a string, not that it really matters for this code but still a nice benefit.  I didn't update the changelog as there should be no change in functionality.

More details: https://github.com/time-rs/time/issues/190"1"Ah, I did run clippy on the master branch and noticed the error didn't appear there but that made me think the error was originating from scrollback changes....
Closing then :)"lespeaAdam Lesperance10/25/20 07:30:48 PMUpdate to time 0.21
435407/03/18 03:29:28 PMDeleted usercargo build very slow "macos 
"10/29/20 04:17:34 AMError on dead code when running clippy"It should simplify tracking of dead code on CI builds
and when cross checking."1Closing this since it doesn't seem to be an issue of Alacritty and the `lto` fix I've mentioned should offer at least some improvements.kchibisovKirill Chibisov10/27/20 05:38:04 PM"Error on warnings when running clippy

It should simplify tracking of new warnings raised on CI builds
and when cross checking. This commit also enables warnings
for 'rust_2018_idioms' and 'future_incompatible'."1
435507/01/18 04:36:16 PMChristian DuerrUpdate the manpage to document all CLI options"The introduction of `--class` has added a flag to the CLI without adding
it to the manpage. This has been fixed by updating the manpage.

This also adds the default values of `--class` and `--title` to the CLI
options."10/28/20 01:15:50 AMFix build failure on macOS without featuresFixes #4353.3Closing this since it doesn't seem to be an issue of Alacritty and the `lto` fix I've mentioned should offer at least some improvements.chrisduerrChristian Duerr10/27/20 09:08:47 PMMove UnixExt import to Wayland1
436507/01/18 01:03:11 PMMatthias Krügerclippy: fix default_trait_access warnings.10/29/20 10:14:44 PMFix crash with large negative font offsetFixes #4363. =||= "Oh okay, sorry  for causing the work duplication, but it's still much appreciated!

It can get a bit messy with the amount of PRs I've currently open."chrisduerrChristian Duerr10/29/20 05:41:52 PM"Fix crash with large negative font offset

Fixes #4363."1
436606/26/18 08:35:51 PMCraig FurmanMake compilation of binary a phony target"`binary` is already a phony target, but its dependency (alacritty) is not.
This caused an issue whereby `make binary` would not compile the latest binary
after updating the repository.

To reproduce this issue:

1. `cd <alacritty>`
1. Go back a few revisions: `git checkout HEAD^^^`
1. `make binary` (or `make app`)
1. Update the repository: `git checkout master && git pull`
1. `make binary` (or `make app`)
1. The new binary has not been buil, the old version is still present in `target`."10/29/20 09:44:15 PMSet ALACRITTY_PID environment variable"Useful in scripts and daemons when trying to figure out the parent terminal.

I used this to solve the issue highlighted in this comment:
https://github.com/alacritty/alacritty/issues/1072#issuecomment-674310366

With the environment variable available, I just drop in a short shell script containing the following, and point to it with bell -> command -> program:
```
#!/bin/sh
swaymsg ""[pid=$ALACRITTY_PID] urgent enable""
```
Or just use sh directly:
```
bell:
  command:
    program: sh
    args: [""-c"", 'swaymsg ""[pid=$ALACRITTY_PID] urgent enable""']
```"13"Thanks for the PR! Merging the way it is right now, seems like the best choice.

If anyone wants to make a different proposal, please do so in a separate PR."zqadJonas Eriksson10/29/20 08:35:06 PM"Set ALACRITTY_PID environment variable

Useful in scripts and daemons when trying to figure out the
parent terminal."1
436712/09/18 05:10:48 PMDan AloniAllow to use alternative font on small font size"On smaller font size, it is sometimes better to switch to a bitmap font
automatically.

This change allows two fonts to be configured - one for larger sizes and
another for smaller sizes. An optional 'small_font' configuration is
possible, with an 'upper_bound' on the size which determines when to use
that font, based on currently used size.

For example, I with this commit I use Hack, a TTF antialised font for
large sizes, and Terminus, a bitmap font, for small sizes:

```
font:
  normal:
    family: Hack
  bold:
    family: Hack
  italic:
    family: Hack
  size: 13.0

small_font:
  upper_bound: 11.0
  font:
      normal:
        family: Terminus
      bold:
        family: Terminus
      italic:
        family: Terminus
      size: 16.0
```"10/30/20 06:22:14 AMFix visual bell getting stuck"This resolves a problem with the visual bell where it would not
automatically trigger a redraw itself after the initial frame has been
rendered.

Since the unit of the visual bell duration is also unclear, it has been
clarified." =||= Just to update that I've restored the branch for v0.4.3. I'm back to it, because an insect wedged itself inside the LCD panel of my 4K monitor at the office (that's a strange bug...), and I had to fall back to using a full HD monitor for a few days. The Hack+Terminus font combo still works better for me with these changes.chrisduerrChristian Duerr10/30/20 02:24:36 AM"Fix visual bell getting stuck

This resolves a problem with the visual bell where it would not
automatically trigger a redraw itself after the initial frame has been
rendered.

Since the unit of the visual bell duration is also unclear, it has been
clarified."1
437306/28/18 06:29:02 PMArunvel SriramUnicode characters not rendering"Which operating system does the issue occur on?
Mac OS X

Unicode characters are not rendered when opened using `Alacritty.app`.

### Alacritty:
<img width=""222"" alt=""screen shot 2018-06-28 at 9 46 11 pm"" src=""https://user-images.githubusercontent.com/6568319/42052087-77177728-7b2b-11e8-80c9-3e48f89c2345.png"">

<img width=""372"" alt=""screen shot 2018-06-28 at 9 46 19 pm"" src=""https://user-images.githubusercontent.com/6568319/42052093-7dd132f2-7b2b-11e8-8d87-0170b7736c8e.png"">

### iTerm
<img width=""347"" alt=""screen shot 2018-06-28 at 11 32 53 pm"" src=""https://user-images.githubusercontent.com/6568319/42052150-a2155936-7b2b-11e8-9c9a-4d348782d531.png"">

<img width=""447"" alt=""screen shot 2018-06-28 at 11 33 02 pm"" src=""https://user-images.githubusercontent.com/6568319/42052165-a8705844-7b2b-11e8-809d-5a5f72cf1965.png"">

However, it's working if I open the `alacritty` binary directly like this:

```
/Applications/Alacritty.app/Contents/MacOS/alacritty
```

"10/30/20 06:22:14 AM[wip] New faster renderer"# Still work in progress
But it is so close to be functionally complete.
TL;DR: it makes rendering 1.5..2x faster on average, and up to 20x in extreme cases. :chart_with_upwards_trend:
It also _almost_ lowers OpenGL version requirements to OpenGL (ES) 2.0 level (plan to address this in the next PR).

# PR Agenda
- [x] This PR
- [ ] FIXME Grid glyphs overlap handling
- [x] Write new renderer overview
- [ ] Publish benchmark setup and results (so you can stop believing and start reproducing numbers like 20x)
- [ ] Write full technical description with images and rationale
- [ ] Get :+1: from maintainers
- [ ] ?????
- [ ] Remove :red_square: red padding from the shader that visibly distinguishes this renderer from the old one.

# Request for testers
- Please test this extensively with whatever crazy and extreme fonts you can find, different scales, window sizes, etc
- Let me know if you can notice differences in subpixel blending, and if that makes you sad.

# Questions
### Should grid overlap be completely disabled?
- Why: greatly simplifies grid shader and its performance
- Why not: more glyphs would fall-back on rendering using quads

The rest of the PR description below.

# Introduction
This pull request completely replaces Alacritty renderer.

The new renderer:
- does not require instancing (so it can be easily updated to run on OpenGL (ES) 2.0 level hardware)
- modularized into fairly independent parts
- 2-20x faster in my not very scientific meausrements

# Benchmark
TBD
## Setup
TBD
## Results
TBD

# Overview
Existing renderer draws each glyph as a separate (instanced) quad. Given that it is common to have 10000-30000 characters on a single terminal screen, renderer will instance that many quads, which means that there will be 20000-60000 triangles rendered and 40000-120000 vertices processed.

That's *a lot* of triangles and vertices just to render fairly static text! And this load becomes really noticeable espcially on lower-end GPUs.

Core idea of the new renderer is to use a single full-screen shader pass to draw all (or at least most of) the glyphs at once using just a single quad.
Given that the terminal is monospace in nature, the entire screen forms a grid of cells, where each character falls within its own cell. A full-screen shader running for each pixel can easily determine its current cell number using such awesome operations as division of pixel coordinates by cell size and taking an integer floor of that value.

Given these cell coordinates the shader then needs to read cell parameters such as background and foreground colors, and glyph data, somehow.
Old renderer uses instance data structure to store these parameters, and rasterized glyph image is referenced by full atlas texture coordinates.
New renderer uses simple textures to store this data.

There are three textures that store per-cell data:
- foreground, character color
- background color
- glyph coordinates into atlas texture

Note that storing full atlas texture coordinates (4 components: uv + size) for each glyphs is fairly expensive (single RGBA8 pixel is not enough to store coordinates into entire 1024x1024 atlas texture with good enough precision).
This is why the new renderer also changes atlas texture format. The new grid atlas also forms a grid of regular constant size cells, where each cell holds a single glyph. Limiting this grid by 256x256 cells, we can use just two 8-bit channels of RGBA8 texture to reference any of them.

Shader then uses these grid atlas cell coordinates with conjunction to pixel coordinates relative to screen cell to read pixel data from grid atlas texture.

TBD draw schematics

# Implementation details

Note that in practice we cannot assume that glyphs are *completely* contained within cells, as some fonts (I'm looking at you, Comic Mono) will have many glyphs having parts that are slightly outside their cells an creep into neighbour cells by a few pixels.

# Code overview
TBD

# Limitations
The new renderer depends on three assumptions:
- font is monospace, and we can split the entire screen into a regular grid of cells of same size.
- glyphs are fairly contained within their cells.
- there's only one cursor

## Known issues, regressions and differences
- Pixel precision glitches on hidpi windows?
- Improper blending for subpixel-hinted glyphs (only R channel is used)
- Rendering time display overwritten by quad glyphs
- Some glyphs positions differs from those of old renderer. Arguably, the new ones are correct, though.

# Further (possible) research
- Full OpenGL (ES) 2.0 compatibility (yay Raspberry Pi and older GPUs)
- Improve glyph uploading by batching texture uploads (faster start up, less hiccups on new glyphs)
- Smaller GL buffer memory footprint improvements
- Grid-rendering for wide chars too
- Multiple atlas bindings to coalesce multiple grid passes into one
- Dynamic atlas texture sizes based on font size (and user config)
- Only draw parts of the screen that have glyphs or non-default background color
- damage-rewrite display::draw: do not iterate through all cells, regenerating the entire screen. Only update what needs to be updated.
- Vulkan renderer :sweat_smile:

# Misc shameless plug
- this rendering method is also mostly friendly to doing this completely useless garbage, like ~RTX ON~ shader-based path tracer: https://youtu.be/Jz4XJKKomlc?t=17698 (branch with this _rendering method_ is still there: https://github.com/w23/alacritty/tree/shader-fun)

# Acknowledgements
A huge special thank you goes to @kchibisov who patiently watched my horrible streams and guided me through alacritty codebase.

And thanks for alacritty dev team for making such an amazing software!"21"Actually it seem to be a `tmux` issue. Telling `tmux` that the terminal supports `UTF-8` by setting `locales` correctly or explicitly using `tmux -u` fixes the issue.

Its described here: https://github.com/tmux/tmux/issues/328"w23Ivan Avdeev11/05/20 09:43:57 AM"Fix atlas glitch, drop es version in glsl, revert SizeInfo changes

* implement grid atlas upload batching, fixes atlas glitch

* Revert ""fix grid misallocation based on misinterpreted SizeInfo value""
SizeInfo is terminal thing, it should not be aware of the entire screen
(although it's kind of aware of it still)

* clear background with the right color

* fixup shader versions to non-es for mac
Should fix shaders on macOS, not tested."1
438006/16/19 10:46:28 PMChristian Duerr[WIP] Add block selection"This adds a rough implementation of block selection with the goal of
doing a minimal number of modifications to the existing code.

This is super WIP and more a proposal of keeping track of block
selection rather than an actual solution, it should provide all the
functionality necessary, however the code quality is lacking.

Currently whenever selections are passed around in `term/mod` it just
waps it in either `BLOCK` or `SPAN` so consumers can check what kind of
selection is present and decide based on it.

The alternative solutions that immediately come to mind would be
either passing a boolean like `is_block_selection` whenever a method is
called, wrap it in a struct with a boolean instead of using an enum for
matching, or the most drastic alternative would probably be to change
the selection model from something linear to an alternative which allows
to display both linear and block selections.

I'm not quite sure myself what the preferred way of moving forward would
be here and it's very likely that there are also other (potentially much
better?) solutions for this problem.

This fixes #526."11/06/20 02:12:30 AMAdd editorconfig"This commit also purges .gitignore, since those files should be handled
by global ignore file.

Fixes #4378."3I've reworked this PR to resolve the remaining problems. Since this was still targeting the scrollback PR, I've created a new PR here: https://github.com/jwilm/alacritty/pull/2552kchibisovKirill Chibisov11/05/20 11:28:32 PMStyle issues1
438212/26/18 10:19:15 PMZack Hsi"Quadruple click for ""smart select""""Hi, I'm a fan of the iTerm features for smart selection, details [here](https://www.iterm2.com/documentation-general-usage.html).

Thanks!"11/06/20 05:33:03 PMDeprecate the WinPTY backend =||= Semantic selection is already present in Alacritty, for tracking improvements like URL detection there's https://github.com/jwilm/alacritty/issues/1210 to track it.chrisduerrChristian Duerr11/06/20 03:11:12 PMFix code formatting1
438707/02/18 10:05:59 PMMatthias KrügerScrollback attempting to access index out of bounds"rustc 1.28.0-nightly (e3bf634e0 2018-06-28)
Linux t470 4.17.0-2-MANJARO #1 SMP PREEMPT Fri Jun 8 07:13:17 UTC 2018 x86_64 GNU/Linux
alacritty @ scrollback / bfd62ef

from time to time I get random crashes on scrollback when there is a lot of text put out very fast.

I managed to get a backtrace by running cppcheck --enable=all --inconclusive --debug --verbose -j 4 on the llvm repo which made alacritty crash one time:

````
thread 'main' panicked at 'assertion failed: requested < self.inner.len()', src/grid/storage.rs:201:9
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::print
             at libstd/sys_common/backtrace.rs:71
             at libstd/sys_common/backtrace.rs:59
   2: std::panicking::default_hook::{{closure}}
             at libstd/panicking.rs:211
   3: std::panicking::default_hook
             at libstd/panicking.rs:227
   4: std::panicking::rust_panic_with_hook
             at libstd/panicking.rs:511
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:445
   6: <alacritty::grid::storage::Storage<T>>::compute_index
             at src/grid/storage.rs:201
   7: <alacritty::grid::storage::Storage<T> as core::ops::index::Index<usize>>::index
             at src/grid/storage.rs:285
   8: <alacritty::grid::Grid<T> as core::ops::index::Index<usize>>::index
             at src/grid/mod.rs:512
   9: <alacritty::grid::GridIterator<'a, T> as core::iter::iterator::Iterator>::next
             at src/grid/mod.rs:471
  10: <alacritty::term::Term as alacritty::selection::SemanticSearch>::semantic_search_right
             at src/term/mod.rs:63
  11: alacritty::selection::Selection::span_semantic
             at src/selection.rs:181
  12: alacritty::selection::Selection::to_span
             at src/selection.rs:158
  13: alacritty::term::Term::selection_to_string
             at src/term/mod.rs:980
  14: <alacritty::event::ActionContext<'a, N> as alacritty::input::ActionContext>::copy_selection
             at ./src/event.rs:62
  15: <alacritty::input::Processor<'a, A>>::on_mouse_release
             at ./src/input.rs:454
  16: <alacritty::input::Processor<'a, A>>::mouse_input
             at ./src/input.rs:559
  17: <alacritty::event::Processor<N>>::handle_event
             at ./src/event.rs:312
  18: <alacritty::event::Processor<N>>::process_events::{{closure}}
             at ./src/event.rs:421
  19: core::ops::function::impls::<impl core::ops::function::FnMut<A> for &'a mut F>::call_mut
             at /checkout/src/libcore/ops/function.rs:261
  20: winit::platform::platform::x11::EventsLoop::process_event
             at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.0/src/platform/linux/x11/mod.rs:670
  21: winit::platform::platform::x11::EventsLoop::poll_events
             at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.0/src/platform/linux/x11/mod.rs:212
  22: winit::platform::platform::EventsLoop::poll_events
             at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.0/src/platform/linux/mod.rs:467
  23: winit::EventsLoop::poll_events
             at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.0/src/lib.rs:225
  24: alacritty::window::Window::poll_events
             at ./src/window.rs:280
  25: <alacritty::event::Processor<N>>::process_events
             at ./src/event.rs:435
  26: alacritty::run
             at src/main.rs:179
  27: alacritty::main
             at src/main.rs:62
  28: std::rt::lang_start::{{closure}}
             at /checkout/src/libstd/rt.rs:74
  29: std::panicking::try::do_call
             at libstd/rt.rs:59
             at libstd/panicking.rs:310
  30: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:105
  31: std::rt::lang_start_internal
             at libstd/panicking.rs:289
             at libstd/panic.rs:392
             at libstd/rt.rs:58
  32: std::rt::lang_start
             at /checkout/src/libstd/rt.rs:74
  33: main
  34: __libc_start_main
  35: _start
````
"11/06/20 11:52:57 PMMigrate from Travis CI to GitHub Actions"This removes all CI builds from travis-ci, due to their recent changes
in policy and harsh limitations on builds. With build times over 2
hours, it was a significant hindrance to development.

Instead of Travis CI, the CI is now split on Sourcehut and GitHub. Since
Sourcehut only supports Linux/BSD, all builds on those operating systems
are executed there. The GitHub Actions CI is used to build for
Windows/macOS, which are not available on Sourcehut.

Since asset deployment for releases requires builds on all platforms,
this is also done on GitHub actions. Though the new `upload_asset.sh`
script makes sure that migration in the future is fairly simple and we
do not tie ourselves to the overly complicated GitHub Actions ecosystem."1Fixed in #1402.chrisduerrChristian Duerr11/06/20 08:19:08 PMMove upload_asset script back to workflows1
438803/14/19 05:44:13 PMfreevovatmux in Alacritty"MacBook Pro (Retina, 13-inch, Late 2013)

I have the issue with tmux integration. It works fine for iterm2 but it doesn't for alacritty."11/07/20 05:17:33 AMFix config file formatting"The configuration file, especially the section documenting the different
binding actions, had some extremely long lines. All the text is now
reformatted to be at most 80 columns wide.

The only lines remaining which are beyond 80 columns wide are the
configuration bindings, which would significantly suffer from linebreaks
and are not plain text." =||= "That's great to hear, thanks for the update!

Closing this issue as resolved then!"chrisduerrChristian Duerr11/07/20 01:33:21 AM"Fix config file formatting

The configuration file, especially the section documenting the different
binding actions, had some extremely long lines. All the text is now
reformatted to be at most 80 columns wide.

The only lines remaining which are beyond 80 columns wide are the
configuration bindings, which would significantly suffer from linebreaks
and are not plain text."1
439007/02/18 10:03:05 PMChristian DuerrFix scrollback accessing indices out of bounds"There have been two instances of the scrollback trying to access indices
which were moved out of bounds due to new lines (`yes` command). These
have both been fixed.

The first instance was during semantic selection, since the logic of
limiting the selection start point was moved outside of `compute_index`,
it was necessary to add this to semantic selection too. Now semantic
selection, line selection and normal selection should all work without
crashing when new lines are shoving the selection out of bounds.

The other error was with the viewport being outside of the scrollback
history. Since the default is to keep the scrollback buffer at its
current position when new lines are added, it is possible that the
position the scrollback buffer is at is suddenly shoved out of the
visible area. To fix this the `display_offset` is now limited to always
be an allowed value.
If a single line of the viewport is moved out of the history now, the
viewport should move down a single line now, so only valid content is
displayed, with multiple lines this process is repeated.

This fixes #1400 and also fixes #1406."11/13/20 05:40:10 AMAdd ability to select text during search"This removes the restriction of not being able to select text while the
search is active, making it a bit less jarring of a UX when the user
tries to interact with the terminal during search.

Since the selection was used during vi-less search to highlight the
focused match, the normal match color is now inverted instead to allow
the user to still recognize the it." =||= I've benchmarked this PR just to make sure that the changes to the iterators would not have any negative effect and I wasn't able to measure any regressions, so this looks good to me.chrisduerrChristian Duerr11/13/20 02:23:23 AMFix tests1
439511/10/18 04:08:49 PMMatt KeelerGlutin 0.18 upgrade"Fixes #1756 
Fixes #1525
Fixes #1509
Fixes #1428
Fixes #1414 
Fixes #1382
Fixes #1358
Fixes #1345 
Fixes #1257 
Fixes #1146
Fixes #964 
Fixes #952
Fixes #210 
Fixes #71 

This compiles and after reviewing looks sane enough. However I am running into an issue where the text output of the terminal only shows up on the lower left quadrant of the whole window.

I figured I could go ahead and open this up as a work in progress to get some feedback and suggestions for what could have gone wrong."11/09/20 11:30:02 AMUpdate wayland-rs to 0.28.2"Fixes #4385.
" =||= https://github.com/tomaka/glutin/pull/1081 has merged 🎉 kchibisovKirill Chibisov11/09/20 09:25:27 AM"Update wayland-rs to 0.28.2

Fixes #4385."1
439607/01/18 08:20:30 PMMatthias Krügerremove remaining clippy lint annotations"We moved to ""cargo clippy"" in 5ba34d4f9766a55a06ed5e3e44cc384af1b09f65 and
removing them did not seem to cause additional warnings."11/10/20 01:36:20 AMFix github actions clippy job =||= Looks good! The diff is a lot more sensible now :D. Just waiting for travis to sign this off.chrisduerrChristian Duerr11/09/20 08:18:08 PMAdd --all-targets flag again1
439707/01/18 04:31:46 PMChristian DuerrFix clippy issuesI took out the clippy fixes from the #1387 PR, to be able to quickly merge these. This doesn't change any functionality but just fixes some newly introduced lints.11/13/20 02:22:29 AMFix use after free when dropping extra cell's data"Commit ec42b42ce601808070462111c0c28edb0e89babb added for
each cell a posibility to carry a pointer on it, thus
old code that was optimizing copying with 'ptr::copy' was
duplicating ""unique"" pointers ('Box'), which was resulting
in use after free, when trying to perform double free.

This commit fixes this issue by properly cloning cells
and also rewrites affected unsafe blocks in safe rust.
"1Looks good! The diff is a lot more sensible now :D. Just waiting for travis to sign this off.kchibisovKirill Chibisov11/12/20 09:44:38 PMs/line/row/1
439807/02/18 10:05:11 PMChristian DuerrSemantic selection behaving unexpectedly with wrapped lines on scrollback"I've noticed an interesting behavior with semantic selection in combination with linewraps. This issue consists of these two problems:

#### Live selection updating

Every time the user scrolls in the scrollback PR, the semantic selection is re-calculated. This leads to selection changing in combination with the problems caused by other issues.
This shouldn't be a huge issue though, but searching for semanatic escapes every time the user scrolls doesn't seem like a great idea for performance.

#### Selection across viewport borders

When the first line in the viewport is a line which wrapped from the previous line (which is outside of the viewport), the selection itself only goes to the beginning of the line, instead of wrapping to the line outside of the viewport. This can be observed by pasting the selection made. As soon as the user scrolls up now, the selection is updated.

#### Selection off-by-one
When double-clicking the last `e` in `""teee[...]est""`, the selection is displayed correctly (`teee[...]est`), however the text copied is `teee[...]est""`. This is only a problem whith linewraps, it doesn't happen if the word is a single line. The viewport is irrelevant here."11/10/20 03:47:50 PMFix sr.ht clippy job"This commit brings back '--all-targets' parameter for clippy,
which was accidentally removed in dae0145." =||= "I'm going to close this issue because the only problem left in scrollback right now is the live selection updating which doesn't have any effect on the user.

If desired it should be possible to change this behavior, however I'd like to hear from @jwilm why this is done the way it currently works instead of having the semantic selection immutable after the LMB is not held down anymore."kchibisovKirill Chibisov11/10/20 12:02:14 PM"Fix sr.ht clippy job

This commit brings back '--all-targets' parameter for clippy,
which was accidentally removed in dae0145."1
440107/02/18 10:11:25 PMMatthias Krügerenable clippy in font/copypasta crates"turned out regular ""cargo clippy"" would ignore these previously."11/10/20 07:33:47 PMAdd g++ to dependencies for build from source on Fedora"Fixes #4400." =||= "Hey, thanks for staying on top of clippy with these PRs! Looks great to me, I'll give this a spin later.

It might also make sense to pin nightlies for clippy, to make sure that `cargo` can always install it, however that would probably introduce some maintenance work of having to increase the pinned nightly whenever possible.

Alternatively just keeping it the way it is right now until clippy will fail nightlies again is an option. From what I've heard that should be a thing in the not too distant future."menealMatthew Neal11/10/20 06:18:37 PM"Add g++ to dependencies for build from source on Fedora

Fixes #4400"1
440507/07/18 11:51:00 PMNoneCtrl+{arrow key} does not jump word"First, let me say alacritty is great! I'm trying to fully make the switch. However, I'm running into an issue even with the default config. When I type `ctrl+left-arrow` or `ctrl+right-arrow`, I get `;5D` (left) or `;5C` (right). 

If I go into an Ubuntu 18.04 docker container, the problem goes away. 

Any suggestions?

Which operating system does the issue occur on?
OS X

If on linux, are you using X11 or Wayland?
"11/17/20 02:49:06 PMFix wide characters being cut off"Fixes #791."5"Just in case any zsh user happens to stumble on this like I did: it's not Alacritty, it's zsh. You have to bind the keys in `.zshrc`:

```sh
bindkey ""^[[1;5C"" forward-word
bindkey ""^[[1;5D"" backward-word
```

→ [StackExchange: Ctrl + left/right arrow keys issue](https://unix.stackexchange.com/questions/58870/ctrl-left-right-arrow-keys-issue)"kchibisovKirill Chibisov11/17/20 01:23:58 PMMerge branch 'master' into fix-wide-chars-rendering1
441209/18/18 03:35:36 PMHaakon Drewsunhandled osc_dispatch CursorShape - neovim cursor shape not working on some machines"Which operating system does the issue occur on?
Debian stretch on plasma

If on linux, are you using X11 or Wayland?
X11

Hi all!

I've got a strange problem. I'm using neovim with alacritty. The cursor shape changes correctly on *one* of my installs/machines, but not my three other debian stretch installs. 

I've tried everything from both neovim's and this issue tracker, as well as trying different versions and compiling neovim (and obviously alacritty) myself. I even copied the neovim and alacritty binaries around, but it always works on one machine and not the others. It must be something else on the systems which causes this, so I'm asking for advice here.

Note: Cursor shape changes successfully in other terminals, like konsole.

What other libraries are called by alacritty for which the versions might differ? What could be causing this? 

# Versions
* built via cargo, checkout alacritty-de74975f496aa2c0
* neovim, tried 0.2.2-3, 0.3.0 and master

# Expected behaviour
When launching `nvim -u NONE` in alacritty I press insert and expect the cursor shape to change.

# Actual behaviour
No cursor shape change.

# Alacritty output
Start nvim and entering/exiting insert mode a few times:
```
[Unhandled CSI] action='t', args=[8, 18, 89], intermediates=[]
[unhandled osc_dispatch]: [['5','0',],['C','u','r','s','o','r','S','h','a','p','e','=','0',],['B','l','i','n','k','i','n','g','C','u','r','s','o','r','E','n','a','b','l','e','d','=','0',],] at line 746
[unhandled osc_dispatch]: [['5','0',],['C','u','r','s','o','r','S','h','a','p','e','=','0',],['B','l','i','n','k','i','n','g','C','u','r','s','o','r','E','n','a','b','l','e','d','=','0',],] at line 746
[unhandled osc_dispatch]: [['5','0',],['C','u','r','s','o','r','S','h','a','p','e','=','1',],['B','l','i','n','k','i','n','g','C','u','r','s','o','r','E','n','a','b','l','e','d','=','0',],] at line 746
[unhandled osc_dispatch]: [['5','0',],['C','u','r','s','o','r','S','h','a','p','e','=','0',],['B','l','i','n','k','i','n','g','C','u','r','s','o','r','E','n','a','b','l','e','d','=','0',],] at line 746
[unhandled osc_dispatch]: [['5','0',],['C','u','r','s','o','r','S','h','a','p','e','=','1',],['B','l','i','n','k','i','n','g','C','u','r','s','o','r','E','n','a','b','l','e','d','=','0',],] at line 746
```"11/13/20 06:47:45 PMUpdate vte to 0.9.0 =||= "Closing this issue since the PR has been merged.

You're not actually running into the missing cursor escape issue @j605. Neovim will not try to reset the cursor shape if your `TERM` is set to `xterm-256color`, which Alacritty uses.

The only thing Alacritty could do about this, would be to make use of a custom terminfo, which has been explored here: #1491.

However there is a way to fix this, you can simply manually reset the cursor yourself when closing vim. Here's how I do it:
https://github.com/chrisduerr/dotfiles/blob/master/files/init.vim#L98-L99"chrisduerrChristian Duerr11/13/20 06:29:14 PMUpdate vte to 0.9.01
441401/19/20 02:49:47 PMKurtis NorwoodIs it possible to change how many characters can be selected for copy/paste?"When selecting text with my mouse, I'm able to select as many characters as I want, but only some actually get copied/pasted. It seems like I can only copy/paste ~766 characters. Is this configurable?

Which operating system does the issue occur on?
Mac OSX"11/15/20 01:38:47 PMBump development version to 0.7.0-dev4Was fixed in 12e211d82a1bdef4ffe70c74ee62bc56edfa7590chrisduerrChristian Duerr11/15/20 01:28:34 PMClarify changelog changes1
441607/03/18 04:35:14 PMWORLDofPEACEREADME.md: remove old comment about NixOS11/14/20 03:51:41 AMFix github releases tag pattern =||= Thanks for updating this! Looks good to me!chrisduerrChristian Duerr11/14/20 03:40:48 AMFix github releases tag pattern1
441707/06/18 02:33:22 PMChristian Duerr[Scrollback] Selection incorrect at right side of window"The selection PR brings improvements regarding selections by fixing one long-standing issue where the last column wouldn't be selected when the mouse leaves the right side of the window during a selection.

This has been fixed on the scrollback PR by checking if the mouse is outside of the window, however this does not help when the mouse is outside of the last cell, but still within the window. When the mouse hovers over the padding area, it will still unselect the last cell.

It is important to note that it will not be enough to check that the cursor's X position is greater or equal to `window_width - padding_x`, since there might be some additional padding around the grid when it does not perfectly fit the window size (which is pretty much always the case)."12/28/20 09:45:40 AMDraw cursor with rect renderer"This commit makes cursors being drawn via rects, thus it's always above
underlines/strikeouts. Also, since cursor isn't a glyph anymore, it
can't be obscured due to atlas switching during glyphs drawing.

Fixes #4404.
Fixes #3471."6Thanks for updating this! Looks good to me!kchibisovKirill Chibisov11/14/20 10:38:11 AM"Draw cursor with rect renderer

This commit makes cursors being drawn via rects, thus it's always above
underlines/strikeouts. Also, since the cursor isn't a glyph anymore, it
can't be obscured due to atlas switching while glyphs are rendered.

Fixes #4404.
Fixes #3471."1
441807/05/18 04:30:50 PMYijun ZhaoUpdate Cargo.toml debug value from integer to bool"Encounter following error on MacOS:
```shell
make app
cargo build --release
error: failed to parse manifest at `/Users/work/rust_workspace/alacritty/Cargo.toml`

Caused by:
  expected a value of type `bool`, but found a value of type `integer` for the key `profile.release.debug`
make: *** [alacritty] Error 101
```"11/14/20 06:48:24 PMLoad only necessary gl functions"This commit make 'gl::load_with' only load
symbols alacritty will actually use. Doing so
slightly improves compilation times, since the gl_bindings.rs
file size is reduced from 21K LoC to 2K LoC, and also the actual
loading by up to 20x, though the loading is usually sub millisecond
anyway.

I'm not sure if this one needs a changelog entry, since it's not really noticeable for the user." =||= The last nightly was from 2018-06-28, which I used for testing this. I'd definitely be interested in hearing from you again if this issue is still present when a new nightly releases. Until then I'd just assume that there was a temporary regression somewhere.kchibisovKirill Chibisov11/14/20 12:49:51 PM"Load only gl 3.3 functions

This commit makes 'gl::load_with' only load
symbols from the minimal OpenGL (3.3) version alacritty
aims to support. Doing so reduces the size of gl_bindings.rs
from 21K LoC to 11K LoC, and also the actual
loading by up to ~2x, thugh the loading is usually sub millisecond
anyway."1
442111/10/18 04:08:49 PMNoneHigh cpu usage and improper window display and positioning"Operating System - Linux, Wayland, Gnome 3.28.2

-- intro --
Hello I recently tried out alacritty on my desktop for the first time and installed the binary through cargo using rust stable 1.27 

-- problem one -- 
When launched, the alacritty window appears in the top left corner beyond the screen (unable to access titlebar to move the window) and the gnome activities area doesn't allow me to select it and displays it in the wrong position
![screenshot from 2018-07-04 23-11-59](https://user-images.githubusercontent.com/33026478/42285113-203b66b6-7fe1-11e8-92a6-4010b96dd0ee.png)
![screenshot from 2018-07-04 23-11-25](https://user-images.githubusercontent.com/33026478/42285117-22a3e6ee-7fe1-11e8-976c-ab9d21b93b4b.png)
 
-- problem two --
Alacritty appears to use 25% of the cpu, probably because the cpu usage is limited to one core
![screenshot from 2018-07-04 23-12-32](https://user-images.githubusercontent.com/33026478/42285214-6c2786b8-7fe1-11e8-8786-6e7f2a001c84.png)
 
"11/14/20 06:10:26 PMFeature gate 'image' when building without x11 feature"On Wayland there's no way to embed icon into the window,
thus there's no point in loading it when x11 feature is disabled.

I'd like to include into v0.6.0 to include with the massive feature gating, that was done for it."1This was fixed in https://github.com/Smithay/client-toolkit/commit/a1805b749dd4aa80d48159c52ddd907ddd6d6d28 which will be in https://github.com/jwilm/alacritty/pull/1403kchibisovKirill Chibisov11/14/20 02:34:56 PM"Feature gate 'image' when building without x11 feature

On Wayland there's no way to embed icon into the window,
thus there's no point in loading it when x11 feature is disabled."1
442207/06/18 02:30:38 PMChristian DuerrFix incorrect cell side in selection"Previously the cell side of a selection with the mouse outside of the
grid has been calculated by setting the `Side` to `Right` whenever the
`X` of the mouse is bigger or equal to `window_width - padding_x`.
However since the grid doesn't perfectly fit the window in most cases,
there was an additional few pixels where the `Side` would be `Left`,
resulting in the selection jumping around.

To fix this the additional padding due to not perfectly fitting window
size has been included in the calculation. The `X` position is now
checked to be bigger or equal to `width - padding_x - extra_padding_x`.

An important note is that this will need changing when the grid is
centered inside the window, so extra padding is split up evenly. Once
that change is merged the calculation required will be
`width - padding_x - extra_padding_x / 2.`.

This fixes #1412.

I've created this PR separate from the block selection one because
this is a fix for an already existing bug. This way it will be easier
to merge this PR without having to first get a finished version of
#1398 up and running."11/15/20 12:28:04 AMFix zerowidth chars on last column handling"This commit fixes the issue when zerowidth characters on the last
column were written one cell before.

Fixes #4227." =||= This was fixed in https://github.com/Smithay/client-toolkit/commit/a1805b749dd4aa80d48159c52ddd907ddd6d6d28 which will be in https://github.com/jwilm/alacritty/pull/1403kchibisovChristian Duerr11/15/20 12:15:50 AMFix changelog entry1
442607/05/18 10:32:23 PMArunav SanyalFont size rescales when dragged into a bigger monitor"Which operating system does the issue occur on?

Mac

The experience is very jarring. It would be nicer if alacritty consistently spawns in the same monitor screen it already is at, but that does not happen. "11/15/20 12:48:24 AMFix unused import warning"This fixes an unused import warning introduced with 198d3cb." =||= I think i figured out the issue. The homebrew formula for alacritty is referring to an outdated version. The correct one is put into Applications. chrisduerrChristian Duerr11/15/20 12:32:47 AM"Fix unused import warning

This fixes an unused import warning introduced with 198d3cb."1
443107/05/18 11:05:34 PMJoe WilmReplace runtime sizeof assertions with static asserts"Using the [static_assertions](https://github.com/nvzqz/static-assertions-rs) crate, we should replace cases of `debug_assert!(mem::size_of::<T>() == foo)` with static assertions. "11/16/20 04:07:38 PMAdd Alpine Linux build prereqsThis PR adds a list of dependencies to build Alacritty on Alpine Linux. =||= I think i figured out the issue. The homebrew formula for alacritty is referring to an outdated version. The correct one is put into Applications. ChandlerSwiftChandler Swift11/16/20 01:15:49 AMAdd Alpine Linux build prereqs1
443407/05/18 11:05:34 PMChristian DuerrReplace debug asserts with static_assertions"To check that transmutes will work correctly without having to rely on
error-prone runtime checking, the `static_assertions` crate has been
introduced. This allows comparing the size of types at runtime,
preventing potential silent breakage.

@jwilm do you think there are any other places where this could be introduced?
This is the only place where `mem::size_of` is used inside an assertion.
There also is no other instance of `transmute` that is unchecked outside of tests.

This fixes #1417."11/17/20 01:21:52 PMReduce number of GitHub Actions CI builds"By reducing the number of CI jobs for GitHub actions, it should be
possible to get a faster overview over the status of all CI jobs. While
this does increase the total build time of GitHub Actions by reducing
parallelization, it should still finish within the sourcehut CI times." =||= "Well I've never used the crate before and just wanted to check it out, then one thing led to another and here we are. :D

The commit message has been corrected, so things should be good now. I'm still waiting for a spellchecker which is as pedantic as `rustc`."chrisduerrChristian Duerr11/16/20 05:18:51 PMFix build script typo1
443508/30/18 08:34:01 PMChristian DuerrReplace runtime sizeof assertions with static asserts on scrollback"To enable compile-time checking of `debug_assert!(mem::size_of::<T>() == foo);` blocks, the crate `static_assertions` should also be introduced on the scrollback PR.

This change has already been introduced on the latest master with #1418 (#1417), so following along with this should make it easy for anyone to get started with this. I've tagged this issue as `easy` and `help wanted` to give new people a shot that might not be comfortable starting out with bigger issues, this should be something everyone is capable off.

To make this work [this](https://github.com/jwilm/alacritty/blob/07aaf05f7463a971e56de87e3b6b24e4153e5a98/src/grid/storage.rs#L232) is the place which needs to be changed.

If there are any questions feel free to comment on this issue or ask in the #alacritty irc on freenode."11/16/20 08:56:24 PMCreate alacritty-term-bigsur.svg"Adding a macOS Big Sur-style Alacritty icon.

Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage."11Thanks for the notification! Github doesn't auto-close unless a commit is merged to master. This is good to go though on scrollback.jdsimcoeJonathan Simcoe11/16/20 06:38:47 PM"Create alacritty-term-bigsur.svg

Adding a macOS Big Sur-style Alacritty icon."1
444104/30/20 04:56:33 PMNoneDisplaced Diacritics"occurs on macOS 10.13.5

# Basic Problem

Using `ls`, file names with diacritics in their name aren’t displayed correctly:
<img width=""184"" alt=""shifted diacritics"" src=""https://user-images.githubusercontent.com/6908653/42373769-338fae76-8116-11e8-9536-06b1e13a1736.png"">

However, this **only** occurs when a file has been (re)named with Finder. 

If I rename the corresponding files via `mv` to contain diacritics they are displayed correctly.
<img width=""193"" alt=""correct"" src=""https://user-images.githubusercontent.com/6908653/42374809-a6fecf74-8119-11e8-8c38-f8cb4e72b1d9.png"">

# Further Complications

**However**, I can’t use `mv` to just overwrite the current name:
<img width=""365"" alt=""renaming"" src=""https://user-images.githubusercontent.com/6908653/42375422-cd6e0db2-811b-11e8-8c75-941117a10c44.png"">

Here, I used `zsh`’s autocompletion, which renders the names correctly; typing the names by hand doesn’t work either. 

In order to make it work I *first* renamed the file to something else, and *then* renamed it back to the originally desired name. 

---

# Additional Info

I don’t know if this is relevant, but when I copy the file names in Finder and paste them in Alacritty it looks like this:
`a<0308>u<0308>o<0308>e<0301>c<0327>n<0303>`

Also, if I copy the incorrectly rendered file names from Alacritty and paste them in Finder (or elsewhere, even in other terminal emulators) they are rendered correctly again."11/19/20 01:15:35 AMFix vi mode terminal reset"Since the vi mode is unrelated to the terminal emulation itself, it
should not be reset during a `reset` to prevent unnecessary confusion.

This also prevents the search from switching from vi mode to vi-less
search without any indication to the user." =||= JetBrains Mono was partially fixed in JetBrains/JetBrainsMono@7445d1f0315a3d12c7cc77421593f8854c6794b2chrisduerrChristian Duerr11/18/20 08:57:12 PM"Fix vi mode terminal reset

Since the vi mode is unrelated to the terminal emulation itself, it
should not be reset during a `reset` to prevent unnecessary confusion.

This also prevents the search from switching from vi mode to vi-less
search without any indication to the user."1
444507/06/18 02:51:33 PMHenrik LarssonError building for macOs following instructions"Which operating system does the issue occur on?
macOs 10.13.4 (17E199)

Following the instructions on the make page for installing on macOs i get the following error after cloning:

```
D-MBP:alacritty D$ make app
cargo build --release
make: cargo: No such file or directory
make: *** [alacritty] Error 1
```"12/10/20 08:23:00 AMFix config import log calls"This removes the two separate missing config import log calls and
combines them into one. Since each log call acquires a separate log,
having two separate calls can cause problems with multithreading.
Handling everything in just one should prevent any other log from
showing up in between."1You'll need to [install the rust compiler toolchain](https://github.com/jwilm/alacritty#installing-rust-compiler-with-rustup). chrisduerrChristian Duerr11/19/20 03:12:12 PM"Fix config import log calls

This removes the two separate missing config import log calls and
combines them into one. Since each log call acquires a separate log,
having two separate calls can cause problems with multithreading.
Handling everything in just one should prevent any other log from
showing up in between."1
444607/09/18 05:40:08 PMJoe Wilm"Disable scroll buffer for ""alt"" Grid""The scroll history size for the alternative grid (used by fullscreen
apps such as vim and tmux) is now forced to zero. There are two
motivations for this change:

1. According to the literature, the alt screen should not have scroll
   history.
2. Reduce memory consumption by only allocating the single scroll
   history.

In the future, it may be desirable to support a configuration option to
enable a scroll buffer for the alt screen. By launching without this
feature, we can delay a decision about whether to officially support
this or not."11/19/20 03:45:14 PMLog into log file before stdout"This prevents the message from a newly created log file split other
messages." =||= "Yeah it probably makes sense to keep this in if we want to support this again in the future. Tracking this in an issue sounds like a good idea, so we could just check if people want it or not and if nobody ever complains we'd be able to close the issue and remove unneeded code?

If that sounds like a good idea, feel free to merge this. I've tested it on my machine and everything works flawlessly, so I don't think anything else is blocking this.

Is there anything you definitely want to get done before merging scrollback? From my perspective the current state of the PR looks good, even though I'd like to look at #1376 again. There also are still a few `TODO`s and comments which can be removed, so a cleanup is probably a good idea."kchibisovKirill Chibisov11/19/20 03:32:12 PM"Log into log file before stdout

This prevents the message from a newly created log file split other
messages."1
444707/13/18 09:12:50 AMFlorian BeeresHow to type umlaut on Mac OS?"Which operating system does the issue occur on? macOS High Sierra (it probably existed in prior macOS releases too)

In other apps I can type option + u followed by a character to type e.g., ü, ä or ö. It works in iterm and kitty, but in alacritty it just displays a normal u, a or o. I am using the default keybindings that come with alacritty. It occurs in alacritty proper, regardless of `tmux`, `vim`, or `neovim` usage.
"11/19/20 03:37:11 PMFix stdout log message order"This patch makes sure that the message for the creation of a log file is
always the first entry, before any other log file messages.

Since we initialize our log file dynamically, the message is printed as
soon as something is written to it. By making sure that we always write
to a file first and then try stdout, we can ensure that the log file is
always initialized before ever writing log messages to stdout."1@h-michael I had gotten that version from `cargo.toml` which was a bad idea and misleading for this ticket, sorry about that. Could very well be that I was using a really outdated version? I built it from source and now it's working just fine. Thanks!chrisduerrChristian Duerr11/19/20 03:34:10 PM"Fix stdout log message order

This patch makes sure that the message for the creation of a log file is
always the first entry, before any other log file messages.

Since we initialize our log file dynamically, the message is printed as
soon as something is written to it. By making sure that we always write
to a file first and then try stdout, we can ensure that the log file is
always initialized before ever writing log messages to stdout."1
444907/07/18 04:08:56 PM_kmzFlickering and dirty blocks in vim8.1"env:
Arch + x11 + i3wm

-----

The flickering looks just like https://github.com/jwilm/alacritty/issues/1084.
`set nolazyredraw` didn't help.

-----

During page scrolling:
![vokoscreen-2018-07-07_14-55-19](https://user-images.githubusercontent.com/17923071/42407875-de5cdc90-81f5-11e8-9db6-915012d1f715.gif)
It doesn't happen inside tmux."11/23/20 09:37:35 PMAdd support for `~/` in config imports"This allows the configuration file imports to start with `~/` and
resolve relative to the user's home directory.

There is no support for ~user/` or `$HOME/` or any other shell
expansion. However since paths relative to the home directory should be
sufficient for everything, this provides a very simple solution without
any significant drawbacks.

Fixes #4157."3"See #1376 for discussions about this topic. I've already posted a potential fix for this issue, I'm still unsure if there are any issues with this though.

So if you want to help out, the best action would probably be to run that patch and see if you find any issues with it. If you're already running scrollback anyways, this should be an improvement without any drawbacks.

**Edit:** Also, it's probably best to discuss this in #1376, since this is a duplicate. However looking at this issue it is possible that this is not actually a duplicate, if this is something separate please let me know, since I'm not able to reproduce this behavior."chrisduerrChristian Duerr11/23/20 01:26:51 AMGo into detail with docs1
445207/21/18 05:17:42 PMChristian DuerrScrollback cleanup"This rebases the scrollback PR on top of the latest master and resolves all merge conflicts.

It also fixes all existing clippy issues in the scrollback branch, two `allow`s have been added, I'd love some comment on those (see grid/mod.rs and row.rs).

This also removes `TODO`s that are not relevant anymore or already have tracking issues on github, there's only one `XXX` left in `storage.rs`, I'd also love to resolve this.

Unfortunately this is a bit messy since I've decided to merge master instead of rebasing to prevent errors and allow for a PR without having to rewrite the history. If desired I can separate the clippy and TODO fixes in a separate PR after scrollback has been rebased on top of the latest master.

This also fixes all the comments I've left on the scrollback PR."12/10/20 05:42:04 AMRender underline and strikeout rects in batches"tl;dr this makes `dense_cells` run 5x faster (from 40-50fps to 270fps on my machine). 

# Why
Current master renderer renders each rect in a separate draw call, which is fine if there's just a few of them. However, if there are *many*, as in e.g. `vtebench -b benchmarks/dense_cells`, it starts to get ugly.

Thankfully, rects conveniently come in bulk, so we might just render them in a single draw call, as this PR suggests.

# How
`RectRenderer` is introduced which encapsulates rect batch building and rendering. It has `draw` method to draw a vector of rects. For each rect in the vector two triangles and six total vertices are produced, each with its own copy of rect color. These vertices are written into `vertices` accumulation vector. When all rects have been processed, vertices data is uploaded to VBO and is rendered with `glDrawArrays`.
It is assumed that there won't be many calls to `RectRenderer::draw`, so it does not batch rects across `draw` calls. Each call will clear `vertices` buffer.
The buffer is not deallocated ever. Not touching allocator gives up to 3% perf improvement, while worst reasonable case will require just a few hundred kb of memory.

# Alternatives
- instancing. While it would certainly be more memory efficient (20 bytes vs 48 bytes per rect; these can be individually improved ~1.5x, though), it moves alacritty further away from being OpenGL ES 2.0-friendly.
- store rect data in texture(s) and sample it in vertex shader. This would make it almost as memory efficient as instancing, with the cost being in code complexity."13"See #1376 for discussions about this topic. I've already posted a potential fix for this issue, I'm still unsure if there are any issues with this though.

So if you want to help out, the best action would probably be to run that patch and see if you find any issues with it. If you're already running scrollback anyways, this should be an improvement without any drawbacks.

**Edit:** Also, it's probably best to discuss this in #1376, since this is a duplicate. However looking at this issue it is possible that this is not actually a duplicate, if this is something separate please let me know, since I'm not able to reproduce this behavior."w23Ivan Avdeev12/10/20 05:24:24 AMimprove code with this weird trick (thanks @chrisduerr)1
445407/10/18 06:54:22 PMRafael RUnable to build on macOS"Which operating system does the issue occur on?

macOS High Sierra

---

I am currently unable to build the binary on macOS.

<details>
 <summary>Full log</summary>

```sh
~/dev 
❯ cargo --version
cargo 0.24.0 (45043115c 2017-12-05)

~/dev 
❯ git clone git@github.com:jwilm/alacritty.git
Cloning into 'alacritty'...
remote: Counting objects: 5787, done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 5787 (delta 2), reused 3 (delta 0), pack-reused 5773
Receiving objects: 100% (5787/5787), 3.32 MiB | 7.35 MiB/s, done.
Resolving deltas: 100% (3907/3907), done.

~/dev 
❯ cd alacritty/

~/dev/alacritty master 
❯ make app
cargo build --release
   Compiling xdg v2.1.0
   Compiling cgmath v0.16.1
   Compiling libc v0.2.42
   Compiling dtoa v0.4.2
   Compiling void v1.0.2
   Compiling core-foundation-sys v0.5.1
   Compiling ansi_term v0.11.0
   Compiling linked-hash-map v0.5.1
   Compiling slab v0.3.0
   Compiling core-foundation-sys v0.6.0
   Compiling cfg-if v0.1.3
   Compiling lazycell v0.4.0
   Compiling bitflags v1.0.3
   Compiling byteorder v1.2.3
   Compiling foreign-types-shared v0.1.1
   Compiling utf8parse v0.1.0
   Compiling strsim v0.7.0
   Compiling unicode-xid v0.1.0
   Compiling unicode-width v0.1.5
   Compiling static_assertions v0.2.5
   Compiling termcolor v0.3.6
   Compiling serde v1.0.66
   Compiling block v0.1.6
   Compiling vec_map v0.8.1
   Compiling approx v0.1.1
   Compiling khronos_api v2.2.0
   Compiling ucd-util v0.1.1
   Compiling smallvec v0.6.1
   Compiling lazy_static v1.0.1
   Compiling itoa v0.4.1
   Compiling same-file v1.0.2
   Compiling bitflags v0.7.0
   Compiling fnv v1.0.6
   Compiling arraydeque v0.4.2
   Compiling stable_deref_trait v1.1.0
   Compiling slab v0.4.0
   Compiling lazycell v0.6.0
   Compiling regex v1.0.0
   Compiling quick-error v1.2.2
   Compiling safemem v0.2.0
   Compiling num-traits v0.2.4
   Compiling utf8-ranges v1.0.0
   Compiling unreachable v1.0.0
   Compiling yaml-rust v0.4.0
   Compiling log v0.4.2
   Compiling xml-rs v0.7.0
   Compiling foreign-types v0.3.2
   Compiling net2 v0.2.32
   Compiling filetime v0.1.15
   Compiling memchr v2.0.1
   Compiling rand v0.4.2
   Compiling iovec v0.1.2
   Compiling atty v0.2.10
   Compiling errno v0.2.3
   Compiling malloc_buf v0.0.6
   Compiling fsevent-sys v0.1.6
   Compiling textwrap v0.9.0
   Compiling proc-macro2 v0.4.6
   Compiling vte v0.3.2
   Compiling shared_library v0.1.8
   Compiling regex-syntax v0.6.1
   Compiling owning_ref v0.3.3
   Compiling walkdir v2.1.4
   Compiling humantime v1.1.1
   Compiling base64 v0.9.2
   Compiling thread_local v0.3.5
   Compiling log v0.3.9
   Compiling aho-corasick v0.6.4
   Compiling objc v0.2.2
   Compiling fsevent v0.2.17
   Compiling mio v0.6.14
   Compiling clap v2.31.2
   Compiling parking_lot_core v0.2.14
error[E0432]: unresolved import `std::sync::atomic::spin_loop_hint`
  --> /Users/rafaelrinaldi/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.2.14/src/spinwait.rs:14:5
   |
14 | use std::sync::atomic::spin_loop_hint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `spin_loop_hint` in `sync::atomic`

error: aborting due to previous error

error: Could not compile `parking_lot_core`.
warning: build failed, waiting for other jobs to finish...
error: build failed
make: *** [alacritty] Error 101
```
</details>
"11/22/20 01:20:05 AMIncrease font size in CSD decorations on Wayland"Winit changed the default font size for CSD from 17pt to 11pt, so
restoring it, since it's way too small.

Fixes #4443.
"3No problem, always happy to help out. :)kchibisovKirill Chibisov11/21/20 08:01:43 PM"Increase font size in CSD decorations on Wayland

Winit changed the default font size for CSD from 17pt to 11pt, so
restoring it, since it's way too small."1
445511/10/18 04:08:49 PMJames BunchmacOS no longer able to bind Command + Period"I'm on macOS. I just grabbed the latest code (7433f45ff9c6efeb48e223e90dd4aa9ee135b5e8) and built a fresh app via `make app`.

A previous keybinding of mine has stopped working. I had mapped `Command + Period` to send `\x03` as suggested by jwilm via freenode to match the default behavior of macOS's built-in Terminal app. With this latest code base the binding no longer works.

The character sequence in question works great when bound to any other key combination. I am unable to get `Command + Period` to bind to anything, be it my desired character sequence or any other characters or action.

```yaml
# used to work but no longer does
  - { key: Period,   mods: Command, chars: ""\x03""                        }

# works fine (Alt instead of Command)
  - { key: Period,   mods: Alt,     chars: ""\x03""                        }

# does not work - can't bind Command + Period to anything?
  - { key: Period,   mods: Command, action: IncreaseFontSize             }
```



"12/10/20 06:00:55 AMPrint multiline logs in one write call"Fixes potential split of multiline logs in the multithreaded context
by printing them in one write call.


Example of how it looks:

```
Created log file at ""/tmp/Alacritty-23566.log""
[2020-11-22 00:57:51.056463821] [INFO ] [alacritty] Welcome to Alacritty
[2020-11-22 00:57:51.056571680] [INFO ] [alacritty] Configuration files loaded from:
[2020-11-22 00:57:51.056571680] [INFO ]               ""/home/kchibisov/alacritty.yml""
[2020-11-22 00:57:51.056571680] [INFO ]               ""/home/kchibisov/.config/alacritty/alacritty.yml""
[2020-11-22 00:57:51.056571680] [INFO ]               ""/dev/null""
[2020-11-22 00:57:51.142588963] [INFO ] [alacritty] Device pixel ratio: 1
[2020-11-22 00:57:51.145890991] [INFO ] [alacritty] Initializing glyph cache...
[2020-11-22 00:57:51.176849642] [INFO ] [alacritty] ... finished initializing glyph cache in 0.030898353s
[2020-11-22 00:57:51.176949109] [INFO ] [alacritty] Cell size: 8 x 18
[2020-11-22 00:57:51.176981554] [INFO ] [alacritty] Padding: 4 x 3
[2020-11-22 00:57:51.177008465] [INFO ] [alacritty] Width: 800, Height: 600
[2020-11-22 00:57:51.178652058] [INFO ] [alacritty] PTY dimensions: Line(33) x Column(99)
[2020-11-22 00:57:51.180553903] [INFO ] [alacritty] Initialisation complete
[2020-11-22 00:57:51.197011645] [INFO ] [alacritty] Padding: 6 x 8
[2020-11-22 00:57:51.197082528] [INFO ] [alacritty] Width: 1268, Height: 1402
```"4Added this to the issues that get closed by #1403, thanks for the update @sodiumjoe.kchibisovKirill Chibisov12/10/20 05:43:20 AMMerge branch 'master' into fix-align-of-logs1
445907/11/18 06:29:36 PMIlkoSome UTF-8 symbols render incorrectly"Which operating system does the issue occur on? - macOS High Sierra
Alacritty:
<img width=""1440"" alt=""screen shot 2018-07-11 at 13 39 17"" src=""https://user-images.githubusercontent.com/1590773/42566624-d27dbb7a-850f-11e8-972f-491b5eedf484.png"">
Iterm:
<img width=""1440"" alt=""screen shot 2018-07-11 at 13 42 05"" src=""https://user-images.githubusercontent.com/1590773/42567110-67cfd644-8511-11e8-83e2-86a345f89eae.png"">

Here is my alacritty config file:
```
# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: true

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Monaco
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: Monaco
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Monaco
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 12.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # Scale the font size based on the monitor's DPI. This will lead to bigger text on HiDPI
  # screens and make reading text a little easier.
  scale_with_dpi: true

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    cursor: '0xffffff'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0xffffff'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0xffffff'

  # Dim colors (Optional)
  dim:
    black:   '0x333333'
    red:     '0xf2777a'
    green:   '0x99cc99'
    yellow:  '0xffcc66'
    blue:    '0x6699cc'
    magenta: '0xcc99cc'
    cyan:    '0x66cccc'
    white:   '0xdddddd'


# Visual Bell
#
# Any time the BEL code is received, Alacritty ""rings"" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  faux_scrollback_lines: 1

selection:
  semantic_escape_chars: "",│`|:\""' ()[]{}<>""

dynamic_title: true

hide_cursor_when_typing: false

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor_style: Block

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: ""alacritty"", args: [""-e"", ""vttest""] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: ""\x1bOH"",   mode: AppCursor   }
  - { key: Home,                    chars: ""\x1b[H"",   mode: ~AppCursor  }
  - { key: End,                     chars: ""\x1bOF"",   mode: AppCursor   }
  - { key: End,                     chars: ""\x1b[F"",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   chars: ""\x1b[5;2~""                   }
  - { key: PageUp,   mods: Control, chars: ""\x1b[5;5~""                   }
  - { key: PageUp,                  chars: ""\x1b[5~""                     }
  - { key: PageDown, mods: Shift,   chars: ""\x1b[6;2~""                   }
  - { key: PageDown, mods: Control, chars: ""\x1b[6;5~""                   }
  - { key: PageDown,                chars: ""\x1b[6~""                     }
  - { key: Tab,      mods: Shift,   chars: ""\x1b[Z""                      }
  - { key: Back,                    chars: ""\x7f""                        }
  - { key: Back,     mods: Alt,     chars: ""\x1b\x7f""                    }
  - { key: Insert,                  chars: ""\x1b[2~""                     }
  - { key: Delete,                  chars: ""\x1b[3~""                     }
  - { key: Left,     mods: Shift,   chars: ""\x1b[1;2D""                   }
  - { key: Left,     mods: Control, chars: ""\x1b[1;5D""                   }
  - { key: Left,     mods: Alt,     chars: ""\x1b[1;3D""                   }
  - { key: Left,                    chars: ""\x1b[D"",   mode: ~AppCursor  }
  - { key: Left,                    chars: ""\x1bOD"",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: ""\x1b[1;2C""                   }
  - { key: Right,    mods: Control, chars: ""\x1b[1;5C""                   }
  - { key: Right,    mods: Alt,     chars: ""\x1b[1;3C""                   }
  - { key: Right,                   chars: ""\x1b[C"",   mode: ~AppCursor  }
  - { key: Right,                   chars: ""\x1bOC"",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: ""\x1b[1;2A""                   }
  - { key: Up,       mods: Control, chars: ""\x1b[1;5A""                   }
  - { key: Up,       mods: Alt,     chars: ""\x1b[1;3A""                   }
  - { key: Up,                      chars: ""\x1b[A"",   mode: ~AppCursor  }
  - { key: Up,                      chars: ""\x1bOA"",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: ""\x1b[1;2B""                   }
  - { key: Down,     mods: Control, chars: ""\x1b[1;5B""                   }
  - { key: Down,     mods: Alt,     chars: ""\x1b[1;3B""                   }
  - { key: Down,                    chars: ""\x1b[B"",   mode: ~AppCursor  }
  - { key: Down,                    chars: ""\x1bOB"",   mode: AppCursor   }
  - { key: F1,                      chars: ""\x1bOP""                      }
  - { key: F2,                      chars: ""\x1bOQ""                      }
  - { key: F3,                      chars: ""\x1bOR""                      }
  - { key: F4,                      chars: ""\x1bOS""                      }
  - { key: F5,                      chars: ""\x1b[15~""                    }
  - { key: F6,                      chars: ""\x1b[17~""                    }
  - { key: F7,                      chars: ""\x1b[18~""                    }
  - { key: F8,                      chars: ""\x1b[19~""                    }
  - { key: F9,                      chars: ""\x1b[20~""                    }
  - { key: F10,                     chars: ""\x1b[21~""                    }
  - { key: F11,                     chars: ""\x1b[23~""                    }
  - { key: F12,                     chars: ""\x1b[24~""                    }
  - { key: F1,       mods: Shift,   chars: ""\x1b[1;2P""                   }
  - { key: F2,       mods: Shift,   chars: ""\x1b[1;2Q""                   }
  - { key: F3,       mods: Shift,   chars: ""\x1b[1;2R""                   }
  - { key: F4,       mods: Shift,   chars: ""\x1b[1;2S""                   }
  - { key: F5,       mods: Shift,   chars: ""\x1b[15;2~""                  }
  - { key: F6,       mods: Shift,   chars: ""\x1b[17;2~""                  }
  - { key: F7,       mods: Shift,   chars: ""\x1b[18;2~""                  }
  - { key: F8,       mods: Shift,   chars: ""\x1b[19;2~""                  }
  - { key: F9,       mods: Shift,   chars: ""\x1b[20;2~""                  }
  - { key: F10,      mods: Shift,   chars: ""\x1b[21;2~""                  }
  - { key: F11,      mods: Shift,   chars: ""\x1b[23;2~""                  }
  - { key: F12,      mods: Shift,   chars: ""\x1b[24;2~""                  }
  - { key: F1,       mods: Control, chars: ""\x1b[1;5P""                   }
  - { key: F2,       mods: Control, chars: ""\x1b[1;5Q""                   }
  - { key: F3,       mods: Control, chars: ""\x1b[1;5R""                   }
  - { key: F4,       mods: Control, chars: ""\x1b[1;5S""                   }
  - { key: F5,       mods: Control, chars: ""\x1b[15;5~""                  }
  - { key: F6,       mods: Control, chars: ""\x1b[17;5~""                  }
  - { key: F7,       mods: Control, chars: ""\x1b[18;5~""                  }
  - { key: F8,       mods: Control, chars: ""\x1b[19;5~""                  }
  - { key: F9,       mods: Control, chars: ""\x1b[20;5~""                  }
  - { key: F10,      mods: Control, chars: ""\x1b[21;5~""                  }
  - { key: F11,      mods: Control, chars: ""\x1b[23;5~""                  }
  - { key: F12,      mods: Control, chars: ""\x1b[24;5~""                  }
  - { key: F1,       mods: Alt,     chars: ""\x1b[1;6P""                   }
  - { key: F2,       mods: Alt,     chars: ""\x1b[1;6Q""                   }
  - { key: F3,       mods: Alt,     chars: ""\x1b[1;6R""                   }
  - { key: F4,       mods: Alt,     chars: ""\x1b[1;6S""                   }
  - { key: F5,       mods: Alt,     chars: ""\x1b[15;6~""                  }
  - { key: F6,       mods: Alt,     chars: ""\x1b[17;6~""                  }
  - { key: F7,       mods: Alt,     chars: ""\x1b[18;6~""                  }
  - { key: F8,       mods: Alt,     chars: ""\x1b[19;6~""                  }
  - { key: F9,       mods: Alt,     chars: ""\x1b[20;6~""                  }
  - { key: F10,      mods: Alt,     chars: ""\x1b[21;6~""                  }
  - { key: F11,      mods: Alt,     chars: ""\x1b[23;6~""                  }
  - { key: F12,      mods: Alt,     chars: ""\x1b[24;6~""                  }
  - { key: F1,       mods: Command, chars: ""\x1b[1;3P""                   }
  - { key: F2,       mods: Command, chars: ""\x1b[1;3Q""                   }
  - { key: F3,       mods: Command, chars: ""\x1b[1;3R""                   }
  - { key: F4,       mods: Command, chars: ""\x1b[1;3S""                   }
  - { key: F5,       mods: Command, chars: ""\x1b[15;3~""                  }
  - { key: F6,       mods: Command, chars: ""\x1b[17;3~""                  }
  - { key: F7,       mods: Command, chars: ""\x1b[18;3~""                  }
  - { key: F8,       mods: Command, chars: ""\x1b[19;3~""                  }
  - { key: F9,       mods: Command, chars: ""\x1b[20;3~""                  }
  - { key: F10,      mods: Command, chars: ""\x1b[21;3~""                  }
  - { key: F11,      mods: Command, chars: ""\x1b[23;3~""                  }
  - { key: F12,      mods: Command, chars: ""\x1b[24;3~""                  }
  - { key: Key6,     mods: Control, chars: ""\x1e""                        }
```

How can I fix this?"12/10/20 02:10:24 AMFix scrolling region performance with fixed lines at top and bottom1"Currently the only way to change the fallback fonts in Alacritty is to configure the system. There are already several issues which cover this topic though.

The most interesting one is probably #957. There's also #1397, #153, #1318 and various others. I'm going to close this issue because there's already many others which cover this topic and currently the thing to look forward to is definitely the font configuration RFC. Once that is implemented it will be possible to specify the exact fallback path inside of alacaritty.

There's also an issue to track the anti-aliasing issue which causes the `----` characters overlapping with each other, so that's also being tracked."chrisduerrKirill Chibisov12/09/20 08:20:12 PMMerge branch 'master' into fix_top_region_perf1
446310/01/18 12:06:06 PMkAldownterminal is not response after python pdb"debian 9
x11
tmux

try to run some services in python, and stop, using pdb
then hot-reload service (while debug is still stopped)
after that, you can not use this terminal.

Output works, but but input - not
"11/24/20 01:12:14 AMUpdate INSTALL.mdAlacritty avaible in official repo so I removed the mention of the copr repo. =||= "reset wont work
and it's repeats even in xfce4-terminal
I guess I need to investigate some time to find a problem source
sorry for misleading"ghostEverlastinggit11/23/20 06:17:59 PMUpdate INSTALL.md1
446611/24/18 09:43:24 PMMikhail NosovFlickering prompt string and window resize in tiling WM"* Which operating system does the issue occur on?
Ubuntu 16.04 amd64

* If on linux, are you using X11 or Wayland?
X11

If compare with gnome-terminal - cmd promt flickering much more often.
On gif in attach this is badly noticeable, but in fact the gnome terminal blinks once a second if you hold enter.

Also flickering when window resize (user WM bspwm).
It's possible to reduce flickering?

So that would be visually faster:
- Launch (the window is drawn for a long time. Just like the gnome-terminal speed)
- Less flickering everiwhere. With daily seating in the console (12h work) - it's very annoying
- Do not blink while resizing the window

![flickering](https://user-images.githubusercontent.com/3472810/42732595-fae6edbe-882c-11e8-8dff-ae8ecdf54553.gif)"11/24/20 12:00:24 AMFix CHANGELOG sections"Commit 2fd2db4 added one more 'Added' section during rebase,
thus merging it with existing one." =||= "Hello, it looks like the flickering is a duplicate of #869, this should be fixed with winit 0.15.1, so make sure you're up to date!

The other flickering might be related to the redraw-rate of Alacritty, if I had to take a guess Alacritty is redrawing while the text is being written, which causes a perceived ""flickering""."kchibisovKirill Chibisov11/23/20 11:48:25 PM"Fix CHANGELOG sections

Commit 2fd2db4 added one more 'Added' section during rebase,
thus merging it with existing one."1
446709/26/18 06:42:42 PMChristian DuerrFix selection of empty lines"When selecting multiple lines in Alacritty, there was an issue with
empty lines not being copied. This behavior has been chanaged so empty
lines should be correctly copied now."11/24/20 12:34:05 AMFix Cargo.lock"During 07cfe8b the regenerated Cargo.lock file was somehow missed.

¯\_(ツ)_/¯" =||= "Hello, it looks like the flickering is a duplicate of #869, this should be fixed with winit 0.15.1, so make sure you're up to date!

The other flickering might be related to the redraw-rate of Alacritty, if I had to take a guess Alacritty is redrawing while the text is being written, which causes a perceived ""flickering""."kchibisovKirill Chibisov11/24/20 12:20:33 AM"Fix Cargo.lock

During 2fd2db4 the regenerated Cargo.lock file was somehow missed."1
447111/14/20 04:07:44 PM袁野In (n)vim, the cursor block only covers first half of wide character"neovim+alacritty
![1](https://user-images.githubusercontent.com/52266/42740518-4bfd6184-88db-11e8-9c5a-312b3092eea5.png)

neovim+termite
![2](https://user-images.githubusercontent.com/52266/42675331-217bd8d2-86a6-11e8-8978-46c18a309287.png)
"11/24/20 04:39:14 PMFixed typo in INSTALL.mdInsallation --> Installation =||= This should work since 0.4.0 or maybe even earlier.ghostEverlastinggit11/24/20 03:11:00 PMFixed typo in INSTALL.md1
447507/16/18 08:42:08 AMAdrien LemaireMissing alacritty-completions.zsh file in aur alacritty-git package"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11 (i3 WM)

```
$ yay -Ql alacritty-git   
alacritty-git /usr/
alacritty-git /usr/bin/
alacritty-git /usr/bin/alacritty
alacritty-git /usr/share/
alacritty-git /usr/share/applications/
alacritty-git /usr/share/applications/alacritty.desktop
alacritty-git /usr/share/bash-completion/
alacritty-git /usr/share/bash-completion/completions/
alacritty-git /usr/share/bash-completion/completions/alacritty
alacritty-git /usr/share/fish/
alacritty-git /usr/share/fish/completions/
alacritty-git /usr/share/fish/completions/alacritty.fish
alacritty-git /usr/share/man/
alacritty-git /usr/share/man/man1/
alacritty-git /usr/share/man/man1/alacritty.1.gz
alacritty-git /usr/share/zsh/
alacritty-git /usr/share/zsh/site-functions/
alacritty-git /usr/share/zsh/site-functions/_alacritty
```

~Alacritty isn't working out of the box when installing on linux (window opened but prompt hangs forever). Will create other issues if I can figure it out~
EDIT: fixed by modifying the font in alacritty.yml"11/25/20 01:31:22 AMFix CI upload assets tag matching"The previous version would search for the last tag by matching the
beginning of the tag name. By explicitly searching for the trailing `""`
with grep, an exact tag match is now enforced.

Since releases like v1.2.3 always match the beginning of their RCs
(v1.2.3-rc4), this makes sure that the assets aren't pushed to the
previous release."1"If an aur package doesn't properly install the application, you should probably complain to the author of the aur package rather than Alacritty, since there's nothing we can do about this.

However, looking at the output, zsh completions for Alacritty are installed:
`alacritty-git /usr/share/zsh/site-functions/_alacritty`

If you have problems making completions work I'd recommend a zsh-related IRC or similar to help you out. From Alacritty's point of view there's nothing that can be done here, since we do provide completions and they do work properly when manually installed."chrisduerrChristian Duerr11/25/20 12:34:11 AM"Fix CI upload assets tag matching

The previous version would search for the last tag by matching the
beginning of the tag name. By explicitly searching for the trailing `""`
with grep, an exact tag match is now enforced.

Since releases like v1.2.3 always match the beginning of their RCs
(v1.2.3-rc4), this makes sure that the assets aren't pushed to the
previous release."1
447607/16/18 11:47:52 AMElfranneBuilding from git fails on Ubuntu 16.04 LTS"Which operating system does the issue occur on?
Ubuntu 16.04LTS

If on linux, are you using X11 or Wayland?
X11

I tried to install by following the instructions but the 
`cargo deb --install`
command fails:

```
cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```
Changing debug to ""true"" fixes the issue."11/28/20 01:01:21 AMDraw selection below Vi cursor when it's hidden1"If an aur package doesn't properly install the application, you should probably complain to the author of the aur package rather than Alacritty, since there's nothing we can do about this.

However, looking at the output, zsh completions for Alacritty are installed:
`alacritty-git /usr/share/zsh/site-functions/_alacritty`

If you have problems making completions work I'd recommend a zsh-related IRC or similar to help you out. From Alacritty's point of view there's nothing that can be done here, since we do provide completions and they do work properly when manually installed."kchibisovKirill Chibisov11/27/20 10:17:44 PMMerge branch 'master' into fix-blinking-cursor-on-selection1
447807/16/18 11:49:16 AMElfrannefix for  #1435see https://github.com/jwilm/alacritty/issues/1435 for more details11/25/20 10:49:20 PMRemove redundant CLI flags"This removes some of Alacritty's CLI flags since the same functionality
is provided by the `--option` flag now.

The removed flags are:
 * `--persistent-logging`
 * `--live-config-reload`
 * `--no-live-config-reload`
 * `--dimensions`
 * `--position`

Fixes #4246." =||= "I'm not sure if more information is necessary, upgrading your toolchain to the latest version of Rust should be a straight-forward step when a `Cargo.toml` field isn't recognized, after all automatic CI is building Alacritty on every commit, so it's unlikely that there is an actual error in the toml which prevents building.

And there is documentation for all settings in the `Cargo.toml` online, I don't think this is some kind of hidden feature. Having `debug = 1` isn't much different from having `lto = true` I'd say, the only difference is how far back you have to go until Rust doesn't recognize the compiler option anymore."chrisduerrChristian Duerr11/25/20 03:21:01 AM"Remove redundant CLI flags

This removes some of Alacritty's CLI flags since the same functionality
is provided by the `--option` flag now.

The removed flags are:
 * `--persistent-logging`
 * `--live-config-reload`
 * `--no-live-config-reload`
 * `--dimensions`
 * `--position`

Fixes #4246."1
448607/16/18 04:39:50 PMNoneUpdate README.mdFix for public github link.11/26/20 12:57:45 AMFix DoS caused by excessive CSI parameter values =||= Thanks for catching that!chrisduerrChristian Duerr11/26/20 12:04:55 AMFix DoS caused by excessive CSI parameter values1
449207/17/18 05:21:56 PMNelson YeungInstalling from cargo fails on Ubuntu 18.04"OS: Ubuntu 18.04 (Wayland)
Rust: 1.27.1

### Exact reproduction steps
I've not installed rust before, so all the commands below are exactly what I've done:
```sh
curl https://sh.rustup.rs -sSf | sh
git clone https://github.com/jwilm/alacritty.git
cd alacritty
cargo install cargo-deb
cargo deb --install
cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```
I am definitely on the latest version of rust:
```sh
$ rustup update
info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
info: checking for self-updates

  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.27.1 (5f2b325f6 2018-07-07)
```
This Linux machine is basically a clean install, since the only thing I've installed are `build-essentials`, `git`, `tmux` and `vim-gtk3`.

I see that #1435 is basically the same issue, but it was closed with no information and the user perhaps wasn't using the latest version."12/05/20 05:58:50 PM"Add ""PrefersNonDefaultGPU"" desktop entry key""A new Desktop entry key has been added recently (≃ May 2020) to ask for an application to run on a more powerful GPU, if possible.
See: https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html.

A per the doc:
""If true, the application prefers to be run on a more powerful discrete GPU if available, which we describe as “a GPU other than the default one” in this spec to avoid the need to define what a discrete GPU is and in which cases it might be considered more powerful than the default GPU. This key is only a hint and support might not be present depending on the implementation.""

This avoids the necessity to add `DRI_PRIME=1` in the Exec command."4@vanor89 Please see the INSTALL.md for instructions on building the cargo-deb. The instructions there should work.dvergeylenDaniel Vergeylen11/27/20 08:50:20 AMUpdate Changelog1
449409/28/18 08:59:51 PMJohn Krull"""error: linker `cc` not found"" on Ubuntu 18.04 LTS, using X11""On Ubuntu 18.04 LTS, using X11.

When installing alacritty via cargo 1.27.0 (1e95190e5 2018-05-27) I get the following error:
```
   Compiling cc v1.0.17                                                         
   Compiling bitflags v1.0.3
   Compiling pkg-config v0.3.11
   Compiling lazy_static v1.0.1
   Compiling khronos_api v2.2.0
   Compiling downcast-rs v1.0.3
error: linker `cc` not found
  |
  = note: No such file or directory (os error 2)

error: aborting due to previous error

error: Could not compile `khronos_api`.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `alacritty v0.1.0 (https://github.com/jwilm/alacritty#7cc9c11b)`, intermediate artifacts can be found at `/tmp/cargo-installxyENm0`

Caused by:
  build failed
```

I've tried a few things, like wiping out _~/.cargo_ and ensuring my `cargo` is up to date, but nothing I did seemed to help."11/27/20 07:21:39 PMAdd 'Reset' action to clear scrollback buffer and reset the terminal"The missing ability to reset the screen while another program is running inside the terminal was bugging me too.

See https://github.com/alacritty/alacritty/issues/3997
and https://github.com/alacritty/alacritty/issues/4199

This adds the Action ""Reset""."6"(I spent way too long on this page)

# Summary 

```
sudo apt install build-essential gcc cmake make zlib1g-dev libxcb-xfixes0-dev
cargo build -v --release
```

And if that doesn't work, check these:
```
cc --version
gcc --version
uname -a
lsb_release -a
alias
echo $PATH
ls -l /usr
rustup toolchain list
```"berkeleyincyuri11/27/20 06:44:43 PMAdd 'Reset' action to clear scrollback buffer and reset the terminal1
450107/19/18 09:42:59 PMBryce Fisher-FleigDocumentation Request - How to enable scrollback?"I'd like to propose a wiki with instructions for building a scrollback enabled version of alacritty. Periodically, I try to rebuild Alacritty and I always forget that the project does not include scrollback in master. My guess is that many other users of this project would also value a canonical way to get a scrollback-enabled build as well, but perhaps I'm mistaken.

(I'd much prefer to have a cargo feature for toggling scrollback support at compile time, but I realize that adds a lot of ongoing complexity that may be not desirable.)"11/29/20 08:15:26 PMAdd OpenConsole support for Windows"If the conpty.dll and OpenConsole.exe files from the Windows Terminal project are placed in the same directory as the alacritty executable they will be used instead of implementation provided by Windows.

This way you don't need to wait for new Windows releases to get bug fixes and new features.

Implements https://github.com/alacritty/alacritty/issues/3889, and using a more recent version of OpenConsole, fixes issues like bad mouse support https://github.com/alacritty/alacritty/issues/1663, curror issues, and probably much more.

In the future Alacritty could probably bundle the files with the release to make sure that a compatible version is used, but right now it's up to the user to compile the Windows Terminal project himself and copy the files."27"Ok! Adding this to master makes sense to me, especially if scrollback does
not impact performance for those wishing to opt-out.

Totally agree, a cargo feature for this would make the code much, much more
complex and a wee bit horrible.

I'll close out this issue.
"fredizzimoFred Sundvik11/29/20 06:39:40 PM"Add OpenConsole support for Windows

If the conpty.dll and OpenConsole.exe files from the Windows Terminal
project are placed in the same directory as the alacritty executable
they will be used instead of implementation provided by Windows.

This way you don't need to wait for new Windows releases to get bug
fixes and new features."1
451507/18/18 06:39:49 PMNoneUbuntu 18.04, missing asset for cargo dep --install"```
cargo deb --install
```
fails in Ubuntu 18.04 with
```
cargo-deb: unable to read asset to add to archive: <...>/alacritty/Alacritty.desktop
```"12/05/20 09:03:04 AMFix dimming of indexed colors"It seems like the list of colors might have changed a bit, leading to
indexed colors not being transformed into their dim colors correctly.

To prevent this from happening in the future, the dimming for colors in
the range `0..=7` is now performed by offsetting them from the
`NamedColor::DimBlack`. Since this is the first dimmed color, this
should always work as long as all dimmed colors are added in the correct
order." =||= Tested it and fix works.chrisduerrChristian Duerr12/04/20 03:45:28 AM"Fix dimming of indexed colors

It seems like the list of colors might have changed a bit, leading to
indexed colors not being transformed into their dim colors correctly.

To prevent this from happening in the future, the dimming for colors in
the range `0..=7` is now performed by offsetting them from the
`NamedColor::DimBlack`. Since this is the first dimmed color, this
should always work as long as all dimmed colors are added in the correct
order."1
451707/18/18 06:39:49 PMChristian DuerrFix 'cargo-deb' desktop file name"The desktop file was incorrectly spelled `Alacritty...` instead of `alacritty...`,
this has been fixed and it should now be possible to build debs using the
`cargo-deb` tool.

This fixes #1442."12/04/20 09:51:28 PMAdd Apple Silicon support"Updates alacritty to be compatible with the latest version
of winit, via the parallel pull in glutin:

https://github.com/rust-windowing/glutin/pull/1341

Of course, the dependency changes won't go in as-is. I'm
including them here in case anyone else wants to build
on an M1 in the meantime.

Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage." =||= Fixes build problem in Ubuntu 18.04. samdoironSamuel Doiron12/04/20 09:41:35 PM"Add Apple Silicon support

Updates alacritty to be compatible with the latest version
of winit, via the parallel pull in glutin:

https://github.com/rust-windowing/glutin/pull/1341

Of course, the dependency changes won't go in as-is. I'm
including them here in case anyone else wants to build
on an M1 in the meantime."1
452208/11/18 04:03:49 AMTuan Anh Tranissue with rbenv"Which operating system does the issue occur on?
macOS

If on linux, are you using X11 or Wayland?

I'm using zsh with oh-my-zsh. i installed rbenv via homebrew and add this line to my `.zshrc`

    eval ""$(rbenv init -)""

In iTerm2 or Terminal, it works as expected. However in Alacrity, i got `command not found: rbenv` error.
"12/06/20 03:47:01 AMNon-VI mode selections"# I added several new actions to non-vi mode:

- **SelectAddNextLine**
       Extend selection with the line above
- **SelectAddPreviousLine**
       Extend selection with the line below
- **SelectNextLine**
       Select line below the selection or below the cursor when there is no selection
- **SelectPreviousLine**
       Select line above the selection or below the cursor when there is no selection

The main problem that this PR solves: copying the example code from git push. 
![image](https://user-images.githubusercontent.com/12275699/101268904-02066780-3769-11eb-8aad-fe5b3d2bc3ac.png)

Yes, I can do this currently in VI mode, but it is easier to use my mouse, which I wanted to avoid.

**Any ideas about the default shortcuts?**
I wanted Ctrl+Alt+{Up, Down}, Ctrl+Alt+Shift+{Up, Down} but that didn't work, unfortunately. "9thank you. it works for me nowfxdaveDavid Biró12/06/20 01:31:06 AMUpdate Changelog with non-vi selections1
452411/14/18 09:15:52 PMNoneBuild and install instructions for Ubuntu/Debian in Readme"Information about prerequisites comes after build instructions raising unnecessary confusion. Before opening PR I wanted to confirm that there is no bigger idea behind current structure.
Also prerequisites missing gperf."12/06/20 05:35:43 AMsupport paste/paste_selection to search regex."Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage."1The instructions have been recently updated to structure everything a bit more clearly. That should hopefully resolve this issue.brianjcjjiangchengjun12/06/20 03:42:31 AMsupport paste/paste_selection to search regex.1
452507/19/18 11:00:53 AMAlfonsas CirtautasCargo-deb: unable to parse Cargo.toml (profile.release.debug)"    cargo deb --install    
    cargo-deb: unable to parse Cargo.toml
       because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`

https://github.com/jwilm/alacritty/blob/3dabb9783e13580ba283942d632c5469eca8956a/Cargo.toml#L61

I believe it expects a true/false value"12/06/20 05:45:55 PMsupport paste/paste_selection to search regex."Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage."2duplicate of #1438 brianjcjjiangchengjun12/06/20 03:42:31 AMsupport paste/paste_selection to search regex.1
453107/20/18 04:44:23 PMNonehome_dir function deprecated since rustc 1.29.0-nightly"OS:  
macOS Sierra(10.12.6)
active toolchain:
nightly-x86_64-apple-darwin
rustc 1.29.0-nightly (12ed235ad 2018-07-18)

Reproduce:

```bash
cd alacritty
make app
```

Output:
```bash
warning: use of deprecated item 'std::env::home_dir': This function's behavior is unexpected and probably not what you want. Consider using the home_dir function from https://crates.io/crates/dirs instead.
  --> src/main.rs:51:26
   |
51 |     env::set_current_dir(env::home_dir().unwrap()).unwrap();
   |                          ^^^^^^^^^^^^^
   |
   = note: #[warn(deprecated)] on by default
```

std::env::home_dir function has been deprecated since 1.29.0,  alacritty should follow the advice to replace it with `home_dir` function provided by [dirs](https://crates.io/crates/dirs ) crate. 
"12/08/20 11:58:35 AMFixes #4518 - copr pschyska/alacritty"I believe [an issue](#4518) was caused when an [alacritty terminfo file was added to ncurses-base](https://bugzilla.redhat.com/show_bug.cgi?id=1849974), which conflicts with an existing file in the [copr pschyska/alacritty package](https://copr.fedorainfracloud.org/oprs/pschyska/alacritty/).   (The file had previously been in ncurses-term.)

I removed the terminfo file and references to it in the rpm spec file."1Thanks for the feedback, going to merge this PR then!mikeslatteryMike Slattery12/07/20 01:44:01 AMFixes #4518 - copr pschyska/alacritty1
453607/23/18 04:48:28 PMDerek SiffordAdd support for dim foreground color"> Which operating system does the issue occur on? ==> **Arch Linux**
> 
> If on linux, are you using X11 or Wayland? ==> **X11**

Hello there.

To my knowledge, it appears that alacritty does not support the dim escape sequence (and associated color setting in alacritty.yml) for the foreground color.

Could this be added? Or if it exists, how do I adjust?

Thanks in advance.

"12/08/20 07:57:44 AMMan page: add path to Linux example config fileRefer to `/usr/share/doc/alacritty/example/alacritty.yml` in man page.2Just to clarify here: Dim colors in general work, it's only the dim (bright) foreground color that does not.marcospb19João M. Bezerra12/08/20 06:34:09 AMMan page: add path to Linux example config file1
453807/19/18 04:47:54 PMChristian DuerrRemove redundant dependency from deb build12/08/20 11:20:37 PMRemove alacritty.spec"Since Alacritty is now officially packaged by Fedora, it is no longer
necessary to provide this in the official repository."6Just to clarify here: Dim colors in general work, it's only the dim (bright) foreground color that does not.chrisduerrChristian Duerr12/08/20 04:14:02 PMRemove .copr makefile1
454007/20/18 06:03:37 PMChristian Duerr Switch from deprecated `std::env::home_dir` to `dirs::home_dir` This fixes #1447.12/08/20 02:07:50 PMDon't install custom terminfo on f33 or later"This fixes the rpmbuild for Fedora >=33. It uses the upstream ncurses terminfo (which added alacritty) instead of compiling with tic to prevent a file-conflict.
I also added Run-time-dependencies: freetype,fontconfig,libxcb, and fixed an issue with a directory remaining after package removal.

Arguably, the .copr and rpmspec could be removed here, as Fedora packages alacritty themselves now. I don't really see a reason to carry the copr, or the rpmspec around (other than 0.6 is not packaged yet, and 0.5.0 is broken in wayland), but that's for you to decide.

cc: #4518 " =||= @blueswhisper CI seems to approve of this, however nightly build is failing. If you have the time to test this it would be very helpful!pschyskaPaul Schyska12/08/20 11:58:36 AMDon't install custom terminfo on f33 or later. Declare some runtime dependencies. Add a missing %dir in %files1
454404/01/19 10:41:21 PMChristian DuerrAdd logo SVG"This adds the SVG files for the three different versions of the
Alacritty logo to the repository. The three variations are the logo with
scanlines, without scanlines and without background or scanlines.

To unclutter the root directory of the repository a bit, every file
which is just copied to the system during the build process has been
moved into the `extra` directory. This should clean things up a bit and
allowed renaming the completions a bit to make them comply with the
default naming scheme for completions for each shell by default.

This fixes #967.

This just adds the logos which were already shown off in #967.
The goal is primarily to start the process rather than having something
which is good to go the way it is right now."12/09/20 02:01:21 PMFix a deprecation warning discovered in the build"the image library has changed to_rgba to to_rgba8

hope this is at least a little helpful!

-Erik"2Ah okay, thanks for the update!erikhErik Hollensbe12/09/20 01:24:00 PM"Fix a deprecation warning discovered in the build

the image library has changed to_rgba to to_rgba8

Signed-off-by: Erik Hollensbe <github@hollensbe.org>"1
454607/23/18 04:48:28 PMRémi GardeOptional dim foreground color"Optional color for the dim foreground (`\e[2m`)
Defaults to 2/3 of the foreground color. (same as other colors)
Fixes #1448 

The option in `alacritty.yml` is in `colors.primary.dim_foreground`, to be in the same place as `bright_foreground`."12/23/20 10:28:42 PMDon't draw missing glyphs for zerowidth characters"This should prevent missing glyph symbols from zerowidth characters
obscuring normal glyphs."1"~Hey I just wanted to clarify for any people searching for the same reason I was. If the `draw_bold_text_with_bright_colors` is set to `false`, dim colors will never appear (just as bright colors never appear based on bolding or otherwise). Very few tools make use of the `^[[2m` bold code but they won't appear properly if you do not enable bold shown in bright colors.~

~I think a decent workaround if brighter bold colors are undesired is to just assign the bright colors with the exact same colors as regular colors.~

Edit: Ah crap. It looks like that's wrong. It's just tmux making the dim colors not work. 

OK. For macOS, out of the box you are likely to not have dim colors work when within tmux.

One way to fix this is with the `terminal-overrides` as explained [here](https://unix.stackexchange.com/a/234591/12497) but it is not the root of the problem. The real problem is as [this answer](https://unix.stackexchange.com/a/295765/12497) explains that the capability has to be specified in the terminfo. So I was able to resolve my problem of dim not working on macOS by adding ` dim=\E[2m,` to the end of my `tmux-256color-italic.terminfo` that I am using."kchibisovChristian Duerr12/23/20 09:23:39 PMFix code formatting1
454707/20/18 06:25:28 PMJohn KrullCan't shift-middle-click to paste into tmux"Occurs on Fedora 27 on X11.

Before I switched to alacritty, I could select text from another app (or the terminal itself) and then hold Shift and middle-click my mouse to paste the selection into tmux. It doesn't work with alacritty and I have no idea how to enable that functionality (if it even exists yet).

It does seem to work when not using tmux, but since this worked in a different terminal, I'm not sure if the problem lies within alacritty or my tmux."12/10/20 06:38:33 AMRemove live-shader-reload feature"Since live-shader-reload is generally unused and unmaintained, and could
only be used for debugging purposes, since it refers relative paths,
this feature was removed for the sake of simplicity." =||= @enizor, thank you! Your key binding completely fixed my problem. It even made it significantly better since now I don't need to hold Shift.kchibisovKirill Chibisov12/10/20 05:57:07 AM"Remove live-shader-reload feature

Since live-shader-reload is generally unused and unmaintained, and could
only be used for debugging purposes, since it refers relative paths,
this feature was removed for the sake of simplicity."1
455009/19/18 07:18:51 PMChristian DuerrHidden escape sequence"The `\e[8m` escape sequence should set the foreground color of the text to the background color. Currently this escape sequence is completely ignored.

**Note:** It is not enough to set the hidden color to be the exact same as the normal background color, since hidden text should also be hidden on different background colors.

See https://misc.flogisoft.com/bash/tip_colors_and_formatting for additional documentation."04/04/21 12:41:45 PMAllow for Commands to take visible or all text as input (Revived)"Fixes #1615.
See also #3709.

I adapted the original PR to avoid merge conflicts.
I also added basic parallelization using rayon as suggested by Chris [here](https://github.com/alacritty/alacritty/pull/3709#issuecomment-671103599). After that, I documented the code and made sure that the tests still pass."28@enizor, thank you! Your key binding completely fixed my problem. It even made it significantly better since now I don't need to hold Shift.Axelen123Axelen12304/03/21 12:26:44 PM"Allow for Commands to take visible or all text as input

Co-Authored-By: Matti Niemenmaa <matti.niemenmaa+git@iki.fi>
Co-Authored-By: Christian Duerr <contact@christianduerr.com>"1
455309/19/18 07:18:51 PMChristian DuerrInvert escape sequence incorrect"The command `echo -e ""Normal \e[101;91mTest \e[7mInverted""` will print `Inverted` with the default foreground color as background and the default background color as foreground.
The correct behavior would be to print it the same as `Test`.

This bug is due to the following code:
https://github.com/jwilm/alacritty/blob/master/src/term/mod.rs#L385-L389
"12/11/20 12:40:33 AMBump glutin to 0.26.0"Fixes #4530.
Fixes #4072.
Fixes #1927.

If you're aware what other issues we can close let me know, but I can't find anything specific." =||= I did not, but that's a great point, I'll throw that in too.kchibisovKirill Chibisov12/11/20 12:07:07 AM"Bump glutin to 0.26.0

Fixes #4530.
Fixes #4072.
Fixes #1927."1
455607/20/18 11:06:12 PMNonearrow keys not repeated when held down"Which operating system does the issue occur on?
Arch x64
If on linux, are you using X11 or Wayland?
Wayland

When pressed down, the arrow keys do not function as a repeated key. Instead, when pressed and held, they only issue one instance of the key. `Urxvt` performs this operation properly and `showkey` on Alacritty indicates that it's only receiving the key once.

Using the AUR alacritty-git package. Most recent update broke this feature."12/21/20 02:44:39 AMReplace serde's derive with custom proc macro"This replaces the existing `Deserialize` derive from serde with a
`ConfigDeserialize` derive. The goal of this new proc macro is to allow
a more error-friendly deserialization for the Alacritty configuration
file without having to manage a lot of boilerplate code inside the
configuration modules.

The first part of the derive macro is for struct deserialization. This
takes structs which have `Default` implemented and will only replace
fields which can be successfully deserialized. Otherwise the `log` crate
is used for printing errors. Since this deserialization takes the
default value from the struct instead of the value, it removes the
necessity for creating new types just to implement `Default` on them for
deserialization.

Additionally, the struct deserialization also checks for `Option` values
and makes sure that explicitly specifying `none` as text literal is
allowed for all options.

The other part of the derive macro is responsible for deserializing
enums. While only enums with Unit variants are supported, it will
automatically implement a deserializer for these enums which accepts any
form of capitalization.

Since this custom derive prevents us from using serde's attributes on
fields, some of the attributes have been reimplemented for
`ConfigDeserialize`. These include `#[config(flatten)]`,
`#[config(skip)]` and `#[config(alias = ""alias)]`. The flatten attribute
is currently limited to at most one per struct.

Additionally the `#[config(deprecated = ""optional message"")]` attribute
allows easily defining uniform deprecation messages for fields on
structs." =||= duplicate of #1257 chrisduerrChristian Duerr12/21/20 02:28:04 AMRefactor struct deserialization1
455807/25/18 09:05:50 PMTanujAlacritty crashes when printing errors without stderr available"Which operating system does the issue occur on?
Fedora 28
If on linux, are you using X11 or Wayland?
X11, bspwm with sxhkd

I initially encountered this bug when launching alacritty with a `sxhkd` binding. Usually, alacritty would behave as expected, but following a strange systemd-related event where messages like this would be generated,
```Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 226:0
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:67
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:71
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:73
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:72
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:70
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:68
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:74
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:65
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:76
Jul 21 14:36:27 f /usr/libexec/gdm-x-session[2021]: (II) systemd-logind: got pause for 13:66
```

I would get (after restarting sxhkd to regain keyboard input) this bug in alacritty. Gnome-terminal (launched from alacritty) would open nvim fine. Also, running alacritty from alacritty would allow the spawned alacritty to open nvim, and it would print ""Unhandled CSI"" errors into the terminal used to spawn it. (https://github.com/jwilm/alacritty/issues/857#issuecomment-405226776). 

Finally, I tried changing my `sxhkd` binding from `alacritty` to `alacritty > /dev/null`. This fixed the problem, and leads me to suspect that alacritty will crash if it needs to output these ""unhandled CSI"" errors without a stdout to print to. 

It is, however, also possible that this is an sxhkd bug in spawning alacritty. And there is certainly some problem with systemd-logind creating these pause messages during normal usage (not at lid close time). Sorry for the big mess, hopefully this is not too complicated to fix."12/11/20 02:35:43 PMINSTALL.md: update for Gentoo1"Related, https://github.com/rust-lang/rust/issues/24821 has the language discussion where the maintainers seem to suggest that mature programs should just eventually ignore the error.

https://github.com/vincentdephily/emlop/pull/4/files is an example of a way to fix this, by using writeln! with .unwrap_or(()) to suppress the panic."vitaly-zdanevichVitaly Zdanevich12/11/20 02:30:42 PM"INSTALL.md: update for Gentoo

Ebuild with specified dependencies already exists

https://github.com/gentoo/gentoo/tree/master/x11-terms/alacritty"1
456207/21/18 11:11:31 AMAlejandro RosasUnable to parse Cargo.toml"Hi,

I was trying to install alacritty on a ubuntu and after running `cargo install cargo-deb` I've got:

```
cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```

Which operating system does the issue occur on?
Ubuntu 16.04.1

If on linux, are you using X11 or Wayland?
X11
"12/14/20 12:22:17 AMFix live reload with broken yaml on start"Since the current behavior would just load the default configuration
file whenever the configuration file couldn't be loaded, the path was
not set to any value. As a result however, the live config reload
feature would not work with a broken yaml (one which cannot be
deserialized, not one with warnings).

If a configuration file has been specified, but the deserialization
still failed, the path is now preserved on the default configuration
file to make it possible to live reload a fix for the issue.

Fixes #4561."1"thanks @chrisduerr 
"chrisduerrChristian Duerr12/12/20 03:15:58 AM"Fix live reload with broken yaml on start

Since the current behavior would just load the default configuration
file whenever the configuration file couldn't be loaded, the path was
not set to any value. As a result however, the live config reload
feature would not work with a broken yaml (one which cannot be
deserialized, not one with warnings).

If a configuration file has been specified, but the deserialization
still failed, the path is now preserved on the default configuration
file to make it possible to live reload a fix for the issue.

Fixes #4561."1
456707/25/18 09:05:50 PMChristian DuerrIgnore errors when logger can't write to outputThis fixes #1457.12/13/20 02:59:31 AMFix cursor reports with mouse outside of window"Previously Alacritty would not report cursor escapes to the application
when a mouse button was held down and the mouse was moved. This prevents
applications like tmux from updating their selection.

Similarly to how windowing libraries keep reporting mouse events when
the left mouse button is held down over the window, the escape sequences
are now clamped to within the grid and reported to applications.

Fixes #4566." =||= "@expectocode `font` should never print anything directly to the user, since it's just a library used in the background. All instances of `(e)print` and `(e)println` inside of `font` are part of test code.

Thanks for being so thorough with checking this, I have forgotten about the subcrates, but it looks to me like this shouldn't be any issue."chrisduerrChristian Duerr12/13/20 02:29:23 AMRemove incorrect changelog entry1
456809/19/18 07:18:52 PMChristian DuerrAdd hidden escape sequence"This adds support for the `hidden` escape sequence `\e[8m`, which will
render the text as invisible.

This has also raised a few questions about the rendering of foreground
and background colors and their interaction with the different escape
sequences. Previously, Alacritty has oriented itself after URxvt, which
has some strange and unexpected behavior.

The new implementation of color inversion is modeled after XTerm, which
has a consistent pattern of always inverting the foreground and
background colors. This should hopefully lead to less confusion for the
user and a more consistent behavior.

A full matrix showcasing the new way Alacritty inverses text can be
found here:
https://i.imgur.com/d1XavG7.png

This fixes #1454 and fixes #1455.

@jwilm you've mentioned that things were implemented this way for a reason,
modeling Alacritty after URxvt and allowing transparency to work properly.
I'd be interested to hear what you think about the changes to color inversion,
I'd say this is a pretty clear improvement because it makes things a lot more
consistent."12/14/20 06:46:29 AMfix bad entry in .editorconfig fileReplace key `trim_trailing-whitespace` with the correct value: `trim_trailing_whitespace`. =||= Rebased and confirmed to be working using the included script. Everything should still be good.RayYHrayyh12/14/20 05:55:08 AMfix bad entry in .editorconfig file1
457709/20/18 03:24:27 PMOliver Fordchunkwm can't tile alacritty when decorations: false"Which operating system does the issue occur on? macOS 10.13.6

When using chunkwm and `windows/decorations: false`, alacritty appears as a small window that chunkwm is unable to move or resize.

This was reported for iTerm2 with no title bar in koekeishiya/chunkwm#92, and was resolved by upgrading iTerm. I assume therefore that this is not a chunkwm bug per se, but that there's something alacritty can do to not break it.

I've asked for more information in the above issue, as I don't know what the cause would be or how iTerm fixed it."12/17/20 02:49:59 AMFix cursor contrast for static cursor colors"Fixes #4576."3"i fixed this in https://github.com/jwilm/alacritty/pull/1241, but i stopped maintaining the branch after https://github.com/jwilm/alacritty/pull/1241#issuecomment-395887745

Once that merges, I'll probably also wait for https://github.com/jwilm/alacritty/pull/1403 to merge and rebase from there."chrisduerrChristian Duerr12/15/20 10:37:03 PM"Fix cursor contrast for static cursor colors

Fixes #4576."1
458007/21/18 05:37:14 PMChristian DuerrSupport modifiers for mouse bindings"Currently the `mouse_bindings` option in the configuration file does not support modifiers, it is only possible to bind mouse events to actions.

It would be useful to support things like ctrl+wheel up/down for resizing the font.
"12/17/20 01:05:41 AMFix invalid ESC escape sequence parsing"This strictens the ESC escape sequence parser to prevent invalid
intermediates from being ignored. Previously the parser would just look
at the first intermediate without validating that the rest of them is
empty.

If an escape like `\e(#0` is used now, it will no longer be accepted as
`\e(0` since the intermediate `#` is also present."3"i fixed this in https://github.com/jwilm/alacritty/pull/1241, but i stopped maintaining the branch after https://github.com/jwilm/alacritty/pull/1241#issuecomment-395887745

Once that merges, I'll probably also wait for https://github.com/jwilm/alacritty/pull/1403 to merge and rebase from there."chrisduerrChristian Duerr12/17/20 12:54:17 AMAdd changelog entry1
458107/21/18 05:37:14 PMChristian DuerrAllow specifying modifiers for mouse bindingsThis fixes #1462.12/17/20 12:52:04 AMIncrease file watcher delay on BSD"Since BSD does not support inotify polling in the `notify` crate and
instead relies on manual filesystem polling, this would cause a high CPU
usage at 100 polls a second.

A separate polling rate of once per second is now used for platforms
which do not support filesystem polling, allowing users to still make
use of live config reload on BSD.

Fixes #3871."1"i fixed this in https://github.com/jwilm/alacritty/pull/1241, but i stopped maintaining the branch after https://github.com/jwilm/alacritty/pull/1241#issuecomment-395887745

Once that merges, I'll probably also wait for https://github.com/jwilm/alacritty/pull/1403 to merge and rebase from there."chrisduerrChristian Duerr12/16/20 08:29:42 PM"Increase file watcher delay on BSD

Since BSD does not support inotify polling in the `notify` crate and
instead relies on manual filesystem polling, this would cause a high CPU
usage at 100 polls a second.

A separate polling rate of once per second is now used for platforms
which do not support filesystem polling, allowing users to still make
use of live config reload on BSD.

Fixes #3871."1
458207/22/18 12:44:14 AMChristian DuerrSwitch to rustup clippy componentThis should make the nightly clippy builds a lot more consistent.12/17/20 12:39:15 AMFix draining of PTY when holding on exitFixes #4189. =||= "i fixed this in https://github.com/jwilm/alacritty/pull/1241, but i stopped maintaining the branch after https://github.com/jwilm/alacritty/pull/1241#issuecomment-395887745

Once that merges, I'll probably also wait for https://github.com/jwilm/alacritty/pull/1403 to merge and rebase from there."chrisduerrChristian Duerr12/17/20 12:07:54 AMFix clippy warning1
458502/07/20 01:44:12 PMOkan EsenProper support for (un)hinding on macOS"After testing the latest changes in dbcb5885adb1f0b23c29838ef8dd837212322409 (#1281) I noticed, that I can't regain focus, or rather partially, of the Alacritty window after using the `CMD + H` keystroke.

~The first part shows the normal behavior and the second part, after the key stroke was pressed. You can also see, that the window action buttons also don't work anymore (keystrokes are still working though).~"12/17/20 12:15:18 PMFix crash due to clipboard not being properly released on Wayland1"@ovitente as @chrisduerr said, IRC is the best way to chat. I'm not always around, but there's usually someone there.

Otherwise you can scan issues and test PRs. We always need more eyes on more OSes. Thanks for your interest in helping out!"kchibisovKirill Chibisov12/17/20 11:56:08 AMFix crash due to clipboard not being properly released on Wayland1
459210/12/19 10:59:32 AMBigfootNSmall interval in responsivness"Hello,

I've noticed that when using neovim (I don't know about any other contexts) when moving the cursor to the bottom or up, when releasing the movement key, it takes a small amount of time before the cursor really stops. Is this the normal behaviour ?

Other than this everything is really smooth.

Some information:

OS: `archlinux`
kernel version: `4.17.6-1-ARCH`
alacritty version: `0.1.0`

I am using `X11`.

Thank you very much in advance"12/19/20 04:07:21 AMAdd separate mode for search bindings =||= No worries, thanks for the feedback. Wouldn't have noticed that this could be closed without you.chrisduerrChristian Duerr12/19/20 03:40:36 AMFix macos search bindings1
459607/24/18 02:00:53 PMJakub ArnoldAlt/Option on macOS don't act as meta, but insert special characters"**Which operating system does the issue occur on?** macOS 10.13.6 (17G65)

**If on linux, are you using X11 or Wayland?** N/A

In iTerm2 there's an option to turn off the default macOS behavior of Option, where for example `Option-b` inserts `∫`, instead of acting as ""move one word back"" as it would in a regular UNIX/Emacs setting. There is however the option to turn the Emacs behavior back on, as shown here (bottom right)

![image](https://user-images.githubusercontent.com/123374/43103524-acaf4cba-8ece-11e8-89b8-3823c20e8546.png)

Is there any such thing possible in Alacritty?

"12/20/20 04:27:09 AMAdd search history support"This adds a history to the regex search limited to at most 255 entries.
Whenever a search is either confirmed or cancelled, the last regex is
entered into the history and can be accessed when a new search is
started.

This should help users recover complicated search regexes after
accidentally discarding them, or handle repeated searches with the same
regexes.

Fixes #4095." =||= Yes, looks like it's the same issue. Thanks! I'll close this one.chrisduerrChristian Duerr12/20/20 04:06:18 AMAdd better search state documentation1
459807/25/18 07:46:46 PMMatthias Krügerfix a couple of clippy findings and run subcrate tests on travis12/20/20 07:57:04 AMFix embedded _NET_WM_ICON on X11"Previously the _NET_WM_ICON would use the .ico which was also used for
the Windows icon. This icon used the dimensions 256x256, but the maximum
supported image size is 192x192, so a new image with the dimensions
64x64 has been added.

Since we know the image format anyways, the `image` dependency could
also be easily replaced with `png`, which cuts out a few extra unused
dependencies." =||= Ok I re-removed ````copypasta```` testing on travis ci.chrisduerrChristian Duerr12/20/20 07:35:02 AM"Fix embedded _NET_WM_ICON on X11

Previously the _NET_WM_ICON would use the .ico which was also used for
the Windows icon. This icon used the dimensions 256x256, but the maximum
supported image size is 192x192, so a new image with the dimensions
64x64 has been added.

Since we know the image format anyways, the `image` dependency could
also be easily replaced with `png`, which cuts out a few extra unused
dependencies."1
460007/26/18 08:47:34 PMChristian DuerrFix trailing colors when leaving vim after resize"There is an issue where the terminal would use the template cell to fill
new space after resizing the terminal. However this leads to issues
since the template cell is not always empty and thus can create some
blocks of color appearing out of nowhere.

This should fix this problem by always initializing cells with the
default cell after resizing.

This fixes #1376."12/21/20 06:40:23 AMFix artifacts on macOS with transparent windows"Due to the way macOS draws shadows for transparent windows, resizing
them will lead to text artifacts remaining present after a window has
been resized.

The `invalidateShadow` call is used whenever the opacity isn't `1.0` to
make sure these shadows are cleared before redrawing, so no artifacts
remain when resizing transparent windows.

Fixes #889." =||= Ok I re-removed ````copypasta```` testing on travis ci.chrisduerrChristian Duerr12/21/20 06:29:21 AMFix code formatting1
460207/26/18 03:47:15 PMAngel PonsReplace runtime debug assertions with static asserts on scrollback.This change fixes #141912/22/20 02:38:51 AMRemove terminfo dependency"Fixes #4597 
"7Ok I re-removed ````copypasta```` testing on travis ci.brightly-saltyChristian Duerr12/22/20 02:10:39 AMUse macro for implementation1
460507/28/18 11:10:14 PMChristian DuerrMerge master into scrollback"Since there were some more changes in both scrollback and the master branch, this updates scrollback to include all changes made to master to make sure it can be cleanly merged whenever desired.

Since all issues on the scrollback branch seem to be resolved now, I'd probably recommend for this to be the last merge/rebase with master and not merge any other stuff on master unless some further problems with scrollback are found. That should prevent an endless 'master commit -> scrollback merge' cycle which is prone to introduce errors."12/22/20 04:25:44 AMDisable shadows for transparent windows on macOS"Commit 5725f58 introduced a performance regression on macOS due to
excessive calls to the `invalidateShadow` function, however calling this
function only on redraw after a resize was performed does not fix the
underlying problem.

As a solution, window shadows are now disabled completely for all
transparent windows. This makes sure there is no performance impact,
while still solving the problem with text artifacts on resize.

Fixes #4604."1Ok I re-removed ````copypasta```` testing on travis ci.chrisduerrChristian Duerr12/22/20 03:01:02 AMFix clippy warning1
461908/01/18 04:07:27 PMskyitachicompile failed on ubuntu 16.04"Which operating system does the issue occur on?
Ubuntu 16.04

Arch:
```shell
uname -a 
Linux skyitachi-thinkpad 4.13.0-45-generic #50~16.04.1-Ubuntu SMP Wed May 30 11:18:27 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
```
If on linux, are you using X11 or Wayland?
x11

some `cargo build` output:

```shell
/usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.so when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.a when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.so when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.a when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.so when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.a when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.so when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libdl.a when searching for -ldl
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.so when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.a when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.so when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.a when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.so when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.a when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.so when searching for -lfontconfig
          /usr/bin/ld: skipping incompatible /usr/lib/x86_64-linux-gnu/libfontconfig.a when searching for -lfontconfig
          /usr/bin/ld: cannot find -lfontconfig
```
it seems not found fontconfig

but fongconfig already installed by apt

```shell
sudo apt-get install fontconfig
[sudo] password for skyitachi: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
fontconfig is already the newest version (2.11.94-0ubuntu1.1).
0 upgraded, 0 newly installed, 0 to remove and 62 not upgraded.
```
I just post one typical error, other dependency like `freetype` `expat` even if pthread occur this error

I am curious for these  weried errors;("12/29/20 12:05:18 AMFix missing glyphs crash on WindowsFixes #4617. =||= my rustup toolchain was installed wrong, it should be `x86_64-unknown-linux-gnu`, not `i686-unknows-linxu-gnu`, reinstall rustup, it succeeds:)chrisduerrChristian Duerr12/28/20 07:51:16 PM"Fix missing glyphs crash on Windows

Fixes #4617."1
462010/16/18 12:15:56 AMNoneFont config doesn't seem to have an effect"OS: macOS High Sierra 10.13.6

I don't know if this is a config issue or just that it doesn't support some fonts, but I can't seem to have alacritty pick some of my fonts.
The portion of my config where I'm setting my fonts looks like this:
```
font:
  normal:
    family: Fira Mono
    style: Regular
```

I have tried setting Fira Mono, Fira Code, Menlo, Hack, Monaco and they are definitely not getting set. 
Also it doesn't seem to pick up the style (at least for those fonts), I tried Light, Italic, Bold, Regular, Medium and they all look the same as well.

Some other fonts do seem to work though, I tried Zapfino and Inconsolata just to make sure and it did work.

As for the version of alacritty I'm using, I'm not quite sure, but I checkout out the latest commits in master yesterday and I'm using that build now.

Am I doing something wrong? "12/29/20 08:05:20 PMUpdate Alacritty's description"Alacritty's description in the readme and manpage has always been a bit
overly aggressive in its marketing. This new updated text should more
accurately describe Alacritty's current state without pointlessly
agitating people." =||= I ran into this, but once I ran `alacritty -v`, the problem disappeared... chrisduerrChristian Duerr12/29/20 07:18:49 AM"Update Alacritty's description

Alacritty's description in the readme and manpage has always been a bit
overly aggressive in its marketing. This new updated text should more
accurately describe Alacritty's current state without pointlessly
agitating people."1
462307/28/18 10:51:04 PMNate HunzakerReplace `debug = 1` with `debug = true`"When I attempted to build for Debian stretch, I hit the following issue:

```
~/a/alacritty (master) 
$ cargo deb --install

cargo-deb: unable to parse Cargo.toml
  because: invalid type: integer `1`, expected a boolean for key `profile.release.debug`
```

Replacing the `1` with `true` seems to have fixed the issue!"12/29/20 11:47:54 PMFix image alt description =||= No problem, thanks for trying to help out. It's always appreciated! :)chrisduerrChristian Duerr12/29/20 11:34:16 PMFix image alt description1
463007/29/18 10:13:57 AMNoneError in Cargo.toml - unable to parse"Which operating system does the issue occur on?  **Linux Peppermint 9**

If on linux, are you using X11 or Wayland? **X11**

Fix:  Under Profile Release debug=, change ""1"" to true."01/01/21 05:19:04 AMAdd vi/search line indicator"This adds a new visual indicator which shows the position in history of
either the display offset during search, or the vi mode cursor.

To make it as unintrusive as possible, the overlay is hidden whenever
the vi mode cursor collides with its position.

Fixes #3984." =||= "This is a bug in cargo-deb, it has already been fixed and is going to be in the next release once an update to crates.io is pushed.

This is a duplicate of #1438, which also has some information on how to install the latest version of cargo-deb directly from github."chrisduerrChristian Duerr01/01/21 04:13:35 AMImprove method documentation1
463107/29/18 10:41:25 AMrdasFix profile.release.debug key typeChanged type from integer to boolean. Faced a type mismatch while trying to install alacritty from master.12/31/20 05:21:24 AMFix Wayland crash due to fontconfig"Fixes #4591." =||= "@jedahan It has, but since it has been sent so much I've temporarily changed the README to install the git version of `cargo-deb` and opened an issue with `cargo-deb` to bump the crates.io version.

Since then the crates.io version has been updated and I've changed back the readme to make use of the `cargo-deb` from crates.io. So this issue should not come up anymore."chrisduerrChristian Duerr12/31/20 01:24:43 AM"Fix Wayland crash due to fontconfig

Fixes #4591."1
463207/29/18 11:31:34 AMChristian DuerrEnable LTO in scrollback"LTO has been disabled in the scrollback branch because it was never confirmed that it actually improves Alacritty's performance, but it has a significant impact on compile times.

After testing LTO vs NO-LTO, I was able to benchmark significant and consistent differences with the alt-screen-random-write benchmark. Here are the results:

#### NO-LTO
```
cat benches/asrw.vte  0.00s user 1.33s system 27% cpu 4.785 total
cat benches/asrw.vte  0.00s user 1.31s system 27% cpu 4.756 total
cat benches/asrw.vte  0.01s user 1.29s system 27% cpu 4.754 total
cat benches/asrw.vte  0.01s user 1.31s system 27% cpu 4.798 total
cat benches/asrw.vte  0.00s user 1.32s system 27% cpu 4.759 total
cat benches/asrw.vte  0.00s user 1.32s system 27% cpu 4.804 total
cat benches/asrw.vte  0.01s user 1.32s system 27% cpu 4.793 total
```

#### LTO
```
cat benches/asrw.vte  0.01s user 1.35s system 30% cpu 4.527 total
cat benches/asrw.vte  0.00s user 1.30s system 28% cpu 4.529 total
cat benches/asrw.vte  0.00s user 1.33s system 29% cpu 4.572 total
cat benches/asrw.vte  0.00s user 1.34s system 29% cpu 4.569 total
cat benches/asrw.vte  0.00s user 1.32s system 29% cpu 4.521 total
cat benches/asrw.vte  0.00s user 1.32s system 29% cpu 4.513 total
cat benches/asrw.vte  0.00s user 1.32s system 29% cpu 4.562 total
```
"12/31/20 05:06:16 AMFix characters getting swallowed during IME input"This reverts 1d00883 since it is not necessary anymore after all search
bindings are now proper key bindings. This fixes a bug which would cause
the first character to be swallowed when using IME after triggering any
key binding which doesn't send any `ReceivedCharacter` event.

Fixes #4588." =||= "@jedahan It has, but since it has been sent so much I've temporarily changed the README to install the git version of `cargo-deb` and opened an issue with `cargo-deb` to bump the crates.io version.

Since then the crates.io version has been updated and I've changed back the readme to make use of the `cargo-deb` from crates.io. So this issue should not come up anymore."chrisduerrChristian Duerr12/31/20 04:47:30 AMAdd changelog entry1
463307/29/18 11:31:26 AMChristian DuerrEnable LTO"This has been disabled temporarily to improve compile times, however
there were some performance regressions caused by this change.

Since this only affects release compiles and performance is a high
priority for Alacritty, LTO has been enabled again.

This fixes #1478."12/31/20 05:33:58 AMAdd default binding to cancel search on Ctrl+CFixes #4612. =||= Great research here. Nice to finally have some numbers to back up this choice.chrisduerrChristian Duerr12/31/20 01:37:33 AM"Add default binding to cancel search on Ctrl+C

Fixes #4612."1
463509/17/18 08:28:24 PMSaul ShanabrookSupport clearing scroll-back bufferIt would be helpful to have a command that clears the scroll-back buffer (which was implemented in https://github.com/jwilm/alacritty/pull/1147) so you could associate it with a keybinding. On Mac, in Terminal and iTerm this is bound to CMD-K by default.12/31/20 05:52:46 AMUse ConfigDeserialize for all config enums"This fixes up all of the remaining enums which are used in the
configuration file to make sure they all support fully case insensitive
deserialization.

Fixes #4611." =||= This feature is currently implemented in #1500, which should be ready to merge.chrisduerrChristian Duerr12/31/20 01:54:46 AM"Use ConfigDeserialize for all config enums

This fixes up all of the remaining enums which are used in the
configuration file to make sure they all support fully case insensitive
deserialization.

Fixes #4611."1
463607/29/18 01:41:32 PMÁrni Dagur"Remove ""Why doesn't it support scrollback?"" section in FAQ in scrollback branch"Since scrollback is implemented on the scrollback branch, this section in the FAQ is redundant.01/15/21 08:48:31 AMShow IME composition preview on Windows"## Changes
* Fix IME composition preview not appearing on Windows
  * Although the [`set_ime_position`](https://docs.rs/winit/0.24.0/winit/window/struct.Window.html#method.set_ime_position)  is supported on Windows, it was disabled. So, it has been enabled.
<!--
* Add `cursor.ime_offset` option to set the position of IME composition preview
  * Originally, the IME composition position was one line down from the cursor position. As it is quite uncomfortable to input Hangul, a new option to set the offset is added.
-->

## Screenshots
[![Screenshot](https://i.imgur.com/QVUrDCE.png)
(Click here to play)](https://imgur.com/a/AdclGQ3)

## Tested On
* Windows 10 (1809) + (MS Korean Input, Google Japanese Input)
* ArchLinux + X11 + fcitx (Hangul, Mozc)"1Good catch, thanks for sending the PR!HelloWorld017Khinenw01/04/21 08:47:50 AMShow IME composition preview on Windows1
463709/18/18 08:21:00 PMDaniel EklöfTabstop documentation lacking terminfo mention"Which operating system does the issue occur on?
Linux

If on linux, are you using X11 or Wayland?
X11

On the scrollback branch, commit [23601fb](https://github.com/jwilm/alacritty/commit/23601fb), I'm seeing weird cursors jumps in Emacs 26.1. Note that this is a very (at the time of writing this) recent commit, where master was just merged).

The following two ways seem able to reproduce every time:

1. hit C-x-f (find file), at the suggested path (could be e.g. ~/, or /tmp), hit C-a. The cursor moves to the beginning of the path. So far so good. Now hit C-e. The cursor _should_ move to the end of the line, but in my case, it jumps forward a single character. After this, it appears the physical position of the cursor and the logical position is no longer synchronized, and hitting e.g. C-a again will move the cursor into the ""find file"" prompt (which should not be possible).

2. In an empty buffer (you could for example start Emacs with ""emacs /tmp/foo.txt""), type ""hello world"". At the second 'o' (as in, you've typed ""hello w""), the cursor jumps to the first 'o' (in ""hello""). If you continue typing, the cursor will jump back. But the resulting text will be ""hellr wo ld"".

I've tried with various settings for the TERM variable, with no improvements. The same steps to reproduce works (i.e. does not reproduce...) in multiple other terminals (xterm, st, konsole), meaning it _shouldn't_ be a problem with my Emacs setup or similar.

I've *also* verified the issue is still there when running Emacs without an init file (emacs -q)."01/01/21 05:07:40 AMRemove Windows WinPTY backend2"> It's implicated anyways that when something might break things and you change it, you shouldn't be surprised about breakage.

Sometimes people miss implicit things :)

That said, your version is much better. Being a programmer, I already hate write documentation, but not being a native english speaker (or writer) makes it so much worse.

I'll try to set up a PR ""soonish"" (as in, not today :) )"chrisduerrChristian Duerr01/01/21 04:33:40 AMFix code formatting1
464009/17/18 03:15:33 PMNathan LilienthalHandle RIS ANSI Control Correctly"I'm opening this issue while I'm working on #1480. Looking into how other terminals implement reset/clearings I came upon the `RIS` Reset to Initial State ANSI control sequence (`ESC c`). Alacritty seems to do mostly the correct thing, but the grid itself doesn't seem to be reset as intended.

To see this issue, fill you screen with some output.

```sh
date
```

Then trigger the `RIS`

```sh
echo -ne '\033c'
```

As an aside, I'm not sure exactly how `reset` and the `RIS` control are different."01/01/21 09:21:03 AMFix movement between matches in vi-less search"This resolves various bugs related to vi-less search. The primary issue
was that when jumping between matches more than 1000 lines apart, the
search would get stuck and not advance between matches properly due to
the 1000 line synchrosous search limit.

Some other issues related to the tracking of the search origin have also
been fixed, improving the viewport positioning while interacting with
the search outside of vi mode. This was done by keeping the search
origin outside of the viewport, which allows for search to start right
at the first character. Previously the search was on top of the first
character which lead to it being excluded from search.

Fixes #4626." =||= "> It's implicated anyways that when something might break things and you change it, you shouldn't be surprised about breakage.

Sometimes people miss implicit things :)

That said, your version is much better. Being a programmer, I already hate write documentation, but not being a native english speaker (or writer) makes it so much worse.

I'll try to set up a PR ""soonish"" (as in, not today :) )"chrisduerrChristian Duerr01/01/21 05:25:17 AMRemove useless branching1
464309/18/18 08:27:41 PMPhilipp SpiessSupport macOS Mojave Dark Mode"Which operating system does the issue occur on?

macOS 10.14

It would be great if we can support the system wide dark mode by changing the chrome around the window similar to what Terminal.app does:

**Terminal.app**

<img width=""697"" alt=""screen shot 2018-07-31 at 16 04 53"" src=""https://user-images.githubusercontent.com/458591/43464479-7f93002e-94db-11e8-8bae-04ea8206987d.png"">

**Alacritty**

<img width=""683"" alt=""screen shot 2018-07-31 at 16 04 54"" src=""https://user-images.githubusercontent.com/458591/43464484-81bba7d4-94db-11e8-8c3a-37db00407d29.png"">"01/02/21 02:30:53 AMFix deserialization of untagged enums"Fixes #4634." =||= @nixpulvis Yes that indeed worked 🙂 . I've just created a PR for that (#1486). Should have done the research earlier 🙈 Thank you all for being so responsive!chrisduerrChristian Duerr01/02/21 02:20:11 AMFix formatting1
464508/07/20 10:37:25 PMDaniel Eklöfbring 24-bit (aka truecolor) support up to date"Alacritty implements 24-bit colors through a semicolon-separated escape sequence (38;2;...). However, the preferred escape sequence is now colon-separated, with an optional color space argument prefixing the rgb arguments.

This is perhaps best described in the comment for the parse_extended_colors() function in xterm-333/charproc.c:

Note that xterm actually supports *three* variants: semicolor-separated, colon-separated, and a mixed version. It's unclear to me why it supports the third variant.

> Some background -
> 
> Todd Larason provided the initial changes to support 256-colors in July 1999.
> I pointed out that the description of SGR 38/48 in ECMA-48 was vague, and
> was unsure if there would be some standard using those codes.  His response
> was that this was documented (it turns out, in equally vague terms) in ITU
> T.416
> 
> Discussing this with Todd Larason in mid-1999, my point was that given the
> high cost of obtaining ITU T.416 (ISO-8613-6), the standard was not going
> to be effective (more than $100 then, more than $200 in 2012)
> 
> We overlooked the detail about "":"" as a subparameter delimiter (documented
> in 5.4.t2 in ECMA-48).  Some discussion in KDE in mid-2006 led Lars Doelle
> to discuss the issue with me.  Lars' initial concern dealt with the fact
> that a sequence such as
>  CSI 38 ; 5 ; 1 m
> violated the principle that SGR parameters could be used in any order.
> Further discussion (see KDE #107487) resolved that the standard expected
> that the sequence would look like
>  CSI 38 ; 5 : 1 m
> which still violates that principle, since the ""5:1"" parameter has to
> follow the ""38"" to be useful.
> 
> This function accepts either format (per request by Paul Leonerd Evans).
> It also accepts
>  CSI 38 : 5 : 1 m
> according to Lars' original assumption.  While implementing that, I added
> support for Konsole's interpretation of ""CSI 38 : 2"" as a 24-bit RGB value.
> ISO-8613-6 documents that as ""direct color"".
> 
> At the time in 2012, no one noticed (or commented) regarding ISO-8613-6's
> quirk in the description of direct color:  it mentions a color space
> identifier parameter which should follow the ""2"" (as parameter 1).  In the
> same section, ISO-8613-6 mentions a parameter 6 which can be ignored, as
> well as parameters 7 and 8.  Like parameter 1, parameters 7 and 8 are not
> defined clearly in the standard, and a close reading indicates they are
> optional, saying they ""may be used"".  This implementation ignores parameters
> 6 (and above), and provides for the color space identifier by checking the
> number of parameters:
>  3 after ""2"" (no color space identifier)
>  4 or more after ""2"" (color space identifier)
> 
> By the way - all of the parameters are decimal integers, and missing
> parameters represent a default value.  ISO-8613-6 is clear about that.

Furthermore, as of ncurses 6.1, the correct way to tell applications that the terminal supports 24-bit colors is by setting the terminfo setaf/setab capabilities. The Tc option is, as far as I can tell, obsolete. It is not used at all in any terminfo entries in ncurses 6.1.

The terminfo database provided with ncurses 6.1 defines a couple of ""features"" related to this: *xterm+direct*, *xterm+direct2* and *xterm+indirect*.

*indirect* corresponds to the escape sequence implemented by alacritty today, i.e. semicolon-separated.

*direct2* corresponds to the colon-separated version *without* the color space argument, and *direct* corresponds to the colon-separated version *with* the (optional) color space argument.

One can ""use"" these features to get the correct setaf/setab capabilities.

The alacritty.info file could/should be updated to use one of these definitions. As a first step, use the indirect version, and switch to the direct one if/when the colon-separated escape sequence is implemented.

FYI, I find the current alacritty.info to be a bit weird, in that it uses xterm-256color in the alacritty definition. If I set TERM to a non-256color entry, it's because _I don't want_ 256 colors...

I've been using the following replacement for some time now, with success. 24-bit support works in both vim and emacs.

```
alacritty| alacritty,
	use=xterm,

alacritty-256color| alacritty with 256 colors,
	use=xterm+256color, use=alacritty,

alacritty-direct| alacritty with direct-color indexing,
	use=xterm+indirect, use=alacritty,
```"01/02/21 05:18:56 AMColpsmanx"Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage." =||= "@starkovv Alacritty already provides truecolor support.

This issue is just about an alternative way to specify the truecolor format, which would require changes to the `ansi.rs` file. "colpshiftcolpshift01/02/21 05:13:35 AM02/01/2021 02:13 colps1
465009/18/18 08:27:41 PMPhilipp SpiessOpt-in to macOS Mojave Dark Mode"Fixes #1484

macOS 10.14 will bring a new system wide dark mode. To enable this, the [official guides][] suggest to relink using the newest OS. This approach, however, did not work for me as described in [an issue][] in the glutin repository.

As a second option, the accompanying `Info.plist` file can also overwrite the link-time check and enable dark mode rendering if the system config is set by setting `NSRequiresAquaSystemAppearance` to `YES`. This approach seems to work flawlessly no matter if a user opts into dark mode or not.

I would appreciate it if someone can test this on macOS 10.13 as well, but I suppose the key there is unused and would not break anything.

[official guides]: https://developer.apple.com/documentation/appkit/appkit_release_notes_for_macos_10.14_beta
[an issue]: https://github.com/tomaka/glutin/issues/1053#issuecomment-409315461"01/03/21 11:24:04 AMFix debug mode crash in vi-less search =||= Excellent! Thank you very much @suweller chrisduerrChristian Duerr01/03/21 10:36:15 AMFix debug mode crash in vi-less search1
465109/18/18 08:21:00 PMDaniel EklöfMention terminfo update is required when changing tabspaces"Changing tabspaces from the default (8) requires a corresponding
update to the `it` item in the terminfo entry used.

Some applications, like Emacs, rely on knowing the width of a tab, and
will experience unexpected behavior if the terminfo data does not
match the actual width used.

Closes #1482."01/03/21 11:04:52 AMUpdate vte to 0.10.0 =||= @chrisduerr chrisduerrChristian Duerr01/03/21 10:49:22 AMUpdate vte to 0.10.01
465408/03/18 10:12:23 PMChristian DuerrReset visible area when RIS is received"When running bash and executing `echo -ne '\033c'`, the terminal should
be cleared. However there was an issue with the visible area not being
cleared, so all the text previously printed would still remain visible.

To fix this, whenever a `reset` call is received now, the complete
visible area is reset to `Cell::default()` (the default Cell) and the
length of the available scrollback history is reset to `0`, which
results in the scrollback history being cleared from the perspective of
the user.

This fixes #1483."01/03/21 11:16:10 PMColps alacritty"Please make sure to document all user-facing changes in the
`CHANGELOG.md` file.

If support for a new escape sequence was added, it should be documented
in `./docs/escape_support.md`.

Since `alacritty_terminal`'s version always tracks the next release, make sure
that the version is bumped according to semver when necessary.

Draft PRs are always welcome, though unless otherwise requested PRs will
not be reviewed until all required and optional CI steps are successful
and they have left the draft stage."2Cool, looks like my PR will build upon this and implement `ESC[3J`, as well as potentially a `ClearHistory` action for a keybinding.colpshiftcolpshift01/03/21 11:13:03 PM03/01/2021 20:13 colps change branch1
465909/24/18 07:06:12 PMDaniel EklöfCreate a standalone terminfo definition"In #1485, it was suggested that the current alacritty terminfo definition, which is based around the system's `xterm-256color` definition, be replaced with a custom definition without any system dependencies. I.e. make it completely standalone.

For a complete background, see the following comments:

* https://github.com/jwilm/alacritty/issues/1485#issuecomment-409659033
* https://github.com/jwilm/alacritty/issues/1485#issuecomment-409673655
* https://github.com/jwilm/alacritty/issues/1485#issuecomment-409719745

The idea would be to start out with an xterm clone. That way, there will be no functional differences from the current definition."01/04/21 09:55:14 AMBump development version to 0.8.0-dev"This is only an update to the development version and does not represent
a stable release." =||= Cool, looks like my PR will build upon this and implement `ESC[3J`, as well as potentially a `ClearHistory` action for a keybinding.chrisduerrChristian Duerr01/04/21 09:26:42 AM"Bump development version to 0.8.0-dev

This is only an update to the development version and does not represent
a stable release."1
466010/18/20 10:57:42 PMJoe Wilminflux shell flashes constantlyFor whatever reason, this application causes frequent draws with partial state. Every key stroke seems to clear the current line, draw, and then draw the line including the new character. `influx` should do a better job at batching writes, but this is also on us to do a better job about giving a grace period before drawing.01/04/21 09:55:14 AMAdd colored underline support"Fixes #4142

Support colored underline, according to [kitty's protocol extension](https://sw.kovidgoyal.net/kitty/protocol-extensions.html#colored-and-styled-underlines). When a different underline color is specified, it stays the same under color inversion when selecting, but it follows the foreground color when it is not."13This is actually a duplicate of https://github.com/alacritty/alacritty/issues/598.Jesse-BakkerJesse Bakker01/04/21 12:12:14 PMAdd colored underline support1
466509/24/18 07:06:12 PMDaniel EklöfStandalone terminfo definition"This replaces the current alacritty terminfo definitions with three standalone variants; `alacritty`, `alacritty-256color` and `alacritty-direct`.

They are all completely standalone, meaning they do not use any definitions from the system's terminfo database.

They are based off of the corresponding xterm definitions from ncurses 6.1. I've kept the fragments as-is. This makes it easier to compare with the xterm definitions (and to pull in future changes/fixes from xterm). It does however make the file much more verbose and perhaps unnecessarily difficult to navigate. It might make sense to merge all the basic fragments into the `alacritty` definition.

I've removed all the fragment comments, since I felt they apply to xterm but not alacritty.

`infocmp` shows no differences between the new alacritty definitions and xterm's. I'm putting it up for others to try it out. @chrisduerr .

Closes #1489 

- [x] Remove fragmentation of terminfo
- [x] Rename alacritty-256color to alacritty
- [x] Set the default $TERM used by Alacritty to alacritty
- [x] ~Remove export TERM=""alacritty"" part from README~ (couldn't find anything like this anywhere)
- [x] Update documentation of TERM in alacritty.yml
- [x] ~Clean up/remove capabilities tic complains about.~
- [x] Update README.md"01/06/21 09:54:19 AMupdate Cargo.lock"Fixes #4664

Fixes the [AUR package](https://aur.archlinux.org/packages/alacritty-git/)

I just ran `cargo update --lock`, it's not a very involved PR 😁" =||= "https://lists.gnu.org/archive/html/bug-ncurses/2018-10/msg00024.html

https://invisible-island.net/ncurses/terminfo.src.html#toc-_Alacritty"awoimbeeArthur Woimbée01/06/21 09:37:51 AMupdate Cargo.lock1
467009/17/18 02:54:48 PMChristian DuerrBump version number to 0.2.0"Since the Scrollback branch introduces some major changes, this bumps
the version number from 0.1.0 to 0.2.0.

The versions of Alacritty have not been updated regularly to this point,
so the scrollback branch is a good point in time to start updating
Alacritty's version on a regular basis.

Further changes to the readme, like dropping the 'alpha' status and
updating it to 'beta' could also be introduced with this branch. This
way there will be a clean cut which updates everything as soon as
scrollback is merged.

Building versions is another thing which would be a good thing to start
reasonably quickly. However starting this on the main branch after
scrollback has been merged seems like a more reliable way to move
forward.

@jwilm Please let me know if you would prefer going a different way
about this. But it seems like the best point in time to make this change.

This fixes #1534.
This fixes #1240."01/07/21 05:19:38 AMFix inefficient search initialization"The creation of the renderable search iterator was doing a lot of work
even when absolutely no search is active at the moment. To resolve this
problem, an early return now makes sure that a search is active before
going through the trouble of creating an iterator for it." =||= "@FFY00 I completely agree with that sentiment and I think usually a rebase is a lot nicer than a merge. However with a change like that which basically completely rewrites large parts of the code and is developed in parallel to another branch, I find that the increased ugliness isn't too much of a price to pay for the less error-prone process.

When using rebase on two branches developed in parallel it's easy to lose track of which change is the correct one to 'pick', especially since rebase often prompts multiple times during the process and the decision which one should be picked might vary based on the intermediate steps that come up.

So with pretty much every other PR I'd go for rebase without a question. But after being lucky enough to catch a rebase issue before it was merged into scrollback, I'm staying a bit wary of using rebase on this PR."chrisduerrChristian Duerr01/07/21 05:03:21 AM"Fix inefficient search initialization

The creation of the renderable search iterator was doing a lot of work
even when absolutely no search is active at the moment. To resolve this
problem, an early return now makes sure that a search is active before
going through the trouble of creating an iterator for it."1
467109/06/18 02:50:04 PMSidney WijngaardeCannot Load User Font"Which operating system does the issue occur on?
MacOS

I'm using the following config to attempt to load a nerd font to no avail. How do I translate the name of the font with nested styles from font book to the name needed in the yaml configuration?
```yaml
font:
  # The normal (roman) font face to use.
  normal:
    family: Sauce Code Pro
    # Style can be specified to pick a specific face.
```
"01/07/21 05:32:07 AMRemove the GitHub pull request template"The template itself never provided much of a benefit and just causes
additional work for every single PR that is opened. That makes it easier
to just remind people after the PR was created than putting it in the
description so contributors always have to remove it."2Thanks for the heads up @sjug, closing as duplicate of #1474.chrisduerrChristian Duerr01/07/21 05:05:52 AM"Remove the GitHub pull request template

The template itself never provided much of a benefit and just causes
additional work for every single PR that is opened. That makes it easier
to just remind people after the PR was created than putting it in the
description so contributors always have to remove it."1
467508/05/18 10:15:11 PMMatthias Krüger"update deps via ""cargo update"" in order to fix crash in release mode: """"illegal hardware instruction (core dumped)"""01/10/21 09:24:10 AMAdd Oracle Linux 7 in install docI have successfully built alacritty from source in my Oracle Linux 7 machine by following RHEL 7 instructions1Thanks for the heads up @sjug, closing as duplicate of #1474.rohchakrRohit Chakraborty01/08/21 09:21:18 AM"Add Oracle Linux 7 in install doc

I have successfully built alacritty from source in my Oracle Linux 7 machine by following RHEL 7 instructions"1
467708/05/18 10:41:37 PMMatthias Krüger"update deps via ""cargo update"" in order to fix crash in release mode:"" ""illegal hardware instruction (core dumped)"""01/08/21 04:40:46 PMFix jumping between matches in reverse vi searchFixes #4676.4This one is for the scrollback branch.chrisduerrChristian Duerr01/08/21 04:21:25 PMFix variable naming1
468008/06/18 11:07:26 AMShehriyar QureshiFont not visible under some programs on specific themes"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11

I tried opening htop under solarized dark and dracula and both of these are not able to display some of the text. The text is fine on the default theme but for these two the problem exists. I've attached screenshots below if they'd be of some help :smile: 

![2018-08-06-120836_1366x1536_scrot](https://user-images.githubusercontent.com/40890226/43702764-32fe92c6-9974-11e8-8eea-72d30a896d05.png)
![2018-08-06-121353_1366x768_scrot](https://user-images.githubusercontent.com/40890226/43702765-333aab08-9974-11e8-88e5-044bf8778a22.png)


"01/09/21 05:05:26 PMEdit icon img srcCurrently the Alacritty icon is not visible in the Readme when viewed from pages other than the main Readme (ex: https://github.com/alacritty/alacritty/tree/master/alacritty or https://crates.io/crates/alacritty). This change should allow the image to load.2Ok I'm having some problems with other terminals too. Maybe the fault is somewhere else.atouchetAlex Touchet01/09/21 04:45:37 PMUpdate image URL1
468304/09/19 09:11:55 PMLiam DawsonUbuntu 18.04 missing dependency"If I do not install any GPU drivers or similar on Ubuntu 18.04 (just using built-in Nouveau support), and run in Wayland, I get the following error when starting `alacritty`:

```
Alacritty encountered an unrecoverable error:

	Error creating GL context; could not find libEGL: could not find libEGL
```
It worked after I installed the package `libegl1-mesa-dev` (not sure that's the most specific package). Also not sure if this is a Wayland specific issue, I'd have to uninstall that package and run in Xorg to be sure."01/22/21 12:52:39 PMCross compile macOS app for arm64 and x86_64"Here I'm adding cross compilation for arm64 and x86_64, and combining them into a [universal binary](https://developer.apple.com/documentation/xcode/building_a_universal_macos_binary) with lipo.

I also added installation of the targets in the release workflow. With these changes the app will run natively on both Intel and M1 Macs."20I also have this problem on Fedora, Wayland on Intel Graphics. I solved it by installing mesa-libEGL-devel.boukBouke van der Bijl01/22/21 12:20:51 PMUpdate CHANGELOG.md1
468908/07/18 08:03:29 PMMatthias Krügerfix -Zborrowck=migrate warnings."Found via
RUSTFLAGS=""-Zborrowck=migrate"" cargo check"01/11/21 12:42:07 PMfix assertion on 32-bit arch"Closes #4687, uses the actual size of usize rather than a fixed
constant." =||= "Thanks for your work with clippy and stuff like this btw, it's much appreciated. :+1: 

Can be hard sometimes to keep up with clippy on all the different branches that exist. :D"r-c-fr-c-f01/11/21 12:21:09 PM"Update CHANGELOG.md

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
469402/14/20 05:56:18 AMLasWayland session prevents alacritty spawning on X11 session"When logging into a second TTY and running a Wayland session from there, I can no longer run alacritty in my X11 session. It ends in a panic as such:

```
wl_drm@32: error 0: authenicate failed
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 71, kind: Other, message: ""Protocol error"" }', libcore/result.rs:983:5
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::panicking::default_hook::{{closure}}
             at libstd/sys_common/backtrace.rs:71
   2: std::panicking::rust_panic_with_hook
             at libstd/panicking.rs:227
             at libstd/panicking.rs:475
   3: std::panicking::continue_panic_fmt
             at libstd/panicking.rs:390
   4: rust_begin_unwind
             at libstd/panicking.rs:325
   5: core::panicking::panic_fmt
             at libcore/panicking.rs:77
   6: core::result::unwrap_failed
             at /checkout/src/libcore/macros.rs:26
   7: winit::window::<impl winit::WindowBuilder>::build
             at /checkout/src/libcore/result.rs:782
             at /home/las/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.1/src/window.rs:159
   8: glutin::GlWindow::new
             at /home/las/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.16.0/src/platform/linux/wayland.rs:23
             at /home/las/.cargo/registry/src/github.com-1ecc6299db9ec823/glutin-0.16.0/src/lib.rs:337
   9: alacritty::display::Display::new
             at src/window.rs:212
             at src/window.rs:234
             at /checkout/src/libcore/result.rs:691
             at src/window.rs:233
             at src/display.rs:140
  10: alacritty::main
             at src/main.rs:101
             at src/main.rs:59
  11: std::rt::lang_start::{{closure}}
             at /checkout/src/libstd/rt.rs:74
  12: main
  13:   ##__libc_start_main
  14: _start
```

I have not set the `WAYLAND_DISPLAY` environment variable, only `DISPLAY` is set.

If I run 2 Wayland sessions, I can still open alacritty in both.
Running the Wayland session within the X11 session does not allow alacritty to run in the X11 session, but instead opens it in the Wayland session.

I am using commit 1adb5cb7fc05054197aa08e0d1fa957df94888ab and installed it through `cargo install --git ...`

I am unsure on how to generate a coredump."01/12/21 01:51:33 PMAdd minimum OpenGL version to readmeFixes #4693. =||= this bug should be fixed upstream since v0.4.0 IIRCchrisduerrChristian Duerr01/12/21 01:39:15 PM"Add minimum OpenGL version to readme

Fixes #4693."1
469709/02/18 12:30:03 AMNathan LilienthalImplement `ansi::ClearMode::Saved`"The ANSI escape `CSI [n] J` where `n` is 0-3 clears various parts of the terminal screen. This implements `n = 3` to clear the ""saved"" buffer, which should just clear the scrollback history, and leave the contents displayed on the terminal alone.

This is part of the work done to fix #1480. My plan was originally to create a new action for this (you can see some of the code done for that here), but as I discovered the ANSI control for this I am now wondering if it should be a keybinding that somehow triggers a sequence of ANSI control codes. This seems to be something that you cannot currently do however. @chrisduerr linked me a relevant issue, but I can't seem to find it right now.

- [x] Decide on new action vs ANSI codes for keybinding
- [x] Cleanup dead code
- [x] Tests?"01/12/21 08:09:44 PMFix typo in README.md1Thanks for doing this. Looks exactly like what I thought it would. Let me just test it out on my setup.chrisduerrChristian Duerr01/12/21 07:58:25 PMFix typo in README.md1
469908/15/18 06:32:29 PMRyan LueFont size is extra extra extra large"Just compiled alacritty on Debian testing (buster), and when I opened it, the text was jumbo-sized. I have a laptop running the exact same OS where alacritty works perfectly, so I compiled against an older version, and it rendered just fine.

I went through the git log history, compiling various versions of alacritty until I found the culprit commit: 765949f.

Below is a screenshot of 765949f on the left and its parent (f7172fd) on the right:

![alacritty-comparison](https://user-images.githubusercontent.com/12194123/43883379-82c60546-9be5-11e8-818e-e6ba4821bffe.png)

These are, of course, on the same `alacritty.yml` config file, where `font:` has `size: 13.0`.

On KDE 5 / X11, FYI."01/17/21 11:22:07 AMUpdate shell completionsFlags removed in https://github.com/alacritty/alacritty/commit/07684281901b8d287221ade9b7c93a0f437a26f12"@MahanFathi Dude thank you so much, I was tinkering with X11 for an hour but wasn't able to fix this, but your solution worked.

Just add this to your alacritty.yml: 

env:
     WINIT_X11_SCALE_FACTOR: '1.0'
"ammgwsJason01/17/21 10:35:13 AM"Update extra/completions/alacritty.fish

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
471109/17/18 03:15:33 PMChristian DuerrGrowing Alacritty's window height should move the prompt"In other terminals like XTerm, Termite (VTE) and URxvt, the terminal prompt is moved when the window height is grown. This means that the distance of the prompt to the bottom of the terminal emulator will be shrunk by one line for every line the terminal emulator height is shrunk, but will always stay the same when the terminal window height is increased.

This means that if the terminal prompt is right at the bottom of the terminal and the window height is doubled, the number of lines that were already in the terminal will also be pulled out of the history and displayed, so twice the amount of content is now visible.

If the history is exhausted, then the prompt will not be moved anymore. So if the window height is doubled but there is no history, the prompt will not move.
"01/18/21 11:17:05 AMFix dead Alacritty talk link in readme =||= "@MahanFathi Dude thank you so much, I was tinkering with X11 for an hour but wasn't able to fix this, but your solution worked.

Just add this to your alacritty.yml: 

env:
     WINIT_X11_SCALE_FACTOR: '1.0'
"chrisduerrChristian Duerr01/18/21 11:04:57 AMFix dead Alacritty talk link in readme1
471409/17/18 09:37:01 PMAlexander SchlarbGive zsh completion file the correct name when installing with `cargo deb --install`01/24/21 09:45:37 PMMove renderable cell transformation to alacritty"This refactors a large chunk of the alacritty_terminal API to expose all
data necessary for rendering uniformly through the `renderable_content`
call. This also no longer transforms the cells for rendering by a GUI
but instead just reports the content from a terminal emulation
perspective. The transformation into renderable cells is now done inside
the alacritty crate." =||= FYI, I've updated https://github.com/jwilm/alacritty/wiki/Installation with the same changes I made to `README.md`.chrisduerrChristian Duerr01/24/21 03:16:37 AMFix documentation1
471708/13/18 04:01:24 PMNonecrash on long escape sequence"     printf ""\033[32;32;32;32;32;32;32;32;32;32;32;32;32;32;32;32;32m""

Which operating system does the issue occur on?

Mac OS X 10.11 with some old version of alacrity (6debc4f3351446417d0c4e38173cd9ef0faa71d5), also confirmed on IRC channel.

(Other terminals support (or at least do not crash, some of them) such stupidly long sequences and stop displaying color changes after... some number of iterations.)"01/19/21 09:19:37 AMfeat(env): add TERM_PROGRAM as env var, to be able to find out in wha…"…t terminal things are running

this PR adds the provisioning of the env var `TERM_PROGRAM` as it is used and sometimes needed by other programs on macOS.

I going to need this in order to stream line the window id identification used for [t-rec-rs](https://github.com/sassman/t-rec-rs).

Also I found other cases where this sort of thing was added like [this one e.g. on vscode](https://github.com/microsoft/vscode/commit/9c82ae899c79de07413af7cdbe262dbe4550abd0)"3Also reopening since it hasn't been merged upstream yet. Github doing weird things with auto-closing issues right now.sassmanSven Assmann01/19/21 12:00:33 AMfeat(env): add TERM_PROGRAM as env var, to be able to find out in what terminal things are running1
471808/15/18 08:10:00 PMChristian DuerrScroll visible area when growing window"Since Alacritty never had any scrollback history, the behavior when the
window height was increased was to just keep the prompt on the same line
it has been before the resize. However the usual behavior of terminal
emulators is to keep the distance from the prompt to the bottom of the
screen consistent whenever possible.

This fixes this behavior by loading lines from the scrollback buffer
when the window height is increased. This is only done when scrollback
is available, so there are only N lines available, the maximum amount of
lines which will be loaded when growing the height is N. Since the
number of lines available in the alternate screen buffer is 0, it still
behaves the same way it did before this patch.

Different terminal emulators have different behaviors when this is done
in the alt screen buffer, XTerm for example loads history from the
normal screen buffer when growing the height of the window from the
alternate screen buffer. Since this seems wrong (the alt screen is not
supposed to have any scrollback), the behavior of Termite (VTE) has been
chosen instead.

In Termite the alt screen buffer never loads any scrollback history
itself, however when the terminal height is grown while the alternate
screen is active, the normal screen's scrollback history lines are
loaded.

This fixes #1502."01/25/21 10:59:42 AMallow copying urls on right click"Adds support for copying URLs by right mouse click (as suggested
in #4063). Configured with a new url option, right_click_copy, which
defaults to false.

changelog entry

This doesn't address some of the suggestions for further enhancement in that issue, like setting actions for arbitrary sets of modifiers, but it works quite well for me while being fairly unobtrusive." =||= "Thanks for implementing this! It was definitely on my wish list; glad we'll have it for launch.

You write the best commit messages, btw."r-c-fRyan Farley01/25/21 02:41:48 AM"allow copying urls on right click

Adds support for copying URLs by right mouse click (as suggested
in #4063). Configured with a new url option, right_click_copy, which
defaults to false.

changelog entry"1
471909/17/18 11:34:56 PMMatthias Krüger"set_locale_environment(): use String::new() instead of String::from("""")."They behave identical except for String::new() not allocating anything.01/21/21 07:45:34 PMRun bench tests during CIWhile looking into packaging alacritty for Debian, I noticed that the bench tests didn't compile.  In order to avoid that, this PR adds those to CI and fixes the issues that were discovered by doing so.5"Thanks for implementing this! It was definitely on my wish list; glad we'll have it for launch.

You write the best commit messages, btw."jamessanChristian Duerr01/21/21 09:18:57 AMRemove all rustc benchmarks1
472608/14/18 12:44:05 PMJohn KnutsonUpdate readmetrying to trigger drone01/22/21 12:42:02 PMUpdate macOS icon for Big Sur"I created this by using @jdsimcoe's figma link: https://www.figma.com/file/CI8Keod1I0OBlslWjMSiVE/Alacritty-Icon-for-macOS-Big-Sur/duplicate and then performing the following steps:

1. Export and download a zip file by clicking on the icon and then pressing 'Export icon' in the bottom-right corner
2. `unzip -d alacritty.iconset ""~/Downloads/Alacritty Icon for macOS Big Sur (Copy).zip""`
3. `iconutil -c icns alacritty.iconset -o extra/osx/Alacritty.app/Contents/Resources/alacritty.icns`

This PR doesn't introduce any extra files or clutter, so I think it should make everyone happy 😄

Before:

<img width=""365"" alt=""Screen Shot 2021-01-22 at 13 23 38"" src=""https://user-images.githubusercontent.com/97820/105490797-9eeb7880-5cb5-11eb-914c-b1ee8cc8203b.png"">

After:

<img width=""365"" alt=""Screen Shot 2021-01-22 at 13 23 07"" src=""https://user-images.githubusercontent.com/97820/105490814-a3b02c80-5cb5-11eb-8b92-b3bbf939a7a6.png"">"8"Thanks for implementing this! It was definitely on my wish list; glad we'll have it for launch.

You write the best commit messages, btw."boukBouke van der Bijl01/22/21 12:37:49 PMUpdate CHANGELOG.md1
472711/10/18 04:08:49 PMNiklas DusenlundI3 incosistent dpr"Which operating system does the issue occur on?
Linux, WM: I3

If on linux, are you using X11 or Wayland?
X11

I can't reproduce it with the #1403 glutin upgrade. I thought I might report it anyway for future reference.

Sometimes when I launch alacritty I get a DPR of 1 and sometimes 1.666. It happens both if I launch it from dmenu and if I launch it from another terminal. It only happens on my external screen. I tried but can't reproduce it on the laptop screen. I'm not sure what the correct DPR should be..

# External screen

* 1920x1200
* 24""

```
$ alacritty -vvv
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.yml
device_pixel_ratio: 1.6666666
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.074482644
width: 884, height: 508
Cell Size: (11 x 21)
PTY Dimensions: Line(24) x Column(80)
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Deriving dim colors from normal colors
Scaling RGB by 0.66 from Rgb { r: 0, g: 43, b: 54 } to Rgb { r: 0, g: 28, b: 35 }
Scaling RGB by 0.66 from Rgb { r: 220, g: 50, b: 47 } to Rgb { r: 145, g: 33, b: 31 }
Scaling RGB by 0.66 from Rgb { r: 133, g: 153, b: 0 } to Rgb { r: 87, g: 100, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 181, g: 137, b: 0 } to Rgb { r: 119, g: 90, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 38, g: 139, b: 210 } to Rgb { r: 25, g: 91, b: 138 }
Scaling RGB by 0.66 from Rgb { r: 108, g: 113, b: 196 } to Rgb { r: 71, g: 74, b: 129 }
Scaling RGB by 0.66 from Rgb { r: 42, g: 161, b: 152 } to Rgb { r: 27, g: 106, b: 100 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Deriving dim colors from normal colors
Scaling RGB by 0.66 from Rgb { r: 0, g: 43, b: 54 } to Rgb { r: 0, g: 28, b: 35 }
Scaling RGB by 0.66 from Rgb { r: 220, g: 50, b: 47 } to Rgb { r: 145, g: 33, b: 31 }
Scaling RGB by 0.66 from Rgb { r: 133, g: 153, b: 0 } to Rgb { r: 87, g: 100, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 181, g: 137, b: 0 } to Rgb { r: 119, g: 90, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 38, g: 139, b: 210 } to Rgb { r: 25, g: 91, b: 138 }
Scaling RGB by 0.66 from Rgb { r: 108, g: 113, b: 196 } to Rgb { r: 71, g: 74, b: 129 }
Scaling RGB by 0.66 from Rgb { r: 42, g: 161, b: 152 } to Rgb { r: 27, g: 106, b: 100 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Font size changed: Size(16)
Term::resize
num_cols, num_lines = 86, 55
width: 956, height: 1161
Set Attribute: Bold
Set Attribute: Foreground(Named(Red))
Set Attribute: Bold
Set Attribute: Foreground(Named(Blue))
Set Attribute: Bold
Set Attribute: Foreground(Named(Magenta))
Set Attribute: Reset
Set Attribute: Bold
Set Attribute: Foreground(Named(Blue))
Set Attribute: Reset
carriage_return
carriage_return
linefeed
carriage_return
linefeed
Goodbye.
niklas @ niklas-tp : ~
$ alacritty -vvv
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.yml
device_pixel_ratio: 1
width: 956, height: 1161
Initializing glyph cache
Finished initializing glyph cache in 0.071736613
width: 484, height: 292
Cell Size: (6 x 12)
PTY Dimensions: Line(24) x Column(80)
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Deriving dim colors from normal colors
Scaling RGB by 0.66 from Rgb { r: 0, g: 43, b: 54 } to Rgb { r: 0, g: 28, b: 35 }
Scaling RGB by 0.66 from Rgb { r: 220, g: 50, b: 47 } to Rgb { r: 145, g: 33, b: 31 }
Scaling RGB by 0.66 from Rgb { r: 133, g: 153, b: 0 } to Rgb { r: 87, g: 100, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 181, g: 137, b: 0 } to Rgb { r: 119, g: 90, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 38, g: 139, b: 210 } to Rgb { r: 25, g: 91, b: 138 }
Scaling RGB by 0.66 from Rgb { r: 108, g: 113, b: 196 } to Rgb { r: 71, g: 74, b: 129 }
Scaling RGB by 0.66 from Rgb { r: 42, g: 161, b: 152 } to Rgb { r: 27, g: 106, b: 100 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Deriving dim colors from normal colors
Scaling RGB by 0.66 from Rgb { r: 0, g: 43, b: 54 } to Rgb { r: 0, g: 28, b: 35 }
Scaling RGB by 0.66 from Rgb { r: 220, g: 50, b: 47 } to Rgb { r: 145, g: 33, b: 31 }
Scaling RGB by 0.66 from Rgb { r: 133, g: 153, b: 0 } to Rgb { r: 87, g: 100, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 181, g: 137, b: 0 } to Rgb { r: 119, g: 90, b: 0 }
Scaling RGB by 0.66 from Rgb { r: 38, g: 139, b: 210 } to Rgb { r: 25, g: 91, b: 138 }
Scaling RGB by 0.66 from Rgb { r: 108, g: 113, b: 196 } to Rgb { r: 71, g: 74, b: 129 }
Scaling RGB by 0.66 from Rgb { r: 42, g: 161, b: 152 } to Rgb { r: 27, g: 106, b: 100 }
Scaling RGB by 0.66 from Rgb { r: 147, g: 161, b: 161 } to Rgb { r: 97, g: 106, b: 106 }
Font size changed: Size(16)
Term::resize
num_cols, num_lines = 158, 96
width: 956, height: 1161
Set Attribute: Bold
Set Attribute: Foreground(Named(Red))
Set Attribute: Bold
Set Attribute: Foreground(Named(Blue))
Set Attribute: Bold
Set Attribute: Foreground(Named(Magenta))
Set Attribute: Reset
Set Attribute: Bold
Set Attribute: Foreground(Named(Blue))
```

# Laptop screen

* 1920x1080
* 14""

```
niklas @ niklas-tp : ~
$ alacritty -vv
Welcome to Alacritty.
Configuration loaded from /home/niklas/.config/alacritty.
device_pixel_ratio: 1.6666666
width: 1024, height: 768
Initializing glyph cache
Finished initializing glyph cache in 0.05609836
width: 884, height: 508
Cell Size: (11 x 21)
PTY Dimensions: Line(24) x Column(80)
Font size changed: Size(16)
Term::resize
num_cols, num_lines = 57, 49
width: 636, height: 1041
```"01/22/21 12:42:02 PMAdd macOS ARM builds to CI12I guess it could be something stupid like that it starts with one pixel over to the other screen and gets the wrong input for the dpr calculation for a split second. I've had issues with virtualbox that qt5 wouldn't respect the position and size given by i3 (it would full screen on the wrong screen). My laptop screen is to the left so if there is one pixel overlap the x server probably says that the window is on the wrong screen..chrisduerrChristian Duerr01/22/21 02:50:39 PMAdd macOS ARM builds to CI1
473811/12/18 08:35:42 AMDrew DeVaultUpgrade winit to 0.17.0 and smithay-client-toolkit to 0.3.0I was going to send a patch but I don't really grok Rust or Cargo and quickly got lost.01/26/21 10:59:31 AMSet dirty flag on keypress"This fixes a one-keypress input feedback delay when running on Wayland.
Without setting the dirty flag (and forcing a draw() call), the old
buffer was being committed rather than the buffer holding the new glyph."3@dvergeylen You're correct, this issue is resolved now. Thanks for the notice.atomgardnerThomas Gardner01/26/21 09:48:50 AM"Set dirty flag on keypress

This fixes a one-keypress input feedback delay when running on Wayland.
Without setting the dirty flag (and forcing a draw() call), the old
buffer was being committed rather than the buffer holding the new glyph."1
474108/17/18 08:18:17 PMDavid GarciaIt is not possible to select text with the mouse in Tmux with horizontal splits"Related to the latest comments in #146

_Which operating system does the issue occur on?_ 
Mac OS High Sierra 10.13.6
Tmux 2.7

If I have a horizontal split and I want to select text with the mouse, I do it pressing shift. That works fine, but if there's a split, you will select text for the whole terminal.

<img width=""1440"" alt=""screen shot 2018-08-17 at 22 09 34"" src=""https://user-images.githubusercontent.com/3609616/44286693-456ffb80-a26a-11e8-840f-3a2103506df1.png"">

With iterm2 + tmux it is possible to select a square by holding Shift and alt (in mac). I have been looking around and I am not sure if this works out of the box or if it's something I added to my configuration. 

If it could be relevant, that's part of my `tmux.conf`
```
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe ""reattach-to-user-namespace pbcopy""
setw -g mode-keys vi
setw -g mouse on

set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tpm'                   # manage plugins
set -g @plugin 'tmux-plugins/tmux-sensible'         # Better defaults than the defaults 
set -g @plugin 'tmux-plugins/tmux-pain-control'     # standard tmux pane navigation bindings
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-sessionist'       # easy tmux session
set -g @plugin 'tmux-plugins/tmux-yank'             # Copy tmux > clipboard
set -g @plugin 'tmux-plugins/tmux-copycat'         # Predefined searches.

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
```"01/27/21 04:21:39 PMFix damage tracking on Wayland"Since the Wayland event loop might delay rendering across event loop
callback executions, it's necessary to track the global damage globally
rather than just within a single loop execution.

Fixes #4736."1"Hey, thanks for opening this issue!

Block selection is currently tracked in #526, so this is a duplicate of this issue and your best bet is to watch #526 for updates.

I've implemented a very ugly version of block selection in this PR already: #1398, this still needs some work and some design decisions have to be made, however it's definitely something I'd love to see in Alacritty!

Note that this is unrelated to tmux, so once rectangle/block selection works in the Alacritty, it should work everywhere!"chrisduerrChristian Duerr01/26/21 10:42:06 PM"Fix damage tracking on Wayland

Since the Wayland event loop might delay rendering across event loop
callback executions, it's necessary to track the global damage globally
rather than just within a single loop execution.

Fixes #4736."1
474205/28/20 07:27:03 PMChristian Duerr[WIP/PoC] Add automatic scrolling during selection"This is implemements scrolling when the mouse is moved to the top/bottom
of the terminal during a selection. It combines the existing glutin
event loop with another timed event loop which is managed by `tokio`.
This allows pushing additional events to the main event loop on a
regular basis and would ideally support other events (like blinking
cursor) too.

The basics do work using this method, however there are some severe
issues with this implementation. The main effect that can be observed
without taking a look at the code is that during startup Alacritty might
take a while to render (it needs to receive a few events before popping
up).

The majority of issues are caused by the way the glutin event loop has
changed. Since it's not possible to move glutin's `EventLoop` across
threads, the `Window`, an `EventsLoopProxy` and the `EventLoop` are
created in a different thread and then the proxy and the window itself
are sent back to the main thread (since these both implement `Send`).
The thread can then be used to send all glutin events in a `channel`
which allows combining it with the scheduler.

The scheduler is using tokio to create an async future which yields new
events every X milliseconds. This future can then be interrupted by
sending a message through a oneshot channel to shut it down. However
this currently spawns a new tokio runtime and thread every time an event
is registered, which could be further optimized.

Generally this makes it possible to send events on a regular basis by
registering them on the `Scheduler` which is part of `Term`, since
`Term` is accessible from most parts of the code this would allow
sending a bunch of different events and handling them all together with
the glutin events in the main event loop. However this current
implementation is very sloppy, so this is more a PoC than anything else."01/29/21 10:41:16 PMFix segmentation fault on shutdown with WaylandFixes #4702.12"> What are waiting for this feature to get merged?

It needs to be completely rewritten and none of this code is likely to stick around.

Keeping it open is mostly misleading to be honest, should be just fine as a reference without staying open."chrisduerrChristian Duerr01/26/21 11:03:18 PM"Fix segmentation fault on shutdown with Wayland

Fixes #4702."1
474810/30/18 11:36:31 AMNone"Weird ""bad archive header magic"" when attempting to install build deb on ubuntu 18.04""Hi, I'm using ubuntu 18.04.

rustup show:
```
Default host: x86_64-unknown-linux-gnu
stable-x86_64-unknown-linux-gnu (directory override for '/home/user/projects/public/alacritty')
rustc 1.28.0 (9634041f0 2018-07-30)
```

When running `cargo deb`, I get a `.deb` file built with no errors/warnings what so ever.

When I attempt installing the freshly built deb I get:

```
# dpkg -i alacritty_0.1.0_amd64.deb
dpkg-deb: error: file 'alacritty_0.1.0_amd64.deb' is corrupt - bad archive header magic
dpkg: error processing archive alacritty_0.1.0_amd64.deb (--install):
 dpkg-deb --control subprocess returned error exit status 2
Errors were encountered while processing:
 alacritty_0.1.0_amd64.deb
```

In addition, when I attempt running the `file` command on the generate deb, I get a very weird printout:

regular deb file (downloaded during `apt install`):
```
$ file /var/cache/apt/archives/remmina-plugin-vnc_1.2.31.2+ppa201807311347.r647d2e8.dd32dbcd~ubuntu18.04.1_amd64.deb
/var/cache/apt/archives/remmina-plugin-vnc_1.2.31.2+ppa201807311347.r647d2e8.dd32dbcd~ubuntu18.04.1_amd64.deb: Debian binary package (format 2.0)
```

alacritty deb:
```
$ file target/debian/alacritty_0.1.0_amd64.deb
target/debian/alacritty_0.1.0_amd64.deb: Debian binary package (format     `)
```

The build binary runs just fine with no other issues...
I tried and got the same error both with master + scrollback branch..."01/29/21 08:29:27 PMfix: remove invalid --dimensions flag from bash completion"A first pass at updating the completion files for zsh, bash, and fish
was made in commit 34435ed776988e765d9327dcedfe909e440e6bf8. This patch
completes this work by updating the completion scripts to remove flags
that no longer exist." =||= "This got resolved indeed with the last build I did.
Closing this issue.."sudoforgeBenjamin Denhartog01/29/21 08:09:53 PM"fix: remove invalid --dimensions flag from bash completion

A first pass at updating the completion files for zsh, bash, and fish
was made in commit 34435ed776988e765d9327dcedfe909e440e6bf8. This patch
completes this work by updating the completion scripts to remove flags
that no longer exist."1
475609/17/18 10:01:55 PMNoneadded `fontconfig-devel` dependency for building on Void LinuxRunning `cargo install --git https://github.com/jwilm/alacritty.git alacritty` on my system failed before I installed `fontconfig-devel`.02/04/21 07:57:20 PMFix the Estimated DPR to 1.0 on Wayland"On Wayland, regardless of the underlying scale factor for an output, The scale factor is 1.0 until we receive the first `DPRChanged` event. To correctly calculate the window sizes, we must use a DPR of 1.0 as well.

Ideally we would know what the DPR of the window we're being opened in is, and avoid the estimation guessing game, but that doesn't seem possible with the current interfaces provided by the window systems.

fixes #4753"9"This got resolved indeed with the last build I did.
Closing this issue.."nixpulvisNathan Lilienthal02/01/21 09:25:24 PM"Fix the estimated DPR to 1 on Wayland.

On Wayland, regardless of the underlying scale factor for an output, The
scale factor is 1.0 until we receive the first DPRChanged event. To
correctly calculate the window sizes, we must use a DPR of 1.0 as well.

Ideally we would know what the DPR of the window we're being opened in
is going to be, and avoid the estimation guessing game, but that doesn't
seem possible with the current interfaces provided by the window
systems."1
475809/17/18 03:15:33 PMMatthias Krügerscrollback: thread 'pty reader' panicked at 'attempt to subtract with overflow', src/index.rs:168:28"alacritty @ scrollback , 8e8ecdd, debug build 


````
RUST_BACKTRACE=full target/debug/alacritty  -vvvvvvvvvvvvvv
...
[unhandled] execute byte=06
[unhandled] execute byte=1f
[unhandled] execute byte=13
[unhandled] execute byte=95
[unhandled] execute byte=9c
[unhandled] execute byte=1e
[unhandled] execute byte=19
[unhandled] execute byte=95
[unhandled] execute byte=12
[unhandled] esc_dispatch params=[], ints=[42], byte='P' (50)
[unhandled] execute byte=10
[unhandled] execute byte=1f
[unhandled] execute byte=11
carriage_return
linefeed
scroll_up_relative: origin=0, lines=1
[unhandled] execute byte=11
[unhandled] execute byte=8b
[unhandled] execute byte=06
[unhandled] execute byte=8b
[unhandled] execute byte=02
[unhandled] execute byte=13
carriage_return
put_tab: 1
[unhandled] execute byte=8f
set_horizontal_tabstop
[unhandled] execute byte=99
[unhandled] execute byte=15
Activate G1 character set
carriage_return
[unhandled] execute byte=8d
[unhandled] execute byte=02
bell
[unhandled] execute byte=94
[unhandled] execute byte=9c
[unhandled] execute byte=06
[unhandled] execute byte=1e
carriage_return
Activate G1 character set
[unhandled] execute byte=16
[unhandled] execute byte=03
[unhandled] execute byte=03
[unhandled] execute byte=8c
[unhandled] execute byte=04
insert_blank_lines: 3
scroll_down_relative: origin=31, lines=3
thread 'pty reader' panicked at 'attempt to subtract with overflow', src/index.rs:168:28
stack backtrace:
   0:     0x55b47acc414e - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h1410ee01a7694834
                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x55b47acafcc6 - std::sys_common::backtrace::print::h1962f4c30d928b1d
                               at libstd/sys_common/backtrace.rs:71
                               at libstd/sys_common/backtrace.rs:59
   2:     0x55b47acadf1d - std::panicking::default_hook::{{closure}}::h66071f1a30ddacaa
                               at libstd/panicking.rs:211
   3:     0x55b47acadc90 - std::panicking::default_hook::h8288f681d56575d2
                               at libstd/panicking.rs:227
   4:     0x55b47acae58c - std::panicking::rust_panic_with_hook::h46fa5def146c1328
                               at libstd/panicking.rs:475
   5:     0x55b47acae189 - std::panicking::continue_panic_fmt::h9933c8abec1f0661
                               at libstd/panicking.rs:390
   6:     0x55b47acae085 - rust_begin_unwind
                               at libstd/panicking.rs:325
   7:     0x55b47ad0cb5b - core::panicking::panic_fmt::h380215f9f52a35ae
                               at libcore/panicking.rs:77
   8:     0x55b47ad0ca8a - core::panicking::panic::hfeaf7953a9669be7
                               at libcore/panicking.rs:52
   9:     0x55b47a537b43 - <alacritty::index::Line as core::ops::arith::Sub>::sub::hee42d53b1ad43d6b
                               at src/index.rs:168
  10:     0x55b47a41ccc0 - <alacritty::grid::storage::Storage<T> as core::ops::index::IndexMut<alacritty::index::Line>>::index_mut::h9e2a559a93584c63
                               at src/grid/storage.rs:304
  11:     0x55b47a345cbe - <alacritty::grid::Grid<T>>::scroll_down::h5fa0767da63d2333
                               at /home/matthias/vcs/github/alacritty/src/grid/mod.rs:341
  12:     0x55b47a313604 - alacritty::term::Term::scroll_down_relative::h5dfe11f171e7bf7f
                               at /home/matthias/vcs/github/alacritty/src/term/mod.rs:1217
  13:     0x55b47a30f688 - <alacritty::term::Term as alacritty::ansi::Handler>::insert_blank_lines::he44b6d631b7f9a5f
                               at /home/matthias/vcs/github/alacritty/src/term/mod.rs:1609
  14:     0x55b47a2e391c - <alacritty::ansi::Performer<'a, H, W> as vte::Perform>::csi_dispatch::hbd61a644d937236a
                               at /home/matthias/vcs/github/alacritty/src/ansi.rs:982
  15:     0x55b47a31c27f - vte::Parser::perform_action::hf0607860be14cde6
                               at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.3.3/src/lib.rs:302
  16:     0x55b47a31c818 - vte::Parser::perform_state_change::hb54370ebca766a9e
                               at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.3.3/src/lib.rs:177
  17:     0x55b47a31ca32 - vte::Parser::advance::ha95160097f280db7
                               at /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/vte-0.3.3/src/lib.rs:156
  18:     0x55b47a2e9cec - alacritty::ansi::Processor::advance::h2d1b9b6bad770ef8
                               at /home/matthias/vcs/github/alacritty/src/ansi.rs:162
  19:     0x55b47a2ff979 - <alacritty::event_loop::EventLoop<Io>>::pty_read::hee6a7ef839c5ad07
                               at /home/matthias/vcs/github/alacritty/src/event_loop.rs:289
  20:     0x55b47a2fe911 - <alacritty::event_loop::EventLoop<Io>>::spawn::{{closure}}::h3dd1fb3f7baabde6
                               at /home/matthias/vcs/github/alacritty/src/event_loop.rs:405
  21:     0x55b47a2c533c - std::sys_common::backtrace::__rust_begin_short_backtrace::h9cdd912511cf94dc
                               at /checkout/src/libstd/sys_common/backtrace.rs:136
  22:     0x55b47a2fadbe - std::thread::Builder::spawn::{{closure}}::{{closure}}::h8af81224ab5ed292
                               at /checkout/src/libstd/thread/mod.rs:409
  23:     0x55b47a2e9d7e - <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::he07e358c15b64707
                               at /checkout/src/libstd/panic.rs:313
  24:     0x55b47a336e36 - std::panicking::try::do_call::h7056b8144f4498a9
                               at /checkout/src/libstd/panicking.rs:310
  25:     0x55b47acd4879 - __rust_maybe_catch_panic
                               at libpanic_unwind/lib.rs:102
  26:     0x55b47a336b0c - std::panicking::try::h4eba685fa36d9ad1
                               at /checkout/src/libstd/panicking.rs:289
  27:     0x55b47a2e9dce - std::panic::catch_unwind::h686899bd357654c9
                               at /checkout/src/libstd/panic.rs:392
  28:     0x55b47a2fab80 - std::thread::Builder::spawn::{{closure}}::h73119e89602807d1
                               at /checkout/src/libstd/thread/mod.rs:408
  29:     0x55b47a2faf04 - <F as alloc::boxed::FnBox<A>>::call_box::h55ea712babd979d1
                               at /checkout/src/liballoc/boxed.rs:642
  30:     0x55b47acc6c5a - std::sys_common::thread::start_thread::h3a34c6b444d6a7c4
                               at /checkout/src/liballoc/boxed.rs:652
                               at libstd/sys_common/thread.rs:24
  31:     0x55b47acaed05 - std::sys::unix::thread::Thread::new::thread_start::h72aa9e5ed18ab2e2
                               at libstd/sys/unix/thread.rs:90
  32:     0x7f5c9bc50a9c - start_thread
  33:     0x7f5c9bb64a42 - clone
  34:                0x0 - <unknown>
thread 'main' panicked at 'Error sending shutdown to event loop: Disconnected', libcore/result.rs:983:5
stack backtrace:
   0:     0x55b47acc414e - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h1410ee01a7694834
                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1:     0x55b47acafcc6 - std::sys_common::backtrace::print::h1962f4c30d928b1d
                               at libstd/sys_common/backtrace.rs:71
                               at libstd/sys_common/backtrace.rs:59
   2:     0x55b47acadf1d - std::panicking::default_hook::{{closure}}::h66071f1a30ddacaa
                               at libstd/panicking.rs:211
   3:     0x55b47acadc90 - std::panicking::default_hook::h8288f681d56575d2
                               at libstd/panicking.rs:227
   4:     0x55b47acae58c - std::panicking::rust_panic_with_hook::h46fa5def146c1328
                               at libstd/panicking.rs:475
   5:     0x55b47acae189 - std::panicking::continue_panic_fmt::h9933c8abec1f0661
                               at libstd/panicking.rs:390
   6:     0x55b47acae085 - rust_begin_unwind
                               at libstd/panicking.rs:325
   7:     0x55b47ad0cb5b - core::panicking::panic_fmt::h380215f9f52a35ae
                               at libcore/panicking.rs:77
   8:     0x55b47a35c2b5 - core::result::unwrap_failed::h1086413067e79e6b
                               at /checkout/src/libcore/macros.rs:26
   9:     0x55b47a3580ef - <core::result::Result<T, E>>::expect::h29a064c70f571125
                               at /checkout/src/libcore/result.rs:809
  10:     0x55b47a319801 - alacritty::run::h351d5eab68f2ccb0
                               at src/main.rs:210
  11:     0x55b47a318135 - alacritty::main::hd3f5b69239efe5a4
                               at src/main.rs:59
  12:     0x55b47a337def - std::rt::lang_start::{{closure}}::h80ee2703d4a00f38
                               at /checkout/src/libstd/rt.rs:74
  13:     0x55b47acae022 - std::panicking::try::do_call::hc3bbfe344c9dd679
                               at libstd/rt.rs:59
                               at libstd/panicking.rs:310
  14:     0x55b47acd4879 - __rust_maybe_catch_panic
                               at libpanic_unwind/lib.rs:102
  15:     0x55b47acbd735 - std::rt::lang_start_internal::h6831243cb445d5dc
                               at libstd/panicking.rs:289
                               at libstd/panic.rs:392
                               at libstd/rt.rs:58
  16:     0x55b47a337dc7 - std::rt::lang_start::hefe3975268cd17b7
                               at /checkout/src/libstd/rt.rs:74
  17:     0x55b47a319cb9 - main
  18:     0x7f5c9ba8d222 - __libc_start_main
  19:     0x55b47a2bf02d - _start
  20:                0x0 - <unknown>

````

in the new debug alacritty window:
````
cat /dev/urandom
[prints random chars]
wait until crash
````"04/14/21 01:09:03 AMAdd note about signing and notarization to README"Just figured I'd put this in the README to possible help our users understand our stance on the issue. Feel free to close if you'd rather not add anything.

fixes #1896
fixes #3448
fixes #4529
fixes #4673
fixes #4731"5"This bug's origin is [here](https://github.com/jwilm/alacritty/blob/scrollback/src/ansi.rs#L982) and can be reproduced by running `printf '\e[1000L'`. I'll look into writing up a quick fix."nixpulvisNathan Lilienthal02/03/21 03:42:00 AMAdd note about signing and notarization.1
476109/05/18 09:15:17 PMChristian DuerrFix substraction underflow with IL sequence"The IL escape sequence (CSI Ps L) allows inserting blank, uninitialized
lines. `Ps` is a placeholder for the number of lines that should be
inserted. Before this change Alacritty would crash when a large number
of lines was passed as `Ps` parameter.

The issue was caused whenever the current line of the cursor plus the
lines that should be inserted would leave the bottom of the terminal,
since this makes indexing impossible.

This patch makes sure that the biggest amount of lines inserted does
never exceed the end of the visible region minus the current line of the
curser, which fixes the underflow issue.

This fixes #1515.

@jwilm I'd be interested in knowing what you think about this workaround.
It's not immediately obvious to me what exactly this escape sequence
should be used for. Even though the ecma documentation has some
information on it. So I'm not entirely convinced yet that this is the correct
behavior for dealing with the `IL` escape parameter being out of bounds."02/04/21 10:30:10 AMdeps: bump smallvec from 1.6.0 to 1.6.1https://rustsec.org/advisories/RUSTSEC-2021-0003.html6Oh wow @nixpulvis, that's actually incredibly helpful. Thanks for that! I've read the ECMA specification for the control sequences but it's written in a language I do not speak (they claim that it's english, but I still don't believe that).nevunGabriel Kihlman02/04/21 08:24:16 AM"deps: bump smallvec from 1.6.0 to 1.6.1

https://rustsec.org/advisories/RUSTSEC-2021-0003.html"1
476309/23/18 04:21:48 PMNoneRender area doesn't resize with mesa 18.1.6 on wayland"The drawing area of the window does not resize with mesa 18.1.6 on wayland (arch linux, gnome 3.28.3), whereas the window decorations do (because they don't use egl). 

This issue is specific to 18.1.6 (18.1.5 works fine), it might be an issue with mesa 18.1.6 but I've seen examples of mesa 18.1.6 resizing working on wayland. This issue is not fixed by https://github.com/jwilm/alacritty/pull/1403.
"02/04/21 10:30:10 AMSupport for graphics in the terminal"This patch adds support for graphics in the terminal. Graphics can be sent as Sixel images.

## New features

* Ability to render graphics in the grid.
* Support for Sixel images.

## Sixel parser

The Sixel parser is based on the [SIXEL GRAPHICS EXTENSION](https://archive.org/details/bitsavers_decstandar0VideoSystemsReferenceManualDec91_74264381/page/n907/mode/2up) chapter in a DEC manual.

The support is complete except for the pixel aspect ratio parameters. According to the manual, a Sixel image can specify that it expects a specific shape for the pixels in the device, but in none of terminals that I checked these parameters had any effect: they always assume a 1:1 ratio. Also, I didn't find any Sixel generator that emits a different ratio. To avoid extra complexity in the parser, it always assume 1:1 when the image is built.

There are two new terminal modes:

* `SixelScrolling` (`80`)

    If enabled, new graphics are inserted at the cursor position, and they can scroll the grid.

    If disabled, new graphics are inserted at top-left, and they are limited by the height of the window.

* `SixelPrivateColorRegisters` (`1070`)

    If enabled, every Sixel parser has its own color palette.

    If disabled, Sixel images can share a color palette.

    Initially I didn't plan to support this mode, since it seems to be specific to xterm, but when I was testing applications using Sixel I found that mpv uses it to reuse a palette between video frames. Since mpv is based on libsixel, I guess that this feature could be used by more applications.

Both modes are enabled by default.

The function to convert HLS colors to RGB is a direct port of the implementation of the same [function in xterm](https://github.com/ThomasDickey/xterm-snapshots/blob/xterm-364/graphics.c#L1076-L1158). I verified that the function emits the same results in all combinations of values 0, 30, 60, 90, and 100 in every color component. Only a few of these combinations were left in the tests to reduce the noise in the code.

To test the parser there are Sixel images generated with 3 different applications. For each one, there is a `.rgba` file in the same directory with the expected RGBA values. The commands to produce these files are in [`alacritty_terminal/tests/sixel/README.md`](https://github.com/ayosec/alacritty/blob/graphics/alacritty_terminal/tests/sixel/).

###  Byte `90` as DCS

Sixel images using byte `90` as DCS are not supported. DCS can be either `ESC P` or `90`, but the `vte` crate only recognizes `ESC P`. I guess that this is because `90` can be a continuation byte in a UTF-8 sequence (two most significant bits are `10`), so it can be a valid input from users.

Xterm has the same limitation. I don't expect that many applications depends on it.

`ppmtosixel` is an exception. It uses `90` to start the Sixel data, and it has to be replaced if we want to see an image generated by it.

    $ sed $'s/\x90/\eP/' alacritty_terminal/tests/sixel/testimage_ppmtosixel.sixel

It is still interesting to test `ppmtosixel` because it was written in 1991, long before Sixel was added to most (if not all) terminal emulators.
"52"Yeah I've tried both mutter and weston, this is probably more to do with the wayland/egl driver for mesa. The only reason I filled this issue for alacritty is because when I run the glutin examples the resizing works perfectly unlike in alacritty. 

I'm trying to hunt down what causes this difference, https://github.com/mesa3d/mesa/commit/a9fb331ea7d1a78936ea8d8385e44cfd66f835c1f is probably the commit that causes the issue"ayosecAyose04/18/21 09:45:19 PMMerge remote-tracking branch 'vendor/master' into graphics1
476809/23/18 04:21:48 PMNoneFix mesa rendering outside window borders on wayland"This PR essentially reverts https://github.com/jwilm/alacritty/commit/62eb1e293898357ee46a9ba6c4e7cf87a6af1ea2 but fixes issue https://github.com/jwilm/alacritty/issues/1517. 

Fixes #1536
Fixes #1517
Fixes #1282
Fixes #1227 "02/24/21 04:16:38 PMAdd support for synchronized updates "This implements support for temporarily freezing the terminal grid to
prevent rendering of incomplete frames.

This can be triggered using the escapes `DCS = 1 s` (start) and
`DCS = 2 s` (end).

The synchronization is implemented by forwarding all received PTY bytes
to a 2 MiB buffer. This should allow updating the entire grid even if it
is fairly dense. Unfortunately this also means that another branch is
necessary in Alacritty's parser which does have a slight performance
impact.

In a previous version the freezing was implemented by caching the
renderable grid state whenever a synchronized update is started. While
this strategy makes it possible to implement this without any
performance impact without synchronized updates, a significant
performance overhead is introduced whenever a synchronized update is
started. Since this can happen thousands of times per frame, it is not a
feasible solution.

While it would be possible to render at most one synchronized update per
frame, it is possible that another synchronized update comes in at any
time and stays active for an extended period. As a result the state
visible before the long synchronization would be the first received
update per frame, not the last, which could lead to the user missing
important information during the long freezing interval.

Fixes #598."10Nice work. I tested a combined branch with https://github.com/jwilm/alacritty/pull/1403 and this on sway master (with wlroots) and it fixes the issue.chrisduerrChristian Duerr01/25/21 09:23:08 PM"Add support for synchronized updates

This implements support for temporarily freezing the terminal grid to
prevent rendering of incomplete frames.

This can be triggered using the escapes `DCS = 1 s` (start) and
`DCS = 2 s` (end).

The synchronization is implemented by forwarding all received PTY bytes
to a 2 MiB buffer. This should allow updating the entire grid even if it
is fairly dense. Unfortunately this also means that another branch is
necessary in Alacritty's parser which does have a slight performance
impact.

In a previous version the freezing was implemented by caching the
renderable grid state whenever a synchronized update is started. While
this strategy makes it possible to implement this without any
performance impact without synchronized updates, a significant
performance overhead is introduced whenever a synchronized update is
started. Since this can happen thousands of times per frame, it is not a
feasible solution.

While it would be possible to render at most one synchronized update per
frame, it is possible that another synchronized update comes in at any
time and stays active for an extended period. As a result the state
visible before the long synchronization would be the first received
update per frame, not the last, which could lead to the user missing
important information during the long freezing interval.

Fixes #598."1
477506/05/19 12:24:11 PMMatthias Krügeroccasional rendering glitch"
![alacritty_bug_cropped](https://user-images.githubusercontent.com/476013/44408242-4ce01f00-a560-11e8-936a-f263e27587bf.png)
I have this happening sometimes every other day, it only lasts until the window is refreshed / a new line/char is rendered.

sys:
````
Linux t470 4.17.17-1-MANJARO #1 SMP PREEMPT Sat Aug 18 14:38:10 UTC 2018 x86_64 GNU/Linux
````

Using X11.


cpu: ````intel i5 7200U````
gpu: ```` intel hd-Graphic 620````

alacritty @ scrollback / 8e8ecdd0f98dd8005cd940d19dc0a922661d64fc


glxinfo:
````
name of display: :0
display: :0  screen: 0
direct rendering: Yes
server glx vendor string: SGI
server glx version string: 1.4
server glx extensions:
    GLX_ARB_create_context, GLX_ARB_create_context_no_error,
    GLX_ARB_create_context_profile, GLX_ARB_create_context_robustness,
    GLX_ARB_fbconfig_float, GLX_ARB_framebuffer_sRGB, GLX_ARB_multisample,
    GLX_EXT_create_context_es2_profile, GLX_EXT_create_context_es_profile,
    GLX_EXT_fbconfig_packed_float, GLX_EXT_framebuffer_sRGB,
    GLX_EXT_import_context, GLX_EXT_libglvnd, GLX_EXT_no_config_context,
    GLX_EXT_texture_from_pixmap, GLX_EXT_visual_info, GLX_EXT_visual_rating,
    GLX_INTEL_swap_event, GLX_MESA_copy_sub_buffer, GLX_OML_swap_method,
    GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer,
    GLX_SGIX_visual_select_group, GLX_SGI_make_current_read,
    GLX_SGI_swap_control
client glx vendor string: Mesa Project and SGI
client glx version string: 1.4
client glx extensions:
    GLX_ARB_context_flush_control, GLX_ARB_create_context,
    GLX_ARB_create_context_profile, GLX_ARB_create_context_robustness,
    GLX_ARB_fbconfig_float, GLX_ARB_framebuffer_sRGB,
    GLX_ARB_get_proc_address, GLX_ARB_multisample, GLX_EXT_buffer_age,
    GLX_EXT_create_context_es2_profile, GLX_EXT_create_context_es_profile,
    GLX_EXT_fbconfig_packed_float, GLX_EXT_framebuffer_sRGB,
    GLX_EXT_import_context, GLX_EXT_texture_from_pixmap, GLX_EXT_visual_info,
    GLX_EXT_visual_rating, GLX_INTEL_swap_event, GLX_MESA_copy_sub_buffer,
    GLX_MESA_multithread_makecurrent, GLX_MESA_query_renderer,
    GLX_MESA_swap_control, GLX_OML_swap_method, GLX_OML_sync_control,
    GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer,
    GLX_SGIX_visual_select_group, GLX_SGI_make_current_read,
    GLX_SGI_swap_control, GLX_SGI_video_sync
GLX version: 1.4
GLX extensions:
    GLX_ARB_create_context, GLX_ARB_create_context_profile,
    GLX_ARB_create_context_robustness, GLX_ARB_fbconfig_float,
    GLX_ARB_framebuffer_sRGB, GLX_ARB_get_proc_address, GLX_ARB_multisample,
    GLX_EXT_buffer_age, GLX_EXT_create_context_es2_profile,
    GLX_EXT_create_context_es_profile, GLX_EXT_fbconfig_packed_float,
    GLX_EXT_framebuffer_sRGB, GLX_EXT_import_context,
    GLX_EXT_texture_from_pixmap, GLX_EXT_visual_info, GLX_EXT_visual_rating,
    GLX_INTEL_swap_event, GLX_MESA_copy_sub_buffer, GLX_MESA_query_renderer,
    GLX_MESA_swap_control, GLX_OML_swap_method, GLX_OML_sync_control,
    GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer,
    GLX_SGIX_visual_select_group, GLX_SGI_make_current_read,
    GLX_SGI_swap_control, GLX_SGI_video_sync
Extended renderer info (GLX_MESA_query_renderer):
    Vendor: Intel Open Source Technology Center (0x8086)
    Device: Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2)  (0x5916)
    Version: 18.1.6
    Accelerated: yes
    Video memory: 3072MB
    Unified memory: yes
    Preferred profile: core (0x1)
    Max core profile version: 4.5
    Max compat profile version: 3.0
    Max GLES1 profile version: 1.1
    Max GLES[23] profile version: 3.2
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2)
OpenGL core profile version string: 4.5 (Core Profile) Mesa 18.1.6
OpenGL core profile shading language version string: 4.50
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
    GL_3DFX_texture_compression_FXT1, GL_AMD_conservative_depth,
    GL_AMD_draw_buffers_blend, GL_AMD_seamless_cubemap_per_texture,
    GL_AMD_shader_stencil_export, GL_AMD_shader_trinary_minmax,
    GL_AMD_vertex_shader_layer, GL_AMD_vertex_shader_viewport_index,
    GL_ANGLE_texture_compression_dxt3, GL_ANGLE_texture_compression_dxt5,
    GL_APPLE_object_purgeable, GL_ARB_ES2_compatibility,
    GL_ARB_ES3_1_compatibility, GL_ARB_ES3_2_compatibility,
    GL_ARB_ES3_compatibility, GL_ARB_arrays_of_arrays, GL_ARB_base_instance,
    GL_ARB_blend_func_extended, GL_ARB_buffer_storage,
    GL_ARB_clear_buffer_object, GL_ARB_clear_texture, GL_ARB_clip_control,
    GL_ARB_compressed_texture_pixel_storage, GL_ARB_compute_shader,
    GL_ARB_conditional_render_inverted, GL_ARB_conservative_depth,
    GL_ARB_copy_buffer, GL_ARB_copy_image, GL_ARB_cull_distance,
    GL_ARB_debug_output, GL_ARB_depth_buffer_float, GL_ARB_depth_clamp,
    GL_ARB_derivative_control, GL_ARB_direct_state_access,
    GL_ARB_draw_buffers, GL_ARB_draw_buffers_blend,
    GL_ARB_draw_elements_base_vertex, GL_ARB_draw_indirect,
    GL_ARB_draw_instanced, GL_ARB_enhanced_layouts,
    GL_ARB_explicit_attrib_location, GL_ARB_explicit_uniform_location,
    GL_ARB_fragment_coord_conventions, GL_ARB_fragment_layer_viewport,
    GL_ARB_fragment_shader, GL_ARB_framebuffer_no_attachments,
    GL_ARB_framebuffer_object, GL_ARB_framebuffer_sRGB,
    GL_ARB_get_program_binary, GL_ARB_get_texture_sub_image,
    GL_ARB_gpu_shader5, GL_ARB_gpu_shader_fp64, GL_ARB_gpu_shader_int64,
    GL_ARB_half_float_pixel, GL_ARB_half_float_vertex,
    GL_ARB_indirect_parameters, GL_ARB_instanced_arrays,
    GL_ARB_internalformat_query, GL_ARB_internalformat_query2,
    GL_ARB_invalidate_subdata, GL_ARB_map_buffer_alignment,
    GL_ARB_map_buffer_range, GL_ARB_multi_bind, GL_ARB_multi_draw_indirect,
    GL_ARB_occlusion_query2, GL_ARB_pipeline_statistics_query,
    GL_ARB_pixel_buffer_object, GL_ARB_point_sprite,
    GL_ARB_polygon_offset_clamp, GL_ARB_post_depth_coverage,
    GL_ARB_program_interface_query, GL_ARB_provoking_vertex,
    GL_ARB_query_buffer_object, GL_ARB_robust_buffer_access_behavior,
    GL_ARB_robustness, GL_ARB_sample_shading, GL_ARB_sampler_objects,
    GL_ARB_seamless_cube_map, GL_ARB_seamless_cubemap_per_texture,
    GL_ARB_separate_shader_objects, GL_ARB_shader_atomic_counter_ops,
    GL_ARB_shader_atomic_counters, GL_ARB_shader_ballot,
    GL_ARB_shader_bit_encoding, GL_ARB_shader_clock,
    GL_ARB_shader_draw_parameters, GL_ARB_shader_group_vote,
    GL_ARB_shader_image_load_store, GL_ARB_shader_image_size,
    GL_ARB_shader_objects, GL_ARB_shader_precision,
    GL_ARB_shader_stencil_export, GL_ARB_shader_storage_buffer_object,
    GL_ARB_shader_subroutine, GL_ARB_shader_texture_image_samples,
    GL_ARB_shader_texture_lod, GL_ARB_shader_viewport_layer_array,
    GL_ARB_shading_language_420pack, GL_ARB_shading_language_packing,
    GL_ARB_stencil_texturing, GL_ARB_sync, GL_ARB_tessellation_shader,
    GL_ARB_texture_barrier, GL_ARB_texture_buffer_object,
    GL_ARB_texture_buffer_object_rgb32, GL_ARB_texture_buffer_range,
    GL_ARB_texture_compression_bptc, GL_ARB_texture_compression_rgtc,
    GL_ARB_texture_cube_map_array, GL_ARB_texture_filter_anisotropic,
    GL_ARB_texture_float, GL_ARB_texture_gather,
    GL_ARB_texture_mirror_clamp_to_edge, GL_ARB_texture_multisample,
    GL_ARB_texture_non_power_of_two, GL_ARB_texture_query_levels,
    GL_ARB_texture_query_lod, GL_ARB_texture_rectangle, GL_ARB_texture_rg,
    GL_ARB_texture_rgb10_a2ui, GL_ARB_texture_stencil8,
    GL_ARB_texture_storage, GL_ARB_texture_storage_multisample,
    GL_ARB_texture_swizzle, GL_ARB_texture_view, GL_ARB_timer_query,
    GL_ARB_transform_feedback2, GL_ARB_transform_feedback3,
    GL_ARB_transform_feedback_instanced,
    GL_ARB_transform_feedback_overflow_query, GL_ARB_uniform_buffer_object,
    GL_ARB_vertex_array_bgra, GL_ARB_vertex_array_object,
    GL_ARB_vertex_attrib_64bit, GL_ARB_vertex_attrib_binding,
    GL_ARB_vertex_shader, GL_ARB_vertex_type_10f_11f_11f_rev,
    GL_ARB_vertex_type_2_10_10_10_rev, GL_ARB_viewport_array,
    GL_ATI_blend_equation_separate, GL_ATI_texture_float, GL_EXT_abgr,
    GL_EXT_blend_equation_separate, GL_EXT_draw_buffers2,
    GL_EXT_draw_instanced, GL_EXT_framebuffer_blit,
    GL_EXT_framebuffer_multisample, GL_EXT_framebuffer_multisample_blit_scaled,
    GL_EXT_framebuffer_sRGB, GL_EXT_packed_depth_stencil, GL_EXT_packed_float,
    GL_EXT_pixel_buffer_object, GL_EXT_polygon_offset_clamp,
    GL_EXT_provoking_vertex, GL_EXT_shader_framebuffer_fetch,
    GL_EXT_shader_framebuffer_fetch_non_coherent, GL_EXT_shader_integer_mix,
    GL_EXT_shader_samples_identical, GL_EXT_texture_array,
    GL_EXT_texture_compression_dxt1, GL_EXT_texture_compression_rgtc,
    GL_EXT_texture_compression_s3tc, GL_EXT_texture_filter_anisotropic,
    GL_EXT_texture_integer, GL_EXT_texture_sRGB, GL_EXT_texture_sRGB_decode,
    GL_EXT_texture_shared_exponent, GL_EXT_texture_snorm,
    GL_EXT_texture_swizzle, GL_EXT_timer_query, GL_EXT_transform_feedback,
    GL_EXT_vertex_array_bgra, GL_IBM_multimode_draw_arrays,
    GL_INTEL_conservative_rasterization, GL_INTEL_performance_query,
    GL_KHR_blend_equation_advanced, GL_KHR_blend_equation_advanced_coherent,
    GL_KHR_context_flush_control, GL_KHR_debug, GL_KHR_no_error,
    GL_KHR_robust_buffer_access_behavior, GL_KHR_robustness,
    GL_KHR_texture_compression_astc_ldr,
    GL_KHR_texture_compression_astc_sliced_3d, GL_MESA_pack_invert,
    GL_MESA_shader_integer_functions, GL_MESA_texture_signed_rgba,
    GL_NV_conditional_render, GL_NV_depth_clamp, GL_NV_packed_depth_stencil,
    GL_NV_texture_barrier, GL_OES_EGL_image, GL_S3_s3tc
OpenGL version string: 3.0 Mesa 18.1.6
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
    GL_3DFX_texture_compression_FXT1, GL_AMD_conservative_depth,
    GL_AMD_draw_buffers_blend, GL_AMD_seamless_cubemap_per_texture,
    GL_AMD_shader_stencil_export, GL_AMD_shader_trinary_minmax,
    GL_ANGLE_texture_compression_dxt3, GL_ANGLE_texture_compression_dxt5,
    GL_APPLE_object_purgeable, GL_APPLE_packed_pixels,
    GL_ARB_ES2_compatibility, GL_ARB_ES3_compatibility,
    GL_ARB_arrays_of_arrays, GL_ARB_blend_func_extended,
    GL_ARB_buffer_storage, GL_ARB_clear_buffer_object, GL_ARB_clear_texture,
    GL_ARB_clip_control, GL_ARB_color_buffer_float,
    GL_ARB_compressed_texture_pixel_storage, GL_ARB_compute_shader,
    GL_ARB_conditional_render_inverted, GL_ARB_conservative_depth,
    GL_ARB_copy_buffer, GL_ARB_copy_image, GL_ARB_cull_distance,
    GL_ARB_debug_output, GL_ARB_depth_buffer_float, GL_ARB_depth_clamp,
    GL_ARB_depth_texture, GL_ARB_derivative_control, GL_ARB_draw_buffers,
    GL_ARB_draw_buffers_blend, GL_ARB_draw_elements_base_vertex,
    GL_ARB_draw_instanced, GL_ARB_explicit_attrib_location,
    GL_ARB_explicit_uniform_location, GL_ARB_fragment_coord_conventions,
    GL_ARB_fragment_program, GL_ARB_fragment_program_shadow,
    GL_ARB_fragment_shader, GL_ARB_framebuffer_no_attachments,
    GL_ARB_framebuffer_object, GL_ARB_framebuffer_sRGB,
    GL_ARB_get_program_binary, GL_ARB_get_texture_sub_image,
    GL_ARB_half_float_pixel, GL_ARB_half_float_vertex,
    GL_ARB_instanced_arrays, GL_ARB_internalformat_query,
    GL_ARB_internalformat_query2, GL_ARB_invalidate_subdata,
    GL_ARB_map_buffer_alignment, GL_ARB_map_buffer_range, GL_ARB_multi_bind,
    GL_ARB_multisample, GL_ARB_multitexture, GL_ARB_occlusion_query,
    GL_ARB_occlusion_query2, GL_ARB_pipeline_statistics_query,
    GL_ARB_pixel_buffer_object, GL_ARB_point_parameters, GL_ARB_point_sprite,
    GL_ARB_polygon_offset_clamp, GL_ARB_program_interface_query,
    GL_ARB_provoking_vertex, GL_ARB_query_buffer_object,
    GL_ARB_robust_buffer_access_behavior, GL_ARB_robustness,
    GL_ARB_sample_shading, GL_ARB_sampler_objects, GL_ARB_seamless_cube_map,
    GL_ARB_seamless_cubemap_per_texture, GL_ARB_separate_shader_objects,
    GL_ARB_shader_atomic_counter_ops, GL_ARB_shader_atomic_counters,
    GL_ARB_shader_ballot, GL_ARB_shader_bit_encoding, GL_ARB_shader_clock,
    GL_ARB_shader_draw_parameters, GL_ARB_shader_group_vote,
    GL_ARB_shader_image_load_store, GL_ARB_shader_image_size,
    GL_ARB_shader_objects, GL_ARB_shader_precision,
    GL_ARB_shader_stencil_export, GL_ARB_shader_storage_buffer_object,
    GL_ARB_shader_texture_image_samples, GL_ARB_shader_texture_lod,
    GL_ARB_shading_language_100, GL_ARB_shading_language_420pack,
    GL_ARB_shading_language_packing, GL_ARB_shadow, GL_ARB_stencil_texturing,
    GL_ARB_sync, GL_ARB_texture_barrier, GL_ARB_texture_border_clamp,
    GL_ARB_texture_compression, GL_ARB_texture_compression_bptc,
    GL_ARB_texture_compression_rgtc, GL_ARB_texture_cube_map,
    GL_ARB_texture_cube_map_array, GL_ARB_texture_env_add,
    GL_ARB_texture_env_combine, GL_ARB_texture_env_crossbar,
    GL_ARB_texture_env_dot3, GL_ARB_texture_filter_anisotropic,
    GL_ARB_texture_float, GL_ARB_texture_gather,
    GL_ARB_texture_mirror_clamp_to_edge, GL_ARB_texture_mirrored_repeat,
    GL_ARB_texture_multisample, GL_ARB_texture_non_power_of_two,
    GL_ARB_texture_query_levels, GL_ARB_texture_query_lod,
    GL_ARB_texture_rectangle, GL_ARB_texture_rg, GL_ARB_texture_rgb10_a2ui,
    GL_ARB_texture_stencil8, GL_ARB_texture_storage,
    GL_ARB_texture_storage_multisample, GL_ARB_texture_swizzle,
    GL_ARB_texture_view, GL_ARB_timer_query, GL_ARB_transform_feedback2,
    GL_ARB_transform_feedback3, GL_ARB_transform_feedback_instanced,
    GL_ARB_transform_feedback_overflow_query, GL_ARB_transpose_matrix,
    GL_ARB_uniform_buffer_object, GL_ARB_vertex_array_bgra,
    GL_ARB_vertex_array_object, GL_ARB_vertex_attrib_binding,
    GL_ARB_vertex_buffer_object, GL_ARB_vertex_program, GL_ARB_vertex_shader,
    GL_ARB_vertex_type_10f_11f_11f_rev, GL_ARB_vertex_type_2_10_10_10_rev,
    GL_ARB_window_pos, GL_ATI_blend_equation_separate, GL_ATI_draw_buffers,
    GL_ATI_separate_stencil, GL_ATI_texture_env_combine3,
    GL_ATI_texture_float, GL_EXT_abgr, GL_EXT_bgra, GL_EXT_blend_color,
    GL_EXT_blend_equation_separate, GL_EXT_blend_func_separate,
    GL_EXT_blend_minmax, GL_EXT_blend_subtract, GL_EXT_compiled_vertex_array,
    GL_EXT_copy_texture, GL_EXT_draw_buffers2, GL_EXT_draw_instanced,
    GL_EXT_draw_range_elements, GL_EXT_fog_coord, GL_EXT_framebuffer_blit,
    GL_EXT_framebuffer_multisample, GL_EXT_framebuffer_multisample_blit_scaled,
    GL_EXT_framebuffer_object, GL_EXT_framebuffer_sRGB,
    GL_EXT_gpu_program_parameters, GL_EXT_multi_draw_arrays,
    GL_EXT_packed_depth_stencil, GL_EXT_packed_float, GL_EXT_packed_pixels,
    GL_EXT_pixel_buffer_object, GL_EXT_point_parameters,
    GL_EXT_polygon_offset, GL_EXT_polygon_offset_clamp,
    GL_EXT_provoking_vertex, GL_EXT_rescale_normal, GL_EXT_secondary_color,
    GL_EXT_separate_specular_color, GL_EXT_shader_framebuffer_fetch,
    GL_EXT_shader_framebuffer_fetch_non_coherent, GL_EXT_shader_integer_mix,
    GL_EXT_shader_samples_identical, GL_EXT_shadow_funcs,
    GL_EXT_stencil_two_side, GL_EXT_stencil_wrap, GL_EXT_subtexture,
    GL_EXT_texture, GL_EXT_texture3D, GL_EXT_texture_array,
    GL_EXT_texture_compression_dxt1, GL_EXT_texture_compression_rgtc,
    GL_EXT_texture_compression_s3tc, GL_EXT_texture_cube_map,
    GL_EXT_texture_edge_clamp, GL_EXT_texture_env_add,
    GL_EXT_texture_env_combine, GL_EXT_texture_env_dot3,
    GL_EXT_texture_filter_anisotropic, GL_EXT_texture_integer,
    GL_EXT_texture_lod_bias, GL_EXT_texture_object, GL_EXT_texture_rectangle,
    GL_EXT_texture_sRGB, GL_EXT_texture_sRGB_decode,
    GL_EXT_texture_shared_exponent, GL_EXT_texture_snorm,
    GL_EXT_texture_swizzle, GL_EXT_timer_query, GL_EXT_transform_feedback,
    GL_EXT_vertex_array, GL_EXT_vertex_array_bgra,
    GL_IBM_multimode_draw_arrays, GL_IBM_rasterpos_clip,
    GL_IBM_texture_mirrored_repeat, GL_INGR_blend_func_separate,
    GL_INTEL_performance_query, GL_KHR_blend_equation_advanced,
    GL_KHR_blend_equation_advanced_coherent, GL_KHR_context_flush_control,
    GL_KHR_debug, GL_KHR_no_error, GL_KHR_robust_buffer_access_behavior,
    GL_KHR_robustness, GL_KHR_texture_compression_astc_ldr,
    GL_KHR_texture_compression_astc_sliced_3d, GL_MESA_pack_invert,
    GL_MESA_shader_integer_functions, GL_MESA_texture_signed_rgba,
    GL_MESA_window_pos, GL_NV_blend_square, GL_NV_conditional_render,
    GL_NV_depth_clamp, GL_NV_light_max_exponent, GL_NV_packed_depth_stencil,
    GL_NV_primitive_restart, GL_NV_texgen_reflection, GL_NV_texture_barrier,
    GL_NV_texture_env_combine4, GL_NV_texture_rectangle, GL_OES_EGL_image,
    GL_OES_read_format, GL_S3_s3tc, GL_SGIS_generate_mipmap,
    GL_SGIS_texture_border_clamp, GL_SGIS_texture_edge_clamp,
    GL_SGIS_texture_lod, GL_SUN_multi_draw_arrays
OpenGL ES profile version string: OpenGL ES 3.2 Mesa 18.1.6
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20
OpenGL ES profile extensions:
    GL_ANDROID_extension_pack_es31a, GL_ANGLE_texture_compression_dxt3,
    GL_ANGLE_texture_compression_dxt5, GL_APPLE_texture_max_level,
    GL_EXT_blend_func_extended, GL_EXT_blend_minmax, GL_EXT_buffer_storage,
    GL_EXT_clip_cull_distance, GL_EXT_color_buffer_float,
    GL_EXT_compressed_ETC1_RGB8_sub_texture, GL_EXT_copy_image,
    GL_EXT_discard_framebuffer, GL_EXT_disjoint_timer_query,
    GL_EXT_draw_buffers, GL_EXT_draw_buffers_indexed,
    GL_EXT_draw_elements_base_vertex, GL_EXT_frag_depth,
    GL_EXT_geometry_point_size, GL_EXT_geometry_shader, GL_EXT_gpu_shader5,
    GL_EXT_map_buffer_range, GL_EXT_multi_draw_arrays,
    GL_EXT_occlusion_query_boolean, GL_EXT_polygon_offset_clamp,
    GL_EXT_primitive_bounding_box, GL_EXT_read_format_bgra, GL_EXT_robustness,
    GL_EXT_separate_shader_objects, GL_EXT_shader_framebuffer_fetch,
    GL_EXT_shader_framebuffer_fetch_non_coherent, GL_EXT_shader_integer_mix,
    GL_EXT_shader_io_blocks, GL_EXT_shader_samples_identical,
    GL_EXT_tessellation_point_size, GL_EXT_tessellation_shader,
    GL_EXT_texture_border_clamp, GL_EXT_texture_buffer,
    GL_EXT_texture_compression_dxt1, GL_EXT_texture_cube_map_array,
    GL_EXT_texture_filter_anisotropic, GL_EXT_texture_format_BGRA8888,
    GL_EXT_texture_rg, GL_EXT_texture_sRGB_decode,
    GL_EXT_texture_type_2_10_10_10_REV, GL_EXT_unpack_subimage,
    GL_INTEL_conservative_rasterization, GL_INTEL_performance_query,
    GL_KHR_blend_equation_advanced, GL_KHR_blend_equation_advanced_coherent,
    GL_KHR_context_flush_control, GL_KHR_debug, GL_KHR_no_error,
    GL_KHR_robust_buffer_access_behavior, GL_KHR_robustness,
    GL_KHR_texture_compression_astc_ldr,
    GL_KHR_texture_compression_astc_sliced_3d,
    GL_MESA_shader_integer_functions, GL_NV_draw_buffers,
    GL_NV_fbo_color_attachments, GL_NV_image_formats, GL_NV_read_buffer,
    GL_NV_read_depth, GL_NV_read_depth_stencil, GL_NV_read_stencil,
    GL_OES_EGL_image, GL_OES_EGL_image_external,
    GL_OES_EGL_image_external_essl3, GL_OES_EGL_sync,
    GL_OES_compressed_ETC1_RGB8_texture, GL_OES_copy_image, GL_OES_depth24,
    GL_OES_depth_texture, GL_OES_depth_texture_cube_map,
    GL_OES_draw_buffers_indexed, GL_OES_draw_elements_base_vertex,
    GL_OES_element_index_uint, GL_OES_fbo_render_mipmap,
    GL_OES_geometry_point_size, GL_OES_geometry_shader,
    GL_OES_get_program_binary, GL_OES_gpu_shader5, GL_OES_mapbuffer,
    GL_OES_packed_depth_stencil, GL_OES_primitive_bounding_box,
    GL_OES_required_internalformat, GL_OES_rgb8_rgba8, GL_OES_sample_shading,
    GL_OES_sample_variables, GL_OES_shader_image_atomic,
    GL_OES_shader_io_blocks, GL_OES_shader_multisample_interpolation,
    GL_OES_standard_derivatives, GL_OES_stencil8, GL_OES_surfaceless_context,
    GL_OES_tessellation_point_size, GL_OES_tessellation_shader,
    GL_OES_texture_3D, GL_OES_texture_border_clamp, GL_OES_texture_buffer,
    GL_OES_texture_cube_map_array, GL_OES_texture_float,
    GL_OES_texture_float_linear, GL_OES_texture_half_float,
    GL_OES_texture_half_float_linear, GL_OES_texture_npot,
    GL_OES_texture_stencil8, GL_OES_texture_storage_multisample_2d_array,
    GL_OES_vertex_array_object, GL_OES_vertex_half_float,
    GL_OES_viewport_array
````
"02/09/21 04:07:46 AMAdd tabs support. Rm event_loop.rs/channels/mio/etc"While adding support for tabs in Alacritty I also removed the use of channels and also the mio dependency in what I hope might be a simpler approach depending heavily on RwLocks. The FairMutex is still used in a few places as well.

Currently the selected tab and list of available tabs is displayed in the top right of the window." =||= Hopefully that should be resolved with #2438. Though it's likely that this is going to be only in the 0.3.4 release.bebrwsBrad Barrows02/09/21 04:04:58 AMRemove some yet to be implemented features and comments and the like1
478308/22/18 08:48:22 PMLiam DawsonStabilize configuration format?"In the README, it states:
> Precompiled binaries will eventually be made available on supported platforms. _This is minimally blocked on a stable config format._
(emphasis mine).
What do we need to achieve to reach that point?

I can see a few issues thus far that probably relate:
* Can't use YAML references (https://github.com/jwilm/alacritty/issues/1127)
* Suggestion to support TOML (https://github.com/jwilm/alacritty/issues/1217)"02/10/21 06:45:50 PMAdding support for tabs"Removed the use of channels and depending on RwLocks
Windows tab support has been tested as well and OSX" =||= "The issue with the configuration file is not that the technology and libraries it uses are unstable, but that the Alacritty configuration is not set in stone. So it's possible and likely that the configuration file will still undergo major changes.

However I do not think that this should hold us back from publishing github releases at this point. I think the bigger problem with precompiled binaries is that there is no version tagging. Which is already tracked in #1240.

I'm going to close this issue since there are no direct steps to take here. If the goal is to have precompiled binaries then #80 and #1240 should be followed. I suspect that once #1240 is closed that #80 will not take much longer to solve.

If you have any further questions, feel free to ask."bebrwsBrad Barrows02/10/21 06:34:30 PMRevert test Windows binding changes1
478909/17/18 09:44:30 PMNathan WestFixed fish completions in the deb installer03/01/21 07:50:40 PMAdd regex terminal hints"This adds support for hints, which allow opening parts of the visual
buffer with external programs if they match a certain regex.

This is done using a visual overlay triggered on a specified key
binding, which then instructs the user which keys they need to press to
pass the text to the application.

In the future it should be possible to supply some built-in actions for
Copy/Pasting the action and using this to launch text when clicking on
it with the mouse. But the current implementation should already be
useful as-is."1Oh, never mind, it did work. I idiotically forgot that OSX doesn't install .deb files.chrisduerrChristian Duerr02/28/21 04:10:33 AMFix remaining style issues1
479008/25/18 03:04:51 PMNathan WestRemove debug from release profileThe default release profile should probably not have debug symbols in it, by default. Developers can always opt-in to it manually if needed.02/13/21 06:15:57 PMUpdate dependenciesFixes #4735. =||= "As you can see in #1340, it is desired to keep the backtraces around. If someone wants to report a bug with Alacritty, it helps significantly if they don't have to recompile from source for useful backtraces.

Your comment about performance also doesn't hold up here. There actually is no impact on performance. I've benchmarked this before and there is no difference. If you have any benchmarks that show a different story, please let me know.

The only negative effect of debug symbols in a release build is that the binary size will be increased. So if Alacritty is compiled with debug symbols, for example, the binary is 35M big. If I recompile that without debug symbols by removing `debug = true` from the binary, there's 8.2M left. Alacritty however still adds some debug symbols even without that, so if we run `strip` on the final binary there will be 5.3M left.

Hope this helps understanding this. Please let me know when you have any more information."chrisduerrChristian Duerr02/13/21 05:50:34 PM"Update dependencies

This introduces some duplicate dependencies, though they are necessary
to build properly without any warnings.

Fixes #4735."1
479508/27/18 05:17:50 PMKirill ChibisovF16-F19 keys not working properly."Which operating system does the issue occur on? macOs 10.14

My config for F keys:
![screenshot 2018-08-27 at 19 58 32](https://user-images.githubusercontent.com/27620401/44674341-e4001780-aa35-11e8-9279-232b1a0335cb.png)

Screen cast in alacritty ( I'm pressing keys from F13 to F19)
TERM: xterm-256color


"02/15/21 02:58:13 PMLimit the maximum DPR on X11 to 10"Since there have a bunch of problems caused by an excessive DPI reported
by XRandr, this limits the maximum DPR on X11 to 10.

These issues would commonly cause problems like long startup times or
crashes, which are hard to troubleshoot for the user. While a limit of
10 might not eliminate all of these issues, it should still make it
possible for Alacritty to start to make troubleshooting simpler.

Fixes #3214." =||= "As you can see in #1340, it is desired to keep the backtraces around. If someone wants to report a bug with Alacritty, it helps significantly if they don't have to recompile from source for useful backtraces.

Your comment about performance also doesn't hold up here. There actually is no impact on performance. I've benchmarked this before and there is no difference. If you have any benchmarks that show a different story, please let me know.

The only negative effect of debug symbols in a release build is that the binary size will be increased. So if Alacritty is compiled with debug symbols, for example, the binary is 35M big. If I recompile that without debug symbols by removing `debug = true` from the binary, there's 8.2M left. Alacritty however still adds some debug symbols even without that, so if we run `strip` on the final binary there will be 5.3M left.

Hope this helps understanding this. Please let me know when you have any more information."chrisduerrChristian Duerr02/15/21 02:44:30 PMReuse existing wayland variable1
480411/10/18 04:08:49 PMKirill ChibisovF16-F19 keys not working properly."Which operating system does the issue occur on? macOs 10.14 public beta 7

My config for F keys:
![screenshot 2018-08-27 at 19 58 32](https://user-images.githubusercontent.com/27620401/44674341-e4001780-aa35-11e8-9279-232b1a0335cb.png)

Screen cast in alacritty ( I'm pressing keys from F13 to F19)
TERM: xterm-256color

![ezgif-2-846e274177](https://user-images.githubusercontent.com/27620401/44674607-b8c9f800-aa36-11e8-8a83-b49d31d21dd7.gif)

Screen cast in iterm2 ( I'm pressing keys from F13 to F19)
TERM: xterm-256color

![ezgif-2-bd5af78a1b](https://user-images.githubusercontent.com/27620401/44674635-d4350300-aa36-11e8-906b-0976055637f5.gif)

"02/18/21 04:25:50 AMFix cursor position when scrolled into history"This fixes a regression introduced in 530de00, where the terminal cursor
would move up when the user scrolled up in the terminal history, rather
than staying in place.

Fixes #4784." =||= "All the available key combinations can be seen [here](https://docs.rs/glutin/0.18.0/glutin/enum.VirtualKeyCode.html#variant.F12). Since Glutin/Winit do not provide bindings beyond F15, it's currently not possible to add them to Alacritty.

To make these work it would be necessary to add them to `winit` first. And as soon as they are added there, they should automatically start working in Alacritty.

I'd assume that adding these bindings is fairly simple, so the quickest way to get this working would probably be to send a PR to `winit`. Otherwise it might take a bit until someone gets to it."chrisduerrChristian Duerr02/18/21 01:21:24 AM"Fix cursor position when scrolled into history

This fixes a regression introduced in 530de00, where the terminal cursor
would move up when the user scrolled up in the terminal history, rather
than staying in place.

Fixes #4784."1
480509/17/18 08:32:09 PMDavid Peter"Set the COLORTERM environment variable to ""truecolor""""alacritty has truecolor/24-bit support. However, up to my knowledge, [there is currently no way for applications to detect that](https://github.com/sharkdp/bat/issues/220).

A lot of other terminals (terminator, iTerm2, konsole, hyper, ...) set the `COLORTERM` environment variable to `truecolor` to indicate that the terminal supports it (see https://gist.github.com/XVilka/8346728 for more details).

It is not a really great solution (it can fail if you start a terminal from another terminal, for example), but apparently there is currently no other standard.

I would therefore propose that alacritty sets `COLORTERM=truecolor` in order for application developers to detect whether or not the terminal supports it.

(I wanted to add a special case for alacritty, but I don't even know how to detect it. There doesn't seem to be any environment variable that clearly identifies alacritty?)"02/18/21 08:27:53 PMFix search freezing Alacritty"This resolves a regression introduced in 530de00 where searching would
cause a deadlock when the viewport is at the bottom of the scrollback
and a match ends in the last cell.

Fixes #4800." =||= "All the available key combinations can be seen [here](https://docs.rs/glutin/0.18.0/glutin/enum.VirtualKeyCode.html#variant.F12). Since Glutin/Winit do not provide bindings beyond F15, it's currently not possible to add them to Alacritty.

To make these work it would be necessary to add them to `winit` first. And as soon as they are added there, they should automatically start working in Alacritty.

I'd assume that adding these bindings is fairly simple, so the quickest way to get this working would probably be to send a PR to `winit`. Otherwise it might take a bit until someone gets to it."chrisduerrChristian Duerr02/18/21 02:38:57 AM"Fix search freezing Alacritty

This resolves a regression introduced in 530de00 where searching would
cause a deadlock when the viewport is at the bottom of the scrollback
and a match ends in the last cell.

Fixes #4800."1
481609/17/18 08:32:09 PMDavid PeterProposal: Set COLORTERM variable to advertise 24-bit support"Set `COLORTERM` to `truecolor` in order for applications to be able to
detect that alacritty supports 24-bit colors.

See https://gist.github.com/XVilka/8346728 for more details.

closes #1526"02/19/21 07:00:10 PMAdded missing `Drop` implementations.https://github.com/alacritty/alacritty/issues/4815 =||= "All the available key combinations can be seen [here](https://docs.rs/glutin/0.18.0/glutin/enum.VirtualKeyCode.html#variant.F12). Since Glutin/Winit do not provide bindings beyond F15, it's currently not possible to add them to Alacritty.

To make these work it would be necessary to add them to `winit` first. And as soon as they are added there, they should automatically start working in Alacritty.

I'd assume that adding these bindings is fairly simple, so the quickest way to get this working would probably be to send a PR to `winit`. Otherwise it might take a bit until someone gets to it."L117"Mikhail ""L117"" Nikolenko"02/19/21 12:35:55 PMAdded missing `Drop` implementations.1
482007/10/20 07:32:45 PMYavor IvanovAdd support for audio bell"Which operating system does the issue occur on?
macOS High Sierra v10.13.6

I don't get any audio notification for the terminal bell. The config file has options for `visual_bell`, but that's of no help when I'm looking at other fullscreen windows.

For the time being, I've worked around the problem using tmux:
```tmux
# Some hacks for OSX Alacritty audio bell
set -g monitor-bell on
set -g bell-action other
set-hook -g alert-bell 'run-shell ""afplay /System/Library/Sounds/Funk.aiff""'
```

Does Alacritty not provide an audio bell? If not, is the feature planned or out of scope?"02/20/21 12:33:03 AMAdd version 0.7.2 to changelog =||= "> Your shell can send `\a` after command is done (you can set it yourself in shell, it should provide hooks) and if you setup bell command in alacritty you'll get audio bell. if you want audio only in that particular case you can may do that entirely in shell.

Thanks, I'll try :)"chrisduerrChristian Duerr02/20/21 12:03:34 AMAdd version 0.7.2 to changelog1
483509/30/18 09:54:09 PMNoneResizing window gives bad performance"OS: Mac OS 10.13.6（17G65）

Steps to reproduce:
- Launch alacritty
- Quickly resize the window to something large
- Run [this program](https://github.com/jwilm/alacritty/files/2339241/main.c.zip) with the argument `10000` which will write 10000 4096-byte buffers of `a`s to stdout

Expected result: takes the same amount of time as it does if you don't resize (0.7s on my computer)
Actual result: takes over 10 times as long (10.7s on my computer)
Note: For some reason, resizing the window a few characters at a time avoids the issue, it only happens if you resize it a bunch at a time.

Possible cause:
I ran an Instruments System Trace on alacritty while the issue was happening and there appears to be an issue with a mutex being held during an OpenGL call which ends up taking 16ms.  
Here's what appears to be a processing thread, which appears to be happily spamming the read syscall until it suddenly gets stuck on a mutex and is blocked for 19.12ms on a psynch_cvwait call.  In the end, it only ends up processing anything about 15% of the time, the rest of the time is spent waiting. 
<img width=""1680"" alt=""parsethread"" src=""https://user-images.githubusercontent.com/3315070/44901754-e1b7ea80-accd-11e8-95e0-fa49ffa8a270.png"">
At the time that the processing thread was waiting for the main thread, the main thread was in the middle of what I assume is an OpenGL call, since the stack trace goes through a bunch of functions that look like they're from OpenGL.  The main thread proceeds to call two more OpenGL things (the two other `mach_msg_trap`s have similar backtraces) before finally calling `psynch_cvsignal` which unblocks the processing thread.
<img width=""1680"" alt=""mainthread"" src=""https://user-images.githubusercontent.com/3315070/44901842-1461e300-acce-11e8-845d-1cfab3d8c5f6.png"">"02/22/21 11:54:13 PMFix selection after search without match"This resolves an issue where the last match would be selected after
leaving non-vi search, even if further changes to the search regex did
not result in any matches.

Fixes #4831." =||= "This has been automatically closed since #1607 has been merged and it should resolve this problem. However it was never confirmed if it actually does fix this.

So if this issue is still present, please leave a comment and I'll re-open it."chrisduerrChristian Duerr02/22/21 11:31:11 PM"Fix selection after search without match

This resolves an issue where the last match would be selected after
leaving non-vi search, even if further changes to the search regex did
not result in any matches.

Fixes #4831."1
483909/17/18 04:03:39 PMFilipe LaínsCreate a release?Hey, can you create a release so that I can properly distribute this package?02/24/21 06:20:47 PMAdd sync update terminfo and docs"This adds documentation stating that Alacritty supports the synchronized
update escape, which was implemented in 9575aed.

Since tmux does check terminfo for this feature, the `Sync` capability
has also been added. Tmux's implementation can be found here:

https://github.com/tmux/tmux/blob/f5b7ebc540fe3db5c3a5fe97d01de44551e76058/tty-features.c#L185" =||= Solved in ca1b75b4c094460e19e62241cc2fadb934ba56a5.chrisduerrChristian Duerr02/24/21 04:25:43 PM"Add sync update terminfo and docs

This adds documentation stating that Alacritty supports the synchronized
update escape, which was implemented in 9575aed.

Since tmux does check terminfo for this feature, the `Sync` capability
has also been added. Tmux's implementation can be found here:

https://github.com/tmux/tmux/blob/f5b7ebc540fe3db5c3a5fe97d01de44551e76058/tty-features.c#L185"1
484209/01/18 07:26:59 PMAlex VincentColor change not updating"<img width=""787"" alt=""screen shot 2018-09-01 at 09 57 10"" src=""https://user-images.githubusercontent.com/25521899/44948151-85d48b00-adcd-11e8-87bc-8ac064a67996.png"">
When I updated the ~/alacritty/alacritty.yml file in macosx with the gruvbox theme, alacritty does not change colors after restart. What am I doing wrong? Thanks in advance.
"02/24/21 05:52:36 PMBump base64 to 0.13, deduping it =||= For those who may also stumble on this issue for a related issue - this *doesn't* (obviously) stop any config in your shell of choice (mine is Zsh) from changing the color scheme. I had `dynamic-colors init` still running in my `.zshrc` which changed the color from what I had configured in Alacritty.EijebongBastien Orivel02/24/21 05:35:51 PMBump base64 to 0.13, deduping it1
484509/05/18 04:02:13 PMNoneRemove redundant copy when selecting font_keySmall PR to stop the redundant copying of `glyph_cache.font_key` for each cell when the cell is bold or italic, probably will only make the slightest perf improvement if rendering loads of underlined or bold cells02/26/21 07:54:10 PMFix vi cursor after leaving search"This resolves an issue which caused the vi cursor position to be
incorrect when leaving the search with the vi cursor at the far bottom.

Previously this could lead to the vi cursor disappearing completely,
when starting a vi mode search that has a match on the last line while
the original vi mode cursor was right above it.

Fixes #4833."1For those who may also stumble on this issue for a related issue - this *doesn't* (obviously) stop any config in your shell of choice (mine is Zsh) from changing the color scheme. I had `dynamic-colors init` still running in my `.zshrc` which changed the color from what I had configured in Alacritty.chrisduerrChristian Duerr02/25/21 11:50:33 PMFix vi cursor position when pulling from history1
484909/05/18 04:06:42 PMMehmet AydogduColor schema added to ~/.alacritty/alacritty.yml but did not change anything"OSX High Sierra
ZSH? - I am not configred to use zsh but it seems like using zsh

Another issue
sudo cp alacritty-completions.zsh /usr/share/zsh/functions/Completion/X/_alacritty
This command says no such file or directory"02/26/21 08:36:38 PMFix hollow block cursor being drawn for hidden cursor"Commit 530de00 refactored large chunk of Alacritty's internal handling
of renderable cells, cursors, and such, those it introduced a
regression when hollow block cursor was drawn for unfocused window
with hidden cursor, e.g. in (neo)mutt. This commit fixes it." =||= "You'll have to find the `alacritty` binary wherever it's installed (somewhere under /Applications; try `find -name alacritty /Applications`).

In any case, this sounds like a configuration error."kchibisovKirill Chibisov02/26/21 04:09:56 PM"Fix hollow block cursor being drawn for hidden cursor

Commit 530de00 refactored large chunk of Alacritty's internal handling
of renderable cells, cursors, and such, those it introduced a
regression when hollow block cursor was drawn for unfocused window
with hidden cursor, e.g. in (neo)mutt. This commit fixes it."1
485009/17/18 03:15:33 PMJoe WilmAdd CHANGELOGBefore shipping scrollback, add a CHANGELOG file. We don't need to worry about backdating for everything that's happened in the last 21 months ;).02/27/21 03:06:23 PMRun clippy on MSRV"Since not all suggested clippy lints by stable clippy are supported on
the MSRV of Alacritty, this commit moves the clippy checks to the MSRV.

Unfortunately this will mean that our lints might be significantly
behind, however it ensures our CI never blocks any code that should be
valid.

Developers themselve of course can still run the latest clippy to follow
the up to date recommendations." =||= "I've added a basic CHANGELOG here: #1492. Hopefully that will capture at least a few of the changes introduced in the scrollback PR already. For future versions there shouldn't be any issue.

I've just left the version out for now since `0.2.0` is not released yet."chrisduerrChristian Duerr02/27/21 04:25:22 AMBump minimum supported Rust version to 1.45.01
485309/30/18 09:54:09 PMJoe WilmInvestigate storing Renderable Cells in RendererSee #1529 for details. Basically, only hold the mutex for as long as it takes to transform the screen state into renderable cells list. Renderer will keep a persistent vector of these.02/28/21 05:12:25 PMadd Windows version requirements to readme"Addresses #4846 by documenting the Windows version requirement now that
ConPTY is the only backend." =||= "I've added a basic CHANGELOG here: #1492. Hopefully that will capture at least a few of the changes introduced in the scrollback PR already. For future versions there shouldn't be any issue.

I've just left the version out for now since `0.2.0` is not released yet."r-c-fr-c-f02/28/21 04:57:50 PM"Update README.md

Co-authored-by: Christian Duerr <contact@christianduerr.com>"1
485909/12/18 01:39:29 PMNoneKDE + tmux: transparent and glitched background"Linux, X11, KDE.

On detaching from tmux session and switching from maximized to smaller size window (and vice versa) the background becomes completely transparent, sometimes with severe rendering artifacts present as well.

Unable to demonstrate this effect on a screenshot, because taking it immediately restores the window back to normal. It looks like there's a texture that does not initialize its memory and displays garbage.

Steps to reproduce:
1. Launch alacritty
2. run `tmux a` or createa new session
2. Detach from session (C-b d)
3. Maximize the window
4. The rendering bug should occur until the window is re-rendered."03/01/21 12:50:47 AMRemove incorrect changelog entry"Since the bug was not present in the 0.7.2 release, there is no need to
add a changelog entry for this fix." =||= Yeah I no longer have this problem. Thanks.chrisduerrChristian Duerr03/01/21 12:34:09 AM"Remove incorrect changelog entry

Since the bug was not present in the 0.7.2 release, there is no need to
add a changelog entry for this fix."1
486609/11/18 02:30:04 PMNonesuggestion"it would be cool to have GPU accelerated rendering of web apps that run in your terminal
https://github.com/unconed/TermKit#readme
though it might be a better idea to have an optional dependency that adds support for these web technologies"04/03/21 11:52:45 PMAdd copy/paste hint actions"This adds some built-in actions for handling hint selections without
having to spawn external applications.

The new actions are `Copy` and `Paste`, which allow writing the text to
the clipboard or the PTY."4This isn't going to happen. We are interested in extending functionality with `notty` protocol at some point, though.chrisduerrChristian Duerr04/02/21 01:59:27 AMFix documentation1
487009/09/18 10:46:36 PMSimon LarssonAlacritty stops drawing until different window is selected when using compton"Which operating system does the issue occur on?
Artix (Arch)

If on linux, are you using X11 or Wayland?
X11

If I have compton on with GLX as backend, alacritty becomes unusable by constantly locking up whenever i hold down a key, as in for example scrolling in _vim_, _less_, _man_.

This is only a problem in Alacritty

As can be seen in gif, alacritty seems to still take keyboard input and work normally except that it just doesn't redraw.

**Gif of issue in action:**
![Gif of issue in action](https://i.imgur.com/EpVpnaP.gif)"03/02/21 07:50:10 PMReset the cursor style when leaving the alt grid"According to invisible-island's docs for `CSI 1049 Pm l`, we should be
resetting the cursor style in addition to changing back to the normal
buffer.

fixes #4868
fixes #4505"4"Hm, I guess that solves the issue for now, thanks for updating this issue.

If someone else has similar problems, it might be worth looking into what exactly is going on here. Might be a combination of Alacritty/Winit/Glutin using some niche feature and spectrwm not supporting it."nixpulvisNathan Lilienthal03/02/21 07:23:28 PM"Reset the cursor style when leaving the alt grid

According to invisible-island's docs for `CSI 1049 Pm l`, we should be
resetting the cursor style in addition to changing back to the normal
buffer."1
487609/19/18 10:49:20 PMNoneThe fix for #1291 caused a regression in Linux (and Windows) mouse click handling"On Linux (X11) wit click-to-focus WM (i3).  Gnome and KDE both default to click-to-focus, so I expect most Linux users will be affected.

Previous versions of Alacitty worked on my system the same way that every GTK+ app, every Qt App, Electron apps, xterm, rxvt, etc.  In fact, this is the first time I've seen an X11 app behave this way, like a MacOSX app.  Which is not surprising since Issue #1291 was for Mac users who were surprised by the X11 behavior.

Qt and GTK+ apps actually change the mouse cursor to show the expected result of clicking, which for a terminal is the ""I"" bar indicating that selection is possible.  With this change, that (expected, normal) visual cue is misleading.

I don't think there needs to be an configuration option for this, because I expect pretty much everyone to want their terminal to behave according to the conventions of their OS, so just making this MacOS only would fix the issue.

From my limited testing, it appears that Windows follows the X11 convention.  Both firefox's URL bar and Cygwin's terminal will let you start a selection with the first click on an unfocused window.  cmd.exe's console is hard to tell, since you need an explicit command to start selection even when the window is focused, but I do note that right-clicking on an unfocused cmd.exe window does immediately pop up the context menu.

@felippemr @chrisduerr "03/06/21 03:18:48 AMFix vi mode search"This fixes a regression introduced in a954e07 which caused the vi mode
cursor to be invisible after starting a search.

This was caused by a discrepancy between the search DFA and search
active state, since a search is not active after it has been confirmed
but the DFAs are still present for highlighting." =||= See #1540.chrisduerrChristian Duerr03/05/21 11:49:27 PM"Fix vi mode search

This fixes a regression introduced in a954e07 which caused the vi mode
cursor to be invisible after starting a search.

This was caused by a discrepancy between the search DFA and search
active state, since a search is not active after it has been confirmed
but the DFAs are still present for highlighting."1
489209/17/18 08:00:43 PMNoneFix #1539."Fixes a regression on non-MacOS platforms caused by the fix for
issue #1291.  The fix is to follow platform norms for mouse click
behavior on unfocused terminals.  On MacOS, the first click (that
gives the window focus) is swallowed, and has no effect on the
terminal.  On all other platforms, the first click is passed through
to the terminal.

A new config option is added to the ""mouse"" section of the config,
called ""ignore_unfocused_click"".  If unspecified, it will follow
the default for the platform.  Very few users are likely to want
to use non-platform-standard behavior here, but the option is there."03/12/21 07:40:18 PMfix clippy::inconsistent_struct_constructorMake sure that struct fields in the instantiation are ordered the same as in the definition.5Feel free to open an issue to gather some more feedback, that's likely the best way to estimate how relevant this feature is.matthiaskrgrMatthias Krüger03/12/21 02:42:24 PM"fix clippy::inconsistent_struct_constructor

Make sure that struct fields in the instantiation are ordered the same as in the definition."1
489411/14/18 09:49:35 PMDustverAdd to readme. on ubuntu 18.04 need to install xclip package."_Which operating system does the issue occur on?_ -> Linux 4.15.0-34-generic #37-Ubuntu18.04 SMP Mon Aug 27 15:21:48 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

_If on linux, are you using X11 or Wayland?_ -> X11

after ""cargo deb --install"" installation has aborted with error ""xclip package not installed"".
add to readme line ""sudo apt install xclip"""04/14/21 01:06:20 AMFixed IME position being little earlier one in X11"This fixes that IME position being little earlier one in X11.

I tested on X11 gnome (3.36.4-1ubuntu1~20.04.2) and mozc (2.23.2815.102+dfsg-8ubuntu1) on Ubuntu.

https://user-images.githubusercontent.com/16546008/111015999-c5dd4580-83ee-11eb-9f9f-001454a0a173.mp4"3"The .deb build instructions should be moved to the INSTALL.md, since all dependencies are required to build it.

That should resolve this issue too."moko256moko25603/07/21 04:11:50 PMFixed IME position being little earlier one in X111
489509/17/18 05:27:12 PMChristian DuerrAdd gperf travis build dependency"Some builds were failing with an error which mentions that `gperf` needs
to be installed.

This should fix failing builds on linux by installing the required
package before anything else."03/15/21 02:27:57 PMchange windows default url_launcher"When clicking on a link on windows we don't want to launch Explorer.

Using `cmd /c start """" $LINK/$PATH` opens files and protocols with
their default programs.

Fixes #4885.
Fixes #2084."1Looks like the build works again even without adding `gperf` as a build dependency. All good now.fuzzmzSerban Constantin03/13/21 02:35:47 PM"change windows default url_launcher

When clicking on a link on windows we don't want to launch Explorer.

Using `cmd /c start """" $LINK/$PATH` opens files and protocols with
their default programs."1
489809/26/18 06:38:29 PMElie Grenon (DrunkenPoney)The CPL escape sequence isn't working"I'm on linux and I'm using X11.

There's an issue with the ANSI escape sequences.
The CPL escape sequence does not seem to work (`ESC[#F` where `#` is a number)

See https://github.com/terkelg/prompts/issues/89#issuecomment-421069795 for more informaion."03/15/21 02:05:01 PMfix: add Jonathan Simcoe's macOS icnsmacOS users want this, as it helps integration into Big Sur without needing extra manual patch steps. =||= This has been implemented in #1590.radiosilenceJames Cleveland03/15/21 01:37:08 PMfix: add Jonathan Simcoe's macOS icns1
490709/17/18 06:16:35 PMErik NilsenCustom colors defined in alacritty.yml don't seem to work"Which operating system does the issue occur on?

Ubuntu 18.04.1

If on linux, are you using X11 or Wayland?

X11

Alacritty version: master (8b71eed)

Note: I have a feeling an api updated and the color schemes in the wiki haven't updated but I don't have time to verify this.
"03/30/21 11:25:39 PMSwitch to a uniform grid line indexing system"Previously Alacritty was using two different ways to reference lines in
the terminal. Either a usize, or a Line(usize). These indexing systems
both served different purposes, but made it difficult to reason about
logic involving these systems because of its inconsistency.

To resolve this issue, a single new Line(i32) type has been introduced.
All existing references to lines and points now rely on this definition
of a line.

The indexing starts at the top of the terminal region with the line 0,
which matches the line 1 used by escape sequences. Each line in the
history becomes increasingly negative and the bottommost line is equal
to the number of visible lines minus one.

Having a system which goes into the negatives allows following the
escape sequence's indexing system closely, while at the same time making
it trivial to implement `Ord` for points.

The Alacritty UI crate is the only place which has a different indexing
system, since rendering and input puts the zero line at the top of the
viewport, rather than the top of the terminal region.

All instances which refer to a number of lines/columns instead of just a
single Line/Column have also been changed to use a `usize` instead. This
way a Line/Column will always refer to a specific place in the grid and
no confusion is created by having a count of lines as a possible index
into the grid storage."3Nevermind I figured out my issue :PchrisduerrChristian Duerr03/29/21 03:01:54 AMFix Windows build1
491909/18/18 03:24:10 PMVincent FoleyThe geometry of the terminal does not match the dimensions configuration"In Alacritty v0.2.0, with a clean `alacritty.yml`, when I open a terminal window, instead of being 80x24 as configured, it opens with a geometry of 47x14 instead.

```
~$ rg 'columns:|lines:' .config/alacritty/alacritty.yml
22:    columns: 80
23:    lines: 24
~$ tput lines
14
~$ tput cols
47
``` 


Which operating system does the issue occur on?

Debian unstable

If on linux, are you using X11 or Wayland?

X11.  Here is my Xft configuration (in `.Xdefaults`):
```
Xft.autohint: 0
Xft.antialias: 1
Xft.hinting: true
Xft.hintstyle: hintslight
Xft.dpi: 96
Xft.rgba: rgb
Xft.lcdfilter: lcddefault
```"03/31/21 07:11:17 PMKeep viewport in place when resizing"Fixes #4879

First of all, I'd like to thank you for maintaining the most awesome terminal emulator out there. Keep it up :)

My code anchors the viewport at the last visible line. This corresponds to my intuition of how terminal emulators should work. If you want it anchored at the first visible line or have another approach at this issue feel free to leave a comment.

Your feedback is appreciated."2Thanks for mentioning that issue. Closing as duplicate of #952.st3inyChristian Duerr03/31/21 06:46:35 PMAdd changelog message1
492309/17/18 06:53:05 PMVarunCan't build alacritty on macOS Sierra"Which operating system does the issue occur on?
MacOS Sierra
If on linux, are you using X11 or Wayland?

```
alacritty ((v0.2.0)) cargo build --release
    Updating registry `https://github.com/rust-lang/crates.io-index`
error: failed to fetch `https://github.com/rust-lang/crates.io-index`
Caused by:
  failed to authenticate when downloading repository
attempted ssh-agent authentication, but none of the usernames `git` succeeded
Caused by:
  no authentication available

```

It looks like either a cargo issue or git issue, but thought of asking here and googling didn't help yet.

Note: Already tried `rm -rf ~/.cargo/registry`, didn't help."03/28/21 06:02:13 PMfixed the incorrect underline thickness on wide cell"fixes #4922 "2Thanks for updating this issue, that should hopefully help out the next person with this problem!stokhosStokhos03/28/21 12:10:10 AMfixed incorrect underline thickness on wide cell1
493609/17/18 07:09:40 PMChristian Rebischkeadded mention of official arch linux package"Hello,
I have moved `alacritty` to the official arch linux repositories: https://www.archlinux.org/packages/community/x86_64/alacritty/

Thanks for the cool work! It would be nice to have signatures for future releases. 
"04/02/21 09:36:35 PMFix focused match selection color"In 3bd5ac221ab3b122962063edd1f4c10f9f2d117f a regression was introduced
which caused the selection of a focused match to invert the cell color
back to its original color. This was due to the removal of the
`is_match` flag on the renderable cell, which was used to make sure a
cell is not marked as part of a match if it is already part of a
selection.

Instead of relying on a flag that is passed through from content.rs, the
application of the cell colors is instead done in the content.rs file
directly. This not only fixes the bug with selecting the focused match,
but also makes the logic a bit more transparent.

Fixes #4934." =||= Thanks a lot for the PR and for maintaining Alacritty in the official Archlinux repositories! Very much appreciated!chrisduerrChristian Duerr04/02/21 08:59:27 PM"Fix focused match selection color

In 3bd5ac221ab3b122962063edd1f4c10f9f2d117f a regression was introduced
which caused the selection of a focused match to invert the cell color
back to its original color. This was due to the removal of the
`is_match` flag on the renderable cell, which was used to make sure a
cell is not marked as part of a match if it is already part of a
selection.

Instead of relying on a flag that is passed through from content.rs, the
application of the cell colors is instead done in the content.rs file
directly. This not only fixes the bug with selecting the focused match,
but also makes the logic a bit more transparent.

Fixes #4934."1
494709/18/18 04:36:38 PMDevon MeunierTouch ID sudo doesn't work on MacOS"With the following `/etc/pam.d/sudo` contents:

```
# sudo: auth account password session
auth       sufficient     pam_tid.so
auth       sufficient     pam_smartcard.so
auth       required       pam_opendirectory.so
account    required       pam_permit.so
password   required       pam_deny.so
session    required       pam_permit.so
```

I'm able to `sudo` with Touch ID in Terminal.app but not Alacritty."04/08/21 08:29:48 PMFix automatic scrolling on resize"Fixes #4944 

Only rotate viewport if it isn't scrolled. Please give this one a good test."1Closing this as it's actually just a tmux issue.st3inyRichard Steinmetz04/05/21 12:32:40 PM"Fix automatic scrolling on resize

Signed-off-by: Richard Steinmetz <richard@steinmetz.cloud>"1
495809/17/18 08:31:20 PMGil MizrahiHuge memory consumption when setting history variable to a big number"This is on Linux (Ubuntu 17.10), X11.

While running alacritty, changing the `history` variable in the configuration to a big number (say 1,000,000, 10,000,000 and above) results in a huge memory consumption (allocation?) instantly that gets the computer stuck very quickly."04/08/21 09:01:48 PMFixed hide other windows keybinding on macOS"Fixes https://github.com/alacritty/alacritty/issues/3697

Looks like the change in `winit` has already been implemented." =||= "I've opened a PR to set an upper limit to the scrollback history size:
https://github.com/jwilm/alacritty/pull/1551

This should resolve the issue, appreciate the feedback!"kamkudlaKam Kudla04/08/21 08:48:55 PMword change in comment1
496209/18/18 03:54:41 PMChristian DuerrSet upper limit for scrollback history size"Since the scrollback history allocates all lines in memory, it is
possible to specify a scrollback history which is big enough to freeze
the computer due to OOM.

To resolve this issue, an upper limit of `100_000` has been set for the
scrollback history. Even though this might still cause some systems to
freeze, this should provide a good balance for most users."04/13/21 03:24:43 AMAdd vi/mouse hint highlighting support"This patch removes the old url highlighting code and replaces it with a
new implementation making use of hints as sources for finding matches in
the terminal."2"@gregf I just tested in myself and it takes about 300M per terminal, just as an estimate.

This definitely isn't a long-term solution. But it should prevent people from freezing their system by setting the scrollback size too high. Please take a look at https://github.com/jwilm/alacritty/issues/1236 for a more long-term solution to this problem."chrisduerrChristian Duerr04/13/21 03:00:29 AM"Add vi/mouse hint highlighting support

This patch removes the old url highlighting code and replaces it with a
new implementation making use of hints as sources for finding matches in
the terminal."1
496509/20/18 12:04:08 AMDiki AnantaError compiling on Ubuntu 32 bit"Which operating system does the issue occur on?
Ubuntu 18.04

If on linux, are you using X11 or Wayland?
X11

$ rustc --version
rustc 1.29.0 (aa3ca1994 2018-09-11)

And I have installed [extra libraries](https://github.com/jwilm/alacritty#debianubuntu-1).
```shell
 Running `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 --cfg 'feature=""default""' -C metadata=5ee2b18ca4c9524a -C extra-filename=-5ee2b18ca4c9524a --out-dir /home/dikiaap/.local/src/alacritty/target/release/deps -L dependency=/home/dikiaap/.local/src/alacritty/target/release/deps --extern arraydeque=/home/dikiaap/.local/src/alacritty/target/release/deps/libarraydeque-08ee37e97b90e418.rlib --extern base64=/home/dikiaap/.local/src/alacritty/target/release/deps/libbase64-e6eabaf53e7cc438.rlib --extern bitflags=/home/dikiaap/.local/src/alacritty/target/release/deps/libbitflags-b0c8b66076b97148.rlib --extern cgmath=/home/dikiaap/.local/src/alacritty/target/release/deps/libcgmath-0d8067f9268911f7.rlib --extern clap=/home/dikiaap/.local/src/alacritty/target/release/deps/libclap-f307362568949e59.rlib --extern copypasta=/home/dikiaap/.local/src/alacritty/target/release/deps/libcopypasta-58ada58588ce64e6.rlib --extern env_logger=/home/dikiaap/.local/src/alacritty/target/release/deps/libenv_logger-e6fd71e176733754.rlib  --extern errno=/home/dikiaap/.local/src/alacritty/target/release/deps/liberrno-6dfd0d62082eba63.rlib --extern fnv=/home/dikiaap/.local/src/alacritty/target/release/deps/libfnv-c908a0dca541167d.rlib --extern font=/home/dikiaap/.local/src/alacritty/target/release/deps/libfont-258430fbd2fcb0f6.rlib --extern glutin=/home/dikiaap/.local/src/alacritty/target/release/deps/libglutin-af341f60b8b6fa52.rlib --extern libc=/home/dikiaap/.local/src/alacritty/target/release/deps/liblibc-e3c5af6976bd5979.rlib --extern log=/home/dikiaap/.local/src/alacritty/target/release/deps/liblog-772ee7f320a2bec5.rlib --extern mio=/home/dikiaap/.local/src/alacritty/target/release/deps/libmio-2d18fd33b3c7d7e0.rlib --extern mio_more=/home/dikiaap/.local/src/alacritty/target/release/deps/libmio_more-684d665528f741d7.rlib --extern notify=/home/dikiaap/.local/src/alacritty/target/release/deps/libnotify-5951ca4b812defa2.rlib --extern parking_lot=/home/dikiaap/.local/src/alacritty/target/release/deps/libparking_lot-27fbe5ef26366209.rlib --extern serde=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde-80a63e587b7907f5.rlib --extern serde_derive=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_derive-46c4171b1916aa33.so --extern serde_json=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_json-eefe52ccde8f9d85.rlib --extern serde_yaml=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_yaml-7b75d4a36d5d8bec.rlib --extern static_assertions=/home/dikiaap/.local/src/alacritty/target/release/deps/libstatic_assertions-ba749e4bb42cac79.rlib --extern unicode_width=/home/dikiaap/.local/src/alacritty/target/release/deps/libunicode_width-f17deb847f8d49c1.rlib --extern vte=/home/dikiaap/.local/src/alacritty/target/release/deps/libvte-c41d051770f3056c.rlib --extern x11_dl=/home/dikiaap/.local/src/alacritty/target/release/deps/libx11_dl-8c327cb4bfebebf0.rlib --extern xdg=/home/dikiaap/.local/src/alacritty/target/release/deps/libxdg-040b08a04276b707.rlib -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/home/dikiaap/.local/src/alacritty/target/release/build/libloading-4e622ceb383faa3e/out`

error[E0512]: transmute called with types of different sizes
   --> src/grid/storage.rs:226:9
    |
226 |         assert_eq_size!(Row<T>, [u32; 8]);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: source type: grid::row::Row<T> (128 bits)
    = note: target type: [u32; 8] (256 bits)
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: aborting due to previous error

For more information about this error, try `rustc --explain E0512`.
error: Could not compile `alacritty`.

Caused by:
  process didn't exit successfully: `rustc --crate-name alacritty src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C debuginfo=1 --cfg 'feature=""default""' -C metadata=5ee2b18ca4c9524a -C extra-filename=-5ee2b18ca4c9524a --out-dir /home/dikiaap/.local/src/alacritty/target/release/deps -L dependency=/home/dikiaap/.local/src/alacritty/target/release/deps --extern arraydeque=/home/dikiaap/.local/src/alacritty/target/release/deps/libarraydeque-08ee37e97b90e418.rlib --extern base64=/home/dikiaap/.local/src/alacritty/target/release/deps/libbase64-e6eabaf53e7cc438.rlib --extern bitflags=/home/dikiaap/.local/src/alacritty/target/release/deps/libbitflags-b0c8b66076b97148.rlib --extern cgmath=/home/dikiaap/.local/src/alacritty/target/release/deps/libcgmath-0d8067f9268911f7.rlib --extern clap=/home/dikiaap/.local/src/alacritty/target/release/deps/libclap-f307362568949e59.rlib --extern copypasta=/home/dikiaap/.local/src/alacritty/target/release/deps/libcopypasta-58ada58588ce64e6.rlib --extern env_logger=/home/dikiaap/.local/src/alacritty/target/release/deps/libenv_logger-e6fd71e176733754.rlib --extern errno=/home/dikiaap/.local/src/alacritty/target/release/deps/liberrno-6dfd0d62082eba63.rlib --extern fnv=/home/dikiaap/.local/src/alacritty/target/release/deps/libfnv-c908a0dca541167d.rlib --extern font=/home/dikiaap/.local/src/alacritty/target/release/deps/libfont-258430fbd2fcb0f6.rlib  --extern glutin=/home/dikiaap/.local/src/alacritty/target/release/deps/libglutin-af341f60b8b6fa52.rlib --extern libc=/home/dikiaap/.local/src/alacritty/target/release/deps/liblibc-e3c5af6976bd5979.rlib --extern log=/home/dikiaap/.local/src/alacritty/target/release/deps/liblog-772ee7f320a2bec5.rlib --extern mio=/home/dikiaap/.local/src/alacritty/target/release/deps/libmio-2d18fd33b3c7d7e0.rlib --extern mio_more=/home/dikiaap/.local/src/alacritty/target/release/deps/libmio_more-684d665528f741d7.rlib --extern notify=/home/dikiaap/.local/src/alacritty/target/release/deps/libnotify-5951ca4b812defa2.rlib --extern parking_lot=/home/dikiaap/.local/src/alacritty/target/release/deps/libparking_lot-27fbe5ef26366209.rlib --extern serde=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde-80a63e587b7907f5.rlib --extern serde_derive=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_derive-46c4171b1916aa33.so --extern serde_json=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_json-eefe52ccde8f9d85.rlib --extern serde_yaml=/home/dikiaap/.local/src/alacritty/target/release/deps/libserde_yaml-7b75d4a36d5d8bec.rlib --extern static_assertions=/home/dikiaap/.local/src/alacritty/target/release/deps/libstatic_assertions-ba749e4bb42cac79.rlib --extern unicode_width=/home/dikiaap/.local/src/alacritty/target/release/deps/libunicode_width-f17deb847f8d49c1.rlib --extern vte=/home/dikiaap/.local/src/alacritty/target/release/deps/libvte-c41d051770f3056c.rlib --extern x11_dl=/home/dikiaap/.local/src/alacritty/target/release/deps/libx11_dl-8c327cb4bfebebf0.rlib --extern xdg=/home/dikiaap/.local/src/alacritty/target/release/deps/libxdg-040b08a04276b707.rlib -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/usr/lib/i386-linux-gnu -L native=/home/dikiaap/.local/src/alacritty/target/release/build/libloading-4e622ceb383faa3e/out` (exit code: 1)
```"04/14/21 01:05:20 AMFix URL highlight in mouse mode without shift"This resolves a regression introduced in 96fc9ec where URLs would get
highlighted on mouse hover while mouse mode is active even when the
shift modifier was not held down." =||= @dikiaap can you test if #1559 solves the issue for you?chrisduerrChristian Duerr04/14/21 12:53:41 AMFix clippy warning1
496609/18/18 02:57:23 PMArielAxionLHow can I scroll and select content at the same time?"Which operating system does the issue occur on?

ArchLinux

If on linux, are you using X11 or Wayland?

X11

I'm using the latest version of alacritty in a touchpad enviroment.
My laptop is thinkpad X1 Carbon 2014 and the touchpad is a whole piece.

![image](https://www.laptopmag.com/images/uploads/ppress/44608/lenovo-thinkpad-x1-carbon-2014-g19.jpg)"04/14/21 01:05:20 AMAdd config option for text reflow on resizeFixes #4424.5This is being worked on in #1512 chrisduerrChristian Duerr04/14/21 12:47:19 AMAdd config option for text reflow on resize1
496706/23/20 09:57:16 AMelbaroSelect with Shift + Click"example:

select a few characters, scrollback with pageUp or mouse wheel, and shift+click to extend the selection."04/15/21 09:25:49 PMAdd hint action for moving the vi cursorFixes #4319.4We decided to go for right mouse button for selection expansion, since `Shift` is a bit overloaded with other implicit things already, and they were conflicting with each other.chrisduerrChristian Duerr04/15/21 08:44:23 PMEnter vi mode on action trigger1
496909/18/18 03:54:18 PMIshan JainExtremely high memory usage on alacritty 0.2.0"Which operating system does the issue occur on?
Arch linux 
Linux y50 4.18.7-arch1-1-ARCH #1 SMP PREEMPT Sun Sep 9 11:27:58 UTC 2018 x86_64 GNU/Linux


If on linux, are you using X11 or Wayland?
X11

Shell 
ZSH

Alacritty is taking up 530MB RAM in idle mode. I start alacritty and it jumps to 530+ MB ram. There is absolutely nothing running in terminal. 

![](https://imgur.com/download/9HW2WqV)"04/14/21 03:47:10 AMFix hint label with start above viewportFixes #4960. =||= Closing as a duplicate of #1236.chrisduerrChristian Duerr04/14/21 03:17:16 AM"Fix hint label with start above viewport

Fixes #4960."1
497109/18/18 03:19:44 PMNoneMiddle click only works when Alacritty has focus"> Which operating system does the issue occur on?

Linux X11

Depending on the window manager, it's possible to interact with application windows without focussing or raising them. This involves mouse buttons (except left mouse) and mouse scrolling.

Alacritty however only reacts to

    mouse_bindings:
      - { mouse: Middle, action: PasteSelection }

when the window has focus."04/14/21 07:39:35 PMFix initial vi cursor position while in scrollbackFixes #4968. =||= Yup, this commit fixed it. Thanks, that was quick! :)chrisduerrChristian Duerr04/14/21 07:27:50 PM"Fix initial vi cursor position while in scrollback

Fixes #4968."1
497809/28/18 10:07:25 PMNoneSelecting large amounts of text makes highlight disappear"> Which operating system does the issue occur on?

Linux X11

When selecting text and scrolling at the same time using the new scrolling->history feature, there is a visual bug concering the selected text.

When more text is selected than fits on the viewport, and the viewport is scrolled so that **only** selected text is visible, the selection marker (inverted colors) disappears. If the viewport is scrolled so that only parts of its contents are selected, the selection marker shows up fine."04/15/21 10:16:32 PMFix mouse point crash on resize "This resolves an issue with Alacritty crashing after a resize, due to
the last cached mouse point being out of bounds.

Instead of caching the mouse point, it is now computed on demand to make
sure it can never be invalid.

Fixes #4977." =||= Confirmed fixed. Thank you!chrisduerrChristian Duerr04/15/21 08:46:45 PMFix formatting1
497908/14/20 09:43:10 PMNeo_ChenFreeBSD 11.2/X11/Rust-1.27.1: Mouse Wheel scrolled down by 1 unit, but tmux recived 2"Before scroll down:
![1537278974](https://user-images.githubusercontent.com/25676597/45692585-bb2ef600-bb8d-11e8-85a3-287002804771.png)
After scroll down:
![1537278978](https://user-images.githubusercontent.com/25676597/45692606-c550f480-bb8d-11e8-9001-8f7a363ef9fd.png)
Build with:
        nice -n 20 cargo  build --release -j 4 -vv
Executable:
[alacritty.gz](https://github.com/jwilm/alacritty/files/2392961/alacritty.gz)"04/17/21 07:28:24 PMFix selection flooding Wayland connection"This resolves an issue where an excessive clipboard update frequency
would cause the Wayland display server to ignore necessary selection
updates.

Instead of copying the selection to the clipboard during the selection
process, it is now only copied once the mouse button is released.

Fixes #4953" =||= Since there has been no responses since 2018 and the configuration options in question have been reworked. I'd assume that nobody has run into this issue anymore.chrisduerrChristian Duerr04/16/21 12:15:44 AM"Fix selection flooding Wayland connection

This resolves an issue where an excessive clipboard update frequency
would cause the Wayland display server to ignore necessary selection
updates.

Instead of copying the selection to the clipboard during the selection
process, it is now only copied once the mouse button is released.

Fixes #4953"1
498109/20/18 12:04:08 AMJohannessrc/grid/storage.rs: fix 32-bit compability"Use usize instead of u64 to fix 32-bit builds.

This fixes #1552."04/21/21 10:43:08 PMNote about working around macos signing requirements"I've read the [previous](https://github.com/alacritty/alacritty/pull/4758) [discussion](https://github.com/alacritty/alacritty/issues/1896) on this issue and agree that it is absolutely crazy for Apple to require a $99 subscription to distribute free software.

There's a simple workaround available to remove Alacritty from the MacOS security check. This will save MacOS users some time when they are installing Alacritty.

Thanks for the amazing work on this project!" =||= Looks good to me now and since jwilm doesn't seem to have any other complaints, this should resolve 32 bit build issues.iloveitalyMichael Bianco04/16/21 12:19:28 PMNote about working around macos signing requirements1
498401/27/20 12:54:36 AMNoneInconsistent fonconfig fallback"Unlike gnome-terminal, alacritty does not seem to be properly loading the powerline fallback fonts. These are e.g. Provided by the `powerline-fonts` package.

This is on Fedora Linux.

I'm not sure what else to supply to help debug this, since I'm not quite familiar with how fontconfig does stuff.

It appears to be working in any libvte based terminal, but not in urxvt or alacritty"04/16/21 08:23:54 PMFix mouse reports"The patch 9cb5562 has introduced a regression which would abort if a
mouse report's line was bigger than zero, which is the exact opposite of
when a mouse report is required.

Fixes #4980." =||= @realcr yes, check this issue → https://github.com/alacritty/alacritty/issues/2706 (https://github.com/alacritty/alacritty/issues/2706#issuecomment-523951277)chrisduerrChristian Duerr04/16/21 08:09:52 PM"Fix mouse reports

The patch 9cb5562 has introduced a regression which would abort if a
mouse report's line was bigger than zero, which is the exact opposite of
when a mouse report is required.

Fixes #4980."1
498509/19/18 12:44:26 AMDiogo SousaColors don't look as they should"I don't know if this is duplicate of other issue, but the colors in alacritty don't seem right.  Here's a screenshot with alacritty on the left and urxvt on the right:

![screenshot-20180919-004206](https://user-images.githubusercontent.com/4107683/45722612-16201780-bba5-11e8-8224-a0c6f62390ea.png)


Running v0.2 in Arch Linux (installed from the official repos) with x.org."04/17/21 01:53:21 AMUpdate dependencies"This includes a bump to VTE resolving an issue with invalid
intermediates when transitioning from DCS to ESC sequences. This should
however not be noticeable with any existing escape sequences.

Fixes #4827." =||= "Hey @orium, the default Alacritty theme is actually a lot more sensible than what other terminal emulators provide by default in my experience. And I've heard only good things about Alacritty's default colorscheme so far. It's also a pretty popular theme outside of Alacritty, so I'd say the statement that your ""expectations for colors are aligned with the general public"" is questionable.

We're happy to discuss any factual issues with this application, however calling something as subjective as color choices a bug or wrong, isn't going to help anyone.

If you're not happy with the default Alacritty colorscheme, I'd recommend taking a look at the alternatives [here](https://github.com/jwilm/alacritty/wiki/Color-schemes). I personally would recommend **everyone** to change the defaults, since it's a great way to make a terminal emulator your own.

Since it seems like the Alacritty project can't agree with the proposed resolution to this issue, I'll mark it as wontfix, so people that might look into this in the future know what's going on.

If you have any other questions or issues to report, please feel free to open a different issue. However I'd like to request that it is done in an appropriate manner. :)"chrisduerrChristian Duerr04/17/21 01:36:14 AM"Update dependencies

This includes a bump to VTE resolving an issue with invalid
intermediates when transitioning from DCS to ESC sequences. This should
however not be noticeable with any existing escape sequences."1
498711/14/18 09:06:08 PMjan PontaoskiRoboto Mono"Which operating system does the issue occur on?
Arch Linux

If on linux, are you using X11 or Wayland?
X11 Intel iGPU

Roboto Mono seems to be completely malfunctioning.
Here's a comparison of Alacritty with Roboto Mono vs. another terminal with Roboto Mono.
This is the powerline patched version that can be seen [here](https://github.com/powerline/fonts/tree/master/RobotoMono).

![image](https://user-images.githubusercontent.com/20326855/45728905-1ebe2100-bb98-11e8-82aa-945af91e64a6.png)"04/17/21 12:44:53 PMUpdate macOS icons"Update the macOS app icons to be in line with the macOS 11 design
language as per Apple's Human Interface Guidelines to encourage visual
consistency.

![Screenshot 2021-04-17 at 13 51 08](https://user-images.githubusercontent.com/23554017/115112088-1282e600-9f84-11eb-854a-a63d8c4fd0b5.png)" =||= "@chrisduerr 

I think I may have been able to track it down to the DPI scaling algorithm. Starting alacritty with WINIT_HIDPI_FACTOR=1.0 fixes the issue for me with Roboto Mono"levesonTshaka Eric Lekholoane04/17/21 11:30:34 AM"Update macOS icons

Update the macOS app icons to be in line with the macOS 11 design
language as per Apple's Human Interface Guidelines to encourage visual
consistency."1
498809/19/18 09:37:37 PMAdam GoldsmithCursor not hollow when window starts unfocused"Platform: Linux X11 (i3 specifically)

When launching a new instance of alacritty, the cursor is a solid block despite the window being out of focus (I have `no_focus [tiling]` set in my i3 config). Focusing the window, then un-focusing it behaves correctly. For reference, the related settings are the defaults of `cursor_style: Block` and `unfocused_hollow_cursor: true`."04/17/21 11:20:13 PMFix out of order terminal query responses"This forces all responses made to the PTY through the indirection of the
UI event loop, making sure that the writes to the PTY are in the same
order as the original requests.

This just delays all escape sequences by forcing them through the event
loop, ideally all responses which are not asynchronous (like a clipboard
read) would be made immediately. However since some escapes require
feedback from the UI to mutable structures like the config (e.g. color
query escapes), this would require additional locking.

Fixes #4872." =||= https://github.com/jwilm/alacritty/pull/1569 resolves this issue on i3. I'd love some testing on macOS/Wayland if possible, but it should be good to go the way it is.chrisduerrChristian Duerr04/17/21 07:09:17 PM"Fix out of order terminal query responses

This forces all responses made to the PTY through the indirection of the
UI event loop, making sure that the writes to the PTY are in the same
order as the original requests.

This just delays all escape sequences by forcing them through the event
loop, ideally all responses which are not asynchronous (like a clipboard
read) would be made immediately. However since some escapes require
feedback from the UI to mutable structures like the config (e.g. color
query escapes), this would require additional locking.

Fixes #4872."1
499709/19/18 07:13:40 PMVinit KumarDifferent Vim versions in Alacritty and iTerm"Which operating system does the issue occur on?
MacOS

I am facing a strange issue on my mac. While in alacritty, the vim defaults to the older system one. `/usr/bin/vim`. While in iTerm, it is the homebrew one. `/usr/local/bin/vim`
This is only happening in alacritty. I also checked in Terminal.app. 

![screen shot 2018-09-19 at 12 57 27 pm](https://user-images.githubusercontent.com/537678/45737495-98432700-bc0b-11e8-9a16-43cb07e019d0.png)


Any ideas/suggestions would be appreciated.

"04/22/21 08:08:59 PMFix cursor expansion across wide chars"This fixes a regression introduced in 0.7.0 where the block cursor would
not expand across both cells anymore when on top of a wide char spacer
cell.

The logic to always move the cursor on the wide char instead of the
spacer has been moved to the alacritty_terminal crate, making sure it is
always performed before any processing in the UI." =||= "Awesome,  looks like @yaegassy fix works perfectly.

```yaml
shell:
  program: /bin/zsh
  args:
    - --login
```

Thanks for all the help folks"chrisduerrChristian Duerr04/21/21 11:09:08 PM"Fix cursor expansion across wide chars

This fixes a regression introduced in 0.7.0 where the block cursor would
not expand across both cells anymore when on top of a wide char spacer
cell.

The logic to always move the cursor on the wide char instead of the
spacer has been moved to the alacritty_terminal crate, making sure it is
always performed before any processing in the UI."1
500409/19/18 03:38:50 PMNonePressing and holding a key only registers once (Fedora 28 with Wayland)"### Which operating system does the issue occur on?

Fedora 28 (Linux x86_64)

### If on linux, are you using X11 or Wayland?

Wayland

### Alacritty version

```
shanssian:repos $ alacritty --version
alacritty 0.2.0
```

### Issue

It seems like holding down a key is not obeyed. In vim, when I press and hold ""j"" to scroll down a file continually, j is only registered once.

In gnome-terminal, pressing and holding ""j"" behaves as expected, scrolling down the whole way."04/29/21 05:06:45 PMFix overwriting of fullwidth characterFixes #3726.6Thanks for posting! This is actually a duplicate of #1257; maybe we should update the title there to be a bit more descriptive.chrisduerrChristian Duerr04/28/21 07:15:05 PMRemove outdated TODO comment1
500909/19/18 09:55:35 PMJeff MuizelaarUpdate core-graphics, core-foundation etc."The following upstream changes needed adapting to:
- font_path() returns a PathBuf now
- get_descriptors() returns an Option<CFArray>
- get_advances_for_glyphs and get_glyphs_for_characters are now unsafe."04/26/21 11:40:15 PMUpdate vi-mode `Open` Config Docs for Hints"Fixes #5005

I'm not sure I love how the `Open` action for vi-mode is dependent on a configuration named `mouse.enabled`, but I'm also not sure what might make more sense. Fundamentally there are regex matches, which can be either A) highlighted by the mouse and activated with this `Open` command, and B) activated without highlighting by keyboard hint prefix input. To me, B is what really lines up with ""hints"", and A could be a more general matching feature. Still, I don't know if thinking of things like this would help.

Perhaps a better way to clear up some potential confusion would be to rename `Open` to `Click`, thus making it more clear how this works.

@chrisduerr thoughts?"2"Updated all non-breaking dependencies too, since this seems fitting for this PR.

Everything looks good to me, just making sure that CI goes through and then it should be ready."nixpulvisNathan Lilienthal04/26/21 04:08:26 PMUpdate vi-mode `Open` config docs for hints1
501607/19/20 09:45:58 PMJoe WilmInvestigate using font-kit"@pcwalton just published [font-kit] which serves the same purposes as our built-in `font` crate. This may even allow us to start publishing `alacritty` on crates.io. From their README:

> font-kit provides a common interface to the various system font libraries and provides services such as finding fonts on the system, performing nearest-font matching, and rasterizing glyphs.

[font-kit]: https://crates.io/crates/font-kit"04/28/21 01:11:02 AMAdd terminal size popup when resizing the window"Shows a small popup with the window dimensions (columns x lines) in the center of the window when resizing, similar Ubuntu terminal.

# Changes
- Draw popup in the center of the display when a `WindowEvent::Resized` is received. The popup persists for `resize_popup_duration` after the user stops resizing.
- `resize_popup_duration` config under `window` specifying the duration of the popup (setting to 0 will disable the popup).

# Questions
- Should the popup be enabled/disabled by default? (currently set to enabled/500 ms)
- Any specific colors to use? (currently uses primary foreground/background swapped)

# Example

https://user-images.githubusercontent.com/26666500/116330083-99547180-a781-11eb-96e5-e2c22cb92cc3.mov" =||= "Just some rough guidelines based on the previous PR and what I know about font-kit:
 - Font fallback
 - IIRC weights/slants are limited to an enum(?)
 - Some platform specific issues/differences (these might be fixed upstream, I remember metrics)

There's also some things I'm not entirely sure about, but that look like they could cause incorrect behavior which we've had to patch ourselves over time in our library. Some things that stood out to me were metric rounding and hinting load flags, these might not be incorrect but a quick glance didn't give me a lot of confidence.

Of course I'm not taking a jab at the font-kit project in general here. Alacritty's library is specialized to care only about the things we need to care about, so we have more time to focus on exactly that. So based on my current estimation, switching would just introduce unnecessary extra work and regression which I do not want to impose on our users, even though I am very much in favor of ecosystem unification when it makes sense.

If a migration is ever just a simple drop-in replacement without severe risk of significant regressions, I'm definitely not opposed to the idea in general. But based on the development over the last few years this will probably take a bit of time."akmin04Andrew (Andy) Min04/28/21 12:38:47 AMAdd config to alacritty.yml1
501909/19/18 09:37:37 PMChristian DuerrShow hollow cursor for windows starting unfocused"Alacritty made the assumption that every window started as focused and
because of that the hollow cursor wouldn't show up for windows which are
launched without focus.

Since even the initial focus should be reported as a focus event by
winit, this could be easily fixed just setting the default window state
to unfocused instead of focused.

This fixes #1563."04/30/21 09:59:13 PMClean up config files loaded log message"This is extremely minor, but I'm always a fan of cleaning up log messages to help reading through them. This removes a slightly confusing line in the case a user doesn't have a config file, and the default is used. In this case, another log message will print as follows:

```
[INFO ] [alacritty_config_derive] No config file found; using default
```"1"Just some rough guidelines based on the previous PR and what I know about font-kit:
 - Font fallback
 - IIRC weights/slants are limited to an enum(?)
 - Some platform specific issues/differences (these might be fixed upstream, I remember metrics)

There's also some things I'm not entirely sure about, but that look like they could cause incorrect behavior which we've had to patch ourselves over time in our library. Some things that stood out to me were metric rounding and hinting load flags, these might not be incorrect but a quick glance didn't give me a lot of confidence.

Of course I'm not taking a jab at the font-kit project in general here. Alacritty's library is specialized to care only about the things we need to care about, so we have more time to focus on exactly that. So based on my current estimation, switching would just introduce unnecessary extra work and regression which I do not want to impose on our users, even though I am very much in favor of ecosystem unification when it makes sense.

If a migration is ever just a simple drop-in replacement without severe risk of significant regressions, I'm definitely not opposed to the idea in general. But based on the development over the last few years this will probably take a bit of time."nixpulvisChristian Duerr04/30/21 09:43:31 PMFix formatting1
502511/19/18 07:36:42 PMMoritz HeuserAdded fullscreen option to configresolves #38 - at least for macos. Not tested with other platforms.04/30/21 10:16:48 PMStop basing focused match color on matched colors"Pending discussion and CHANGELOG entry.

fixes #5022"8@jedahan Thanks for the feedback, I'll take this into consideration for future PRs and issues.nixpulvisChristian Duerr04/30/21 09:50:22 PM"Use cell colors for focused match CellRgb

Fixes #5022."1
502609/24/18 12:12:46 PMGris GeAuto copy selection to primary clipboard."With `save_to_clipboard: true` in `selection` section of
`alacritty.yml`. The selected string will automatically copy to primary
clipboard."04/30/21 12:23:10 AMFix highlighting multiple hints in the same lineFixes #5010. =||= Thanks for the review. Rephrased.chrisduerrChristian Duerr04/29/21 08:42:53 PM"Fix highlighting multiple hints in the same line

Fixes #5010."1
502709/20/18 06:05:03 PMNoneAutomatically support shift-override mouse events"I'm currently using Alacritty 63a40df on Debian Testing, with i3 window-manager on X11.

My `alacritty.yml` contains the default mouse-bindings:

```yaml
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
```

When I'm running a terminal app without mouse support, like bash, a left-click is handled by the terminal and a shift-left click is redundant, but works too.

When I'm running a terminal app *with* mouse support, like tmux, a left-click is handled by the application and a shift-left click is handled by the terminal, just as I'd expect.

When I'm running a terminal app without mouse support, a middle-click pastes the selection (as configured), and a shift-middle-click does nothing.

When I'm running a terminal app *with* mouse support, a middle-click is handled by the application and a shift-middle-click still does nothing.

I'm used to always shift-middle-click pasting so I don't have to care whether the running application has mouse support, but this habit brings sadness with Alacritty.

Since mouse-bindings don't allow modifiers anyway, it would be great if Alacritty allowed all mouse bindings to behave like left-click:

- outside of mouse-reporting mode, clicking does the normal action and shift-clicking does too
- inside mouse-reporting mode, clicking is reported to the app and shift-clicking does the normal action"04/30/21 04:13:30 PMAdd support for magnet URIs1"Hey, this is a known issue and a duplicate of #1298. Unfortunately it's a semi-recent regression introduced in #1218. However there already is an open PR which should fix this: #1300.

Regarding the other thing you've mentioned about mouse modifiers, they actually are supported now.  However it looks like I forgot to update the configuration file to remove the notice that they are not. I'll spin up a PR to do this later, thanks for the notice."rnestlerRaphael Nestler04/29/21 11:56:06 PMAdd support for magnet URLs1
503709/20/18 02:16:27 PMChris MacNaughtonUpdate snapcraft.yaml"The existing snapcraft.yaml is pointing to a file that has been renamed,
subsequently breaking the snap build. This change renames the .desktop
file to match what is in-tree."05/01/21 01:49:58 PMAdd deprecation warning for mouse URL configFixes #5035. =||= Thanks!chrisduerrChristian Duerr05/01/21 01:35:13 PM"Add deprecation warning for mouse URL config

Fixes #5035."1
503803/11/20 10:32:01 PMAriel KeselmanFailed to open input method"Which operating system does the issue occur on? Ubuntu 18.04

If on linux, are you using X11 or Wayland? X11

the error:

```
RUST_BACKTRACE=1 alacritty
thread 'main' panicked at 'Failed to open input method: PotentialInputMethods {
    xmodifiers: None,
    fallbacks: [
        PotentialInputMethod {
            name: ""@im=local"",
            successful: Some(
                false
            )
        },
        PotentialInputMethod {
            name: ""@im="",
            successful: Some(
                false
            )
        }
    ],
    _xim_servers: Err(
        GetPropertyError(
            TypeMismatch(
                0
            )
        )
    )
}', /home/skariel/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.15.1/src/platform/linux/x11/mod.rs:90:17
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: __libc_start_main
  10: <unknown>

```
"05/01/21 02:05:57 PMBump development version to 0.9.0-dev"This is only an update to the development version and does not represent
a stable release." =||= "Noticed the same behavior on manjaro 18.0.4 with x11 and actual 0.3.3 alacritty installed via manjaro repositories.

Fixed it by moving the binary file to a different path `/opt/alacritty/alacritty` and creating a shell script under `/usr/bin/alacritty`, which simply sets the language without the `.UTF-8`-ending, as suggested by @happysmash27 :

```bash
#!/bin/bash

LANG=en_dk /opt/alacritty/alacritty $@
```
*$@ expands to the script arguments*

My quick test to verify a still utf-8 compatible terminal was to create a `utf8.txt` file with some utf-8-only chars:

```text
äöüß!""'§$%&/()=?°^,.-;:_<>€ƒ†…‡ˆ‰Š‹Œ•—™¶Ø
```

Running `cat utf8.txt` correctly displayed all chars in alacritty and everything else seems to work normally.

After launching alacritty it is possible to export the original LANG value with `.UTF-8`-ending, to ensure compatibility with other programs, f.e. by modifying the `.bashrc`.
"chrisduerrChristian Duerr05/01/21 01:39:41 PM"Bump development version to 0.9.0-dev

This is only an update to the development version and does not represent
a stable release."1
504009/22/18 12:27:58 AMTom Bertalancargo deb --install ends in fails to compile libz-sys"Which operating system does the issue occur on?
Ubuntu 16.04

If on linux, are you using X11 or Wayland?
X11

The instructions given for Ubuntu fail on the final step, `cargo deb --install`. On second invocation, the output looks like this:

```
tsbertalan@gungnir:~/usr/alacritty$ cargo deb --install ; sayalert ""installed alacritty""
   Compiling cmake v0.1.34
   Compiling libloading v0.5.0
   Compiling libz-sys v1.0.22
   Compiling rustc_version v0.2.3
error[E0425]: cannot find function `read_to_string` in module `fs`
   --> /home/tsbertalan/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.22/build.rs:115:13
    |
115 |         fs::read_to_string(""src/zlib/zlib.pc.in"")
    |             ^^^^^^^^^^^^^^ did you mean `read_string`?

error[E0658]: use of unstable library feature 'fs_read_write' (see issue #46588)
   --> /home/tsbertalan/.cargo/registry/src/github.com-1ecc6299db9ec823/libz-sys-1.0.22/build.rs:113:5
    |
113 |     fs::write(
    |     ^^^^^^^^^

error: aborting due to 2 previous errors

error: Could not compile `libz-sys`.
warning: build failed, waiting for other jobs to finish...
error: build failed
cargo-deb: build failed
'NoneType' object has no attribute 'group'
```

"05/01/21 02:24:03 PMFix single column block selectionFixes #5039. =||= For everyone interested in a solution to this problem, please follow #80. This should allow everyone to get a working binary for their system, independent from which Rust versions are supported by their distribution.chrisduerrChristian Duerr05/01/21 02:04:29 PM"Fix single column block selection

Fixes #5039."1
504209/20/18 04:58:46 PMChristian DuerrFix config error with missing decorations field"The latest change to window decorations
(3b46859eceea39afb8bbc760235cc15de78d3ff3) introduced a regression when
running Alacritty without the `decorations` field specified in the
configuration file. Since serde wasn't setup to fallback to the default,
the complete config deserialization would fail.

This resolves this issue by deserializing it to the default decorations
value ""Full"". To make this setting a little more forgiving, this also
introduces another change which ignores the case for the configuration
options. So both `full` and `FuLl` are now accepted."05/01/21 04:57:53 PMFix release mode testsFixes #5041. =||= For everyone interested in a solution to this problem, please follow #80. This should allow everyone to get a working binary for their system, independent from which Rust versions are supported by their distribution.chrisduerrChristian Duerr05/01/21 04:19:15 PM"Fix release mode tests

Fixes #5041."1
504309/30/18 08:17:07 PMAntti KorpiWindow decorations are absent under i3 if 'window' config section has anything set"Linux, X11. Using the tagged v0.2.0.

I'm using the i3 window manager. Having anything filled in under `window:` in the configuration file causes any newly created alacritty windows to have no WM borders. The `window.decorations` setting has no effect.

The only way to get window borders is to comment out the entire `window` section of the config. Unfortunately this means it's not possible to customise e.g. padding.

How might one best debug this?"05/01/21 05:15:51 PMAdd changelog entry for config url change =||= Following up - I found values that *did* work - if I set `window.decorations` to `true`, decorations re-appearchrisduerrChristian Duerr05/01/21 05:01:27 PMAdd changelog entry for config url change1
504609/22/18 02:46:42 AMChristian DuerrUnify configuration file structure"Before getting into the meat of the changes introduced by this PR,
I want to provide some background information on why I propose
these changes.

Originally I just wanted to remove the notice from the mouse bindings
that modifiers are not supported, but I noticed that the available
actions were not complete either. To make future changes simpler I
wanted to reference the key binding options, however these have always
been very complicated in my opinion, so I decided to try and refactor those.

After the key bindings were refactored, I just tried to get the rest of the
configuration file in line with the changes I had made to the key and
mouse binding sections.

I don't think there's anything wrong with the current configuration file,
however I personally find it easier to make changes myself when there
is some consistent structure present which I can follow when making
new additions. My hope with these changes is that it makes reading
the configuration file easier, but also allows easily adding new stuff in the
future.

These are some guidelines used for this refactoring:
- Specify that changes require restart consistently
- Unify the specification of available field values
- Provide clear distinction between description title and body
- Try to end lines at ~80 characters

Since the main changes in this PR are the alterations to the key
configuration documentation. I'd especially appreciate feedback about
the changes to this section."05/01/21 08:06:24 PMUpdate crossfont to 0.3.0Fixes #5045. =||= Oh yeah, that's perfect. Let's ship it.chrisduerrChristian Duerr05/01/21 07:54:19 PMUpdate crossfont to 0.3.01
507109/22/18 02:43:50 PMPaolo CapriottiHide window on shutdownI've noticed that closing terminal windows by logging out of the shell can take some time. Hiding the window immediately makes it look instantaneous.05/08/21 03:12:34 AMAdd Ctrl+c for exiting hint mode.Previously only ESC was used for quitting hint mode, but now Ctrl+c should work too. =||= Yeah, #1367 fixes it. I hadn't realised that the delay was due to the event loop blocking. Thanks.absorberabsorber05/07/21 09:31:31 PMMerge branch 'alacritty:master' into patch-11
507502/06/19 09:10:46 PMNonewmclass is null in Wayland"### Which operating system does the issue occur on?

Fedora 28, 64-bit Linux with Wayland

### If on linux, are you using X11 or Wayland?

Wayland

### Description of the problem

Alacritty shows up as an unknown icon and application, e.g.:

![unknown-app](https://user-images.githubusercontent.com/8574092/45917419-9788db80-be2b-11e8-92f9-b622a67a82b5.png)

Using Gnome's Looking Glass (alt+f2 and run 'lg'), we can see that the `wmclass` of alacritty is null:

![wmclass-null-alacritty](https://user-images.githubusercontent.com/8574092/45917424-aec7c900-be2b-11e8-832e-7b3779731a02.png)

I _believe_ this causes running instances of alacritty to not be associated to the `alacritty.desktop` file.

Not sure which part of alacritty's upstream dependencies sets this `wmclass` value. If this belongs in a more general Wayland ticket, feel free to close it/move it."05/07/21 08:47:56 PMFix crash when copying out of bounds selectionFixes #5067. =||= Thanks a lot for the feedback! Glad to see it works.chrisduerrChristian Duerr05/07/21 08:06:23 PM"Fix crash when copying out of bounds selection

Fixes #5067."1
508602/09/19 11:10:48 AMNone(WIP/PoC) Add wayland clipboard support"This PR is a work in progress / proof of concept for wayland clipboard integration into alacritty. 

The way this PR accesses the wayland clipboard can be seen as kind of a hack (its not explicitly bad but comes with compromises and probably isn't the intended way to access the clipboard), the reason the 'proper' way isn't used is because it would require winit to either expose internal wayland objects that would cause winit breakage and instability or winit would have to provide a clipboard api interface (I'm not too sure what winit's stance on this is).

Currently wayland is used for the clipboard backend if `.set_wayland(wayland_display: *mut c_void)` is called on the `Clipboard` object, I'll probably try to make a better way of setting wayland such as using a building pattern or something and split up linux.rs into a linux directory in src like winit and glutin does.

The way the wayland clipboard functions at the moment is that it spawns a new thread that takes the `wayland_display` and uses it to create various needed wayland objects, the thread then loops every 50ms (this can be any value and is the balance between clipboard access time and cpu usage)  and checks every loop for wayland events and/or requests from the main thread to do things like store or load data.

The code quality is pretty bad at the moment because its still a WIP but the code should show the necessary changes required for wayland clipboard support.
"05/17/21 08:08:06 PMEnable alacritty to run on OpenGL 2.1 when needed extensions are present"This PR lowers the GLSL version of Alacritty's shader files from #version 330 core to #version 120 and instead requires the needed extensions. There are two upsides to this

1. Allows Alacritty to run on OpenGL 2.1 machines, where the needed extensions are present.
2. If the needed extensions are not present, this gives a clearer error message, as compared to just ""GLSL 330 is not supported""

In addition, the GLSL Version is checked. By default, the normal Shader files are used. However, if GLSL version 1.20 is detected, create_shader patches the default shaderfiles to be GLSL 1.20 complaint.

Now alacritty runs on my Thinkpad T500, with only OpenGL 2.1:
![QsfIYDf](https://user-images.githubusercontent.com/60887273/117583807-876fb880-b109-11eb-9781-994e720f40ef.png)

Thanks to the excellent work by Jason Ekstrand, GL_EXT_gpu_shader4 and GL_ARB_blend_func_extended were made available in a branch of Mesa for Intel iGPUs of Gen4 and Gen5. This is documented [in the Mesa-dev mailing list](https://lists.freedesktop.org/archives/mesa-dev/2021-May/225249.html). This includes the GM45 chipset / the GMA 4500 MHD. With that Mesa branch and this PR, Alacritty can run on a new range of devices, where it was previously not possible, like the still popular Thinkpad x200, T400, T500 etc. and would clear up issues like the ones seen here: https://github.com/alacritty/alacritty/issues/128#issuecomment-398056784, here: https://github.com/alacritty/alacritty/issues/128#issuecomment-439418891, here: https://github.com/alacritty/alacritty/issues/128#issuecomment-708902510 and here: https://github.com/alacritty/alacritty/issues/567#issuecomment-325201151. Hopefully these Gen4/Gen5 OpenGL extensions will get upstreamed to mainline Mesa...^^

Since my favourite terminal emulator [termite](https://github.com/thestinger/termite) deprecated, I'm looking forward to use a terminal emulator with a reputation as excellent as alacritty, on my trusty Thinkpad x200 and T500."7Meanwhile support of primary-selection-unstable-v1 was added to sway: https://github.com/swaywm/sway/pull/3735FrostKiwiVlad05/11/21 06:47:10 PMMerge branch 'master' into glsl_1201
508709/24/18 06:40:10 PMChristian DuerrDynamically initialize grid storage"Previously Alacritty has initialized all lines in the buffer as soon as
it is started. This had the effect that terminals which aren't making
use of the scrollback buffer yet, would still consume large amounts of
memory, potentially even freezing the system at startup.

To resolve this problem, the grid is now dynamically resized in chunks
of `1000` rows. The initial size is just the visible area itself, then
every time lines are written to the terminal emulator, the grid storage
is grown when required.

With the worst-case scenario of having 100_000 lines scrollback
configured, this change improves startup performance at the cost of
scrolling performance.

On my machine the startup changes from ~0.3 to ~0.2 seconds.

The scrolling performance with large throughput is not affected, however
it is slowed down when the number of lines scrolled are close to the
100_000 configured as scrollback. The most taxing benchmark I've found
for this was running `yes | dd count=500 > 500.txt` (note the relatively
small file size). This will cause a slowdown on the first run from 0.05s
to 0.15s. While this is significant, it lines up with the time saved at
startup.

This fixes #1236.

**Edit:** I have not mentioned the memory difference at startup in the
commit message, so here's the comparison for 100k lines of scrollback:

| Master | PR |
| - | - |
| 571M | 74K |"05/09/21 08:44:14 PMFix unnecessary redraws due to hint highlighting"When the mouse cursor is moved by at least one cell, an update to the
highlighted hints is triggered automatically. Previously this would
always update the hints and redraw Alacritty regardless of the actualy
change to the hint highlighting.

By checking if the hint highlighting has actually changed, pointless
redraws can be prevented. This is especially helpful since mouse motions
often generate a lot of hint re-computations." =||= Also fixes #977 chrisduerrChristian Duerr05/09/21 08:24:42 PM"Fix unnecessary redraws due to hint highlighting

When the mouse cursor is moved by at least one cell, an update to the
highlighted hints is triggered automatically. Previously this would
always update the hints and redraw Alacritty regardless of the actualy
change to the hint highlighting.

By checking if the hint highlighting has actually changed, pointless
redraws can be prevented. This is especially helpful since mouse motions
often generate a lot of hint re-computations."1
508909/25/18 01:04:34 AMChristian DuerrFix reset cursor terminfo escape"The reset cursor terminal escape sequnce specified in the terminfo file
was using xterm's `\E[2 q`. However this just resets the cursor to the
block cursor shape.

Since Alacritty supports the `\E[0 q` escape sequence for resetting the
cursor shape to the original shape specified in the configuration file,
the terminfo file has been altered to make use of this sequence instead."05/09/21 10:33:51 PMFix URL highlighting with unicode whitespace"The URL highlighting regex would automatically terminate on an ascii
whitespace, however there are several other forms of whitespace that are
indistinguisable to a user from normal whitespace. To make things a
little more intuitive, all unicode whitespace will now terminate URLs." =||= Also fixes #977 chrisduerrChristian Duerr05/09/21 10:19:08 PM"Fix URL highlighting with unicode whitespace

The URL highlighting regex would automatically terminate on an ascii
whitespace, however there are several other forms of whitespace that are
indistinguisable to a user from normal whitespace. To make things a
little more intuitive, all unicode whitespace will now terminate URLs."1
509409/25/18 05:12:52 AMCasper Wangcannot map ctrl + tab and ctrl + shift + tab"Hi, I'm on MacOS, 10.13.2 (17C205), I was trying to map ctrl+tab by
```
  - { key: Tab,        mods: Control, chars: ""a""                       }
```

expecting getting `a` by ctrl+tab, yet nothing shows up."05/10/21 09:20:09 PMFix default URL binding"The default binding for launching the URL hints was documented as
Ctrl+Shift+U, but never actually set. This adds this binding as the
default instead of having URLs only launchable using the mouse." =||= Fixed by https://github.com/jwilm/alacritty/pull/1403chrisduerrChristian Duerr05/10/21 08:52:55 PMFix test failures1
510712/02/18 04:11:52 PMBarret RennieRequest user attention when bell received in macOS"We now request the user's attention in macOS when a visual bell
character is received. This manifests as the window jumping up and
down in the dock.

Depends on #1403.
Depends on tomaka/winit#664 for the changes to `WindowExt` on macOS."05/11/21 08:02:01 PMRemove negative or intolerant words"You may also want to rename the default branch from ""Ma*ter"" to ""Main"" to be more inclusive."1I think I've successfully addressed all issues.floyder55Floyder5505/11/21 07:45:32 PMRemove negative or intolerant words1
511710/12/18 06:59:40 PMNoneOrder of input messed up when auto typing"Which operating system does the issue occur on?
linux

If on linux, are you using X11 or Wayland?
X11

When auto typing with xdotools default delay (14ms) ordering of key strokes is not preserved most of the time and with even lower delays key presses are sometimes even dropped.
Depending on the alacritty version a delay around 30ms seems to be safe. 
The glutin 0.18 PR improves the situation but does not fix it.

I tried this with several other terminals (xterm, termite, kitty) they all receive the simulated key presses without problems even when disabling the delay entirely."05/13/21 02:33:02 PMReplace tabs with spaces when converting lines to strings"Fixes #5084

The `line_to_string()` function used to skip over cells after a tab, but the example in the issue shows that there can be characters is those cells.

By replacing the tab characters with spaces and not skipping over cells, the clipboard value now looks the same as the copied selection." =||= Thanks for keeping us updated.PabloMarcendoNiek Wilting05/13/21 09:45:22 AMReplace tabs with spaces when converting lines to strings1
512711/07/20 05:26:47 AMJoe Moon[wip] Sodiumjoe/607 multiple windows"This is working off of `mkeeler:glutin-0.17-upgrade`, so just the last two commits are mine. You can check out just the relevant diff [here](https://github.com/mkeeler/alacritty/compare/glutin-0.17-upgrade...sodiumjoe:sodiumjoe/607-multiple-windows?expand=1).

I've basically been just trying to factor things (in a cargo-culty way) so that it's possible to create multiple windows without changing any logic. This compiles and runs, and will even create two windows (if hardcoded in).

But I seem to be missing something, because even with just one window, there are some issues.
1. sometimes the terminal doesn't update
2. certain keys are triggered twice (like backspace)

I haven't tried to get the second window working in earnest yet, but I'll describe what happens in case it helps diagnose the single window case. One window seems to work just like the single-window case, but the second window at first renders with just the blank background color, and on any interaction becomes transparent. It seems to still take window events, like resize events and keyboard input, but it doesn't display anything. With both windows attached to a tmux session, I can see keyboard input from the second window take effect in the first window, but not immediately, only after interacting with the second window.

I'd like to get the single window case working properly before trying to get multiple windows working and I'm kinda stuck, so I'm hoping someone else can take a look and see if I missed something obvious or point me at some better debugging methods. I've tried with `--print-events`, and the events there appear to be totally normal.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/jwilm/alacritty/1589)
<!-- Reviewable:end -->"05/15/21 04:05:05 PMReplace tabs with spaces if there is text between the tab and the next tab-stop"Second attempt at fixing #5084.

Most tabs should still be copied as tabs.
The use of `\r` characters can cause the cells between the tab and the next tab-stop to contain non-whitespace characters. When calling the `line_to_string` method, the `\r` itself is no longer present in the terminal line. Trying to guess where it was and inserting it in the resulting string seems like a bad idea to me. So in this case I think we should replace the tab with a space."1This PR is so outdated, it's probably significantly easier to just start from scratch. So not much reason to keep it open.PabloMarcendoNiek Wilting05/15/21 11:59:09 AMOnly replace tabs if there is text between the tab and the next tab-stop1
512909/26/18 05:38:42 PMNiklas DusenlundImplement CNL and CPL escape codesI was running some software that used CPL so I implemented these.05/16/21 12:01:09 AMAdd a `--here` flag"Hello!

First-time contributor here, looking to help out.
Something I do a lot from VSCode is typing out `alacritty --working-directory $PWD` which is very long and annoying after a while of typing, so I changed a few things:

Adds a short option for working-directory: `w`
Adds a new --here flag, opening alacrity in the current working directory.

If both flags are present (`--working-directory` and `--here`) the value of working directory will be used.

Thank you! Hope to be making some more PRs."7Perfect; thanks.Milo123459Milo05/15/21 11:56:08 PMfix fmt issues1
514105/24/19 06:50:10 PMGuy MarcusMissing Icon in KDE (breaks Freedesktop specification)"**Which operating system does the issue occur on?**
Arch Linux

**If on linux, are you using X11 or Wayland?**
KDE on X11

**Problem description**:
In the desktop file, the `Icon` is set to `utilities-terminal` which properly picks up the svg icon to display in the menu and the taskbar. However, the icon displayed in the window decoration (upper left hand corner by default in KDE Plasma) and in the task switcher (pulled up by `Alt-Tab` by default) is just the default X11 icon. This can get a quite confusing when spawning graphics windows from the terminal and trying to switch back to your terminal if they all have the same icon in the task switcher... This was literally *the* thing that kept me going back to kitty terminal, out of pure annoyance.

**Current workaround**:
I can resolve this (and others on KDE could as well) by updating the Window Rules for the application. As of KDE Plasma 5.13 this amounts to right clicking the Menu icon and selecting `More Actions > Special Application Settings`, then under `Appearance & Fixes` settings the Desktop Filename to `alacritty` and choosing `Force` from the drop down. This causes Kwin to pull the icon from the desktop file instead of using the icon Alacritty tells is about (which is *none*). 

**Potential Global Solution**:
The icon to be used for window decorations, task switching, and other Xserver tasks should be made known to the Xserver. If you run `xprop` you can see that the `_NET_WM_ICON` parameter is not set (more specifications on that [here](https://specifications.freedesktop.org/wm-spec/1.3/ar01s05.html).

Rather than re-hashing the background on this part a good overview on the current state is [here](https://www.reddit.com/r/kde/comments/7yuwd6/how_to_make_the_task_switcher_icons_nonpixelated/). The underlying issue is also the root cause for some applications having pixelated icons in the task switcher. From what I have read it sounds like this issue will eventually fade away with Wayland, but we are not quite there yet. "05/17/21 07:50:29 PMfeat: Add WINIT_X11_SCALE_FACTOR to configThis change to standard config is aimed to decrease the number of new issues connected to wrong font scaling,1That commit should have closed this issue, it seems like I just missed it. Thanks for pointing it out!kozachynskyiVolodymyr Kozachynskyi05/17/21 09:08:32 AM"feat: Add WINIT_X11_SCALE_FACTOR to config

This change to standard config is aimed to decrease the number of new issues connected to wrong font scaling,"1
514909/28/18 07:53:58 PMChristian DuerrFix deserialization of old decorations values"The deprecated `window.decoration` values `true` and `false` were using
the `visit_bool` visitor for serde. However it seems like with yaml, the
str visitor is used instead.

To print the correct deprecation notice, the bool visitor has been
removed and the warning has been added for the `""true""` and `""false""`
str visitor."05/19/21 09:01:31 AMAdd magnet URL support to config docs"Support for magnet URLs was introduced in 78e0444, however that commit
failed to document things in the alacritty.yml file." =||= That commit should have closed this issue, it seems like I just missed it. Thanks for pointing it out!chrisduerrChristian Duerr05/19/21 08:25:35 AM"Add magnet URL support to config docs

Support for magnet URLs was introduced in 78e0444, however that commit
failed to document things in the alacritty.yml file."1
515209/27/18 09:15:40 AMStéphane CampinasScrollPageUp and ScrollPageDown actions behave not as expected"- linux with X11
- alacritty 0.2.0.911.g63a40df

Scrolling with the mouse wheel behaves as expected, however it does not when scrolling with the page up/down keys.

With the mapping bellow, the terminal is scrolled 1 page up when pressing `Shift + PageUp` but doesn't continue on additional key presses (it stays at the same position). See the [events log](https://github.com/jwilm/alacritty/files/2423000/alacritty.log.txt).

As for the `Shift + PageDown` combination, I have the following:
- go to the top with `Shift + Home`
- pressing `Shitft + PageDown` brings me to the bottom, although I would expect to have scrolled on page down only.

```yaml
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp   }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown }
  - { key: End,      mods: Shift,   action: ScrollToBottom }
  - { key: Home,     mods: Shift,   action: ScrollToTop    }
```"05/20/21 12:20:54 AMchore(deps): force usage of serde_yaml >= 0.8.4"Upgrade serde_yaml to >= 0.8.4. Nothing really changes, just for https://deps.rs.

NOTE: cargo parses `0.8.4` as `^0.8.4`, so nothing *should* have been flagged by deps.rs in the first place, but this just really settles it." =||= "Is there any way to keep sending `x1b[5;2~` during `Shift+PageUp` to tmux?

Replacing it with `action: ScrollPageUp` completely only works outside tmux."PythonCreator27advaiyalad05/19/21 04:26:58 PM"chore(deps): force usage of serde_yaml >= 0.8.4

Upgrade serde_yaml to >= 0.8.4. Nothing really changes, just for https://deps.rs."1
515510/26/18 11:25:36 AMJakob LindskogSeemingly unrelated logs dumped in Vim"This has occurred for some times now. Whilst editing a file in Vim, there are messages from Firefox's Gecko_IOThread appearing. See image below

![](https://user-images.githubusercontent.com/11942597/46136311-98fd3e00-c247-11e8-9ebb-15636ffd97cd.png)

Arch Linux

X11
"05/20/21 07:30:00 PMtypo fix: s/Fist/First/ =||= Closing this issue as resolved then. If it should come up again, please let me know and I can re-open.markstosMark Stosberg05/20/21 01:00:16 PMtypo fix: s/Fist/First/1
515809/27/18 02:39:00 PMNoneUnderlines between cells not connected when using bitmap font"> Which operating system does the issue occur on?

Linux X11

When the Terminus bitmap font is used with Alacritty, underline is not complete. Each individual cell appears to have its own underline, which are not connected to each other. See the screenshot:

![screenshot_2018-09-27_16-19-35](https://user-images.githubusercontent.com/781030/46152614-a29b9b80-c271-11e8-9573-1b3973101df5.png)

The same can also be witnessed with some TTF fonts at large font sizes."05/21/21 11:09:06 PMAdd IPFS URL schemes support (ipfs: & ipns:)As done in #5027 & #5149.3Thanks, I was sure this was an open issue, but I didn't find it.pataquetspataquets05/21/21 08:54:23 PMChangelog: Create new 0.9.0-dev release section. Move previous' commit entry up.1
516009/28/18 10:07:25 PMChristian DuerrFix rendering of selections outside the viewport"When rendering selections with both start and end outside of the visible
area, Alacritty would assume that both start and end are either above or
below the viewport and not render the selection at all.

To fix this the `buffer_line_to_visible` method now returns a
`ViewportPosition` instead of an `Option<Line>`, this allows giving more
feedback about where outside of the visible region the line is using the
`ViewportPosition::Above` and `ViewportPosition::Below` varients.

Using these newly introduced varients, a selection spanning the whole
screen is now rendered if the selection should go from above the visible
area to below it.

This fixes #1557."05/20/21 07:48:32 PMFix startup caching of bold glyphs =||= Thanks, I was sure this was an open issue, but I didn't find it.chrisduerrChristian Duerr05/20/21 07:27:37 PMFix startup caching of bold glyphs1
516411/02/18 01:34:03 AMChristian DuerrUpdate selection when scrolling"When scrolling in Alacritty with an active selection, the selection will not update until the mouse cursor is moved.

The expected behavior would be that after scrolling, the selection would update itself to go right to the new position of the mouse cursor while the primary mouse button is held down.

This affects both normal scrolling in the scrollback buffer and scrolling inside of Applications like `man` using the faux scrolling feature."05/22/21 10:48:43 PMImprove rendering performance"This PR combines a couple of optimizations to drastically reduce the
time it takes to gather everything necessary for rendering Alacritty's
terminal grid.

To help with the iteration over the grid, the `DisplayIter` which made
heavy use of dynamic dispatch has been replaced with a simple addition
to the `GridIterator` which also had the benefit of making the code a
little easier to understand.

The hints/search check for each cell was always performing an array
lookup before figuring out that the cell is not part of a hint or
search. Since the general case is that the cell is neither part of hints
or search, they've been wrapped in an `Option` to make verifying their
activity a simple `is_some()` check.

For some reason the compiler was also struggling with the `cursor`
method of the `RenderableContent`. Since the iterator is explicitly
drained, the performance took a hit of multiple milliseconds for a
single branch. Our implementation does never reach the case where
draining the iterator would be necessary, so this sanity check has just
been replaced with a `debug_assert`.

Overall this has managed to reduce the time it takes to collect all
renderable content from ~7-8ms in my large grid test to just ~3-4ms." =||= no problem, I've been busy and it seems you've been making progress, I'll look for something else :)chrisduerrChristian Duerr05/22/21 10:31:33 PMFix style issues1
